[Errno 30] Read-only file system: '/home/lab09/.ropper'



Gadgets
=======


0x000000000003724d: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000e0ee0: adc ah, dl; cli; jmp qword ptr [rsi + 7]; 
0x00000000000d923d: adc al, 0; add al, ah; and al, 0xf4; jmp qword ptr [rdx + 1]; 
0x0000000000046faf: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047019: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000dffe0: adc al, 0; add byte ptr [rax], al; cld; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x00000000000dff50: adc al, 0; add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [rax], 0xfa0e8800; jmp qword ptr [rbx]; 
0x00000000000dbea0: adc al, 0; add byte ptr [rax], al; mov esp, 0xa8000040; cdq; cmc; call rsp; 
0x00000000000dff80: adc al, 0; add byte ptr [rax], al; pushfq; add dword ptr [rax], 0xfa145800; jmp rdx; 
0x00000000000e34a4: adc al, 0; add byte ptr [rax], al; sal byte ptr [rsi + 0x40540000], 0xfd; call qword ptr [rbx]; 
0x00000000000da728: adc al, 0; add byte ptr [rax], al; sub dword ptr [rax], r8d; add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x000000000008d99a: adc al, 0; add byte ptr [rax], al; syscall; 
0x00000000000e0168: adc al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x000000000006db2b: adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000059517: adc al, 0x11; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000000373f5: adc al, 0x13; jmp rdx; 
0x000000000002fcb5: adc al, 0x16; sub eax, edx; ret; 
0x00000000000350c5: adc al, 0x16; test r8d, r8d; je 0x350cd; xchg eax, edx; sub eax, edx; ret; 
0x00000000000574e8: adc al, 0x1c; add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x0000000000056a77: adc al, 0x24; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000b64ef: adc al, 0x24; or esi, 2; mov edi, 1; call rax; 
0x0000000000019a37: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19a47; add rsp, 0xd8; ret; 
0x0000000000056571: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56589; add rsp, 0x28; ret; 
0x00000000000574a0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x574b7; add rsp, 0x28; ret; 
0x000000000009cf57: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d03a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9d054; add rsp, 0x38; ret; 
0x0000000000017b01: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000017bed: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000000d6618: adc al, 0x46; add byte ptr [rax], al; cmp ah, cl; hlt; jmp qword ptr [rax + 0x46]; 
0x000000000004e380: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x0000000000008ca3: adc al, 0x48; mov eax, 0; test rax, rax; je 0x8cb8; jmp rax; 
0x000000000002080b: adc al, 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000000b679b: adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0xb680b; add rsp, 0x18; ret; 
0x00000000000d9f4c: adc al, 0x6e; hlt; call qword ptr [rdi]; 
0x0000000000048440: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000046b6e: adc al, 0x91; sub eax, edx; ret; 
0x00000000000373f1: adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000016180: adc al, 0x97; add rdx, rdi; jmp rdx; 
0x00000000000bfa24: adc al, 0xa3; stc; call rax; 
0x000000000002fe23: adc al, 0xa; sub eax, edx; ret; 
0x00000000000508ff: adc al, 0xe; cmp rdi, rdx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000b05da: adc al, 0xe; lea rcx, [rip + 0x11bdd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000ae67a: adc al, 0xe; lea rcx, [rip + 0x13b3d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000048691: adc al, 0xe; lea rcx, [rip + 0x79b26]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000046b61: adc al, 0xe; lea rcx, [rip + 0x7b656]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000003429a: adc al, 0xe; sub eax, edx; ret; 
0x000000000003596a: adc al, 0xe; sub eax, edx; vzeroupper; ret; 
0x00000000000d9029: adc al, 0xf4; call qword ptr [rax]; 
0x000000000001cb1b: adc al, 0xf6; ret 0x7420; 
0x00000000000b68fc: adc al, 0xf7; add rsp, 8; ret; 
0x00000000000bde6c: adc al, 0xf7; call rax; 
0x00000000000bde6c: adc al, 0xf7; call rax; sal edi, 1; jmp qword ptr [rax]; 
0x00000000000be899: adc al, 0xf8; call qword ptr [rax + 0x16]; 
0x00000000000be899: adc al, 0xf8; call qword ptr [rax + 0x16]; clc; call rax; 
0x00000000000bdec5: adc al, 0xf8; call qword ptr [rax + 0x20fff813]; adc edi, eax; push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x00000000000be859: adc al, 0xf8; call rax; 
0x00000000000dff89: adc al, 0xfa; jmp rdx; 
0x000000000002d092: adc al, 1; cmp dl, r8b; jne 0x2d080; sub rax, 0x10; ret; 
0x00000000000b4521: adc al, 2; add bl, dh; movups xmmword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000b454f: adc al, 2; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000007c333: adc al, 5; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000007c279: adc al, 5; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000003ca1e: adc al, 8; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a9241: adc al, 9; ret 0x8d74; 
0x00000000000bdee5: adc al, bh; call qword ptr [rax]; 
0x00000000000bdfa1: adc al, bh; call qword ptr [rdx + 0x10]; 
0x00000000000bdfa1: adc al, bh; call qword ptr [rdx + 0x10]; clc; jmp rdx; 
0x00000000000be88d: adc al, bh; call rax; 
0x00000000000be88d: adc al, bh; call rax; adc eax, edi; call qword ptr [rax + 0x13]; 
0x00000000000beab0: adc al, bh; clc; push qword ptr [rax]; clc; clc; call qword ptr [rax - 8]; 
0x00000000000be0e1: adc al, bh; jmp qword ptr [rax]; 
0x00000000000bdf21: adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x00000000000bdfa5: adc al, bh; jmp rdx; 
0x00000000000be0e5: adc al, bh; push qword ptr [rax + 0x40fff80f]; psubb mm7, mm7; ror byte ptr [rsi], 1; clc; jmp qword ptr [rax + 0xe]; 
0x00000000000bdf25: adc al, bh; push rsi; psubb mm7, mm7; xchg byte ptr [rdi], cl; clc; call qword ptr [rsi]; 
0x0000000000095485: adc al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add qword ptr [rcx - 0x77], rcx; or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000047157: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000471c1: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000d9025: adc al, byte ptr [rax]; add byte ptr [rax], ch; adc al, 0xf4; call qword ptr [rax]; 
0x000000000008049a: adc al, byte ptr [rax]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x0000000000080baa: adc al, byte ptr [rcx + 0xf]; mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a631a: adc al, byte ptr [rdi - 0xa]; jmp qword ptr [rsi - 0x70]; 
0x000000000008519a: adc al, byte ptr [rdx - 3]; jmp qword ptr [rsi - 0x70]; 
0x0000000000009f3a: adc al, byte ptr [rdx]; add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x0000000000056bb6: adc al, ch; and eax, 0xdf890000; mov edx, eax; mov eax, 3; syscall; 
0x0000000000094704: adc al, dh; add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000238bf: adc bh, al; add eax, 0x2c6556; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000be0cd: adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000be0cd: adc bh, al; call qword ptr [rax + 0x12]; clc; jmp rax; 
0x00000000000be855: adc bh, al; call qword ptr [rax + 0x14]; 
0x00000000000be855: adc bh, al; call qword ptr [rax + 0x14]; clc; call rax; 
0x00000000000bdf91: adc bh, al; call qword ptr [rdx]; 
0x00000000000bded5: adc bh, al; call rax; 
0x00000000000bded5: adc bh, al; call rax; adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000bded1: adc bh, al; inc dword ptr [rax + 0x12]; clc; call rax; 
0x00000000000bded1: adc bh, al; inc dword ptr [rax + 0x12]; clc; call rax; adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000bdf11: adc bh, al; jmp qword ptr [rsi]; 
0x00000000000be0d1: adc bh, al; jmp rax; 
0x00000000000bdf15: adc bh, al; push qword ptr [rsi + 0x46fff811]; adc eax, edi; call rsi; 
0x00000000000bd8fd: adc bh, dh; call qword ptr [rax + 0x27]; 
0x00000000000bea80: adc bh, dh; clc; jmp qword ptr [rax]; 
0x00000000000bd8c1: adc bh, dh; jmp rax; 
0x00000000000927d2: adc bl, ch; jno 0x9281f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000003ec30: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000051686: adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000004e356: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004e376: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004dcc6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcb6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e3d7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3f7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd47: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd27: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e317: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc87: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004e4d8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000004de28: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000003ec2f: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000004e355: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004e375: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004dcc5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcb5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e3d6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd46: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd26: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e316: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc86: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000008ec6a: adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000233a5: adc byte ptr [r11 + 0x5d], r11b; ret; 
0x000000000001b799: adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x00000000000b3595: adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000008106f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000009323e: adc byte ptr [r15], cl; sahf; ret 0x3948; 
0x0000000000069f69: adc byte ptr [r15], cl; sahf; ret 0x894c; 
0x0000000000093a53: adc byte ptr [r15], cl; xchg eax, ebx; ret 0x3949; 
0x0000000000050a32: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000069185: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3948; 
0x0000000000069966: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3949; 
0x000000000009172f: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000001b4d2: adc byte ptr [r8 + 1], r9b; ret; 
0x000000000009ce33: adc byte ptr [r8 - 0x73], cl; adc eax, 0x379f0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000943c9: adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x000000000002298f: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x00000000000206cc: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000069f62: adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x000000000008bd6f: adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000001b4fd: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000008810c: adc byte ptr [r9 + rcx*4 + 0xd], cl; ret; 
0x000000000004e0fa: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x7097b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dada: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x70f1b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b1f55: adc byte ptr [rax + 0x31487], cl; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x0000000000028c23: adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x0000000000024f4c: adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000025168: adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x000000000002dc76: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x0000000000093a4d: adc byte ptr [rax + 0x39], cl; ret; 
0x00000000000a034f: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000091730: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000004dab7: adc byte ptr [rax + 0xf], cl; mov esp, 0x1d8d4cd2; cmp eax, 0x4900070f; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000001a8d7: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000001b4d3: adc byte ptr [rax + 1], cl; ret; 
0x00000000000d7448: adc byte ptr [rax + rax - 0x513d800], ah; call qword ptr [rax - 0x5c]; 
0x000000000001809f: adc byte ptr [rax + rax], al; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000595ab: adc byte ptr [rax + rbp*8 + 0x48], bh; cmp ecx, dword ptr [rax + 0x18]; jg 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000595aa: adc byte ptr [rax + rbp*8 + 0x48], dil; cmp ecx, dword ptr [rax + 0x18]; jg 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000be880: adc byte ptr [rax + rdi*8], cl; call qword ptr [rax + 0xd]; 
0x00000000000be880: adc byte ptr [rax + rdi*8], cl; call qword ptr [rax + 0xd]; clc; call rax; 
0x0000000000009d6e: adc byte ptr [rax - 0x39], cl; ret 0; 
0x0000000000069f5f: adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x000000000009d0f6: adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000002daa6: adc byte ptr [rax - 0x73], cl; adc eax, 0x22a12; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000009ce34: adc byte ptr [rax - 0x73], cl; adc eax, 0x379f0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002e3f6: adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x000000000008ed0f: adc byte ptr [rax - 0x73], cl; add dword ptr [rax - 0x77], r9d; add eax, 0x25c195; ret; 
0x0000000000020ef7: adc byte ptr [rax - 0x75], cl; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000008242b: adc byte ptr [rax - 0x75], cl; je 0x82454; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x00000000000943ca: adc byte ptr [rax - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x0000000000026c7d: adc byte ptr [rax - 0x77], cl; and al, 8; call rcx; 
0x0000000000059585: adc byte ptr [rax - 0x77], cl; and sil, al; sub byte ptr [rcx], al; ret; 
0x0000000000066ab8: adc byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000007e377: adc byte ptr [rax - 0x77], cl; jo 0x7e38c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000008ef27: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000017279: adc byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000007f372: adc byte ptr [rax - 0x77], cl; push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000005bd5e: adc byte ptr [rax - 0x77], cl; push rsp; and al, 8; mov qword ptr [rsp], rcx; call rax; 
0x00000000000a17b4: adc byte ptr [rax - 0x77], cl; ret 0x2f75; 
0x0000000000027263: adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000002c43f: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000028061: adc byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x00000000000a17ce: adc byte ptr [rax - 0x77], cl; ret 0xec74; 
0x00000000000a4b09: adc byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000022990: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x00000000000b5306: adc byte ptr [rax - 0x77], cl; ret; 
0x00000000000206cd: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000002116f: adc byte ptr [rax - 0x78], al; jl 0x21189; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000941ab: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x00000000000ba406: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xba41c; call rax; 
0x0000000000069f63: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x000000000004aa27: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000004aa63: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000002e305: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbx*8 + 0x48], 0x29; ret; 
0x00000000000139b5: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000010526: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000023a43: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000063798: adc byte ptr [rax - 0x7d], cl; ret 0x4902; 
0x0000000000009f40: adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bdee4: adc byte ptr [rax], 0xf8; call qword ptr [rax]; 
0x00000000000c9035: adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x0000000000081e60: adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xfffcfa46; cmove rax, rdx; ret; 
0x000000000008f5ee: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a5353; ret; 
0x000000000008f60b: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a5370; ret; 
0x000000000008f648: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a53ad; ret; 
0x00000000000342fa: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x0000000000046f42: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x0000000000048a0c: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047361: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000e22e4: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x1f6c0000], ah; sti; call qword ptr [rdx]; 
0x00000000000dc408: adc byte ptr [rax], al; add byte ptr [rax], al; and al, 0x46; add byte ptr [rax], al; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x00000000000d9020: adc byte ptr [rax], al; add byte ptr [rax], al; cmp al, 0x12; add byte ptr [rax], al; sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x00000000000ddb20: adc byte ptr [rax], al; add byte ptr [rax], al; cmp al, 0x5d; add byte ptr [rax], al; jg 0xddad5; bnd jmp qword ptr [rbx]; 
0x00000000000dc4bc: adc byte ptr [rax], al; add byte ptr [rax], al; fadd dword ptr [rsi]; add byte ptr [rsp + rdx*2 - 9], ch; call qword ptr [rcx + 1]; 
0x00000000000da3bc: adc byte ptr [rax], al; add byte ptr [rax], al; fsub dword ptr [rip - 0x7e440000]; hlt; call qword ptr [rdi]; 
0x00000000000e28c0: adc byte ptr [rax], al; add byte ptr [rax], al; fsubr qword ptr [rdx + 0x6f380000]; cld; call qword ptr [rax]; 
0x00000000000dc458: adc byte ptr [rax], al; add byte ptr [rax], al; je 0xdc4a4; add byte ptr [rax], al; and byte ptr [rbx - 9], dl; call qword ptr [rbx]; 
0x0000000000056a43: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x00000000000d979c: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x9c000019; hlt; call qword ptr [rax]; 
0x000000000007dda9: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000051bdc: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000e230c: adc byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rbp - 0x1f640000], ah; sti; call qword ptr [rdx]; 
0x00000000000e0f48: adc byte ptr [rax], al; add byte ptr [rax], al; xchg eax, ecx; add byte ptr [rax], al; jp 0xe0fc9; bnd jmp qword ptr [rcx]; 
0x00000000000097b8: adc byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000079f65: adc byte ptr [rax], al; add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x0000000000077126: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000c902d: adc byte ptr [rax], al; add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x0000000000044c18: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000093f60: adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000003ce97: adc byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000bebdc: adc byte ptr [rax], dh; stc; lcall [rdi + rbp]; stc; call qword ptr [rdi]; 
0x00000000000b8f7d: adc byte ptr [rbp + 0x18], dh; xor eax, eax; ret; 
0x00000000000b46b8: adc byte ptr [rbp + 0x1d], dh; xor eax, eax; ret; 
0x00000000000d7578: adc byte ptr [rbp + 0x55a80000], ch; sti; jmp qword ptr [rax - 0x53]; 
0x000000000001b79a: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x00000000000b3596: adc byte ptr [rbp - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000000bdb98: adc byte ptr [rbp - 0x40ef0009], bh; idiv edi; movabs al, byte ptr [0x40fff7b360fff7b1]; mov ch, 0xf7; jmp qword ptr [rax]; 
0x00000000000be938: adc byte ptr [rbp - 8], ah; call qword ptr [rax]; 
0x00000000000be948: adc byte ptr [rbp - 8], ch; call qword ptr [rax]; 
0x00000000000be958: adc byte ptr [rbp - 8], dh; call qword ptr [rax]; 
0x00000000000e18f8: adc byte ptr [rbx + 0x17b40000], bl; sti; jmp qword ptr [rdx + 5]; 
0x000000000000a04d: adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000001de54: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000001a743: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000233a6: adc byte ptr [rbx + 0x5d], bl; ret; 
0x000000000004dd87: adc byte ptr [rbx + 0xff3174e], cl; jg 0x4dd96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004e437: adc byte ptr [rbx + 0xff3174e], cl; jg 0x4e446; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004dda7: adc byte ptr [rbx + 0xff3184e], cl; jg 0x4ddb6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e457: adc byte ptr [rbx + 0xff3184e], cl; jg 0x4e466; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b2ec4: adc byte ptr [rbx + rax], 0; add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000b7598: adc byte ptr [rbx + rbp*8 + 0x50], dh; call 0x16e60; nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; ret; 
0x000000000001b92b: adc byte ptr [rbx + rcx*4 + 0x44], cl; and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000022572: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000007e86e: adc byte ptr [rbx - 0x3b7cb7fa], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008505d: adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000be934: adc byte ptr [rbx - 8], ah; call qword ptr [rax]; 
0x00000000000be964: adc byte ptr [rbx - 8], bh; call qword ptr [rax]; 
0x00000000000be944: adc byte ptr [rbx - 8], ch; call qword ptr [rax]; 
0x00000000000be954: adc byte ptr [rbx - 8], dh; call qword ptr [rax]; 
0x00000000000bd9b0: adc byte ptr [rbx - 9], ah; inc dword ptr [rax - 0xf00089c]; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000be7f0: adc byte ptr [rbx], ch; clc; inc dword ptr [rax - 0xf0007d6]; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x000000000000ae82: adc byte ptr [rbx], cl; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000001b4fe: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000005054b: adc byte ptr [rcx + rbp - 0x40], al; cmp eax, ecx; jle 0x50588; movsxd rax, ecx; ret; 
0x000000000005bc80: adc byte ptr [rcx + rcx*4 + 0x4c], cl; and al, 8; mov qword ptr [rsp], rcx; call rax; 
0x000000000008810d: adc byte ptr [rcx + rcx*4 + 0xd], cl; ret; 
0x00000000000187a7: adc byte ptr [rcx + rcx*4 + 7], cl; mov qword ptr [rdi + 8], rcx; xor eax, eax; ret; 
0x000000000007f973: adc byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x00000000000171e4: adc byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000057fd2: adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x00000000000580ca: adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x0000000000023b3f: adc byte ptr [rcx - 0x75], cl; sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000000b425d: adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000000232f7: adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000003432d: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x00000000000ae7b7: adc byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000069f01: adc byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000be930: adc byte ptr [rcx - 8], ah; call qword ptr [rax]; 
0x00000000000be960: adc byte ptr [rcx - 8], bh; call qword ptr [rax]; 
0x00000000000be940: adc byte ptr [rcx - 8], ch; call qword ptr [rax]; 
0x00000000000be950: adc byte ptr [rcx - 8], dh; call qword ptr [rax]; 
0x0000000000055e6c: adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x000000000009208a: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000052539: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000052be3: adc byte ptr [rcx], ch; ret 0x428d; 
0x000000000001832e: adc byte ptr [rcx], ch; ret 0xc269; 
0x0000000000080bba: adc byte ptr [rcx], cl; ret 0xb60f; 
0x0000000000066b35: adc byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000bdc48: adc byte ptr [rdi + rsi*8 - 0x84a0f01], dh; jmp rax; 
0x00000000000be990: adc byte ptr [rdi - 0x6f4f0008], cl; clc; call qword ptr [rax - 0x6e]; 
0x00000000000be93c: adc byte ptr [rdi - 8], ah; call qword ptr [rax]; 
0x00000000000be94c: adc byte ptr [rdi - 8], ch; call qword ptr [rax]; 
0x00000000000be95c: adc byte ptr [rdi - 8], dh; call qword ptr [rax]; 
0x00000000000be8f0: adc byte ptr [rdi], bh; clc; jmp qword ptr [rax]; 
0x0000000000050b4d: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050a33: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000095481: adc byte ptr [rdi], cl; and dword ptr [rax + 0x48000012], 0xffffff8d; add qword ptr [rcx - 0x77], rcx; or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000009323f: adc byte ptr [rdi], cl; sahf; ret 0x3948; 
0x0000000000069f6a: adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x00000000000a127a: adc byte ptr [rdi], cl; test ah, ah; or byte ptr [rax], al; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000000a4783: adc byte ptr [rdi], cl; test ch, dl; or dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0x49]; 
0x000000000004e593: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000034711: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000034801: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000034621: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000b1c2b: adc byte ptr [rdi], cl; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b072f: adc byte ptr [rdi], cl; xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x00000000000b192f: adc byte ptr [rdi], cl; xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b102f: adc byte ptr [rdi], cl; xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b132f: adc byte ptr [rdi], cl; xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b0a27: adc byte ptr [rdi], cl; xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000035069: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x0000000000034bc1: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000034351: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000034da1: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000034531: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000034f81: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000034e91: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000347d3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000348c3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000346e3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b0cd4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b18d4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b1bd4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b12d4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b0fd4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x00000000000b09cc: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034441: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x00000000000afa5d: adc byte ptr [rdi], cl; xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000af87d: adc byte ptr [rdi], cl; xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b0255: adc byte ptr [rdi], cl; xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000af175: adc byte ptr [rdi], cl; xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b0075: adc byte ptr [rdi], cl; xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000345f3: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034413: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034503: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034323: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x0000000000069186: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x0000000000069967: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3949; 
0x0000000000056ed9: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x2044; 
0x0000000000095480: adc byte ptr [rdi], r9b; and dword ptr [rax + 0x48000012], 0xffffff8d; add qword ptr [rcx - 0x77], rcx; or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000093901: adc byte ptr [rdi], r9b; sahf; ret 0x3948; 
0x0000000000092c3d: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3948; 
0x000000000005957d: adc byte ptr [rdx + 0x40], dh; cmp rcx, qword ptr [rax + 0x18]; ja 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000005957c: adc byte ptr [rdx + 0x40], sil; cmp rcx, qword ptr [rax + 0x18]; ja 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000d9bbb: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x00000000000e34a0: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + rax], dl; add byte ptr [rax], al; sal byte ptr [rsi + 0x40540000], 0xfd; call qword ptr [rbx]; 
0x000000000008215d: adc byte ptr [rdx + 1], ch; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000be9e8: adc byte ptr [rdx - 0x549f0008], ch; clc; push qword ptr [rax + 0xfff8ac]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x00000000000be970: adc byte ptr [rdx - 0x7c4f0008], al; clc; call qword ptr [rax - 0x7b]; 
0x0000000000050066: adc byte ptr [rdx], al; jne 0x50080; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50060; ret; 
0x0000000000050116: adc byte ptr [rdx], al; jne 0x50130; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50110; ret; 
0x000000000003682b: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000050065: adc byte ptr [rdx], r8b; jne 0x50080; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50060; ret; 
0x0000000000050115: adc byte ptr [rdx], r8b; jne 0x50130; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50110; ret; 
0x00000000000b4516: adc byte ptr [rip + 0x20d2c], al; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000be7e0: adc byte ptr [rip + 0x2c90fff8], ch; clc; call qword ptr [rax]; 
0x0000000000035cd5: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000366da: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x0000000000035cd0: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000002ea05: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000004292b: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x0000000000081070: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000508ab: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000050a29: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000004e563: adc byte ptr [rsi - 0x70], ah; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000041f7a: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000004dd67: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000508a8: adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000a941f: adc byte ptr [rsp - 4], al; ret; 
0x00000000000a9465: adc byte ptr [rsp - 8], al; ret; 
0x000000000001809e: adc byte ptr ds:[rax + rax], al; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000b0cd7: adc byte ptr es:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003ce96: adc byte ptr es:[rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d5ad0: adc ch, bh; std; push qword ptr [rax - 0x4f000204]; cld; std; call rax; 
0x000000000002daaa: adc ch, byte ptr [rdx]; add al, byte ptr [rax]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x00000000000d3139: adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000000a330: adc ch, cl; ret; 
0x00000000000bead4: adc cl, bh; clc; push qword ptr [rax]; stc; clc; call qword ptr [rax - 7]; 
0x000000000006ac5f: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x00000000000229a5: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000059b4a: adc cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000004a755: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000008c27d: adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000006ac62: adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x000000000009e11a: adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000006a225: adc cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000009d2a9: adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x00000000000266ce: adc dh, dh; ret 0xf0f; 
0x00000000000bded4: adc dil, al; call rax; 
0x00000000000bded4: adc dil, al; call rax; adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000beaf4: adc dl, bh; clc; push qword ptr [rax]; cli; clc; call qword ptr [rax - 6]; 
0x00000000000bea28: adc dl, dh; clc; jmp qword ptr [rax]; 
0x000000000007d83b: adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000001df41: adc dword ptr [rax + 0x48000000], -0x77; call 0x5c433ca8; ret; 
0x0000000000017afd: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000017be9: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000017bc3: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000068d5d: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x000000000001b4ef: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000059518: adc dword ptr [rax - 0x73], ecx; or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000007ef04: adc dword ptr [rax - 0x7d], ecx; ret 0x4110; 
0x000000000000e06f: adc dword ptr [rax - 0x7d], ecx; ret; 
0x000000000001838e: adc dword ptr [rax - 0x7d], ecx; rol dword ptr [rax + rcx*2], 0x83; ret 0x4904; 
0x000000000007e88e: adc dword ptr [rax - 1], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000048a0b: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x00000000000472f7: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004890f: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000006bc50: adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000069195: adc dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x0000000000055d49: adc dword ptr [rax], eax; and byte ptr [rcx], al; mov eax, 0x38; syscall; 
0x000000000003cd17: adc dword ptr [rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007f657: adc dword ptr [rbp + 0x16], esi; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000035916: adc dword ptr [rbp + 0x31000002], -0x40; vzeroupper; ret; 
0x00000000000d15f7: adc dword ptr [rbp - 0x1f57cada], ebp; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000050b58: adc dword ptr [rbx], eax; ret; 
0x0000000000050ad1: adc dword ptr [rbx], esp; ret; 
0x0000000000042249: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000042250: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000042257: adc dword ptr [rcx + 7], edi; ret; 
0x0000000000050ac3: adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050ac7: adc dword ptr [rcx - 0x20], edi; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050acc: adc dword ptr [rcx - 0x30], eax; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000041ef2: adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000041eb6: adc dword ptr [rcx - 1], edi; ret; 
0x0000000000041eeb: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000000420e9: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041eaf: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420e2: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ea8: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420db: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ea1: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000050ac0: adc dword ptr [rcx], ebp; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000229e6: adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x0000000000050b4b: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050a31: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000049aab: adc dword ptr [rdi + 0x148b0007], eax; xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000050b4f: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050b53: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000041ee4: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000050691: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000508b3: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x0000000000050a35: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000050a08: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000050a0d: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000050a3a: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x0000000000050a12: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000050a17: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000000423a4: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423ab: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b2: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b9: adc dword ptr [rdi - 8], edi; ret; 
0x0000000000050a2e: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000508b0: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000041ede: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000004fb90: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000005068b: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000506ac: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050b48: adc dword ptr [rdi], esp; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000ba57f: adc dword ptr [rip + 0x23], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000507d1: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507d8: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507df: adc dword ptr [rsi + 3], edx; ret; 
0x000000000005086e: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000050875: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000005087c: adc dword ptr [rsi + 7], edx; ret; 
0x000000000005067e: adc dword ptr [rsi - 1], edx; ret; 
0x0000000000050677: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050670: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050669: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000507cb: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000b4526: adc dword ptr [rsp - 0x28], eax; ret; 
0x00000000000472f6: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000002e3f2: adc eax, 0x10002bc5; lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x000000000009d0f9: adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000000b1d18: adc eax, 0x104a3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1cf3: adc eax, 0x104c8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0368: adc eax, 0x11e53; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0343: adc eax, 0x11e78; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae398: adc eax, 0x13e23; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae373: adc eax, 0x13e48; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe38: adc eax, 0x16383; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe13: adc eax, 0x163a8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000080468: adc eax, 0x1653; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x00000000000be85d: adc eax, 0x1750fff8; clc; call rax; 
0x000000000002e808: adc eax, 0x1b963; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000000ba40b: adc eax, 0x20478b48; test rax, rax; je 0xba41c; call rax; 
0x000000000002e752: adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e612: adc eax, 0x22309; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4b2: adc eax, 0x22479; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7b9: adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e679: adc eax, 0x225f2; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e519: adc eax, 0x22762; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e798: adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002daa9: adc eax, 0x22a12; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e658: adc eax, 0x22a53; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e567: adc eax, 0x23234; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000002e5b8: adc eax, 0x23373; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000009cdc7: adc eax, 0x24bd94; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009d5a5: adc eax, 0x24d6ce; add word ptr [rdx + rax*2], 1; ret; 
0x000000000008b57f: adc eax, 0x25cc9c; xor eax, eax; add rsp, 8; ret; 
0x000000000005a967: adc eax, 0x28be4c; pop rbx; ret; 
0x0000000000022903: adc eax, 0x2c74c0; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x000000000000a044: adc eax, 0x2dff07; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000009ce37: adc eax, 0x379f0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000052974: adc eax, 0x39480029; ret; 
0x0000000000094fc0: adc eax, 0x3ea0f; movzx r12d, r12b; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094bf6: adc eax, 0x3ed29; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000094703: adc eax, 0x3f010; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000008b642: adc eax, 0x4000003; ret; 
0x000000000008b592: adc eax, 0x4000003; xor eax, eax; ret; 
0x00000000000d005e: adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000003f0e5: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0e0: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000006e807: adc eax, 0x48002760; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x000000000007cae6: adc eax, 0x50f3d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000003c70b: adc eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000005621e: adc eax, 0x68f19; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000002e7d8: adc eax, 0x6b33; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000007362a: adc eax, 0x6be0f44; cmp edi, r8d; ja 0x73610; mov eax, r9d; ret; 
0x0000000000049ade: adc eax, 0x786dd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048488: adc eax, 0x79d33; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004846e: adc eax, 0x79d4d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468d8: adc eax, 0x7b8e3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468be: adc eax, 0x7b8fd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000044788: adc eax, 0x7da33; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004476e: adc eax, 0x7da4d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b5094: adc eax, 0x800235c; mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x0000000000046e81: adc eax, 0x83480000; ret 0xe910; 
0x0000000000076df5: adc eax, 0x83fffffd; ret; 
0x0000000000026b63: adc eax, 0x840f002c; ret 0xfffa; 
0x0000000000088741: adc eax, 0x89000003; ret 0xe8c0; 
0x00000000000a46a7: adc eax, 0x890002b7; ret; 
0x000000000002d44f: adc eax, 0x903ac; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b1d1: adc eax, 0xb0d62; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b004: adc eax, 0xb0ed7; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000ae80: adc eax, 0xb102f; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000008c62: adc eax, 0xc0c748; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000081de8: adc eax, 0xcd3; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000002fcaa: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000829fa: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000090aa3: adc eax, 0xf000000; add eax, 0x940fc085; ret 0x3d; 
0x0000000000051704: adc eax, 0xf880272; ret; 
0x0000000000081e65: adc eax, 0xfffcfa46; cmove rax, rdx; ret; 
0x000000000002e3f9: adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000000516ff: adc eax, dword ptr [rax + 0x157701fa]; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x00000000000943df: adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000008bb83: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x42d93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000000954d3: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000004876e: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000aef99: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b09cf: adc eax, dword ptr cs:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000093db9: adc eax, eax; ret; 
0x00000000000be891: adc eax, edi; call qword ptr [rax + 0x13]; 
0x00000000000be891: adc eax, edi; call qword ptr [rax + 0x13]; clc; call rax; 
0x00000000000be851: adc eax, edi; call rax; 
0x00000000000be851: adc eax, edi; call rax; adc bh, al; call qword ptr [rax + 0x14]; 
0x00000000000bdf1d: adc eax, edi; call rsi; 
0x00000000000bdf1d: adc eax, edi; call rsi; adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x00000000000bdf19: adc eax, edi; inc dword ptr [rsi + 0x11]; clc; call rsi; 
0x00000000000bdf19: adc eax, edi; inc dword ptr [rsi + 0x11]; clc; call rsi; adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x00000000000bdf9d: adc eax, edi; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; 
0x00000000000bdf9d: adc eax, edi; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; clc; jmp rdx; 
0x00000000000bded9: adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000bdf99: adc eax, edi; push qword ptr [rdx]; adc eax, edi; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; 
0x0000000000093ef6: adc eax, edx; pop rbp; pop rbx; ret; 
0x000000000008edc8: adc eax, esi; add eax, 0x25c4f8; add byte ptr [rax - 0x77], cl; add eax, 0x25c0d9; add rsp, 8; ret; 
0x00000000000bdf1c: adc eax, r15d; call rsi; 
0x00000000000bdf1c: adc eax, r15d; call rsi; adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x00000000000d1485: adc ebp, dword ptr [rbx]; fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x000000000001ce47: adc ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000000e1861: adc ebx, edi; jmp qword ptr [rcx]; 
0x000000000008538c: adc ebx, esi; ret; 
0x0000000000055e62: adc ecx, dword ptr [rax - 0x75]; sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x000000000008377e: adc ecx, dword ptr [rax - 0x77]; out dx, al; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x000000000002138a: adc ecx, dword ptr [rax - 0x7b]; push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x0000000000017cc1: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000003cb97: adc ecx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000065a84: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000003cb96: adc ecx, dword ptr es:[rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000213a1: adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x000000000008eb0e: adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000008ebab: adc edi, dword ptr [rcx]; ret 0xc74; 
0x00000000000b65eb: adc edi, dword ptr [rsi + 0xa]; mov edi, 1; call rax; 
0x00000000000bdf0d: adc edi, eax; call qword ptr [rsi + 0x26fff812]; adc bh, al; push qword ptr [rsi + 0x46fff811]; adc eax, edi; call rsi; 
0x00000000000be895: adc edi, eax; call rax; 
0x00000000000be895: adc edi, eax; call rax; adc al, 0xf8; call qword ptr [rax + 0x16]; 
0x00000000000be049: adc edi, eax; call rsp; 
0x00000000000be045: adc edi, eax; inc dword ptr [rbx + rdx - 8]; call rsp; 
0x00000000000be0c9: adc edi, eax; inc eax; adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000be0c9: adc edi, eax; inc eax; adc bh, al; call qword ptr [rax + 0x12]; clc; jmp rax; 
0x00000000000bdec9: adc edi, eax; jmp qword ptr [rax]; 
0x00000000000bdf85: adc edi, eax; jmp qword ptr [rdx + 0x13]; 
0x00000000000ddeed: adc edi, eax; jmp qword ptr [rdx]; 
0x00000000000bdecd: adc edi, eax; push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x00000000000be0c5: adc edi, eax; push qword ptr [rax]; adc edi, eax; inc eax; adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000bd8c5: adc edi, esi; jmp qword ptr [rax]; 
0x0000000000092eda: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000a92b1: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000d299e: adc esi, dword ptr [rbp - 0x60001a67]; mov dh, 0xc7; ret 0xe71f; 
0x0000000000020753: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000b77fc: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000001cb19: adc esi, dword ptr [rsp + rdx - 0xa]; ret 0x7420; 
0x00000000000d7f29: adc esi, ebx; jmp qword ptr [rcx + 1]; 
0x00000000000bd8c9: adc esi, edi; jmp qword ptr [rax + 0x14]; 
0x00000000000b5cb3: adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d8fd9: adc esi, esp; jmp qword ptr [rcx + 1]; 
0x0000000000084fd1: adc esp, dword ptr [rsi]; test eax, eax; jne 0x85036; mov eax, 0x101; syscall; 
0x00000000000d619d: adc esp, esi; call rax; 
0x00000000000b0bb2: adc qword ptr [r8], rax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000042248: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000004224f: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000042256: adc qword ptr [rcx + 7], rdi; ret; 
0x0000000000041ef1: adc qword ptr [rcx - 1], rbx; ret; 
0x0000000000041eb5: adc qword ptr [rcx - 1], rdi; ret; 
0x0000000000041eea: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000000420e8: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041eae: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420e1: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ea7: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420da: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ea0: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000041ee3: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000050690: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000423a3: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423aa: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b1: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b8: adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000041edd: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000005068a: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000506ab: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000507d0: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507d7: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507de: adc qword ptr [rsi + 3], rdx; ret; 
0x000000000005086d: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000050874: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000005087b: adc qword ptr [rsi + 7], rdx; ret; 
0x000000000005067d: adc qword ptr [rsi - 1], rdx; ret; 
0x0000000000050676: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005066f: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050668: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000507ca: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000a92b0: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000051685: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000be048: adc r15d, eax; call rsp; 
0x000000000008bb82: adc r8, qword ptr [r8]; add byte ptr [rax - 0x73], cl; or eax, 0x42d93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000000af100: adc r8b, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000093ef5: adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000092ed9: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000dffcb: add ah, ah; add dword ptr [rax], 0xfa1af000; jmp qword ptr [rax]; 
0x00000000000da7cb: add ah, ah; sub dword ptr [rax], eax; add al, ah; mov esi, esp; call qword ptr [rsi]; 
0x00000000000e26ab: add ah, al; test al, 0; add byte ptr [rax + 0x69], dl; cld; jmp qword ptr [rdx]; 
0x00000000000e13ab: add ah, al; xchg eax, ebp; add byte ptr [rax], al; add ch, dh; cli; jmp qword ptr [rsi]; 
0x00000000000dffe3: add ah, bh; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x0000000000051b49: add ah, bh; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x0000000000051b2e: add ah, bh; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000000d9753: add ah, bh; cmp dh, ah; jmp rdx; 
0x0000000000051c0b: add ah, bh; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000051b79: add ah, bh; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000000df9c3: add ah, bl; jnp 0xdf9c7; add al, cl; cld; stc; jmp qword ptr [rdx]; 
0x00000000000e28c3: add ah, bl; stosb byte ptr [rdi], al; add byte ptr [rax], al; cmp byte ptr [rdi - 4], ch; call qword ptr [rax]; 
0x0000000000051400: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x5140b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000000515a6: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x515b1; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000000507da: add ah, byte ptr [rdx - 0xf]; jl 0x50827; adc dword ptr [rsi + 3], edx; ret; 
0x000000000004d703: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000004bf43: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000000de3d3: add ah, ch; add byte ptr gs:[rax], al; js 0xde442; clc; jmp qword ptr [rsi + 0xa]; 
0x00000000000d9fd3: add ah, ch; and dword ptr [rax], eax; add al, bh; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rsi]; 
0x00000000000da7e3: add ah, ch; mov esi, esp; call qword ptr [rsi]; 
0x00000000000e1cd3: add ah, ch; sahf; add byte ptr [rax], al; mov cl, 0xfb; jmp rdx; 
0x00000000000d7b08: add ah, cl; add byte ptr [rax], al; sbb bh, bl; std; jmp qword ptr [rax - 0x34]; 
0x00000000000e04b3: add ah, cl; xchg byte ptr [rax], al; add al, cl; cli; jmp qword ptr [rcx]; 
0x00000000000bea78: add ah, dh; clc; jmp qword ptr [rax]; 
0x00000000000e2980: add ah, dh; cld; jmp qword ptr [rcx]; 
0x00000000000dfddb: add ah, dh; jg 0xdfddf; add byte ptr [rax + 7], dl; cli; jmp qword ptr [rbx]; 
0x00000000000df6db: add ah, dh; js 0xdf6df; add byte ptr [rax - 0x11], ah; stc; jmp qword ptr [rdi]; 
0x00000000000e39db: add ah, dh; mov ebx, 0x59800000; std; jmp qword ptr [rax]; 
0x00000000000e0edb: add ah, dh; nop; add byte ptr [rax], al; adc ah, dl; cli; jmp qword ptr [rsi + 7]; 
0x00000000000e284b: add ah, dl; insd dword ptr [rdi], dx; cld; jmp qword ptr [rcx]; 
0x00000000000613c3: add al, 0; add bh, dh; ret 0; 
0x00000000000613b7: add al, 0; add bh, dh; ret 0xf800; 
0x00000000000650bf: add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x000000000001b070: add al, 0; add byte ptr [rax + 1], cl; ret; 
0x0000000000034c87: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000007cb56: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000004962f: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034cb5: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000b7512: add al, 0; add byte ptr [rax], al; cmp dil, 3; jne 0xb7520; ret; 
0x0000000000082a83: add al, 0; add byte ptr [rax], al; ret; 
0x000000000005659f: add al, 0; add byte ptr [rax], al; syscall; 
0x00000000000613af: add al, 0; add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000080260: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000012f31: add al, 0; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000012de7: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000013b34: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000012df0: add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000006c05f: add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000002e425: add al, 0; add byte ptr [rsi - 9], dh; ret 0; 
0x00000000000cc6d5: add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000000097b2: add al, 0; add rsp, 0x1030; pop rbx; pop r12; pop rbp; ret; 
0x0000000000009a35: add al, 0; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000180a0: add al, 0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000181f5: add al, 0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000000a423: add al, 0; cmp eax, -1; je 0xa4fb; add rsp, 0x98; ret; 
0x00000000000093f6: add al, 0; leave; ret; 
0x000000000008d245: add al, 0; mov eax, 0x15; syscall; 
0x0000000000008f63: add al, 0; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x000000000008bb8b: add al, 0; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000008c4b3: add al, 0; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x00000000000941aa: add al, 0x10; test rdi, rdi; mov byte ptr [rsi], al; jne 0x94198; mov rax, rsi; ret; 
0x0000000000051bc4: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000ddeec: add al, 0x13; clc; jmp qword ptr [rdx]; 
0x00000000000b1cef: add al, 0x17; lea rdx, [rip + 0x104c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b033f: add al, 0x17; lea rdx, [rip + 0x11e78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae36f: add al, 0x17; lea rdx, [rip + 0x13e48]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe0f: add al, 0x17; lea rdx, [rip + 0x163a8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000049ada: add al, 0x17; lea rdx, [rip + 0x786dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004846a: add al, 0x17; lea rdx, [rip + 0x79d4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468ba: add al, 0x17; lea rdx, [rip + 0x7b8fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004476a: add al, 0x17; lea rdx, [rip + 0x7da4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000002fcb1: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000002fc4a: add al, 0x17; sub eax, ecx; ret; 
0x000000000009ef10: add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000000b40fe: add al, 0x24; add rsp, 0x38; ret; 
0x000000000005bf46: add al, 0x24; mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x00000000000b3356: add al, 0x24; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3304: add al, 0x24; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000001e1e4: add al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000000a8ba: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000068e79: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x68e86; add rsp, 0x18; ret; 
0x0000000000093d0b: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x93d4e; leave; ret; 
0x0000000000017bc7: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000000299a9: add al, 0x2c; add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000815ce: add al, 0x31; ret; 
0x00000000000814ca: add al, 0x37; ret; 
0x000000000009422e: add al, 0x38; mov rdi, rdx; mov byte ptr [rsi], al; jne 0x94210; mov rax, rsi; ret; 
0x0000000000080be0: add al, 0x39; ret 0xeb75; 
0x0000000000021c0f: add al, 0x3a; ret; 
0x00000000000b8f7b: add al, 0x3c; adc byte ptr [rbp + 0x18], dh; xor eax, eax; ret; 
0x000000000005aa30: add al, 0x48; cmp eax, 0x16; ja 0x5aa80; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000008f3e6: add al, 0x48; cmp ecx, dword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x000000000004e1eb: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000004d6f9: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000004d70b: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000003edfa: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000008f394: add al, 0x48; mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000004bf39: add al, 0x48; mov eax, edi; ret; 
0x000000000003edf3: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000059514: add al, 0x48; mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000000818a4: add al, 0x48; xor eax, eax; ret; 
0x000000000008e176: add al, 0x4c; cmp ecx, eax; jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000082168: add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x00000000000de1ec: add al, 0x64; add byte ptr [rax], al; and byte ptr [rdi], bh; clc; jmp qword ptr [rdi + 0x11]; 
0x000000000004d707: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000004bf47: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000065a82: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000041f67: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000bf1a4: add al, 0x72; stc; call rcx; 
0x00000000000516fd: add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x000000000008b633: add al, 0x74; or bh, bh; and eax, 0x25cbe4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000002e560: add al, 0x74; sbb eax, 0x8d48c085; adc eax, 0x23234; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x00000000000182ba: add al, 0x75; add eax, 0x18c48348; ret; 
0x000000000007c338: add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000046b6b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000048443: add al, 0x81; sub eax, edx; ret; 
0x000000000000ae87: add al, 0x82; add rax, rdx; jmp rax; 
0x000000000001872a: add al, 0x82; mov qword ptr [rsi + 0x10], r10; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x0000000000044777: add al, 0x82; sub eax, ecx; ret; 
0x0000000000052536: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005aa39: add al, 0x83; add rax, rbx; jmp rax; 
0x000000000000b0e1: add al, 0x83; call 0xaf933eb; ja 0xad4f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000005be14: add al, 0x83; loope 0x5be27; cmp cl, 0xa; je 0x5c0cf; add rax, qword ptr [r15 + 0x10]; call rax; 
0x00000000000b574a: add al, 0x84; add rax, r12; jmp rax; 
0x00000000000743b9: add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x000000000007c1cc: add al, 0x86; add rax, rsi; jmp rax; 
0x00000000000b4779: add al, 0x87; add rax, r15; jmp rax; 
0x000000000007c968: add al, 0x87; add rax, rdi; jmp rax; 
0x000000000004d6f6: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000004bf36: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000b4557: add al, 0x88; add rax, r8; jmp rax; 
0x000000000008b0be: add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000051b93: add al, 0x96; add rax, rsi; jmp rax; 
0x00000000000b5b23: add al, 0x99; add rax, r9; jmp rax; 
0x0000000000056225: add al, 0x9a; add rax, rdx; jmp rax; 
0x00000000000e1aec: add al, 0x9d; add byte ptr [rax], al; and byte ptr [rcx], ch; sti; call rbx; 
0x000000000008bb8f: add al, 0xa1; add rax, rcx; jmp rax; 
0x00000000000949b9: add al, 0xa2; add rax, rdx; jmp rax; 
0x000000000008c4b7: add al, 0xa7; add rax, rdi; jmp rax; 
0x000000000007a118: add al, 0xae; add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000051ad9: add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000001616f: add al, 0xc3; ja 0x167f5; lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000007948d: add al, 0xc6; jmp rax; 
0x000000000006e652: add al, 0xc6; mov esi, 1; jmp rax; 
0x000000000006ecaa: add al, 0xc6; xor esi, esi; jmp rax; 
0x000000000006e608: add al, 0xc7; jmp rax; 
0x00000000000794c8: add al, 0xc8; mov ecx, 1; jmp rax; 
0x00000000000707e9: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000006b457: add al, 0xd8; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000067371: add al, 0xe8; test rax, rax; je 0x6737a; call rax; 
0x0000000000067366: add al, 0xeb; lea rax, [rip + 0x27f5d1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x000000000000a302: add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000003f163: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000005689b: add al, 0xf3; ret; 
0x00000000000be331: add al, 0xf8; call qword ptr [rax + 4]; 
0x00000000000be2f5: add al, 0xf8; call rax; 
0x00000000000be335: add al, 0xf8; inc eax; add edi, eax; push qword ptr [rax]; add edi, eax; call rax; 
0x00000000000be2f1: add al, 0xf8; jmp qword ptr [rax + 4]; 
0x000000000006e0be: add al, 0xf8; jmp rax; 
0x00000000000be275: add al, 0xf8; jmp rsp; 
0x000000000009ccb8: add al, 0xf; mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000034296: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000035966: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000505eb: add al, 0xf; sub rax, rsi; ret; 
0x00000000000d7175: add al, 0xfa; push qword ptr [rcx + rdx*4 + 0x2cb80000]; cli; jmp rsp; 
0x00000000000594b3: add al, 0xfc; lcall [rax + 0x48]; mov eax, ebx; pop rdx; pop rbx; ret; 
0x0000000000018a07: add al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007ffa7: add al, 1; je 0x7ffd1; mov rax, rdx; pop rbx; ret; 
0x00000000000959b0: add al, 2; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000008f397: add al, 2; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000036f37: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000008eda: add al, 5; add cl, cl; ret; 
0x00000000000be270: add al, 5; clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x00000000000be268: add al, 6; clc; inc dword ptr [rbp + rax + 0x504fff8]; clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x000000000006ec9f: add al, 6; lea rsi, [rip + 0x275778]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e647: add al, 6; lea rsi, [rip + 0x275dd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000049b5d: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000049fbe: add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000006e5fd: add al, 7; lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000079489: add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000049d78: add al, 7; ret; 
0x000000000003da97: add al, 8; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002fe1f: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000de5c7: add al, ah; add byte ptr [eax], al; and al, 0x83; clc; call qword ptr [rdx]; 
0x00000000000d923f: add al, ah; and al, 0xf4; jmp qword ptr [rdx + 1]; 
0x00000000000e19df: add al, ah; and bh, bl; call qword ptr [rbx]; 
0x00000000000da72f: add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x00000000000da7cf: add al, ah; mov esi, esp; call qword ptr [rsi]; 
0x00000000000e2cff: add al, ah; sbb ebp, edi; call qword ptr [rax + 9]; 
0x00000000000e34a7: add al, al; mov dh, 0; add byte ptr [rax + rax*2 - 3], dl; call qword ptr [rbx]; 
0x00000000000c8ee7: add al, al; sldt word ptr [rax]; ret; 
0x00000000000884fa: add al, bh; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000d8bd7: add al, bh; div bl; jmp qword ptr [rdx]; 
0x00000000000d6373: add al, bh; insb byte ptr [rdi], dx; hlt; push qword ptr [rsi + rsi + 0x6d780000]; hlt; call rsp; 
0x0000000000051c25: add al, bh; jg 0x51c20; int1; mov eax, eax; ret; 
0x00000000000d6b03: add al, bh; mov dh, 0xf7; call rsp; 
0x00000000000d9fd7: add al, bh; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rsi]; 
0x00000000000d67ab: add al, bh; push rbp; cmc; push qword ptr [rsi + rdx*2 + 0x59e80000]; cmc; jmp qword ptr [rax + 0x57]; 
0x00000000000d6d43: add al, bh; sbb al, 0xf8; jmp qword ptr [rax]; 
0x00000000000d6233: add al, bh; sub ah, dh; jmp qword ptr [rax]; 
0x00000000000da7df: add al, bh; sub dword ptr [rax], eax; add ah, ch; mov esi, esp; call qword ptr [rsi]; 
0x00000000000e12df: add al, bh; xchg eax, esp; add byte ptr [rax], al; or al, 0xf2; cli; call rdx; 
0x00000000000d61e3: add al, bl; and ah, dh; jmp rax; 
0x00000000000da3bf: add al, bl; and eax, 0x81bc0000; hlt; call qword ptr [rdi]; 
0x00000000000d6f6b: add al, bl; cwde; clc; call qword ptr [rax]; 
0x00000000000d6b93: add al, bl; ret 0xfff7; 
0x00000000000e3687: add al, bl; std; call qword ptr [rcx]; 
0x00000000000d622b: add al, bl; sub ah, dh; dec dword ptr [rbp + 0x28f80000]; hlt; jmp qword ptr [rax]; 
0x00000000000d63eb: add al, bl; test esp, esi; call qword ptr [rax + 0x3a]; 
0x00000000000d642b: add al, bl; xchg eax, esi; hlt; jmp qword ptr [rax]; 
0x0000000000020d46: add al, bpl; movsxd rdi, dword ptr [rbp - 0x3b140001]; nop; mov eax, 0xffffffff; ret; 
0x0000000000055e26: add al, bpl; xor ecx, ebx; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000b1ab2: add al, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004a751: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x0000000000063a06: add al, byte ptr [rax]; add al, ch; and dh, byte ptr [rax - 6]; jmp qword ptr [rsi - 0x70]; 
0x000000000009f95e: add al, byte ptr [rax]; add al, ch; retf 0xf6b0; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d7fed: add al, byte ptr [rax]; add al, dh; sbb dh, bl; jmp qword ptr [rbp + 2]; 
0x0000000000009f3b: add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000008a9f0: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000000633bd: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000006cf43: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000b5adb: add al, byte ptr [rax]; add byte ptr [rax + 0xf], cl; mov edi, 0x148015b; ret; 
0x0000000000080e62: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000000a033e: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret 0x3a83; 
0x0000000000068e2d: add al, byte ptr [rax]; add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x000000000002d643: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x0000000000056219: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x68f19; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000008bd6a: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000000ba75: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fsubp st(0); sar dl, 1; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000888f3: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fucomip st(0); ret 0xfa51; 
0x000000000002526b: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000005557e: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000051114: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000008b0f1: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000002b94a: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000062b5b: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000034e67: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048201: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034e95: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000068d22: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000093f48: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000094151: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000008d666: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000576f9: add al, byte ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x0000000000016bbc: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000082814: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000001c478: add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000004fb94: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000001aad6: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x000000000009dc44: add al, byte ptr [rax]; add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x000000000001b13d: add al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000055d43: add al, byte ptr [rax]; add byte ptr [rcx], dh; idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x0000000000070b9f: add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000024ec7: add al, byte ptr [rax]; add dh, dh; ret 0xf08; 
0x000000000002e403: add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x000000000002dab3: add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000080470: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e810: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db20: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e7e0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000080540: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081df0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000000804a0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000000b451a: add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000002e755: add al, byte ptr [rax]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e615: add al, byte ptr [rax]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4b5: add al, byte ptr [rax]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7bc: add al, byte ptr [rax]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e67c: add al, byte ptr [rax]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e51c: add al, byte ptr [rax]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e79b: add al, byte ptr [rax]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002daac: add al, byte ptr [rax]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e65b: add al, byte ptr [rax]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e4fb: add al, byte ptr [rax]; lea rax, [rip + 0x22b6c]; cmovne rax, rdx; ret; 
0x000000000002e56a: add al, byte ptr [rax]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000002e5bb: add al, byte ptr [rax]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000002d9e7: add al, byte ptr [rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000006695f: add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000008772: add al, byte ptr [rax]; mov qword ptr [rip + 0x2e23f9], 0; pop rax; ret; 
0x00000000000b4522: add al, byte ptr [rax]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000b4550: add al, byte ptr [rax]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000057fd5: add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000007c959: add al, byte ptr [rbx - 0x77cdf18]; sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000005910e: add al, byte ptr [rcx + 0x39]; ret; 
0x000000000006c81c: add al, byte ptr [rcx - 5]; jg 0x6c833; test byte ptr [rip - 0x7c000011], al; ret; 
0x000000000009d0fa: add al, byte ptr [rcx]; add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000000829f6: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0x82a20; ret; 
0x00000000000d8905: add al, byte ptr [rdx]; ret 0xb00e; 
0x000000000009403e: add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x00000000000a6318: add al, ch; adc al, byte ptr [rdi - 0xa]; jmp qword ptr [rsi - 0x70]; 
0x000000000001809c: add al, ch; adc byte ptr ds:[rax + rax], al; add rsp, 0x80; add rsp, 8; ret; 
0x0000000000063a08: add al, ch; and dh, byte ptr [rax - 6]; jmp qword ptr [rsi - 0x70]; 
0x000000000000a452: add al, ch; clc; ret 4; 
0x000000000006c24c: add al, ch; fsubrp st(7); stc; jmp qword ptr [rsi + 0xf]; 
0x000000000009e9bf: add al, ch; imul eax, eax, -0xa; jmp qword ptr [rsi + 0x2e]; 
0x000000000002cd3d: add al, ch; insd dword ptr [rdi], dx; ret; 
0x00000000000639e1: add al, ch; jo 0x639e0; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x0000000000068761: add al, ch; leave; and bh, dl; jmp qword ptr [rsi + 0xf]; 
0x000000000000c256: add al, ch; lodsb al, byte ptr [rsi]; ret; 
0x000000000009fe4b: add al, ch; mov dword ptr [rdi - 0x7cb7000a], 0x5d5b20c4; pop r12; ret; 
0x00000000000b8c8b: add al, ch; mov edi, 0xe8fff4f8; retf 0xf5e1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000084d1c: add al, ch; mov esi, 0x48fffd43; add esp, 0x80; pop rbx; ret; 
0x000000000005c29c: add al, ch; mov fs, edi; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000020d47: add al, ch; movsxd rdi, dword ptr [rbp - 0x3b140001]; nop; mov eax, 0xffffffff; ret; 
0x00000000000d617b: add al, ch; or al, 0xf4; call qword ptr [rax + 0x29]; 
0x000000000006f8a4: add al, ch; out 0xd1, al; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000d6303: add al, ch; pop rbp; hlt; jmp rax; 
0x00000000000d67b3: add al, ch; pop rcx; cmc; jmp qword ptr [rax + 0x57]; 
0x00000000000b36d1: add al, ch; pop rcx; jae 0xb36cb; jmp qword ptr [rsi + 0xf]; 
0x0000000000088fc0: add al, ch; push 0x1a; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d766b: add al, ch; pushfq; sti; ljmp [rdx + rsi*4 - 0x5e980000]; sti; jmp rax; 
0x000000000001c588: add al, ch; ret 0x50; 
0x0000000000053f18: add al, ch; ret 0x51; 
0x000000000000b840: add al, ch; ret 0xffcd; 
0x000000000001a3e7: add al, ch; ret; 
0x000000000009f960: add al, ch; retf 0xf6b0; jmp qword ptr [rsi + 0x2e]; 
0x000000000007fd8c: add al, ch; sahf; lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d6b7b: add al, ch; sal edi, 0xff; cmp byte ptr [rdi], ah; add byte ptr [rax], cl; ret 0xfff7; 
0x00000000000b5cb0: add al, ch; stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000561ee: add al, ch; sub al, 0x26; cld; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000087de8: add al, ch; sub al, 0xf8; jmp qword ptr [rsi - 0x70]; 
0x00000000000e1ab7: add al, ch; sub bl, bh; jmp qword ptr [rcx]; 
0x0000000000077701: add al, ch; sub dword ptr [rbx], esi; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000d6d93: add al, ch; sub eax, 0x7438fff8; add byte ptr [rax], al; sbb byte ptr [rsi], ch; clc; call qword ptr [rax + 0x74]; 
0x000000000000a4b3: add al, ch; xchg eax, edi; ret 4; 
0x00000000000d6253: add al, ch; xor ah, dh; jmp rax; 
0x00000000000606f9: add al, ch; xor dword ptr [rbx - 0x76be0006], esp; ret; 
0x0000000000055e27: add al, ch; xor ecx, ebx; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000e1a37: add al, cl; and al, 0xfb; call qword ptr [rax]; 
0x00000000000df9c7: add al, cl; cld; stc; jmp qword ptr [rdx]; 
0x00000000000e04b7: add al, cl; cli; jmp qword ptr [rcx]; 
0x00000000000d6283: add al, cl; cmp esi, esp; inc dword ptr [rax + 0x2f]; add byte ptr [rax], al; mov byte ptr [rsp + rsi*8], bh; jmp qword ptr [rax + 0x2f]; 
0x00000000000d72d3: add al, cl; cwde; cli; jmp rsp; 
0x00000000000d77d3: add al, cl; fdivp st(3); call rax; 
0x00000000000d670b: add al, cl; in al, dx; hlt; jmp rsp; 
0x00000000000d68db: add al, cl; int1; cmc; call qword ptr [rax]; 
0x00000000000d65fb: add al, cl; leave; hlt; call rsp; 
0x00000000000d7383: add al, cl; mov cl, 0xfa; jmp qword ptr [rax]; 
0x00000000000da687: add al, cl; mov esp, esi; call qword ptr [rsi]; 
0x00000000000d73db: add al, cl; ret 0xfffa; 
0x00000000000d6653: add al, cl; sal ah, cl; jmp rax; 
0x00000000000e29af: add al, cl; stosd dword ptr [rdi], eax; add byte ptr [rax], al; cmp al, 0xf4; cld; jmp rsp; 
0x00000000000d6763: add al, cl; xor al, 0xf5; jmp rax; 
0x00000000000e25d7: add al, dh; cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; je 0xe261e; cld; call qword ptr [rbx]; 
0x00000000000e12cf: add al, dh; int1; cli; jmp qword ptr [rcx]; 
0x00000000000e37d7: add al, dh; mov ecx, 0x52940000; std; call qword ptr [rcx]; 
0x00000000000bfa1f: add al, dh; movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rbx]; stc; call rax; 
0x00000000000dffcf: add al, dh; sbb bh, dl; jmp qword ptr [rax]; 
0x00000000000d7fef: add al, dh; sbb dh, bl; jmp qword ptr [rbp + 2]; 
0x00000000000e016f: add al, dl; and edi, edx; jmp qword ptr [rax]; 
0x00000000000de60f: add al, dl; mov dh, 0xfd; jmp qword ptr [rdi]; 
0x00000000000e121e: add bh, ah; ret; 
0x000000000009403c: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x000000000005c9ff: add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000029a0f: add bh, al; add eax, 0x2c0406; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000be301: add bh, al; push qword ptr [rax + 0xa]; clc; push rax; or eax, edi; jmp qword ptr [rax + 9]; 
0x000000000008e484: add bh, al; test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000006c297: add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x0000000000017cbf: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000e3ac3: add bh, bh; inc dword ptr [rcx]; or ch, byte ptr [rdi + 5]; ret; 
0x0000000000009f3d: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b65f5: add bh, bh; rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x00000000000a9184: add bh, bl; jmp qword ptr [rsi + 0xf]; 
0x0000000000093f89: add bh, byte ptr [rax + 1]; ret; 
0x00000000000940e6: add bh, byte ptr [rax + 2]; ret; 
0x0000000000055c3b: add bh, byte ptr [rax - 1]; ret; 
0x00000000000b64f3: add bh, byte ptr [rdi + 1]; call rax; 
0x000000000008f398: add bh, byte ptr [rdx]; cmp rax, -1; cmove rax, rdx; ret; 
0x00000000000d5ec5: add bh, dh; call qword ptr [rax]; 
0x00000000000d5ec5: add bh, dh; call qword ptr [rax]; add bh, dh; dec dword ptr [rax]; add edi, esi; jmp qword ptr [rax + 0x17]; 
0x00000000000d5ec1: add bh, dh; dec dword ptr [rax + 0x10fffe02]; add bh, dh; dec dword ptr [rax]; add edi, esi; jmp qword ptr [rax + 0x17]; 
0x00000000000d5ec9: add bh, dh; dec dword ptr [rax]; add edi, esi; jmp qword ptr [rax + 0x17]; 
0x00000000000d5e55: add bh, dh; dec dword ptr [rcx]; add bh, dh; dec dword ptr [rcx]; add bh, dh; jmp rax; 
0x00000000000d5e59: add bh, dh; dec dword ptr [rcx]; add bh, dh; jmp rax; 
0x00000000000d5e5d: add bh, dh; jmp rax; 
0x0000000000009d0a: add bh, dh; ret 0; 
0x00000000000613b9: add bh, dh; ret 0xf800; 
0x0000000000018b67: add bh, dh; ret 0xffef; 
0x00000000000dfba9: add bh, dl; jmp qword ptr [rcx]; 
0x00000000000d6173: add bh, dl; or al, 0xf4; call rsp; 
0x0000000000054fa5: add bl, ch; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b372b: add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x000000000002d794: add bl, ch; iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000007df8f: add bl, ch; nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000018e40: add bl, ch; ret 0x1f0f; 
0x00000000000552a1: add bl, ch; ret 0x8d48; 
0x000000000000a393: add bl, ch; ret 0xe883; 
0x000000000009ddd9: add bl, ch; ret; 
0x00000000000353ed: add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000055fc3: add bl, ch; sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x00000000000353ff: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000004a5ff: add bl, dh; bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000004a2ff: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000bea58: add bl, dh; clc; jmp qword ptr [rax]; 
0x00000000000b451b: add bl, dh; divps xmm0, xmmword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000004dc7f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004dc9f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004dd1f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004dcdf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004dcff: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004de1f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004ddbf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004dddf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004ddff: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000004e2ef: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004e2ff: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004dc6f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b4523: add bl, dh; movups xmmword ptr [rsp - 0x28], xmm0; ret; 
0x0000000000000c9f: add bl, dh; ret 6; 
0x000000000000f08f: add bl, dh; ret; 
0x000000000004dc7e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000002512e: add bl, sil; ret; 
0x00000000000e22fb: add byte ptr [0xffffffffe0a00000], dl; sti; call qword ptr [rax]; 
0x00000000000e2323: add byte ptr [0xffffffffe0a80000], bh; sti; call qword ptr [rax]; 
0x00000000000de5c9: add byte ptr [eax], al; and al, 0x83; clc; call qword ptr [rdx]; 
0x00000000000d6b89: add byte ptr [eax], al; pop rax; ret 0xfff7; 
0x0000000000079f6a: add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x000000000007961c: add byte ptr [r11 - 0x78f0d008], r8b; mov ebx, 0x89000025; ret 0x349; 
0x00000000000790ce: add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x0000000000091070: add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000005677c: add byte ptr [r8 + rsi - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000080506: add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000063565: add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000002245a: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x00000000000173ba: add byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000d6561: add byte ptr [r8], al; pop rax; ret 0xfff4; 
0x00000000000dbf39: add byte ptr [r8], al; xor al, 0xdd; cmc; jmp qword ptr [rdi + 0x2b]; 
0x00000000000d6749: add byte ptr [r8], r8b; or byte ptr [rsi], ah; cmc; call qword ptr [rax + 0x50]; 
0x00000000000d6741: add byte ptr [r8], r8b; push -0x13000ade; add byte ptr [r8], r8b; or byte ptr [rsi], ah; cmc; call qword ptr [rax + 0x50]; 
0x00000000000d6649: add byte ptr [r8], r8b; sal spl, cl; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000850eb: add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000084fcb: add byte ptr [r9 + rdi - 0x75], sil; add eax, 0x266413; test eax, eax; jne 0x85036; mov eax, 0x101; syscall; 
0x0000000000055785: add byte ptr [r9], r8b; add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x00000000000e185f: add byte ptr [rax + 0x11], al; sti; jmp qword ptr [rcx]; 
0x00000000000d619b: add byte ptr [rax + 0x11], bl; hlt; call rax; 
0x00000000000dec67: add byte ptr [rax + 0x1400006e], al; ret 0xfff8; 
0x00000000000dff87: add byte ptr [rax + 0x14], bl; cli; jmp rdx; 
0x00000000000595f3: add byte ptr [rax + 0x15], bh; syscall; 
0x000000000002d73f: add byte ptr [rax + 0x16], bh; ret; 
0x000000000005650f: add byte ptr [rax + 0x18], bh; syscall; 
0x000000000005650f: add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x56520; ret; 
0x000000000005650e: add byte ptr [rax + 0x18], dil; syscall; 
0x000000000005650e: add byte ptr [rax + 0x18], dil; syscall; cmp rax, -0xfff; jae 0x56520; ret; 
0x00000000000d974f: add byte ptr [rax + 0x19], ch; add byte ptr [rax], al; cld; cmp dh, ah; jmp rdx; 
0x00000000000d983f: add byte ptr [rax + 0x1a], bl; add byte ptr [rax], al; or al, 0x44; hlt; call qword ptr [rdi + 2]; 
0x000000000005767f: add byte ptr [rax + 0x1c], bh; syscall; 
0x000000000005767f: add byte ptr [rax + 0x1c], bh; syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x00000000000d9f47: add byte ptr [rax + 0x21], ah; add byte ptr [rax], al; adc al, 0x6e; hlt; call qword ptr [rdi]; 
0x000000000008edff: add byte ptr [rax + 0x25c4c13d], al; add byte ptr [rax], al; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000da55f: add byte ptr [rax + 0x27], bh; add byte ptr [rax], al; jl 0xda4ea; hlt; call qword ptr [rdi + 1]; 
0x000000000005600f: add byte ptr [rax + 0x27], bh; syscall; 
0x000000000005600f: add byte ptr [rax + 0x27], bh; syscall; ret; 
0x00000000000d6213: add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x00000000000da537: add byte ptr [rax + 0x27], dl; add byte ptr [rax], al; and al, 0x84; hlt; call qword ptr [rdi]; 
0x0000000000060b41: add byte ptr [rax + 0x29], cl; ret 0x349; 
0x00000000000616a7: add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x00000000000735c8: add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000086688: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000008a37a: add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000001c0f0: add byte ptr [rax + 0x29], cl; ret; 
0x00000000000dbdb7: add byte ptr [rax + 0x2a], cl; cmc; jmp qword ptr [rbx]; 
0x00000000000dd86f: add byte ptr [rax + 0x2c00005a], cl; sal edi, 1; jmp qword ptr [rdx]; 
0x00000000000d705b: add byte ptr [rax + 0x2e], cl; stc; jmp rax; 
0x00000000000d7083: add byte ptr [rax + 0x2f], cl; stc; call qword ptr [rax - 0x76]; 
0x00000000000d6de3: add byte ptr [rax + 0x31], ch; clc; call rax; 
0x0000000000058e5f: add byte ptr [rax + 0x32], bh; syscall; 
0x0000000000058e5f: add byte ptr [rax + 0x32], bh; syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x00000000000d6e1b: add byte ptr [rax + 0x34], bl; clc; jmp rax; 
0x00000000000d6263: add byte ptr [rax + 0x37], bh; hlt; call qword ptr [rax - 0x67ffffd2]; cmp esp, esi; jmp rax; 
0x00000000000d7a73: add byte ptr [rax + 0x38], ch; std; jmp qword ptr [rax - 0x37]; 
0x00000000000b4723: add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000002429f: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000001d39f: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000054103: add byte ptr [rax + 0x39], cl; ret 0x975; 
0x00000000000b47a6: add byte ptr [rax + 0x39], cl; ret 0xa472; 
0x00000000000592b9: add byte ptr [rax + 0x39], cl; ret 0xd975; 
0x0000000000059390: add byte ptr [rax + 0x39], cl; ret 0xda75; 
0x000000000008a9f2: add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x0000000000027230: add byte ptr [rax + 0x39], cl; ret 0xf275; 
0x0000000000087cc8: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000017c9f: add byte ptr [rax + 0x39], cl; ret; 
0x0000000000051a13: add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x0000000000051850: add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000000d792b: add byte ptr [rax + 0x3cfffc9a], ch; ret 0; 
0x00000000000d6793: add byte ptr [rax + 0x3e], ch; cmc; call qword ptr [rax + 0x54]; 
0x00000000000e3407: add byte ptr [rax + 0x3f], ch; std; call qword ptr [rdx]; 
0x00000000000dbf37: add byte ptr [rax + 0x41], dl; add byte ptr [rax], al; xor al, 0xdd; cmc; jmp qword ptr [rdi + 0x2b]; 
0x0000000000016c0f: add byte ptr [rax + 0x441f0f], dl; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x00000000000d62d3: add byte ptr [rax + 0x48], bh; hlt; call rax; 
0x0000000000056a46: add byte ptr [rax + 0x48], bh; syscall; 
0x00000000000d6e93: add byte ptr [rax + 0x4a], cl; clc; call qword ptr [rax]; 
0x000000000005f68c: add byte ptr [rax + 0x4c], dl; mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000000d655b: add byte ptr [rax + 0x4cfff4bf], ch; add byte ptr [r8], al; pop rax; ret 0xfff4; 
0x00000000000d79eb: add byte ptr [rax + 0x4cfffd30], ch; mov dword ptr [rax], 0xfd30b800; jmp qword ptr [rax - 0x39]; 
0x00000000000da297: add byte ptr [rax + 0x54000024], dh; jl 0xda293; jmp qword ptr [rdi + 2]; 
0x00000000000e1587: add byte ptr [rax + 0x54000097], ah; add edi, ebx; jmp qword ptr [rbx + 1]; 
0x00000000000d983b: add byte ptr [rax + 0x58000000], al; sbb al, byte ptr [rax]; add byte ptr [rsp + rax*2], cl; hlt; call qword ptr [rdi + 2]; 
0x00000000000d62fb: add byte ptr [rax + 0x5b], cl; hlt; dec dword ptr [rax - 0x17ffffcd]; pop rbp; hlt; jmp rax; 
0x00000000000d7933: add byte ptr [rax + 0x60fffc9b], ch; ret 0; 
0x000000000001617d: add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000007c335: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000000ae84: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000007c965: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000056222: add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x0000000000051ad6: add byte ptr [rax + 0x63], cl; add al, 0xbe; add rax, rsi; jmp rax; 
0x00000000000182b5: add byte ptr [rax + 0x63], cl; and al, 4; jne 0x182c2; add rsp, 0x18; ret; 
0x00000000000a0521: add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x00000000000a05ef: add byte ptr [rax + 0x63], cl; ret 0xc749; 
0x00000000000678c7: add byte ptr [rax + 0x63], cl; ret; 
0x000000000007ce33: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x000000000006b3c1: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x0000000000084eaf: add byte ptr [rax + 0x66], bh; syscall; 
0x0000000000084eaf: add byte ptr [rax + 0x66], bh; syscall; ret; 
0x00000000000de3d7: add byte ptr [rax + 0x68], bh; clc; jmp qword ptr [rsi + 0xa]; 
0x0000000000084ecf: add byte ptr [rax + 0x68], bh; syscall; 
0x0000000000084ecf: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000000e26af: add byte ptr [rax + 0x69], dl; cld; jmp qword ptr [rdx]; 
0x00000000000d7833: add byte ptr [rax + 0x6a], cl; cld; ljmp [rax - 0x77ffff44]; insb byte ptr [rdi], dx; cld; call rsp; 
0x0000000000084ebf: add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000084ebf: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000000de93f: add byte ptr [rax + 0x6b], bl; add byte ptr [rax], al; insb byte ptr [rdi], dx; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rcx]; 
0x0000000000084edf: add byte ptr [rax + 0x6c], bh; syscall; 
0x0000000000084edf: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000000d637b: add byte ptr [rax + 0x6d], bh; hlt; call rsp; 
0x00000000000b2ec8: add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000004a74f: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x00000000000b6798: add byte ptr [rax + 0x75], al; adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0xb680b; add rsp, 0x18; ret; 
0x000000000009fa4f: add byte ptr [rax + 0x75], al; jge 0x9fa9c; cmp dword ptr [rip + 0x2474f5], 0; jne 0x9fa5f; pop rbx; ret; 
0x000000000004e18f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000001afde: add byte ptr [rax + 0x7f741], dl; or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000000d794b: add byte ptr [rax + 0x8fffca0], ch; ret; 
0x00000000000d6cb3: add byte ptr [rax + 0xa], bh; clc; jmp qword ptr [rax]; 
0x000000000005764f: add byte ptr [rax + 0xa], bh; syscall; 
0x000000000005764f: add byte ptr [rax + 0xa], bh; syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x000000000005761f: add byte ptr [rax + 0xb], bh; syscall; 
0x000000000005761f: add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x57630; ret; 
0x00000000000da77f: add byte ptr [rax + 0xc000029], bl; mov esi, esp; call qword ptr [rbx]; 
0x0000000000052a1f: add byte ptr [rax + 0xc9], bh; syscall; 
0x0000000000052a1f: add byte ptr [rax + 0xc9], bh; syscall; ret; 
0x00000000000590f1: add byte ptr [rax + 0xca], bh; syscall; 
0x00000000000590f1: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x0000000000059198: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000b68ef: add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rdx + rbx*8 + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x00000000000b688f: add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rsi + rbx*8 + 0x48], dh; add esp, 8; ret; 
0x0000000000056284: add byte ptr [rax + 0xe5], bh; syscall; 
0x0000000000016bbf: add byte ptr [rax + 0xe], bh; syscall; 
0x000000000001f71f: add byte ptr [rax + 0xf], al; mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x000000000005ed4f: add byte ptr [rax + 0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000081435: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000000b5add: add byte ptr [rax + 0xf], cl; mov edi, 0x148015b; ret; 
0x000000000005dddf: add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x0000000000082a0f: add byte ptr [rax + 0xfe580f5], cl; je 0x82a30; add rax, 2; ret; 
0x000000000007d4e6: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093f4c: add byte ptr [rax + 1], bh; ret; 
0x000000000005695f: add byte ptr [rax + 1], bh; syscall; 
0x0000000000080e64: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000081b41: add byte ptr [rax + 1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000081191: add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000093158: add byte ptr [rax + 1], cl; ret 0x149; 
0x00000000000a0340: add byte ptr [rax + 1], cl; ret 0x3a83; 
0x000000000001b072: add byte ptr [rax + 1], cl; ret; 
0x0000000000094155: add byte ptr [rax + 2], bh; ret; 
0x0000000000056c0f: add byte ptr [rax + 3], bh; syscall; 
0x00000000000dfddf: add byte ptr [rax + 7], dl; cli; jmp qword ptr [rbx]; 
0x000000000005698f: add byte ptr [rax + 8], bh; syscall; 
0x000000000005698e: add byte ptr [rax + 8], dil; syscall; 
0x0000000000091071: add byte ptr [rax + 9], cl; ret 0x840f; 
0x0000000000085ac8: add byte ptr [rax + 9], cl; ret 0x850f; 
0x00000000000940f9: add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x00000000000e175f: add byte ptr [rax + 9], dl; sti; jmp qword ptr [rsi]; 
0x00000000000d8fd3: add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x00000000000daf97: add byte ptr [rax + rax + 0x31b40000], bl; add byte ptr [rax], al; mov al, 0xd5; hlt; jmp rsi; 
0x00000000000de13f: add byte ptr [rax + rax + 0x635c0000], ah; add byte ptr [rax], al; test al, 0x2f; clc; call qword ptr [rdi]; 
0x00000000000c7e8b: add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000000dbea3: add byte ptr [rax + rax*2 - 0x66580000], bh; cmc; call rsp; 
0x00000000000e34ab: add byte ptr [rax + rax*2 - 3], dl; call qword ptr [rbx]; 
0x00000000000e25db: add byte ptr [rax + rax*2 - 4], dh; call qword ptr [rbx]; 
0x00000000000b8f77: add byte ptr [rax + rax*8 + 0x103c0474], al; jne 0xb8f98; xor eax, eax; ret; 
0x000000000005e633: add byte ptr [rax + rax*8 - 0x76b3178b], al; ret 0x294c; 
0x000000000008025f: add byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000002e424: add byte ptr [rax + rax], al; add byte ptr [rsi - 9], dh; ret 0; 
0x00000000000da99b: add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov eax, 0xad00002b; fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000e1e0f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; sub al, 0xa0; add byte ptr [rax], al; mov bl, 0xfb; call qword ptr [rdi]; 
0x00000000000dc217: add byte ptr [rax + rax], bl; add byte ptr [rax], al; xor al, 0x44; add byte ptr [rax], al; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x00000000000e2707: add byte ptr [rax + rax], ch; add byte ptr [rax], al; and al, 0xa9; add byte ptr [rax], al; sub byte ptr [rdx - 4], 0xff; ret; 
0x00000000000e1857: add byte ptr [rax + rax], ch; add byte ptr [rax], al; je 0xe17f8; add byte ptr [rax], al; adc ebx, edi; jmp qword ptr [rcx]; 
0x00000000000e0d87: add byte ptr [rax + rax], ch; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; pop qword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000d8fcf: add byte ptr [rax + rax], cl; add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x0000000000080473: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1422; cmove rax, rdx; ret; 
0x000000000002e813: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1b512; cmove rax, rdx; ret; 
0x000000000002db23: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1c832; cmove rax, rdx; ret; 
0x000000000002e7e3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x6922; cmove rax, rdx; ret; 
0x0000000000080543: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x892; cmove rax, rdx; ret; 
0x0000000000081df3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x00000000000804a3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xf32; cmove rax, rdx; ret; 
0x00000000000852b1: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000027f4b: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000081e47: add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000000e0af7: add byte ptr [rax + rax], cl; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x00000000000e367f: add byte ptr [rax + rax], dh; add byte ptr [rax], al; pushfq; mov eax, 0x48d80000; std; call qword ptr [rcx]; 
0x00000000000dffdf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; cld; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x00000000000dff4f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [rax], 0xfa0e8800; jmp qword ptr [rbx]; 
0x00000000000dbe9f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0xa8000040; cdq; cmc; call rsp; 
0x00000000000dff7f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; pushfq; add dword ptr [rax], 0xfa145800; jmp rdx; 
0x00000000000da727: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sub dword ptr [rax], r8d; add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x00000000000e0167: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x00000000000da683: add byte ptr [rax + rbp - 0x76380000], bl; hlt; call qword ptr [rsi]; 
0x00000000000b67a0: add byte ptr [rax + rbp*2 + 0x48], dh; add esp, 0x18; ret; 
0x00000000000ba666: add byte ptr [rax + rbp*8 + 0x48], dh; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000068d3d: add byte ptr [rax + rcx - 0xd], dh; ret; 
0x0000000000068e2f: add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x00000000000e3683: add byte ptr [rax + rdi*4 + 0x48d80000], bl; std; call qword ptr [rcx]; 
0x00000000000be828: add byte ptr [rax + rdi*8], ch; inc dword ptr [rax + 0xfff82b]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000bdec4: add byte ptr [rax + rdi*8], dl; call qword ptr [rax + 0x20fff813]; adc edi, eax; push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x00000000000c9037: add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000007fda5: add byte ptr [rax + rdx - 0x75], dh; jo 0x7fd31; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000000e0e7b: add byte ptr [rax + rdx*4 - 0x2de00000], dl; cli; jmp qword ptr [rsi]; 
0x00000000000e0e43: add byte ptr [rax + rdx*4], bl; add byte ptr [rax], cl; sar edx, 1; jmp qword ptr [rdx]; 
0x00000000000e0e2b: add byte ptr [rax + rdx*8 - 6], dh; jmp qword ptr [rdx]; 
0x000000000005677d: add byte ptr [rax + rsi - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000000d74ab: add byte ptr [rax - 0x10], bl; cli; call qword ptr [rax]; 
0x00000000000df6df: add byte ptr [rax - 0x11], ah; stc; jmp qword ptr [rdi]; 
0x00000000000d798b: add byte ptr [rax - 0x1300035c], bl; ret; 
0x0000000000071574: add byte ptr [rax - 0x15343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000008b444: add byte ptr [rax - 0x168b7f80], 0x89; ret 0xeac1; 
0x00000000000d6d3b: add byte ptr [rax - 0x170007e4], bl; jno 0xd6d43; add al, bh; sbb al, 0xf8; jmp qword ptr [rax]; 
0x000000000002744f: add byte ptr [rax - 0x17], dl; ret; 
0x00000000000bd8bf: add byte ptr [rax - 0x1f0008f0], ah; adc edi, esi; jmp qword ptr [rax]; 
0x00000000000e22bf: add byte ptr [rax - 0x20], dl; sti; call qword ptr [rbx]; 
0x00000000000d6423: add byte ptr [rax - 0x23000b73], ch; cmp eax, dword ptr [rax]; add al, bl; xchg eax, esi; hlt; jmp qword ptr [rax]; 
0x00000000000e2237: add byte ptr [rax - 0x23], cl; sti; jmp qword ptr [rbp]; 
0x00000000000e293f: add byte ptr [rax - 0x26], al; cld; call qword ptr [rax]; 
0x00000000000d7983: add byte ptr [rax - 0x2700035c], cl; ret; 
0x0000000000081935: add byte ptr [rax - 0x2d], cl; cli; test rdx, rdx; je 0x819e0; bsf rax, rdx; ret; 
0x00000000000d664b: add byte ptr [rax - 0x2e], cl; hlt; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000d7ae3: add byte ptr [rax - 0x2f], ch; std; call rax; 
0x00000000000d7793: add byte ptr [rax - 0x36], bl; sti; call qword ptr [rax]; 
0x0000000000094038: add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x000000000007f3f8: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000002296a: add byte ptr [rax - 0x39], cl; add eax, 0x2c7452; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000008773: add byte ptr [rax - 0x39], cl; add eax, 0x2e23f9; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x000000000005d5d1: add byte ptr [rax - 0x39], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000021643: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000207bf: add byte ptr [rax - 0x39], cl; push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000006ac4f: add byte ptr [rax - 0x39], cl; ret 0xff88; 
0x0000000000016be7: add byte ptr [rax - 0x39], cl; ret 0xffa8; 
0x000000000002d645: add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x00000000000758f5: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000083a0f: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000573f3: add byte ptr [rax - 0x39], cl; ret; 
0x0000000000082a6f: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000082a4f: add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000082aaf: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000082a5f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000082a9f: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000016c1f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000027f3f: add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x31ffffff], 0xf6; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000000bf4c: add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x48ffffff], 0xc7; ret; 
0x000000000008f79f: add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x5bffffff], 0x64; mov eax, dword ptr [rax]; ret; 
0x000000000000a8af: add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x64ffffff], 0x48; add eax, dword ptr [0]; ret; 
0x00000000000852a7: add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000007fdb7: add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000016e1f: add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000d7763: add byte ptr [rax - 0x3f], ch; sti; call qword ptr [rax]; 
0x00000000000b4718: add byte ptr [rax - 0x3f], cl; call 0xffffffff850e905f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x00000000000b479b: add byte ptr [rax - 0x3f], cl; call 0xffffffff850e90e2; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xa472; 
0x0000000000066a89: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000066a60: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000000663c0: add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x0000000000093ffa: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000deb67: add byte ptr [rax - 0x42], bl; clc; call qword ptr [rbx]; 
0x00000000000cc6cf: add byte ptr [rax - 0x45fffffc], bh; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000000a1280: add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000000e1e17: add byte ptr [rax - 0x4d], cl; sti; call qword ptr [rdi]; 
0x000000000006ed4f: add byte ptr [rax - 0x4f743], al; jmp qword ptr [rax]; 
0x00000000000e1cd7: add byte ptr [rax - 0x4f], cl; sti; jmp rdx; 
0x00000000000da99f: add byte ptr [rax - 0x52ffffd5], bh; fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000d76ab: add byte ptr [rax - 0x57], ch; sti; jmp qword ptr [rax - 0x4c]; 
0x00000000000de92f: add byte ptr [rax - 0x5c], ah; clc; call qword ptr [rcx]; 
0x00000000000de957: add byte ptr [rax - 0x5c], bh; clc; call qword ptr [rcx]; 
0x00000000000de917: add byte ptr [rax - 0x5c], bl; clc; call qword ptr [rdi]; 
0x00000000000d797b: add byte ptr [rax - 0x5c], ch; cld; inc esp; ret; 
0x00000000000d616b: add byte ptr [rax - 0x5f000bf5], bh; sub byte ptr [rax], al; add bh, dl; or al, 0xf4; call rsp; 
0x00000000000d7313: add byte ptr [rax - 0x5f], bl; cli; call rax; 
0x00000000000d7673: add byte ptr [rax - 0x5f], ch; sti; jmp rax; 
0x00000000000d6f63: add byte ptr [rax - 0x6300076e], ch; jg 0xd6f6b; add al, bl; cwde; clc; call qword ptr [rax]; 
0x00000000000d620b: add byte ptr [rax - 0x63000bdc], bh; sub al, 0; add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x00000000000d979f: add byte ptr [rax - 0x63ffffe7], bh; hlt; call qword ptr [rax]; 
0x00000000000d793b: add byte ptr [rax - 0x67000362], bl; ret 0; 
0x000000000006e5f8: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000006ec9a: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275778]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e642: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275dd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000006e5a7: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e956: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e908: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e859: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e7fd: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e55d: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e50f: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0ae: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000e28ef: add byte ptr [rax - 0x6b], ah; cld; call qword ptr [rax]; 
0x00000000000d726b: add byte ptr [rax - 0x6d], ch; cli; jmp qword ptr [rax - 0x67]; 
0x00000000000d62cb: add byte ptr [rax - 0x6f000bb9], cl; xor dword ptr [rax], eax; add byte ptr [rax + 0x48], bh; hlt; call rax; 
0x00000000000d76a3: add byte ptr [rax - 0x700045a], cl; mov bl, 0; add byte ptr [rax - 0x57], ch; sti; jmp qword ptr [rax - 0x4c]; 
0x00000000000e0e27: add byte ptr [rax - 0x70], al; add byte ptr [rax], al; je 0xe0dfe; cli; jmp qword ptr [rdx]; 
0x0000000000094fbd: add byte ptr [rax - 0x73], cl; adc eax, 0x3ea0f; movzx r12d, r12b; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094700: add byte ptr [rax - 0x73], cl; adc eax, 0x3f010; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007cae3: add byte ptr [rax - 0x73], cl; adc eax, 0x50f3d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005621b: add byte ptr [rax - 0x73], cl; adc eax, 0x68f19; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000002d44c: add byte ptr [rax - 0x73], cl; adc eax, 0x903ac; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000081e62: add byte ptr [rax - 0x73], cl; adc eax, 0xfffcfa46; cmove rax, rdx; ret; 
0x0000000000082164: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x000000000008b0bb: add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000049b5a: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000006335a: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x00000000000654dd: add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x0000000000080476: add byte ptr [rax - 0x73], cl; add eax, 0x1422; cmove rax, rdx; ret; 
0x000000000002e816: add byte ptr [rax - 0x73], cl; add eax, 0x1b512; cmove rax, rdx; ret; 
0x000000000002db26: add byte ptr [rax - 0x73], cl; add eax, 0x1c832; cmove rax, rdx; ret; 
0x000000000002e756: add byte ptr [rax - 0x73], cl; add eax, 0x22132; cmovne rax, rdx; ret; 
0x000000000002e616: add byte ptr [rax - 0x73], cl; add eax, 0x22262; cmovne rax, rdx; ret; 
0x000000000002e4b6: add byte ptr [rax - 0x73], cl; add eax, 0x223d2; cmovne rax, rdx; ret; 
0x000000000002e7bd: add byte ptr [rax - 0x73], cl; add eax, 0x2247b; cmovne rax, rdx; ret; 
0x000000000002e67d: add byte ptr [rax - 0x73], cl; add eax, 0x225ab; cmovne rax, rdx; ret; 
0x000000000002e51d: add byte ptr [rax - 0x73], cl; add eax, 0x2271b; cmovne rax, rdx; ret; 
0x000000000002e79c: add byte ptr [rax - 0x73], cl; add eax, 0x228cc; cmovne rax, rdx; ret; 
0x000000000002daad: add byte ptr [rax - 0x73], cl; add eax, 0x2296b; cmovne rax, rdx; ret; 
0x000000000002e65c: add byte ptr [rax - 0x73], cl; add eax, 0x229fc; cmovne rax, rdx; ret; 
0x000000000002e4fc: add byte ptr [rax - 0x73], cl; add eax, 0x22b6c; cmovne rax, rdx; ret; 
0x000000000002e56b: add byte ptr [rax - 0x73], cl; add eax, 0x231dd; cmovne rax, rdx; ret; 
0x000000000002e5bc: add byte ptr [rax - 0x73], cl; add eax, 0x2330c; cmovne rax, rdx; ret; 
0x000000000009c97f: add byte ptr [rax - 0x73], cl; add eax, 0x24e1d9; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000005a92f: add byte ptr [rax - 0x73], cl; add eax, 0x28d9c9; ret; 
0x00000000000591d8: add byte ptr [rax - 0x73], cl; add eax, 0x292208; add rsp, 8; ret; 
0x000000000009d0fd: add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x000000000002e7e6: add byte ptr [rax - 0x73], cl; add eax, 0x6922; cmove rax, rdx; ret; 
0x0000000000080546: add byte ptr [rax - 0x73], cl; add eax, 0x892; cmove rax, rdx; ret; 
0x0000000000081df6: add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x00000000000804a6: add byte ptr [rax - 0x73], cl; add eax, 0xf32; cmove rax, rdx; ret; 
0x00000000000299ef: add byte ptr [rax - 0x73], cl; add eax, 0xffffeb59; mov qword ptr [rip + 0x2bde4a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x00000000000299fd: add byte ptr [rax - 0x73], cl; add eax, 0xfffff57b; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x0000000000095487: add byte ptr [rax - 0x73], cl; add qword ptr [rcx - 0x77], rcx; or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000654fb: add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000065519: add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000008c4ad: add byte ptr [rax - 0x73], cl; cmp eax, 0x42503; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x0000000000017e0b: add byte ptr [rax - 0x73], cl; cmp eax, 0xa46ba; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x0000000000016176: add byte ptr [rax - 0x73], cl; cmp eax, 0xa5ea2; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000083996: add byte ptr [rax - 0x73], cl; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; out dx, al; call rbx; 
0x00000000000b459a: add byte ptr [rax - 0x73], cl; or byte ptr [rcx + rcx*4 + 1], cl; ret; 
0x000000000008bb85: add byte ptr [rax - 0x73], cl; or eax, 0x42d93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000007c32e: add byte ptr [rax - 0x73], cl; or eax, 0x514ae; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003428e: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000089572: add byte ptr [rax - 0x73], cl; push 0x48b4901; and al, 0x83; ret; 
0x00000000000266ca: add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x0000000000028c1f: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x0000000000024f48: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000007f254: add byte ptr [rax - 0x73], cl; test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000078f6b: add byte ptr [rax - 0x73], cl; xor eax, 0x26bbad; jmp rax; 
0x0000000000051acf: add byte ptr [rax - 0x73], cl; xor eax, 0x6d089; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000000e0aff: add byte ptr [rax - 0x74], al; cli; jmp qword ptr [rcx + 0xe]; 
0x000000000008bd6c: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000023a3f: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000009e117: add byte ptr [rax - 0x75], cl; adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000000a041: add byte ptr [rax - 0x75], cl; adc eax, 0x2dff07; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000b40fb: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000006e64f: add byte ptr [rax - 0x75], cl; add al, 0xc6; mov esi, 1; jmp rax; 
0x000000000006eca7: add byte ptr [rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x000000000006e605: add byte ptr [rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x00000000000794c5: add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000006736e: add byte ptr [rax - 0x75], cl; add al, 0xe8; test rax, rax; je 0x6737a; call rax; 
0x000000000006e0bb: add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x000000000004d7af: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000004be7f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000008ee6f: add byte ptr [rax - 0x75], cl; add eax, 0x2581a1; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x0000000000065bdf: add byte ptr [rax - 0x75], cl; add eax, 0x284d71; ret; 
0x000000000005d67f: add byte ptr [rax - 0x75], cl; add eax, 0x28de81; ret; 
0x000000000002286f: add byte ptr [rax - 0x75], cl; add eax, 0x2c4889; ret; 
0x000000000001715b: add byte ptr [rax - 0x75], cl; and al, 8; call rax; 
0x000000000003929f: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000072845: add byte ptr [rax - 0x75], cl; cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000018525: add byte ptr [rax - 0x75], cl; cmp dword ptr [rbx + rcx*4 + 0x59], ecx; sub byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x000000000005cabf: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000003947f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039a6f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000002cb1f: add byte ptr [rax - 0x75], cl; je 0x2cb48; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000083888: add byte ptr [rax - 0x75], cl; je 0x838b1; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000083b3e: add byte ptr [rax - 0x75], cl; je 0x83b67; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000008efaf: add byte ptr [rax - 0x75], cl; je 0x8efd8; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x000000000000a048: add byte ptr [rax - 0x75], cl; je 0xa071; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000000b4258: add byte ptr [rax - 0x75], cl; je 0xb4281; adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000006959b: add byte ptr [rax - 0x75], cl; jl 0x695c4; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x0000000000017bf2: add byte ptr [rax - 0x75], cl; js 0x17c17; call rdx; 
0x00000000000bae87: add byte ptr [rax - 0x75], cl; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000007f7ff: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000003966f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003986f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000baed9: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000008879f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x00000000000b7374: add byte ptr [rax - 0x75], cl; or byte ptr [rax + 0x39], cl; or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x000000000009152f: add byte ptr [rax - 0x75], cl; or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009ee60: add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000009ded: add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x00000000000b6b04: add byte ptr [rax - 0x75], cl; push rbp; or al, ch; xchg eax, edx; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000001d001: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000003ed7f: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000038d1f: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e5bf: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e52f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e7cf: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000038edf: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000008ed06: add byte ptr [rax - 0x75], cl; xor eax, 0x25c1a2; jne 0x8ed20; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x000000000005785c: add byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; jl 0x57888; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000001c20f: add byte ptr [rax - 0x76b80000], al; ret; 
0x0000000000022900: add byte ptr [rax - 0x77], cl; adc eax, 0x2c74c0; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x000000000009c986: add byte ptr [rax - 0x77], cl; add eax, 0x24e1ba; ret; 
0x000000000009c96b: add byte ptr [rax - 0x77], cl; add eax, 0x24e1d5; add rsp, 8; ret; 
0x000000000008edcf: add byte ptr [rax - 0x77], cl; add eax, 0x25c0d9; add rsp, 8; ret; 
0x00000000000233dd: add byte ptr [rax - 0x77], cl; add eax, 0x2c43e3; ret; 
0x00000000000233bd: add byte ptr [rax - 0x77], cl; add eax, 0x2c43fb; ret; 
0x000000000008df2f: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8d860; add rsp, 0xd8; ret; 
0x000000000001a6ed: add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000001df45: add byte ptr [rax - 0x77], cl; call 0x5c433ca8; ret; 
0x000000000008de71: add byte ptr [rax - 0x77], cl; call 0x5c4a3bd4; pop r13; ret; 
0x000000000008f5f0: add byte ptr [rax - 0x77], cl; call 0x5c4a5353; ret; 
0x000000000008f60d: add byte ptr [rax - 0x77], cl; call 0x5c4a5370; ret; 
0x000000000008f64a: add byte ptr [rax - 0x77], cl; call 0x5c4a53ad; ret; 
0x000000000001d78d: add byte ptr [rax - 0x77], cl; call 0xfffffffffffdaf7e; jmp qword ptr [rsi + 0x2e]; 
0x000000000001cb62: add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000001e8c3: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000a96a5: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000000a978c: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x000000000001c6e7: add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x00000000000664f5: add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff449ee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000063566: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000006be27: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000001b6f4: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000000ba77: add byte ptr [rax - 0x77], cl; fsubp st(0); sar dl, 1; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000888f5: add byte ptr [rax - 0x77], cl; fucomip st(0); ret 0xfa51; 
0x000000000002245b: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000000a6e1: add byte ptr [rax - 0x77], cl; jbe 0xa6f6; syscall; 
0x000000000005959f: add byte ptr [rax - 0x77], cl; jo 0x595c4; ret; 
0x000000000001ccb3: add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000002800f: add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000008399e: add byte ptr [rax - 0x77], cl; out dx, al; call rbx; 
0x0000000000083c70: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r12; call rbx; 
0x000000000002d79f: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000001affe: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000096880: add byte ptr [rax - 0x77], cl; ret 0x148; 
0x000000000005641b: add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x0000000000027ef7: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000001b146: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000001d2ea: add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x000000000006d478: add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000007ff73: add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x00000000000564c7: add byte ptr [rax - 0x77], cl; ret 0x6ae9; 
0x000000000000bcfe: add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x000000000002526d: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000000ba7f: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000001a548: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000053400: add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x00000000000097ed: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000645c8: add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000000c093: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000077ab7: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000005586f: add byte ptr [rax - 0x77], cl; ret 0xede9; 
0x00000000000195ad: add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x000000000001ea48: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000056432: add byte ptr [rax - 0x77], cl; ret 0xffe9; 
0x000000000000c771: add byte ptr [rax - 0x77], cl; ret; 
0x00000000000342fc: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x0000000000046f44: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x0000000000016ab9: add byte ptr [rax - 0x77], cl; sal byte ptr [rbp + 8], 1; add rsp, 0x148; ret; 
0x0000000000050970: add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000091661: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000008b0f3: add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000090a9d: add byte ptr [rax - 0x77], cl; xchg eax, r8d; mov eax, 0x15; syscall; 
0x0000000000062378: add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000d688b: add byte ptr [rax - 0x79], bh; cmc; jmp qword ptr [rax]; 
0x000000000008189f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x00000000000b96ba: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax - 0x77]; sbb eax, 0x2306db; jne 0xb96a8; pop rbx; ret; 
0x000000000007f25b: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000005909f: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000893f7: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x000000000001a4ba: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000007aa5d: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000008caa: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000b697f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000005a3f3: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x0000000000008c69: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x00000000000083c2: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000009ef08: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000000b5ca7: add byte ptr [rax - 0x7bf0df06], al; mov edi, 0xe8000000; stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000de967: add byte ptr [rax - 0x7bffff95], al; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax]; 
0x00000000000b46af: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0xb46d8; xor eax, eax; ret; 
0x000000000008f6cf: add byte ptr [rax - 0x7d], cl; call 0x7c943ed8; ret; 
0x0000000000029dec: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000000a9b9: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000006f1b3: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000005160d: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005165d: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000001caaf: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2ca4e8; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000000c769: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2da7c6; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002d0a4: add byte ptr [rax - 0x7d], cl; in al, dx; or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000b3f11: add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000020c9f: add byte ptr [rax - 0x7d], cl; jg 0x20cdc; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x000000000006536a: add byte ptr [rax - 0x7d], cl; jl 0x65393; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x0000000000029262: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000007f216: add byte ptr [rax - 0x7d], cl; js 0x7f24b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000005005f: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000a0d5f: add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x0000000000059947: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000007c977: add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x0000000000018caf: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000064224: add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000009db8f: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000008d66a: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000006b3a4: add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x00000000000558bf: add byte ptr [rax - 0x7d], cl; ret 0x4909; 
0x0000000000034329: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000288b7: add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x00000000000b780f: add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000007cb58: add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000002deb0: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000046ce3: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034357: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000052d77: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000000ee6f: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002fd5f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000000819df: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000000b2c72: add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000002cd36: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; insd dword ptr [rdi], dx; ret; 
0x0000000000053f11: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x51; 
0x0000000000068d24: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000003c98b: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000001c5bf: add byte ptr [rax - 0x7f], cl; ret; 
0x00000000000b757f: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; 
0x00000000000b7515: add byte ptr [rax - 0x80], al; inc dword ptr [rbx]; jne 0xb7520; ret; 
0x00000000000b751f: add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x000000000006a7ad: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000016e2d: add byte ptr [rax - 1], bh; ret; 
0x00000000000d713b: add byte ptr [rax - 4], bl; stc; jmp rsp; 
0x00000000000d6fbb: add byte ptr [rax - 9], bh; clc; jmp qword ptr [rax]; 
0x0000000000018099: add byte ptr [rax], 0; add al, ch; adc byte ptr ds:[rax + rax], al; add rsp, 0x80; add rsp, 8; ret; 
0x000000000002cd3a: add byte ptr [rax], 0; add al, ch; insd dword ptr [rdi], dx; ret; 
0x0000000000084d19: add byte ptr [rax], 0; add al, ch; mov esi, 0x48fffd43; add esp, 0x80; pop rbx; ret; 
0x0000000000053f15: add byte ptr [rax], 0; add al, ch; ret 0x51; 
0x000000000000b83d: add byte ptr [rax], 0; add al, ch; ret 0xffcd; 
0x000000000001fbea: add byte ptr [rax], 0; add bl, dh; ret; 
0x00000000000d983c: add byte ptr [rax], 0; add byte ptr [rax + 0x1a], bl; add byte ptr [rax], al; or al, 0x44; hlt; call qword ptr [rdi + 2]; 
0x000000000005184d: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000000228fd: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; adc eax, 0x2c74c0; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x000000000001d78a: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; call 0xfffffffffffdaf7e; jmp qword ptr [rsi + 0x2e]; 
0x000000000001ea45: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000000352db: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000352fb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000b688b: add byte ptr [rax], 0; add byte ptr [rax], al; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0xb6878; add rsp, 8; ret; 
0x000000000005695b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 1; syscall; 
0x00000000000b8aab: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ac0; ret; 
0x000000000003f16b: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000065bdb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x284d71]; ret; 
0x00000000000b75a3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rsi + 8]; ret; 
0x000000000003efab: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000004dc6b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000051b5b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000003f2bb: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000003f24b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000008c73: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000359eb: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000005688b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; syscall; 
0x0000000000084cd6: add byte ptr [rax], 0; add byte ptr [rbx + 0x31d2313b], cl; imul al; stosd dword ptr [rdi], eax; sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x00000000000736f9: add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000024adb: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000590bc: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000017ed1: add byte ptr [rax], 0; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000005194f: add byte ptr [rax], 0; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000518ef: add byte ptr [rax], 0; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000003e213: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000035f51: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d8d27: add byte ptr [rax], ah; add byte ptr [rax], al; sldt word ptr [rax]; add byte ptr [rbx], al; hlt; jmp qword ptr [rax]; 
0x0000000000055d4a: add byte ptr [rax], ah; add dword ptr [rax + 0x38], edi; syscall; 
0x00000000000e0e7f: add byte ptr [rax], ah; sar dl, cl; jmp qword ptr [rsi]; 
0x00000000000582dc: add byte ptr [rax], ah; std; push rbx; ret; 
0x00000000000e1aef: add byte ptr [rax], ah; sub ebx, edi; call rbx; 
0x00000000000e0ede: add byte ptr [rax], al; adc ah, dl; cli; jmp qword ptr [rsi + 7]; 
0x00000000000dffde: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; cld; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x00000000000dff4e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [rax], 0xfa0e8800; jmp qword ptr [rbx]; 
0x00000000000dff7e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; pushfq; add dword ptr [rax], 0xfa145800; jmp rdx; 
0x00000000000e0166: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x00000000000d9f4a: add byte ptr [rax], al; adc al, 0x6e; hlt; call qword ptr [rdi]; 
0x00000000000e22e2: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x1f6c0000], ah; sti; call qword ptr [rdx]; 
0x00000000000dc4ba: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; fadd dword ptr [rsi]; add byte ptr [rsp + rdx*2 - 9], ch; call qword ptr [rcx + 1]; 
0x00000000000da3ba: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; fsub dword ptr [rip - 0x7e440000]; hlt; call qword ptr [rdi]; 
0x00000000000d979a: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x9c000019; hlt; call qword ptr [rax]; 
0x00000000000e230a: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rbp - 0x1f640000], ah; sti; call qword ptr [rdx]; 
0x0000000000093f5e: add byte ptr [rax], al; adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000000e18f6: add byte ptr [rax], al; adc byte ptr [rbx + 0x17b40000], bl; sti; jmp qword ptr [rdx + 5]; 
0x00000000000e185e: add byte ptr [rax], al; adc ebx, edi; jmp qword ptr [rcx]; 
0x00000000000dffc9: add byte ptr [rax], al; add ah, ah; add dword ptr [rax], 0xfa1af000; jmp qword ptr [rax]; 
0x00000000000da7c9: add byte ptr [rax], al; add ah, ah; sub dword ptr [rax], eax; add al, ah; mov esi, esp; call qword ptr [rsi]; 
0x00000000000e26a9: add byte ptr [rax], al; add ah, al; test al, 0; add byte ptr [rax + 0x69], dl; cld; jmp qword ptr [rdx]; 
0x00000000000dffe1: add byte ptr [rax], al; add ah, bh; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x00000000000e28c1: add byte ptr [rax], al; add ah, bl; stosb byte ptr [rdi], al; add byte ptr [rax], al; cmp byte ptr [rdi - 4], ch; call qword ptr [rax]; 
0x00000000000de3d1: add byte ptr [rax], al; add ah, ch; add byte ptr gs:[rax], al; js 0xde442; clc; jmp qword ptr [rsi + 0xa]; 
0x00000000000e1cd1: add byte ptr [rax], al; add ah, ch; sahf; add byte ptr [rax], al; mov cl, 0xfb; jmp rdx; 
0x00000000000e04b1: add byte ptr [rax], al; add ah, cl; xchg byte ptr [rax], al; add al, cl; cli; jmp qword ptr [rcx]; 
0x00000000000e297e: add byte ptr [rax], al; add ah, dh; cld; jmp qword ptr [rcx]; 
0x00000000000dfdd9: add byte ptr [rax], al; add ah, dh; jg 0xdfddf; add byte ptr [rax + 7], dl; cli; jmp qword ptr [rbx]; 
0x00000000000df6d9: add byte ptr [rax], al; add ah, dh; js 0xdf6df; add byte ptr [rax - 0x11], ah; stc; jmp qword ptr [rdi]; 
0x00000000000e39d9: add byte ptr [rax], al; add ah, dh; mov ebx, 0x59800000; std; jmp qword ptr [rax]; 
0x00000000000ddeea: add byte ptr [rax], al; add al, 0x13; clc; jmp qword ptr [rdx]; 
0x00000000000de1ea: add byte ptr [rax], al; add al, 0x64; add byte ptr [rax], al; and byte ptr [rdi], bh; clc; jmp qword ptr [rdi + 0x11]; 
0x00000000000e1aea: add byte ptr [rax], al; add al, 0x9d; add byte ptr [rax], al; and byte ptr [rcx], ch; sti; call rbx; 
0x00000000000de5c5: add byte ptr [rax], al; add al, ah; add byte ptr [eax], al; and al, 0x83; clc; call qword ptr [rdx]; 
0x00000000000e34a5: add byte ptr [rax], al; add al, al; mov dh, 0; add byte ptr [rax + rax*2 - 3], dl; call qword ptr [rbx]; 
0x00000000000da7dd: add byte ptr [rax], al; add al, bh; sub dword ptr [rax], eax; add ah, ch; mov esi, esp; call qword ptr [rsi]; 
0x00000000000da3bd: add byte ptr [rax], al; add al, bl; and eax, 0x81bc0000; hlt; call qword ptr [rdi]; 
0x000000000001809a: add byte ptr [rax], al; add al, ch; adc byte ptr ds:[rax + rax], al; add rsp, 0x80; add rsp, 8; ret; 
0x000000000009e9bd: add byte ptr [rax], al; add al, ch; imul eax, eax, -0xa; jmp qword ptr [rsi + 0x2e]; 
0x000000000002cd3b: add byte ptr [rax], al; add al, ch; insd dword ptr [rdi], dx; ret; 
0x000000000006875f: add byte ptr [rax], al; add al, ch; leave; and bh, dl; jmp qword ptr [rsi + 0xf]; 
0x0000000000084d1a: add byte ptr [rax], al; add al, ch; mov esi, 0x48fffd43; add esp, 0x80; pop rbx; ret; 
0x000000000005c29a: add byte ptr [rax], al; add al, ch; mov fs, edi; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b36cf: add byte ptr [rax], al; add al, ch; pop rcx; jae 0xb36cb; jmp qword ptr [rsi + 0xf]; 
0x0000000000053f16: add byte ptr [rax], al; add al, ch; ret 0x51; 
0x000000000000b83e: add byte ptr [rax], al; add al, ch; ret 0xffcd; 
0x000000000007fd8a: add byte ptr [rax], al; add al, ch; sahf; lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b5cae: add byte ptr [rax], al; add al, ch; stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e37d5: add byte ptr [rax], al; add al, dh; mov ecx, 0x52940000; std; call qword ptr [rcx]; 
0x000000000005c9fd: add byte ptr [rax], al; add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000006c2de: add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x0000000000017cbd: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b65f3: add byte ptr [rax], al; add bh, bh; rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x0000000000018e3e: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x000000000005529f: add byte ptr [rax], al; add bl, ch; ret 0x8d48; 
0x000000000009ddd7: add byte ptr [rax], al; add bl, ch; ret; 
0x000000000004a2fd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000004e2ed: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004dc6d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000000c9d: add byte ptr [rax], al; add bl, dh; ret 6; 
0x000000000001fbeb: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000e22f9: add byte ptr [rax], al; add byte ptr [0xffffffffe0a00000], dl; sti; call qword ptr [rax]; 
0x00000000000e2321: add byte ptr [rax], al; add byte ptr [0xffffffffe0a80000], bh; sti; call qword ptr [rax]; 
0x00000000000850e9: add byte ptr [rax], al; add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000dec65: add byte ptr [rax], al; add byte ptr [rax + 0x1400006e], al; ret 0xfff8; 
0x00000000000d974d: add byte ptr [rax], al; add byte ptr [rax + 0x19], ch; add byte ptr [rax], al; cld; cmp dh, ah; jmp rdx; 
0x00000000000d983d: add byte ptr [rax], al; add byte ptr [rax + 0x1a], bl; add byte ptr [rax], al; or al, 0x44; hlt; call qword ptr [rdi + 2]; 
0x00000000000d9f45: add byte ptr [rax], al; add byte ptr [rax + 0x21], ah; add byte ptr [rax], al; adc al, 0x6e; hlt; call qword ptr [rdi]; 
0x00000000000da55d: add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; add byte ptr [rax], al; jl 0xda4ea; hlt; call qword ptr [rdi + 1]; 
0x000000000005600d: add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; 
0x000000000005600d: add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; ret; 
0x00000000000da535: add byte ptr [rax], al; add byte ptr [rax + 0x27], dl; add byte ptr [rax], al; and al, 0x84; hlt; call qword ptr [rdi]; 
0x00000000000735c6: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000086686: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000008a378: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x00000000000762d8: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000dd86d: add byte ptr [rax], al; add byte ptr [rax + 0x2c00005a], cl; sal edi, 1; jmp qword ptr [rdx]; 
0x00000000000b4721: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000002429d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000001d39d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000000b47a4: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xa472; 
0x000000000002944f: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000005184e: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000000dbf35: add byte ptr [rax], al; add byte ptr [rax + 0x41], dl; add byte ptr [rax], al; xor al, 0xdd; cmc; jmp qword ptr [rdi + 0x2b]; 
0x0000000000056a44: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x000000000005f68a: add byte ptr [rax], al; add byte ptr [rax + 0x4c], dl; mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000000da295: add byte ptr [rax], al; add byte ptr [rax + 0x54000024], dh; jl 0xda293; jmp qword ptr [rdi + 2]; 
0x00000000000e1585: add byte ptr [rax], al; add byte ptr [rax + 0x54000097], ah; add edi, ebx; jmp qword ptr [rbx + 1]; 
0x000000000007c963: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x00000000000182b3: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; and al, 4; jne 0x182c2; add rsp, 0x18; ret; 
0x00000000000a051f: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x00000000000a05ed: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0xc749; 
0x00000000000789f4: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000084ecd: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x0000000000084ecd: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x0000000000084ebd: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000084ebd: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x0000000000084edd: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x0000000000084edd: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x000000000004e18d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000005761d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000005761d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x57630; ret; 
0x00000000000da77d: add byte ptr [rax], al; add byte ptr [rax + 0xc000029], bl; mov esi, esp; call qword ptr [rbx]; 
0x00000000000590ef: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x00000000000590ef: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x0000000000059196: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000b688d: add byte ptr [rax], al; add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rsi + rbx*8 + 0x48], dh; add esp, 8; ret; 
0x0000000000056282: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x0000000000016bbd: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000005dddd: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x0000000000082a0d: add byte ptr [rax], al; add byte ptr [rax + 0xfe580f5], cl; je 0x82a30; add rax, 2; ret; 
0x0000000000093f4a: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000005695d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; syscall; 
0x0000000000093156: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000092a89: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x0000000000094153: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x00000000000d8fd1: add byte ptr [rax], al; add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x00000000000c7e89: add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000000dbea1: add byte ptr [rax], al; add byte ptr [rax + rax*2 - 0x66580000], bh; cmc; call rsp; 
0x00000000000da999: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov eax, 0xad00002b; fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000d8fcd: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x00000000000e0af5: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x00000000000dffdd: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; cld; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x00000000000dff4d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [rax], 0xfa0e8800; jmp qword ptr [rbx]; 
0x00000000000dff7d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; pushfq; add dword ptr [rax], 0xfa145800; jmp rdx; 
0x00000000000e0165: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x00000000000da681: add byte ptr [rax], al; add byte ptr [rax + rbp - 0x76380000], bl; hlt; call qword ptr [rsi]; 
0x00000000000e3681: add byte ptr [rax], al; add byte ptr [rax + rdi*4 + 0x48d80000], bl; std; call qword ptr [rcx]; 
0x00000000000bd8bd: add byte ptr [rax], al; add byte ptr [rax - 0x1f0008f0], ah; adc edi, esi; jmp qword ptr [rax]; 
0x0000000000094036: add byte ptr [rax], al; add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x000000000007f3f6: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000022968: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x2c7452; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000021641: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000006ac4d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xff88; 
0x000000000005685d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa8; 
0x00000000000a69ed: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000573f1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000082a6d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000082a4d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000082aad: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000082a5d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000082a9d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000016c1d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000027f3d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x31ffffff], 0xf6; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000008f79d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x5bffffff], 0x64; mov eax, dword ptr [rax]; ret; 
0x0000000000066a87: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000066a5e: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000000663be: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x00000000000da99d: add byte ptr [rax], al; add byte ptr [rax - 0x52ffffd5], bh; fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000d979d: add byte ptr [rax], al; add byte ptr [rax - 0x63ffffe7], bh; hlt; call qword ptr [rax]; 
0x000000000006e5f6: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000006e5a5: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e954: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e906: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e857: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e7fb: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e55b: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e50d: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0ac: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000e0e25: add byte ptr [rax], al; add byte ptr [rax - 0x70], al; add byte ptr [rax], al; je 0xe0dfe; cli; jmp qword ptr [rdx]; 
0x0000000000049b58: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000654db: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x000000000009c97d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x24e1d9; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000005a92d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x28d9c9; ret; 
0x00000000000591d6: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x292208; add rsp, 8; ret; 
0x00000000000654f9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000065517: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x0000000000083994: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; out dx, al; call rbx; 
0x0000000000078f69: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x26bbad; jmp rax; 
0x0000000000023a3d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004be7d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000065bdd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x284d71; ret; 
0x000000000005d68d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28de81; ret; 
0x000000000002286d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2c4889; ret; 
0x0000000000018523: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp dword ptr [rbx + rcx*4 + 0x59], ecx; sub byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x0000000000083886: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; je 0x838b1; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000083b3c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; je 0x83b67; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000017bf0: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0x17c17; call rdx; 
0x000000000007f7fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000003966d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003986d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000b7372: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [rax + 0x39], cl; or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x0000000000038d1d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e7cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000038edd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000000228fe: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc eax, 0x2c74c0; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x00000000000233db: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2c43e3; ret; 
0x00000000000233bb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2c43fb; ret; 
0x000000000008df2d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8d860; add rsp, 0xd8; ret; 
0x000000000001a6eb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000001df43: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c433ca8; ret; 
0x000000000001d78b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffdaf7e; jmp qword ptr [rsi + 0x2e]; 
0x000000000002289d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000a96a3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000000a978a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x000000000001c6e5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x000000000001b6f2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000000a6df: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0xa6f6; syscall; 
0x000000000005959d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x595c4; ret; 
0x000000000001ccb1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000002800d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000008399c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; call rbx; 
0x0000000000083c6e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r12; call rbx; 
0x000000000002d79d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000001affc: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000001b144: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000006d8d4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000025b2d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000b782d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000077d55: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000005586d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xede9; 
0x00000000000195ab: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x000000000001ea46: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000001a4c1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000016ab7: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sal byte ptr [rbp + 8], 1; add rsp, 0x148; ret; 
0x0000000000062376: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x000000000008189d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000007aa5b: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000008ca8: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000008c67: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x00000000000083c0: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000009ef06: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000000de965: add byte ptr [rax], al; add byte ptr [rax - 0x7bffff95], al; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax]; 
0x0000000000065368: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jl 0x65393; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x000000000007f214: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; js 0x7f24b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000005005d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000a0d5d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x0000000000018cad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000009db8d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000008d668: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000558bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4909; 
0x0000000000035043: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b780d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000008084e: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000483a1: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000003506d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000000ee6d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002fd5d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000000b2c70: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000003e184: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000000b7513: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; inc dword ptr [rbx]; jne 0xb7520; ret; 
0x000000000006a7ab: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000016e2b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000e39d6: add byte ptr [rax], al; add byte ptr [rax], al; add ah, dh; mov ebx, 0x59800000; std; jmp qword ptr [rax]; 
0x0000000000017cbb: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000000c9b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret 6; 
0x000000000002285b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000005600b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; 
0x000000000005600b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; ret; 
0x000000000001d39b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000084ecb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x0000000000084ecb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x0000000000084ebb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000084ebb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x0000000000084edb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x0000000000084edb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x000000000004e18b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000005761b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000005dddb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x00000000000d8fcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x00000000000bd8bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1f0008f0], ah; adc edi, esi; jmp qword ptr [rax]; 
0x000000000006ac4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xff88; 
0x000000000005685b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa8; 
0x0000000000082a6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000082a4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000082aab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000082a5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000082a9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000016c1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000008f79b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x5bffffff], 0x64; mov eax, dword ptr [rax]; ret; 
0x000000000009c97b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x24e1d9; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000005a92b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x28d9c9; ret; 
0x0000000000023a3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000005d68b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28de81; ret; 
0x000000000002286b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2c4889; ret; 
0x000000000007f7fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000002289b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000005959b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x595c4; ret; 
0x000000000002d79b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x0000000000025b2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000b782b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000008189b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000005005b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000a0d5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x0000000000018cab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000558bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4909; 
0x00000000000b780b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000000ee6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002fd5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000002281b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000000c99: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret 6; 
0x00000000000bd8b9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1f0008f0], ah; adc edi, esi; jmp qword ptr [rax]; 
0x0000000000008648: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000e2584: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + 0x3da00000], ah; cld; call qword ptr [rdx]; 
0x0000000000000c82: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 6; 
0x0000000000000c22: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret 6; 
0x0000000000000ce2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 6; 
0x00000000000c9d12: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000000ca202: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x000000000000195a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x6e0; 
0x0000000000001e0a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000d8fcc: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x0000000000055c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; sar byte ptr [rax + 0x3d], cl; syscall; 
0x000000000005a93b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x290baa05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000004dbab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000004d6db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000003ea4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000000231eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000270fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000005029b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000081d2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000000300ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000002e9bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000000e2586: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + 0x3da00000], ah; cld; call qword ptr [rdx]; 
0x000000000001ce1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x00000000000352cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000352eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000004d69b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000004beeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x00000000000dc82a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 9], ah; jmp rsi; 
0x0000000000023f9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x00000000000b1d79: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x26; syscall; 
0x0000000000059039: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x29; syscall; 
0x0000000000058d59: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x0000000000068f19: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000002c94b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x00000000000575bb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000082a2c: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000005d6e5: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009150f: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000051ba4: add byte ptr [rax], al; add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x00000000000352dc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000352ec: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000352fc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000352cc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000017cbc: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000023f0c: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000000cbd3c: add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000000caeec: add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x0000000000051b17: add byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x00000000000b67ac: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0xb679c; add rsp, 0x18; ret; 
0x00000000000b688c: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0xb6878; add rsp, 8; ret; 
0x000000000002d9ea: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008f39a: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000000c84: add byte ptr [rax], al; add byte ptr [rax], al; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 6; 
0x0000000000000c24: add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret 6; 
0x00000000000b67b4: add byte ptr [rax], al; add byte ptr [rax], al; je 0xb679c; add rsp, 0x18; ret; 
0x00000000000b6894: add byte ptr [rax], al; add byte ptr [rax], al; je 0xb6878; add rsp, 8; ret; 
0x00000000000b68f4: add byte ptr [rax], al; add byte ptr [rax], al; je 0xb68d4; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x000000000006d70d: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x000000000004e7bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000004e7cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000004e7dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000004e7ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000004e7fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000004e73c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x000000000004e74c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000004e75c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000004e76c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000004e77c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000004e78c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000004e79c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000004e7ac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000049b57: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000004e72c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x000000000009c97c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x24e1d9]; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000005a92c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x28d9c9]; ret; 
0x0000000000078f68: add byte ptr [rax], al; add byte ptr [rax], al; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x0000000000009ad5: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x000000000004d69c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000004beec: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000004d6ac: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000004befc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000001cb5c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000004e18c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004db6c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000004db8c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000004e19c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000004db7c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000005600c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; 
0x000000000005600c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; ret; 
0x0000000000084ecc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x0000000000084ecc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x0000000000084ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x0000000000084ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x0000000000084edc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x0000000000084edc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000005761c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000002281c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000093f49: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000005695c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000094152: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000004d6dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000000b8aac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ac0; ret; 
0x00000000000b8ccc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ce0; ret; 
0x000000000004dbac: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000055fcc: add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000003ea4c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003f16c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000590e4: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000005959c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000007f3f5: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x00000000000908c8: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000908c0: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000021760: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000000b693c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000002177c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000022967: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x2c7452], 0; ret; 
0x0000000000068d8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dcc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000005759c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000008f79c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x58; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000002280c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x0000000000016c1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000082a4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x0000000000082a5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x0000000000082a6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x0000000000082a7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x0000000000082a8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x0000000000082a9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x0000000000082aac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000009151c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000008beac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000004d62c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000004be7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000007f7fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000002288c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b690c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000b694c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000000b699c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000000b695c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000002342c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c6a0a], eax; ret; 
0x00000000000232ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c456d], rax; ret; 
0x0000000000065bdc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x284d71]; ret; 
0x000000000005d68c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28de81]; ret; 
0x000000000002286c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x00000000000b46cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x00000000000b75a4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 8]; ret; 
0x0000000000081d2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000002289c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000004dbec: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000009cecf: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000038d1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003efac: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000002d79c: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000004e2ec: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004dc6c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000909bc: add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x000000000004fa2c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000035c5c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000001ce1c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x0000000000051b5c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000002fc5c: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000003ebdc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003f2bc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000003eb5c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000003f24c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000057677: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000058e57: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000084ea7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000084ea7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x0000000000057647: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000052a17: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x0000000000052a17: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; ret; 
0x0000000000059457: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, edi; ror ax, 8; ret; 
0x0000000000059007: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x36; syscall; 
0x000000000000a8a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, -0x58; add rax, qword ptr fs:[0]; ret; 
0x0000000000058d28: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000b1d7a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x26; syscall; 
0x000000000005903a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x29; syscall; 
0x0000000000058e2b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x31; syscall; 
0x0000000000058d5a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000068f1a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000094035: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000001d02c: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000008f782: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rip + 0x258a5b], 1; pop rbx; ret; 
0x0000000000000ce4: add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 6; 
0x000000000000877b: add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x00000000000231ec: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000001b70c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000cad0c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000000cb4a4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000000c9d14: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000000ca204: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x000000000000195c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x6e0; 
0x0000000000001e0c: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000c9d0c: add byte ptr [rax], al; add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000000083bf: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x83ca; call rax; 
0x0000000000008c66: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x8c78; jmp rax; 
0x0000000000008ca7: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x8cb8; jmp rax; 
0x000000000008189c: add byte ptr [rax], al; add byte ptr [rax], al; test rsi, rsi; jne 0x818a9; xor rax, rax; ret; 
0x000000000004a2fc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000008136c: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000000185b8: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000005688c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; syscall; 
0x000000000008188c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000055c5c: add byte ptr [rax], al; add byte ptr [rax], al; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000004e56c: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000000e1e11: add byte ptr [rax], al; add byte ptr [rax], ch; add byte ptr [rax], al; mov bl, 0xfb; call qword ptr [rdi]; 
0x00000000000d8fd5: add byte ptr [rax], al; add byte ptr [rax], cl; adc esi, esp; jmp qword ptr [rcx + 1]; 
0x00000000000dc825: add byte ptr [rax], al; add byte ptr [rax], dh; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 9], ah; jmp rsi; 
0x00000000000e22f5: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [0xffffffffe0a00000], dl; sti; call qword ptr [rax]; 
0x00000000000dd869: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x2c00005a], cl; sal edi, 1; jmp qword ptr [rdx]; 
0x00000000000d9799: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x63ffffe7], bh; hlt; call qword ptr [rax]; 
0x00000000000d8fce: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x00000000000e0af6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x0000000000056574: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000009d03d: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x000000000008523b: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x00000000000521ec: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000000918a2: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x00000000000917e2: add byte ptr [rax], al; add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000007a575: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000055c5d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; sar byte ptr [rax + 0x3d], cl; syscall; 
0x0000000000091a03: add byte ptr [rax], al; add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x0000000000084e3d: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000000a905f: add byte ptr [rax], al; add byte ptr [rbp + 0x39], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000093d0e: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000005770d: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x00000000000567a4: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000085109: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x0000000000016db4: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x00000000000205f5: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000056b34: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x00000000000a91ed: add byte ptr [rax], al; add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000a910f: add byte ptr [rax], al; add byte ptr [rbp + 0x6e], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000058c07: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000574a3: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x00000000000a9598: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x0000000000068e7c: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000009cf5a: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000002417d: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000001998e: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000008518c: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x00000000000093ee: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; mov eax, 0xc90004ff; ret; 
0x0000000000009548: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; pop rsi; inc byte ptr [rax + rax]; leave; ret; 
0x000000000000965d: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; std; add al, 0; leave; ret; 
0x00000000000deb61: add byte ptr [rax], al; add byte ptr [rbp + rbp*2], bh; add byte ptr [rax - 0x42], bl; clc; call qword ptr [rbx]; 
0x00000000000d9b69: add byte ptr [rax], al; add byte ptr [rbp + rbx + 0x5ab00000], al; hlt; call qword ptr [rdi]; 
0x000000000003f2f8: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x1d], cl; mov esi, 0x490007f0; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000762d0: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000291e9: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x0000000000028807: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000007f96c: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x000000000007fa66: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000000e3371: add byte ptr [rax], al; add byte ptr [rbp + rsi*4 + 0x3d980000], cl; std; jmp qword ptr [rbx + 1]; 
0x00000000000e22e6: add byte ptr [rax], al; add byte ptr [rbp - 0x1f6c0000], ah; sti; call qword ptr [rdx]; 
0x0000000000058cb8: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000000c7e81: add byte ptr [rax], al; add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x0000000000056278: add byte ptr [rax], al; add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000007c875: add byte ptr [rax], al; add byte ptr [rbp - 0x76ba7fec], cl; call 0x1fff1c3; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000094553: add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ret 0xc748; 
0x000000000008f783: add byte ptr [rax], al; add byte ptr [rbx + 0x258a5b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000005a93d: add byte ptr [rax], al; add byte ptr [rbx + 0x290baa05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000056b8d: add byte ptr [rax], al; add byte ptr [rbx + 0x29485205], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000084cd7: add byte ptr [rax], al; add byte ptr [rbx + 0x31d2313b], cl; imul al; stosd dword ptr [rdi], eax; sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000065d39: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000001a161: add byte ptr [rax], al; add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000004e1cd: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000004dbad: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000004d6dd: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000039a8d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003988d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003968d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003ea4d: add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x000000000001e3f2: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000213a4: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000001a039: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000006806d: add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000007ffa2: add byte ptr [rax], al; add byte ptr [rbx + 0x7401046e], al; mov rax, rdx; pop rbx; ret; 
0x000000000003f0fd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f08d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f01d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000000e0169: add byte ptr [rax], al; add byte ptr [rbx + rax*4 + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x00000000000de929: add byte ptr [rax], al; add byte ptr [rbx + rbp*2], al; add byte ptr [rax - 0x5c], ah; clc; call qword ptr [rcx]; 
0x00000000000de951: add byte ptr [rax], al; add byte ptr [rbx + rbp*2], ch; add byte ptr [rax - 0x5c], bh; clc; call qword ptr [rcx]; 
0x00000000000e2939: add byte ptr [rax], al; add byte ptr [rbx + rbp*4], dl; add byte ptr [rax - 0x26], al; cld; call qword ptr [rax]; 
0x0000000000065a27: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000007a6ed: add byte ptr [rax], al; add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x000000000009ce2f: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x379f0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000736fa: add byte ptr [rax], al; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000000ddb21: add byte ptr [rax], al; add byte ptr [rbx*2 - 0x54810000], bh; bnd jmp qword ptr [rbx]; 
0x00000000000e1ae9: add byte ptr [rax], al; add byte ptr [rbx*4 + 0x29200000], al; sti; call rbx; 
0x00000000000d8d2e: add byte ptr [rax], al; add byte ptr [rbx], al; hlt; jmp qword ptr [rax]; 
0x00000000000270fd: add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000001b434: add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000002339e: add byte ptr [rax], al; add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000019e9f: add byte ptr [rax], al; add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x0000000000092080: add byte ptr [rax], al; add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x000000000007f2fa: add byte ptr [rax], al; add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000006e1ff: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x0000000000079fb8: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x0000000000051b25: add byte ptr [rax], al; add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000020e1e: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000076cc6: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x000000000008873a: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x0000000000017343: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0x149; 
0x000000000005029d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000dff81: add byte ptr [rax], al; add byte ptr [rcx + rax*4 + 0x14580000], bl; cli; jmp rdx; 
0x00000000000e2709: add byte ptr [rax], al; add byte ptr [rcx + rbp*4], ah; add byte ptr [rax], al; sub byte ptr [rdx - 4], 0xff; ret; 
0x00000000000da729: add byte ptr [rax], al; add byte ptr [rcx + rbp], al; add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x00000000000e1759: add byte ptr [rax], al; add byte ptr [rcx + rbx*4], dh; add byte ptr [rax + 9], dl; sti; jmp qword ptr [rsi]; 
0x00000000000bb77d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000001dd18: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000055f3a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x18], al; syscall; 
0x0000000000083787: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000001c93d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000001e1dc: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000016bd5: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; jne 0x16bfc; add rsp, 0x118; ret; 
0x0000000000024adc: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082e30: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000081c6d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000021761: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000007ddaa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000000bae8d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000000e0f79: add byte ptr [rax], al; add byte ptr [rcx + rdx*4 - 0x21800000], dl; cli; jmp qword ptr [rdx]; 
0x00000000000e0f49: add byte ptr [rax], al; add byte ptr [rcx + rdx*4], ah; add byte ptr [rdx + 0x77], bh; bnd jmp qword ptr [rcx]; 
0x00000000000daf99: add byte ptr [rax], al; add byte ptr [rcx + rsi - 0x2a500000], dh; hlt; jmp rsi; 
0x000000000008e48c: add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000016ce0: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000000b3109: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000000d6fe: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000089772: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x000000000002dc29: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x000000000002dbe2: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000300ad: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000002e9bd: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000027105: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000b67ad: add byte ptr [rax], al; add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x00000000000a0b29: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x7501; 
0x00000000000d9dde: add byte ptr [rax], al; add byte ptr [rcx - 0xc], ch; call qword ptr [rdi]; 
0x000000000001ea3f: add byte ptr [rax], al; add byte ptr [rcx - 1], al; xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000035470: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x0000000000035496: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x00000000000e0af9: add byte ptr [rax], al; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x00000000000ddee6: add byte ptr [rax], al; add byte ptr [rcx], ah; add byte ptr [rbx + rdx], al; clc; jmp qword ptr [rdx]; 
0x00000000000940f5: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x00000000000590bd: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000052bcf: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xd129; 
0x0000000000093654: add byte ptr [rax], al; add byte ptr [rcx], dh; imul al; ret 0xf74e; 
0x0000000000079482: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000017ed2: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000008104a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x0000000000016bb3: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000051950: add byte ptr [rax], al; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000e2589: add byte ptr [rax], al; add byte ptr [rdi + 0x3da00000], ah; cld; call qword ptr [rdx]; 
0x00000000000518f0: add byte ptr [rax], al; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000b65ee: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x00000000000e1d31: add byte ptr [rax], al; add byte ptr [rdi + rbx*4], cl; add byte ptr [rax], bh; mov dl, 0xfb; jmp qword ptr [rbp]; 
0x0000000000070b33: add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000000d8d29: add byte ptr [rax], al; add byte ptr [rdi + rcx], al; add byte ptr [rax], al; add esi, esp; jmp qword ptr [rax]; 
0x00000000000dbd99: add byte ptr [rax], al; add byte ptr [rdi + rdi + 0x2a300000], dh; cmc; jmp qword ptr [rbx]; 
0x00000000000dfd71: add byte ptr [rax], al; add byte ptr [rdi + rdi*2 + 0x6e80000], cl; cli; jmp qword ptr [rbx]; 
0x00000000000dfd89: add byte ptr [rax], al; add byte ptr [rdi + rdi*2 + 0x7000000], ah; cli; jmp qword ptr [rbx]; 
0x00000000000dfda1: add byte ptr [rax], al; add byte ptr [rdi + rdi*2 + 0x7180000], bh; cli; jmp qword ptr [rsi]; 
0x00000000000dbcf1: add byte ptr [rax], al; add byte ptr [rdi + rdi], cl; add byte ptr [rax], al; sbb byte ptr [rdi], ah; cmc; call qword ptr [rsi]; 
0x00000000000da549: add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rax], dh; test ah, dh; call qword ptr [rsi]; 
0x00000000000dfd8e: add byte ptr [rax], al; add byte ptr [rdi], al; cli; jmp qword ptr [rbx]; 
0x00000000000da501: add byte ptr [rax], al; add byte ptr [rdi], bl; add byte ptr [rax], al; test al, 0x83; hlt; jmp qword ptr [rax]; 
0x0000000000016b94: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000090aa4: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x000000000003e214: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000051aa5: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000003f24d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000003f2bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000051b5d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x000000000002fc5d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000001ce1d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x0000000000035c5d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000352cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000352fd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000352ed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000810bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x81100; add rax, rdi; ret; 
0x00000000000352dd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000079fb2: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x0000000000016b69: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b71: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b79: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000056a25: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x0000000000084ff7: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x0000000000056692: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000000942d5: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x00000000000861b0: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x000000000004d69d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000004beed: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x00000000000b67b5: add byte ptr [rax], al; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x00000000000590ea: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000000de899: add byte ptr [rax], al; add byte ptr [rdx + rbp*2 - 0x60d00000], dh; clc; call qword ptr [rdx]; 
0x00000000000e1859: add byte ptr [rax], al; add byte ptr [rdx + rbx*4], dh; add byte ptr [rax + 0x11], al; sti; jmp qword ptr [rcx]; 
0x00000000000b68f5: add byte ptr [rax], al; add byte ptr [rdx + rbx*8 + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x000000000005a961: add byte ptr [rax], al; add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x28be4c; pop rbx; ret; 
0x00000000000d9021: add byte ptr [rax], al; add byte ptr [rdx + rdx], bh; add byte ptr [rax], al; sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x00000000000dc82e: add byte ptr [rax], al; add byte ptr [rdx - 9], ah; jmp rsi; 
0x00000000000dc21e: add byte ptr [rax], al; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x00000000000850e4: add byte ptr [rax], al; add byte ptr [rip + 0x410000], dil; je 0x85118; mov eax, 0x101; syscall; 
0x000000000008b012: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x0000000000055f35: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, r13d; syscall; 
0x00000000000590e5: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000035f52: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000023f9d: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000080fb2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000000dc409: add byte ptr [rax], al; add byte ptr [rsi + rax*2], ah; add byte ptr [rax], al; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x00000000000b6895: add byte ptr [rax], al; add byte ptr [rsi + rbx*8 + 0x48], dh; add esp, 8; ret; 
0x00000000000e1236: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000000e11ce: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000000e1202: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000000dbbf1: add byte ptr [rax], al; add byte ptr [rsi + rdi], cl; add byte ptr [rax], al; sbb byte ptr [rdi], bl; cmc; jmp qword ptr [rbx]; 
0x00000000000b1d7b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x26; syscall; 
0x000000000005903b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x29; syscall; 
0x0000000000058d5b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x0000000000068f1b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000004befd: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000002096e: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000000dc219: add byte ptr [rax], al; add byte ptr [rsp + rax*2], dh; add byte ptr [rax], al; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x00000000000e1a31: add byte ptr [rax], al; add byte ptr [rsp + rbx*4], cl; add al, cl; and al, 0xfb; call qword ptr [rax]; 
0x00000000000d9239: add byte ptr [rax], al; add byte ptr [rsp + rdx], dl; add al, ah; and al, 0xf4; jmp qword ptr [rdx + 1]; 
0x00000000000de1e9: add byte ptr [rax], al; add byte ptr [rsp], al; add byte ptr [rax], al; and byte ptr [rdi], bh; clc; jmp qword ptr [rdi + 0x11]; 
0x00000000000e2231: add byte ptr [rax], al; add byte ptr [rsp], cl; add byte ptr [rax - 0x23], cl; sti; jmp qword ptr [rbp]; 
0x00000000000e13ae: add byte ptr [rax], al; add ch, dh; cli; jmp qword ptr [rsi]; 
0x000000000009aa9e: add byte ptr [rax], al; add cl, ch; ret 0xff9f; 
0x000000000006c518: add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000062dd6: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x0000000000063623: add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000b569a: add byte ptr [rax], al; add cl, ch; retf 0xfffc; jmp qword ptr [rsi + 0xf]; 
0x000000000009d0e2: add byte ptr [rax], al; add cl, ch; xchg eax, esi; fdecstp; jmp qword ptr [rsi + 0xf]; 
0x0000000000009ad6: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000777d6: add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000006c020: add byte ptr [rax], al; add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000005f22c: add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000002c94d: add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x00000000000575bd: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000004f9f1: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000000940f6: add byte ptr [rax], al; add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000d8d2f: add byte ptr [rax], al; add esi, esp; jmp qword ptr [rax]; 
0x0000000000017db7: add byte ptr [rax], al; add qword ptr [rip + 0x2d35c7], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082a2e: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000005bacc: add byte ptr [rax], al; add rax, qword ptr [r14 + 0x10]; add r14, 0x18; call rax; 
0x000000000005be1f: add byte ptr [rax], al; add rax, qword ptr [r15 + 0x10]; call rax; 
0x0000000000080e63: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x0000000000081b40: add byte ptr [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000081190: add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000b3276: add byte ptr [rax], al; add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000000295c8: add byte ptr [rax], al; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000001b7d2: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000005d765: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000942dc: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000002031b: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000056699: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x0000000000081f11: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056a2c: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x0000000000053f1c: add byte ptr [rax], al; add rsp, 0x80; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000a42c: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000007d274: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000065d33: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x00000000000707b5: add byte ptr [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000001a3cb: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000009d137: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000005824e: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000016e4e: add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000002daf6: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000d908a: add byte ptr [rax], al; and al, 0x15; hlt; call qword ptr [rdi]; 
0x00000000000dc40a: add byte ptr [rax], al; and al, 0x46; add byte ptr [rax], al; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x00000000000de5ca: add byte ptr [rax], al; and al, 0x83; clc; call qword ptr [rdx]; 
0x00000000000da53a: add byte ptr [rax], al; and al, 0x84; hlt; call qword ptr [rdi]; 
0x00000000000e270a: add byte ptr [rax], al; and al, 0xa9; add byte ptr [rax], al; sub byte ptr [rdx - 4], 0xff; ret; 
0x00000000000d843e: add byte ptr [rax], al; and byte ptr [rbx - 0xd], bl; call qword ptr [rdx]; 
0x00000000000dc45e: add byte ptr [rax], al; and byte ptr [rbx - 9], dl; call qword ptr [rbx]; 
0x00000000000e1aee: add byte ptr [rax], al; and byte ptr [rcx], ch; sti; call rbx; 
0x00000000000de1ee: add byte ptr [rax], al; and byte ptr [rdi], bh; clc; jmp qword ptr [rdi + 0x11]; 
0x00000000000d9506: add byte ptr [rax], al; and byte ptr [rdi], dl; add byte ptr [rax], al; xchg eax, esp; xor dh, ah; jmp rdi; 
0x00000000000dc40e: add byte ptr [rax], al; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x0000000000051ba6: add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x00000000000e0e7e: add byte ptr [rax], al; and dl, dl; cli; jmp qword ptr [rsi]; 
0x000000000008046b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e7db: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000008053b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081deb: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000008049b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x0000000000036991: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000037263: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000036996: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000187db: add byte ptr [rax], al; and edx, 0x7fffffff; mov dword ptr [r8], edx; mov dword ptr [rsi], edx; ret; 
0x00000000000352de: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000352ee: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000352fe: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000352ce: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000810be: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x81100; add rax, rdi; ret; 
0x000000000004a3e0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000082604: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x000000000002fc3e: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000081434: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x00000000000814c2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000000d6d92: add byte ptr [rax], al; call 0x390d65c6; je 0xd6d9b; add byte ptr [rax], bl; clc; call qword ptr [rax + 0x74]; 
0x000000000000a41e: add byte ptr [rax], al; call 0x569c0; cmp eax, -1; je 0xa4fb; add rsp, 0x98; ret; 
0x000000000001809b: add byte ptr [rax], al; call 0x590e0; add rsp, 0x80; add rsp, 8; ret; 
0x0000000000075fa6: add byte ptr [rax], al; call 0x590e0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000000181f0: add byte ptr [rax], al; call 0x590e0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x0000000000084d1b: add byte ptr [rax], al; call 0x590e0; add rsp, 0x80; pop rbx; ret; 
0x000000000006a98b: add byte ptr [rax], al; call 0x590e0; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000017e16: add byte ptr [rax], al; call 0xaa30; xor eax, eax; ret; 
0x00000000000d766a: add byte ptr [rax], al; call 0xffffffffad0d720d; mov dl, 0; add byte ptr [rax - 0x5f], ch; sti; jmp rax; 
0x000000000007f231: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000009f3c: add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x0000000000017cbe: add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000017bcb: add byte ptr [rax], al; call rax; 
0x0000000000083750: add byte ptr [rax], al; call rbx; 
0x00000000000cbd3e: add byte ptr [rax], al; call rdi; 
0x0000000000017b05: add byte ptr [rax], al; call rdx; 
0x00000000000caeee: add byte ptr [rax], al; call rsp; 
0x000000000006e5f7: add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000006e5a6: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e955: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e907: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e858: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e7fc: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e55c: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e50e: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0ad: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000d6e92: add byte ptr [rax], al; clc; call qword ptr [rax]; 
0x00000000000d8bd6: add byte ptr [rax], al; clc; div bl; jmp qword ptr [rdx]; 
0x0000000000051c24: add byte ptr [rax], al; clc; jg 0x51c20; int1; mov eax, eax; ret; 
0x00000000000d6b02: add byte ptr [rax], al; clc; mov dh, 0xf7; call rsp; 
0x00000000000d9fd6: add byte ptr [rax], al; clc; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rsi]; 
0x00000000000d6d42: add byte ptr [rax], al; clc; sbb al, 0xf8; jmp qword ptr [rax]; 
0x00000000000d6232: add byte ptr [rax], al; clc; sub ah, dh; jmp qword ptr [rax]; 
0x00000000000da7de: add byte ptr [rax], al; clc; sub dword ptr [rax], eax; add ah, ch; mov esi, esp; call qword ptr [rsi]; 
0x00000000000dffe2: add byte ptr [rax], al; cld; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x00000000000d9752: add byte ptr [rax], al; cld; cmp dh, ah; jmp rdx; 
0x00000000000e13af: add byte ptr [rax], al; cmc; cli; jmp qword ptr [rsi]; 
0x00000000000b1dd8: add byte ptr [rax], al; cmove edx, eax; call 0x886d0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000051b51: add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x0000000000051b19: add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x000000000002e7ec: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000009d103: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000d661a: add byte ptr [rax], al; cmp ah, cl; hlt; jmp qword ptr [rax + 0x46]; 
0x00000000000d9022: add byte ptr [rax], al; cmp al, 0x12; add byte ptr [rax], al; sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x00000000000ddb22: add byte ptr [rax], al; cmp al, 0x5d; add byte ptr [rax], al; jg 0xddad5; bnd jmp qword ptr [rbx]; 
0x00000000000e2322: add byte ptr [rax], al; cmp al, 0xa5; add byte ptr [rax], al; test al, 0xe0; sti; call qword ptr [rax]; 
0x00000000000e29b2: add byte ptr [rax], al; cmp al, 0xf4; cld; jmp rsp; 
0x00000000000d73fa: add byte ptr [rax], al; cmp al, cl; cli; call qword ptr [rax - 0x5e]; 
0x00000000000d7782: add byte ptr [rax], al; cmp al, cl; sti; jmp rax; 
0x00000000000d6f9a: add byte ptr [rax], al; cmp bl, dl; clc; call qword ptr [rax]; 
0x00000000000b67ae: add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0xb679c; add rsp, 0x18; ret; 
0x00000000000d762a: add byte ptr [rax], al; cmp byte ptr [rbx - 0x4f170005], dl; add byte ptr [rax], al; test al, 0x93; sti; jmp qword ptr [rax]; 
0x00000000000d7002: add byte ptr [rax], al; cmp byte ptr [rcx + rdi*8], cl; call qword ptr [rax - 0x79]; 
0x00000000000b688e: add byte ptr [rax], al; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0xb6878; add rsp, 8; ret; 
0x00000000000b68ee: add byte ptr [rax], al; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0xb68d4; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x00000000000e28c6: add byte ptr [rax], al; cmp byte ptr [rdi - 4], ch; call qword ptr [rax]; 
0x00000000000d6d1a: add byte ptr [rax], al; cmp byte ptr [rdi], dl; clc; jmp qword ptr [rax]; 
0x00000000000d61b2: add byte ptr [rax], al; cmp byte ptr [rdx], bl; hlt; jmp qword ptr [rax + 0x2a]; 
0x000000000008edfe: add byte ptr [rax], al; cmp byte ptr [rip + 0x25c4c1], 0; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000d7512: add byte ptr [rax], al; cmp byte ptr [rsi], dl; sti; call qword ptr [rax - 0x58]; 
0x00000000000b7514: add byte ptr [rax], al; cmp dil, 3; jne 0xb7520; ret; 
0x00000000000208d6: add byte ptr [rax], al; cmp eax, -1; je 0x20858; mov eax, 0xffffffff; ret; 
0x0000000000020ac6: add byte ptr [rax], al; cmp eax, -1; je 0x20a48; mov eax, 0xffffffff; ret; 
0x000000000004fea8: add byte ptr [rax], al; cmp eax, ecx; jne 0x4ff65; xor eax, eax; ret; 
0x00000000000590be: add byte ptr [rax], al; cmp eax, edx; jne 0x590cc; nop; mov eax, 0xca; syscall; 
0x000000000001814e: add byte ptr [rax], al; cmp edx, -1; cmove rbx, rax; mov rax, rbx; pop rbx; ret; 
0x000000000005ba31: add byte ptr [rax], al; cmp r14, 0x25; ja 0x5c21a; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x000000000002d9ec: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008f39c: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000005165c: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x5166f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005160c: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x51678; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005184f: add byte ptr [rax], al; cmp rdx, rcx; jne 0x51837; vzeroupper; ret; 
0x0000000000051a12: add byte ptr [rax], al; cmp rdx, rcx; jne 0x519f2; vzeroupper; ret; 
0x0000000000000c86: add byte ptr [rax], al; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 6; 
0x00000000000d626a: add byte ptr [rax], al; cwde; cmp esp, esi; jmp rax; 
0x00000000000d67f2: add byte ptr [rax], al; cwde; je 0xd67ec; jmp qword ptr [rax]; 
0x00000000000d787a: add byte ptr [rax], al; cwde; jo 0xd787b; call qword ptr [rax]; 
0x00000000000d62e2: add byte ptr [rax], al; cwde; push rdi; hlt; call rax; 
0x00000000000d7572: add byte ptr [rax], al; cwde; push rdx; sti; call qword ptr [rax]; 
0x0000000000000c26: add byte ptr [rax], al; cwde; ret 6; 
0x00000000000da77e: add byte ptr [rax], al; cwde; sub dword ptr [rax], eax; add byte ptr [rbx + rcx*4], cl; hlt; call qword ptr [rbx]; 
0x00000000000d7cba: add byte ptr [rax], al; cwde; sub edi, esi; call rax; 
0x00000000000dc4be: add byte ptr [rax], al; fadd dword ptr [rsi]; add byte ptr [rsp + rdx*2 - 9], ch; call qword ptr [rcx + 1]; 
0x00000000000d7aea: add byte ptr [rax], al; fcom st(4); std; jmp qword ptr [rax]; 
0x00000000000d61da: add byte ptr [rax], al; fcomp dword ptr [rdi]; hlt; lcall [rax - 0x27ffffd5]; and ah, dh; jmp rax; 
0x00000000000d6552: add byte ptr [rax], al; fdivr dword ptr [rsp + rsi*8 + 0x42e0ff]; add byte ptr [rax + 0x4cfff4bf], ch; add byte ptr [r8], al; pop rax; ret 0xfff4; 
0x00000000000df9c2: add byte ptr [rax], al; fdivr qword ptr [rbx]; add al, cl; cld; stc; jmp qword ptr [rdx]; 
0x00000000000e3686: add byte ptr [rax], al; fmul dword ptr [rax - 3]; call qword ptr [rcx]; 
0x00000000000d61e2: add byte ptr [rax], al; fsub dword ptr [rax]; hlt; jmp rax; 
0x00000000000da3be: add byte ptr [rax], al; fsub dword ptr [rip - 0x7e440000]; hlt; call qword ptr [rdi]; 
0x00000000000d622a: add byte ptr [rax], al; fsubr dword ptr [rax]; hlt; dec dword ptr [rbp + 0x28f80000]; hlt; jmp qword ptr [rax]; 
0x00000000000e28c2: add byte ptr [rax], al; fsubr qword ptr [rdx + 0x6f380000]; cld; call qword ptr [rax]; 
0x00000000000e297f: add byte ptr [rax], al; hlt; cld; jmp qword ptr [rcx]; 
0x00000000000dfdda: add byte ptr [rax], al; hlt; jg 0xdfddf; add byte ptr [rax + 7], dl; cli; jmp qword ptr [rbx]; 
0x00000000000df6da: add byte ptr [rax], al; hlt; js 0xdf6df; add byte ptr [rax - 0x11], ah; stc; jmp qword ptr [rdi]; 
0x00000000000e39da: add byte ptr [rax], al; hlt; mov ebx, 0x59800000; std; jmp qword ptr [rax]; 
0x00000000000de3d2: add byte ptr [rax], al; in al, dx; add byte ptr gs:[rax], al; js 0xde442; clc; jmp qword ptr [rsi + 0xa]; 
0x00000000000da7e2: add byte ptr [rax], al; in al, dx; mov esi, esp; call qword ptr [rsi]; 
0x00000000000e1cd2: add byte ptr [rax], al; in al, dx; sahf; add byte ptr [rax], al; mov cl, 0xfb; jmp rdx; 
0x00000000000dff52: add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [rax], 0xfa0e8800; jmp qword ptr [rbx]; 
0x00000000000de952: add byte ptr [rax], al; insb byte ptr [rdi], dx; imul eax, dword ptr [rax], 0; js 0xde8fe; clc; call qword ptr [rcx]; 
0x00000000000de942: add byte ptr [rax], al; insb byte ptr [rdi], dx; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rcx]; 
0x0000000000051951: add byte ptr [rax], al; ja 0x51967; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000518f1: add byte ptr [rax], al; ja 0x51970; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000056214: add byte ptr [rax], al; ja 0x564d0; lea rdx, [rip + 0x68f19]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000005a962: add byte ptr [rax], al; je 0x5a970; mov dword ptr [rip + 0x28be4c], edx; pop rbx; ret; 
0x0000000000008ed4: add byte ptr [rax], al; je 0x8edd; call 0x593b0; leave; ret; 
0x000000000000924e: add byte ptr [rax], al; je 0x9257; call 0x593b0; leave; ret; 
0x00000000000093ef: add byte ptr [rax], al; je 0x93f8; call 0x593b0; leave; ret; 
0x0000000000009549: add byte ptr [rax], al; je 0x9552; call 0x593b0; leave; ret; 
0x000000000000965e: add byte ptr [rax], al; je 0x9667; call 0x593b0; leave; ret; 
0x00000000000b67b6: add byte ptr [rax], al; je 0xb679c; add rsp, 0x18; ret; 
0x00000000000b6896: add byte ptr [rax], al; je 0xb6878; add rsp, 8; ret; 
0x00000000000b68f6: add byte ptr [rax], al; je 0xb68d4; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x00000000000dc45a: add byte ptr [rax], al; je 0xdc4a4; add byte ptr [rax], al; and byte ptr [rbx - 9], dl; call qword ptr [rbx]; 
0x00000000000e0e2a: add byte ptr [rax], al; je 0xe0dfe; cli; jmp qword ptr [rdx]; 
0x00000000000e175a: add byte ptr [rax], al; je 0xe16f7; add byte ptr [rax], al; push rax; or ebx, edi; jmp qword ptr [rsi]; 
0x00000000000e185a: add byte ptr [rax], al; je 0xe17f8; add byte ptr [rax], al; adc ebx, edi; jmp qword ptr [rcx]; 
0x00000000000e25da: add byte ptr [rax], al; je 0xe261e; cld; call qword ptr [rbx]; 
0x00000000000ddb26: add byte ptr [rax], al; jg 0xddad5; bnd jmp qword ptr [rbx]; 
0x00000000000da562: add byte ptr [rax], al; jl 0xda4ea; hlt; call qword ptr [rdi + 1]; 
0x00000000000e1692: add byte ptr [rax], al; jl 0xe169c; sti; call qword ptr [rdi + 1]; 
0x00000000000576fb: add byte ptr [rax], al; jmp rax; 
0x0000000000016db5: add byte ptr [rax], al; jne 0x16e03; add rsp, 0x148; ret; 
0x000000000001998f: add byte ptr [rax], al; jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019a3b: add byte ptr [rax], al; jne 0x19a47; add rsp, 0xd8; ret; 
0x0000000000019af0: add byte ptr [rax], al; jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019bb0: add byte ptr [rax], al; jne 0x19bbc; add rsp, 0xd8; ret; 
0x000000000001b7cc: add byte ptr [rax], al; jne 0x1b87d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000020315: add byte ptr [rax], al; jne 0x203d6; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000205f6: add byte ptr [rax], al; jne 0x20644; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000021817: add byte ptr [rax], al; jne 0x21ac6; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000002417e: add byte ptr [rax], al; jne 0x24188; add rsp, 0x20; pop rbx; ret; 
0x0000000000035a52: add byte ptr [rax], al; jne 0x35960; ret; 
0x00000000000521ed: add byte ptr [rax], al; jne 0x52214; add rsp, 0x20; pop rbx; ret; 
0x0000000000056279: add byte ptr [rax], al; jne 0x56210; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000056575: add byte ptr [rax], al; jne 0x56589; add rsp, 0x28; ret; 
0x0000000000056693: add byte ptr [rax], al; jne 0x56749; add rsp, 0x68; ret; 
0x00000000000567a5: add byte ptr [rax], al; jne 0x567eb; add rsp, 0x58; ret; 
0x0000000000056a26: add byte ptr [rax], al; jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b35: add byte ptr [rax], al; jne 0x56b83; add rsp, 0x68; ret; 
0x00000000000574a4: add byte ptr [rax], al; jne 0x574b7; add rsp, 0x28; ret; 
0x0000000000058c08: add byte ptr [rax], al; jne 0x58c16; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000058c98: add byte ptr [rax], al; jne 0x58ca6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000005911d: add byte ptr [rax], al; jne 0x59108; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5912c; ret; 
0x0000000000065d2d: add byte ptr [rax], al; jne 0x65def; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000068e7d: add byte ptr [rax], al; jne 0x68e86; add rsp, 0x18; ret; 
0x00000000000760a0: add byte ptr [rax], al; jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c100: add byte ptr [rax], al; jne 0x7c10c; add rsp, 0xd8; ret; 
0x0000000000084e3e: add byte ptr [rax], al; jne 0x84e7a; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000084ff8: add byte ptr [rax], al; jne 0x850b9; add rsp, 0x78; ret; 
0x000000000008510a: add byte ptr [rax], al; jne 0x85153; add rsp, 0x58; ret; 
0x000000000008518d: add byte ptr [rax], al; jne 0x85199; movzx eax, al; add rsp, 0x58; ret; 
0x000000000008523c: add byte ptr [rax], al; jne 0x8525b; add rsp, 0x38; ret; 
0x000000000008ee05: add byte ptr [rax], al; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000916e8: add byte ptr [rax], al; jne 0x916f2; add rsp, 0x20; pop rbx; ret; 
0x00000000000917e3: add byte ptr [rax], al; jne 0x91813; add rsp, 0x38; ret; 
0x00000000000918a3: add byte ptr [rax], al; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091a04: add byte ptr [rax], al; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091cd3: add byte ptr [rax], al; jne 0x91cfe; add rsp, 0x68; ret; 
0x0000000000093d0f: add byte ptr [rax], al; jne 0x93d4e; leave; ret; 
0x00000000000942d6: add byte ptr [rax], al; jne 0x94394; add rsp, 0x30; pop rbx; ret; 
0x000000000009ca37: add byte ptr [rax], al; jne 0x9cbc5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009ce50: add byte ptr [rax], al; jne 0x9cef8; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000009cf5b: add byte ptr [rax], al; jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d03e: add byte ptr [rax], al; jne 0x9d054; add rsp, 0x38; ret; 
0x000000000009fa59: add byte ptr [rax], al; jne 0x9fa5f; pop rbx; ret; 
0x00000000000a9060: add byte ptr [rax], al; jne 0xa909d; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a9110: add byte ptr [rax], al; jne 0xa9182; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a91ee: add byte ptr [rax], al; jne 0xa924c; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000a9599: add byte ptr [rax], al; jne 0xa95ac; add rsp, 0x38; ret; 
0x00000000000b6797: add byte ptr [rax], al; jne 0xb67b0; cmp qword ptr [r9 + 0x38], 0; je 0xb680b; add rsp, 0x18; ret; 
0x00000000000dc826: add byte ptr [rax], al; jo 0xdc82a; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 9], ah; jmp rsi; 
0x00000000000e0f4e: add byte ptr [rax], al; jp 0xe0fc9; bnd jmp qword ptr [rcx]; 
0x00000000000d6262: add byte ptr [rax], al; js 0xd629d; hlt; call qword ptr [rax - 0x67ffffd2]; cmp esp, esi; jmp rax; 
0x00000000000d62d2: add byte ptr [rax], al; js 0xd631e; hlt; call rax; 
0x00000000000d637a: add byte ptr [rax], al; js 0xd63eb; hlt; call rsp; 
0x00000000000d688a: add byte ptr [rax], al; js 0xd6815; cmc; jmp qword ptr [rax]; 
0x00000000000d6cb2: add byte ptr [rax], al; js 0xd6cc0; clc; jmp qword ptr [rax]; 
0x00000000000d6fba: add byte ptr [rax], al; js 0xd6fb5; clc; jmp qword ptr [rax]; 
0x00000000000da55e: add byte ptr [rax], al; js 0xda589; add byte ptr [rax], al; jl 0xda4ea; hlt; call qword ptr [rdi + 1]; 
0x00000000000de3d6: add byte ptr [rax], al; js 0xde442; clc; jmp qword ptr [rsi + 0xa]; 
0x00000000000de956: add byte ptr [rax], al; js 0xde8fe; clc; call qword ptr [rcx]; 
0x000000000003f2f9: add byte ptr [rax], al; lea r11, [rip + 0x7f0be]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007f96d: add byte ptr [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000007fa67: add byte ptr [rax], al; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000008b0ba: add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000004e7be: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000004e7ce: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000004e7de: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000004e7ee: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000004e7fe: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000004e71d: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000004e73e: add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x000000000004e74e: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000004e75e: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000004e76e: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000004e77e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000004e78e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000004e6ca: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000004e79e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000004e7ae: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000049b59: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000004e72e: add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x0000000000080475: add byte ptr [rax], al; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e815: add byte ptr [rax], al; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db25: add byte ptr [rax], al; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000009c97e: add byte ptr [rax], al; lea rax, [rip + 0x24e1d9]; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000005a92e: add byte ptr [rax], al; lea rax, [rip + 0x28d9c9]; ret; 
0x00000000000591d7: add byte ptr [rax], al; lea rax, [rip + 0x292208]; add rsp, 8; ret; 
0x000000000009d0fc: add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000002e7e5: add byte ptr [rax], al; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000080545: add byte ptr [rax], al; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081df5: add byte ptr [rax], al; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000000804a5: add byte ptr [rax], al; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000003428d: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000008bb84: add byte ptr [rax], al; lea rcx, [rip + 0x42d93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000007c32d: add byte ptr [rax], al; lea rcx, [rip + 0x514ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000008c4ac: add byte ptr [rax], al; lea rdi, [rip + 0x42503]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x0000000000016175: add byte ptr [rax], al; lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000083995: add byte ptr [rax], al; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx; 
0x000000000002252e: add byte ptr [rax], al; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000094fbc: add byte ptr [rax], al; lea rdx, [rip + 0x3ea0f]; movzx r12d, r12b; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x00000000000946ff: add byte ptr [rax], al; lea rdx, [rip + 0x3f010]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007cae2: add byte ptr [rax], al; lea rdx, [rip + 0x50f3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005621a: add byte ptr [rax], al; lea rdx, [rip + 0x68f19]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000002d44b: add byte ptr [rax], al; lea rdx, [rip + 0x903ac]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000081e61: add byte ptr [rax], al; lea rdx, [rip - 0x305ba]; cmove rax, rdx; ret; 
0x0000000000078f6a: add byte ptr [rax], al; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x0000000000051ace: add byte ptr [rax], al; lea rsi, [rip + 0x6d089]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000009ad7: add byte ptr [rax], al; leave; ret; 
0x00000000000e1c22: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; scasd eax, dword ptr [rdi]; sti; jmp qword ptr [rdx]; 
0x00000000000da9a2: add byte ptr [rax], al; lodsd eax, dword ptr [rsi]; fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000e18fa: add byte ptr [rax], al; mov ah, 0x17; sti; jmp qword ptr [rdx + 5]; 
0x00000000000daf9a: add byte ptr [rax], al; mov ah, 0x31; add byte ptr [rax], al; mov al, 0xd5; hlt; jmp rsi; 
0x00000000000dbd9a: add byte ptr [rax], al; mov ah, 0x3f; add byte ptr [rax], al; xor byte ptr [rdx], ch; cmc; jmp qword ptr [rbx]; 
0x00000000000dadda: add byte ptr [rax], al; mov ah, 0xbf; hlt; call qword ptr [rdx]; 
0x00000000000da296: add byte ptr [rax], al; mov al, 0x24; add byte ptr [rax], al; push rsp; jl 0xda293; jmp qword ptr [rdi + 2]; 
0x00000000000d9b6e: add byte ptr [rax], al; mov al, 0x5a; hlt; call qword ptr [rdi]; 
0x00000000000daf9e: add byte ptr [rax], al; mov al, 0xd5; hlt; jmp rsi; 
0x000000000004d69e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000004beee: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000004d6ae: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000004befe: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000e1e16: add byte ptr [rax], al; mov bl, 0xfb; call qword ptr [rdi]; 
0x00000000000d6e2a: add byte ptr [rax], al; mov byte ptr [rax + rdi*8], dh; call qword ptr [rax]; 
0x00000000000d7042: add byte ptr [rax], al; mov byte ptr [rax], ch; stc; call qword ptr [rax - 0x77]; 
0x000000000006d6f1: add byte ptr [rax], al; mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000000e1796: add byte ptr [rax], al; mov byte ptr [rcx], cl; sti; call qword ptr [rdx]; 
0x00000000000d62ca: add byte ptr [rax], al; mov byte ptr [rdi - 0xc], al; call qword ptr [rax + 0x78000031]; hlt; call rax; 
0x000000000001cb5e: add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000004e18e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004db6e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000000d7a62: add byte ptr [rax], al; mov byte ptr [rdi], dh; std; jmp qword ptr [rax]; 
0x00000000000dbde6: add byte ptr [rax], al; mov byte ptr [rsi], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000000dff56: add byte ptr [rax], al; mov byte ptr [rsi], cl; cli; jmp qword ptr [rbx]; 
0x00000000000d628a: add byte ptr [rax], al; mov byte ptr [rsp + rsi*8], bh; jmp qword ptr [rax + 0x2f]; 
0x0000000000082a0e: add byte ptr [rax], al; mov ch, dh; and ch, 0xf; je 0x82a30; add rax, 2; ret; 
0x00000000000e1cd6: add byte ptr [rax], al; mov cl, 0xfb; jmp rdx; 
0x000000000004e1ae: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000004db8e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000d68ca: add byte ptr [rax], al; mov dl, cl; cmc; jmp rax; 
0x000000000007a390: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000007a50d: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000079e9a: add byte ptr [rax], al; mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000001e7f0: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007f2fb: add byte ptr [rax], al; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000002339f: add byte ptr [rax], al; mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x000000000002341c: add byte ptr [rax], al; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x000000000003f1de: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000004e19e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000004db7e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000002d9be: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000005767e: add byte ptr [rax], al; mov eax, 0x1c; syscall; 
0x000000000005767e: add byte ptr [rax], al; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x000000000005600e: add byte ptr [rax], al; mov eax, 0x27; syscall; 
0x000000000005600e: add byte ptr [rax], al; mov eax, 0x27; syscall; ret; 
0x0000000000058e5e: add byte ptr [rax], al; mov eax, 0x32; syscall; 
0x0000000000058e5e: add byte ptr [rax], al; mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x0000000000056a45: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000084eae: add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x0000000000084eae: add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x0000000000084ece: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x0000000000084ece: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x0000000000084ebe: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x0000000000084ebe: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x0000000000084ede: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x0000000000084ede: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000000d979e: add byte ptr [rax], al; mov eax, 0x9c000019; hlt; call qword ptr [rax]; 
0x00000000000d620a: add byte ptr [rax], al; mov eax, 0x9cfff424; sub al, 0; add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x00000000000d616a: add byte ptr [rax], al; mov eax, 0xa0fff40b; sub byte ptr [rax], al; add bh, dl; or al, 0xf4; call rsp; 
0x000000000005764e: add byte ptr [rax], al; mov eax, 0xa; syscall; 
0x000000000005764e: add byte ptr [rax], al; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x00000000000da99e: add byte ptr [rax], al; mov eax, 0xad00002b; fdivr st(2), st(0); call qword ptr [rsi]; 
0x000000000005761e: add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000005761e: add byte ptr [rax], al; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x57630; ret; 
0x0000000000052a1e: add byte ptr [rax], al; mov eax, 0xc9; syscall; 
0x0000000000052a1e: add byte ptr [rax], al; mov eax, 0xc9; syscall; ret; 
0x00000000000590f0: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x00000000000590f0: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x0000000000059197: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000056283: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x0000000000016bbe: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000006a7ac: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000016e2c: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000007d4e5: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093f4b: add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000005695e: add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000094154: add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000009ce30: add byte ptr [rax], al; mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x379f0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004d6de: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000002253e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000000b8aae: add byte ptr [rax], al; mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ac0; ret; 
0x00000000000b8cce: add byte ptr [rax], al; mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ce0; ret; 
0x0000000000058d8e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x292652]; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000058cae: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x2927ea]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000056b8e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x294852]; test eax, eax; jne 0x56bb0; mov eax, 3; syscall; 
0x00000000000567ee: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x294bf2]; test eax, eax; jne 0x56810; xor eax, eax; syscall; 
0x0000000000056bd8: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000092081: add byte ptr [rax], al; mov eax, ebx; jne 0x920a5; add rsp, 0x110; pop rbx; ret; 
0x0000000000051b26: add byte ptr [rax], al; mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000016b89: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000005945e: add byte ptr [rax], al; mov eax, edi; ror ax, 8; ret; 
0x000000000008e0ff: add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000075fb2: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x0000000000073751: add byte ptr [rax], al; mov eax, edx; ret; 
0x0000000000019ea0: add byte ptr [rax], al; mov eax, esi; jne 0x19eaf; add rsp, 0xd0; pop rbx; ret; 
0x0000000000055f3b: add byte ptr [rax], al; mov eax, r13d; syscall; 
0x0000000000016bd6: add byte ptr [rax], al; mov eax, r8d; jne 0x16bfc; add rsp, 0x118; ret; 
0x00000000000c8ee2: add byte ptr [rax], al; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000000c8c32: add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000004e1ce: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000004dbae: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000004dbbe: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b65ef: add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000056a7f: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000574ea: add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x0000000000056bba: add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000055fce: add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000007df96: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000000a13d: add byte ptr [rax], al; mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000000590eb: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000003f0fe: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f08e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f01e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003ea4e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003968e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003988e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039a8e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003f16e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000566f0: add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000000591a6: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000008b013: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000055f36: add byte ptr [rax], al; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000000590e6: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000007f33a: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000001e0a0: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000002096f: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000000dcba2: add byte ptr [rax], al; mov esp, 0x2800004d; mov edi, esi; jmp rdi; 
0x00000000000dd5a2: add byte ptr [rax], al; mov esp, 0x68000057; sar ebp, 0xff; ret 0; 
0x00000000000dbea2: add byte ptr [rax], al; mov esp, 0xa8000040; cdq; cmc; call rsp; 
0x00000000000cc8d6: add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x000000000005959e: add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000007f3f7: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000009ced8: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000000908ca: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000091660: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000000a9612: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000000a96e6: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000207be: add byte ptr [rax], al; mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x00000000000908c2: add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000005d6e0: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000021762: add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000008b0c4: add byte ptr [rax], al; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000000b693e: add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000002177e: add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000021769: add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000093f68: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x000000000001ccb2: add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000008edce: add byte ptr [rax], al; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x00000000000233dc: add byte ptr [rax], al; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233bc: add byte ptr [rax], al; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x0000000000022969: add byte ptr [rax], al; mov qword ptr [rip + 0x2c7452], 0; ret; 
0x00000000000228ff: add byte ptr [rax], al; mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x000000000000a6e0: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000000882de: add byte ptr [rax], al; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000008df2e: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8d860; add rsp, 0xd8; ret; 
0x000000000001a6ec: add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000002496e: add byte ptr [rax], al; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000068e2e: add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000005900e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x36; syscall; 
0x0000000000016ce1: add byte ptr [rax], al; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000008c086: add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000038cfe: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000078f52: add byte ptr [rax], al; mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x0000000000077665: add byte ptr [rax], al; mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x00000000000b45a6: add byte ptr [rax], al; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x0000000000079b4b: add byte ptr [rax], al; mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000068d8e: add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dae: add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dce: add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000000a8ae: add byte ptr [rax], al; mov rax, -0x58; add rax, qword ptr fs:[0]; ret; 
0x00000000000187ee: add byte ptr [rax], al; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000005759e: add byte ptr [rax], al; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000852a6: add byte ptr [rax], al; mov rax, -0x58; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000007fdb6: add byte ptr [rax], al; mov rax, -0x58; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000007373e: add byte ptr [rax], al; mov rax, -0x58; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000008f79e: add byte ptr [rax], al; mov rax, -0x58; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000027f3e: add byte ptr [rax], al; mov rax, -0x58; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000068d6e: add byte ptr [rax], al; mov rax, -0x70; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000016aea: add byte ptr [rax], al; mov rax, -1; ret; 
0x0000000000016c1e: add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000082a4e: add byte ptr [rax], al; mov rax, 1; ret; 
0x0000000000082a5e: add byte ptr [rax], al; mov rax, 2; ret; 
0x0000000000082a6e: add byte ptr [rax], al; mov rax, 3; ret; 
0x0000000000082a7e: add byte ptr [rax], al; mov rax, 4; ret; 
0x0000000000082a8e: add byte ptr [rax], al; mov rax, 5; ret; 
0x0000000000082a9e: add byte ptr [rax], al; mov rax, 6; ret; 
0x0000000000082aae: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000008c693: add byte ptr [rax], al; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000001b6fe: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000009151e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000009152e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000008ccf2: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000008beae: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000008bd6b: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000009ce66: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000004d62e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000004be7e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000002320e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007f7fe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000002288e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b690e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000b694e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000000b699e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000000b695e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000000233ce: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4416], 1; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233ae: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x000000000002342e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c6a0a], eax; ret; 
0x00000000000232ae: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c456d], rax; ret; 
0x000000000008ee6e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2581a1]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x0000000000065bde: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x284d71]; ret; 
0x000000000005d68e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28de81]; ret; 
0x000000000002286e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x00000000000b46ce: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x00000000000b75a6: add byte ptr [rax], al; mov rax, qword ptr [rsi + 8]; ret; 
0x00000000000b40fa: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000024add: add byte ptr [rax], al; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082e31: add byte ptr [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000081c6e: add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000001df44: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6aa8: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000a96a4: add byte ptr [rax], al; mov rax, rbx; jne 0xa96bc; add rsp, 0x40; pop rbx; ret; 
0x00000000000a978b: add byte ptr [rax], al; mov rax, rbx; jne 0xa97a4; add rsp, 0x50; pop rbx; ret; 
0x000000000001e8c2: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000181fc: add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000002289e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000016ab8: add byte ptr [rax], al; mov rax, rdx; jne 0x16ac7; add rsp, 0x148; ret; 
0x0000000000080023: add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x0000000000027f4e: add byte ptr [rax], al; mov rax, rsi; ret; 
0x000000000008f4fa: add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000000b7373: add byte ptr [rax], al; mov rcx, qword ptr [rdx + 8]; cmp qword ptr [rsi + 8], rcx; ja 0xb7381; sbb eax, eax; ret; 
0x00000000000390be: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003929e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003947e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003966e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003986e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a6e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ede: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004e21e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004dbee: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000004dbfe: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000005096f: add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000017bf1: add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000083788: add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x00000000000bb77e: add byte ptr [rax], al; mov rdi, r13; call rax; 
0x000000000006df8c: add byte ptr [rax], al; mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000000bae8e: add byte ptr [rax], al; mov rdi, r15; call rax; 
0x000000000001affd: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000007c7af: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000000664f4: add byte ptr [rax], al; mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x5a9a0; mov rdi, r14; call rbx; 
0x000000000001b6f3: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000055c2e: add byte ptr [rax], al; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005685e: add byte ptr [rax], al; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000009ce56: add byte ptr [rax], al; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000009ced1: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000000a040: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2dff07]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000003ef3e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003eece: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ee5e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ed7e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ed0e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ec9e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003e74e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e5be: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e52e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038d1e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e7ce: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003efae: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000006bc51: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000007799e: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000006b6ab: add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000001e1dd: add byte ptr [rax], al; mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000001c93e: add byte ptr [rax], al; mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000006be26: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000006b4f6: add byte ptr [rax], al; mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000005785b: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000008ed05: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x25c1a2]; jne 0x8ed20; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x0000000000083887: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002a4de: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x00000000000bae86: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x000000000001dd19: add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000007ddab: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000008399d: add byte ptr [rax], al; mov rsi, rbp; call rbx; 
0x0000000000083c6f: add byte ptr [rax], al; mov rsi, rbp; mov rdi, r12; call rbx; 
0x000000000002d79e: add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000001c6e6: add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000016cd9: add byte ptr [rax], al; mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000005666f: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000016b6a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b72: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b7a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000004dc9e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004dd1e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004dcde: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004dcfe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004de1e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004ddbe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004ddde: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004ddfe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000004e2ee: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004dc6e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000e0d8a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; pop qword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000909be: add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x000000000007c964: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000182b4: add byte ptr [rax], al; movsxd rax, dword ptr [rsp + 4]; jne 0x182c2; add rsp, 0x18; ret; 
0x000000000006856d: add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000006806e: add byte ptr [rax], al; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x000000000005ba3b: add byte ptr [rax], al; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x000000000005b961: add byte ptr [rax], al; movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x00000000000508a5: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000b5743: add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000001f71e: add byte ptr [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000079b51: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000004fa2e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000004fa8e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000004fa7e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000004fa6e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000004fa5e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000004fa4e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000004fa3e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000004fde8: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x4ff65; xor eax, eax; ret; 
0x0000000000036afe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000368b1: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000000359de: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000002092e: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ce1e: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x0000000000051b5e: add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000005ed4e: add byte ptr [rax], al; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000002fc5e: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000007a10f: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0bc: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b8f: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f2e: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079ee9: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079ea4: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e55: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000003ebde: add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003f2be: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000003eb5e: add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000003f24e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000020e1f: add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000000b5b1b: add byte ptr [rax], al; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x0000000000057679: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000058e59: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000084ea9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000084ea9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x0000000000057649: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000052a19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x0000000000052a19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; ret; 
0x0000000000059459: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, edi; ror ax, 8; ret; 
0x0000000000059009: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x36; syscall; 
0x000000000000a8a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, -0x58; add rax, qword ptr fs:[0]; ret; 
0x000000000008c6e1: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000058d2a: add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000002322a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c45a5], rax; ret; 
0x000000000000a142: add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000003ea44: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000068da4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dc4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000016c14: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000003ebd4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb54: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000052a0f: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x00000000000e0e26: add byte ptr [rax], al; nop; add byte ptr [rax], al; je 0xe0dfe; cli; jmp qword ptr [rdx]; 
0x00000000000b1d7c: add byte ptr [rax], al; nop; mov eax, 0x26; syscall; 
0x000000000005903c: add byte ptr [rax], al; nop; mov eax, 0x29; syscall; 
0x0000000000058e2d: add byte ptr [rax], al; nop; mov eax, 0x31; syscall; 
0x0000000000058d5c: add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000068f1c: add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000016c0e: add byte ptr [rax], al; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000000dbbf2: add byte ptr [rax], al; or al, 0x3e; add byte ptr [rax], al; sbb byte ptr [rdi], bl; cmc; jmp qword ptr [rbx]; 
0x00000000000dbcf2: add byte ptr [rax], al; or al, 0x3f; add byte ptr [rax], al; sbb byte ptr [rdi], ah; cmc; call qword ptr [rsi]; 
0x00000000000d9842: add byte ptr [rax], al; or al, 0x44; hlt; call qword ptr [rdi + 2]; 
0x00000000000da782: add byte ptr [rax], al; or al, 0x8b; hlt; call qword ptr [rbx]; 
0x00000000000e12e2: add byte ptr [rax], al; or al, 0xf2; cli; call rdx; 
0x00000000000d7122: add byte ptr [rax], al; or bh, dl; stc; jmp rax; 
0x00000000000d666a: add byte ptr [rax], al; or bl, dl; hlt; jmp qword ptr [rax]; 
0x00000000000d78ca: add byte ptr [rax], al; or byte ptr [rax - 4], bh; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x0000000000001956: add byte ptr [rax], al; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x6e0; 
0x0000000000001e06: add byte ptr [rax], al; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000d627a: add byte ptr [rax], al; or byte ptr [rbx], bh; hlt; jmp qword ptr [rax]; 
0x00000000000d8fd6: add byte ptr [rax], al; or byte ptr [rbx], dl; hlt; jmp qword ptr [rcx + 1]; 
0x0000000000094037: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000008b58e: add byte ptr [rax], al; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x00000000000d750a: add byte ptr [rax], al; or byte ptr [rip - 0x57df0005], al; add byte ptr [rax], al; cmp byte ptr [rsi], dl; sti; call qword ptr [rax - 0x58]; 
0x00000000000d674a: add byte ptr [rax], al; or byte ptr [rsi], ah; cmc; call qword ptr [rax + 0x50]; 
0x00000000000d6fb2: add byte ptr [rax], al; or ch, ch; clc; dec dword ptr [rax + 0x78000084]; idiv eax; jmp qword ptr [rax]; 
0x00000000000d66f2: add byte ptr [rax], al; or cl, ch; hlt; jmp qword ptr [rax]; 
0x00000000000e0e46: add byte ptr [rax], al; or cl, dl; cli; jmp qword ptr [rdx]; 
0x00000000000d6582: add byte ptr [rax], al; or dh, al; hlt; jmp qword ptr [rax + 0x44]; 
0x00000000000d79b2: add byte ptr [rax], al; or dh, dl; cld; jmp qword ptr [rax]; 
0x000000000001d02e: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000008f784: add byte ptr [rax], al; or dword ptr [rip + 0x258a5b], 1; pop rbx; ret; 
0x0000000000080fd9: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000dff86: add byte ptr [rax], al; pop rax; adc al, 0xfa; jmp rdx; 
0x00000000000d619a: add byte ptr [rax], al; pop rax; adc esp, esi; call rax; 
0x00000000000d7b62: add byte ptr [rax], al; pop rax; add edi, esi; call rax; 
0x00000000000d713a: add byte ptr [rax], al; pop rax; cld; stc; jmp rsp; 
0x00000000000de916: add byte ptr [rax], al; pop rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rdi]; 
0x00000000000d6562: add byte ptr [rax], al; pop rax; ret 0xfff4; 
0x00000000000d6b8a: add byte ptr [rax], al; pop rax; ret 0xfff7; 
0x0000000000000ce6: add byte ptr [rax], al; pop rax; ret 6; 
0x000000000000877d: add byte ptr [rax], al; pop rax; ret; 
0x00000000000d983e: add byte ptr [rax], al; pop rax; sbb al, byte ptr [rax]; add byte ptr [rsp + rax*2], cl; hlt; call qword ptr [rdi + 2]; 
0x00000000000d6e1a: add byte ptr [rax], al; pop rax; xor al, 0xf8; jmp rax; 
0x000000000005770e: add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x00000000000736fb: add byte ptr [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000000097b9: add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000065d3a: add byte ptr [rax], al; pop rbx; pop r12; ret; 
0x000000000001c479: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000213a5: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000001a03a: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000009ca6: add byte ptr [rax], al; pop rbx; ret; 
0x00000000000de0b2: add byte ptr [rax], al; pop rsp; clc; call rcx; 
0x00000000000d6742: add byte ptr [rax], al; push -0x13000ade; add byte ptr [r8], r8b; or byte ptr [rsi], ah; cmc; call qword ptr [rax + 0x50]; 
0x00000000000d797a: add byte ptr [rax], al; push -0x3b00035c; ret; 
0x00000000000d974e: add byte ptr [rax], al; push -0x3ffffe7; cmp dh, ah; jmp rdx; 
0x00000000000d7832: add byte ptr [rax], al; push -4; ljmp [rax - 0x77ffff44]; insb byte ptr [rdi], dx; cld; call rsp; 
0x00000000000dbf36: add byte ptr [rax], al; push rax; add byte ptr [r8], al; xor al, 0xdd; cmc; jmp qword ptr [rdi + 0x2b]; 
0x000000000005f68b: add byte ptr [rax], al; push rax; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000000e175e: add byte ptr [rax], al; push rax; or ebx, edi; jmp qword ptr [rsi]; 
0x00000000000d923a: add byte ptr [rax], al; push rsp; adc al, 0; add al, ah; and al, 0xf4; jmp qword ptr [rdx + 1]; 
0x00000000000e158a: add byte ptr [rax], al; push rsp; add edi, ebx; jmp qword ptr [rbx + 1]; 
0x00000000000da29a: add byte ptr [rax], al; push rsp; jl 0xda293; jmp qword ptr [rdi + 2]; 
0x00000000000e34aa: add byte ptr [rax], al; push rsp; std; call qword ptr [rbx]; 
0x00000000000dff82: add byte ptr [rax], al; pushfq; add dword ptr [rax], 0xfa145800; jmp rdx; 
0x00000000000d97a2: add byte ptr [rax], al; pushfq; hlt; call qword ptr [rax]; 
0x00000000000e3682: add byte ptr [rax], al; pushfq; mov eax, 0x48d80000; std; call qword ptr [rcx]; 
0x00000000000da682: add byte ptr [rax], al; pushfq; sub byte ptr [rax], al; add al, cl; mov esp, esi; call qword ptr [rsi]; 
0x00000000000c20c6: add byte ptr [rax], al; ret 0; 
0x00000000000c903e: add byte ptr [rax], al; ret 0x10; 
0x00000000000cad0e: add byte ptr [rax], al; ret 0x1d4; 
0x00000000000cb4a6: add byte ptr [rax], al; ret 0x1d5; 
0x00000000000c9d16: add byte ptr [rax], al; ret 0x24; 
0x00000000000ca206: add byte ptr [rax], al; ret 0x33; 
0x000000000000195e: add byte ptr [rax], al; ret 0x6e0; 
0x00000000000c883e: add byte ptr [rax], al; ret 0xa; 
0x00000000000c8c3e: add byte ptr [rax], al; ret 0xd; 
0x00000000000cc0e2: add byte ptr [rax], al; ret 1; 
0x00000000000cc2e2: add byte ptr [rax], al; ret 2; 
0x00000000000cc4e2: add byte ptr [rax], al; ret 3; 
0x00000000000cc6e2: add byte ptr [rax], al; ret 4; 
0x00000000000cc8e2: add byte ptr [rax], al; ret 5; 
0x00000000000c83e6: add byte ptr [rax], al; ret 6; 
0x00000000000ccce2: add byte ptr [rax], al; ret 7; 
0x00000000000ccee2: add byte ptr [rax], al; ret 8; 
0x00000000000cd0e2: add byte ptr [rax], al; ret 9; 
0x0000000000001e0e: add byte ptr [rax], al; ret; 
0x00000000000cc6de: add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000000c8ae6: add byte ptr [rax], al; ror byte ptr [rax + rax], 0; ret; 
0x00000000000e34a6: add byte ptr [rax], al; sal byte ptr [rsi + 0x40540000], 0xfd; call qword ptr [rbx]; 
0x00000000000d664a: add byte ptr [rax], al; sal spl, cl; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000b6925: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000081934: add byte ptr [rax], al; sar rdx, cl; test rdx, rdx; je 0x819e0; bsf rax, rdx; ret; 
0x00000000000da99a: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; mov eax, 0xad00002b; fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000da502: add byte ptr [rax], al; sbb al, 0x27; add byte ptr [rax], al; test al, 0x83; hlt; jmp qword ptr [rax]; 
0x00000000000d7b0a: add byte ptr [rax], al; sbb bh, bl; std; jmp qword ptr [rax - 0x34]; 
0x00000000000d7442: add byte ptr [rax], al; sbb bl, ch; cli; call qword ptr [rax]; 
0x00000000000d78d2: add byte ptr [rax], al; sbb byte ptr [rax - 4], bh; jmp rax; 
0x00000000000e280a: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rdx + 0x6dbc0000], ch; cld; jmp qword ptr [rdx]; 
0x00000000000d60ea: add byte ptr [rax], al; sbb byte ptr [rbx - 0xd], ch; call qword ptr [rax + 0x24]; 
0x00000000000dbcf6: add byte ptr [rax], al; sbb byte ptr [rdi], ah; cmc; call qword ptr [rsi]; 
0x00000000000dfda6: add byte ptr [rax], al; sbb byte ptr [rdi], al; cli; jmp qword ptr [rsi]; 
0x00000000000dbbf6: add byte ptr [rax], al; sbb byte ptr [rdi], bl; cmc; jmp qword ptr [rbx]; 
0x00000000000d7012: add byte ptr [rax], al; sbb byte ptr [rdi], cl; stc; call rax; 
0x00000000000d7172: add byte ptr [rax], al; sbb byte ptr [rdx + rdi*8], al; push qword ptr [rcx + rdx*4 + 0x2cb80000]; cli; jmp rsp; 
0x00000000000d6d9a: add byte ptr [rax], al; sbb byte ptr [rsi], ch; clc; call qword ptr [rax + 0x74]; 
0x00000000000e0f7e: add byte ptr [rax], al; sbb dh, 0xfa; jmp qword ptr [rdx]; 
0x00000000000e016e: add byte ptr [rax], al; shl byte ptr [rbx], 1; cli; jmp qword ptr [rax]; 
0x00000000000c9d0e: add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000000e26de: add byte ptr [rax], al; shr byte ptr [rcx - 4], 1; call rdi; 
0x0000000000028efc: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000000d8d2a: add byte ptr [rax], al; sldt word ptr [rax]; add byte ptr [rbx], al; hlt; jmp qword ptr [rax]; 
0x00000000000d705a: add byte ptr [rax], al; stc; jmp rax; 
0x00000000000d744a: add byte ptr [rax], al; sub ah, ch; cli; call qword ptr [rax - 0x5c]; 
0x00000000000e1e12: add byte ptr [rax], al; sub al, 0xa0; add byte ptr [rax], al; mov bl, 0xfb; call qword ptr [rdi]; 
0x00000000000db2b2: add byte ptr [rax], al; sub al, 0xe5; hlt; jmp qword ptr [rax]; 
0x00000000000d69fa: add byte ptr [rax], al; sub byte ptr [rax - 9], cl; call qword ptr [rax]; 
0x00000000000d621a: add byte ptr [rax], al; sub byte ptr [rax], ch; hlt; jmp rsp; 
0x00000000000e230e: add byte ptr [rax], al; sub byte ptr [rbp - 0x1f640000], ah; sti; call qword ptr [rdx]; 
0x00000000000d79e2: add byte ptr [rax], al; sub byte ptr [rdi*8 + 0xc6d8ff], cl; add byte ptr [rax + 0x4cfffd30], ch; mov dword ptr [rax], 0xfd30b800; jmp qword ptr [rax - 0x39]; 
0x00000000000e280e: add byte ptr [rax], al; sub byte ptr [rdx + 0x6dbc0000], ch; cld; jmp qword ptr [rdx]; 
0x00000000000e270e: add byte ptr [rax], al; sub byte ptr [rdx - 4], 0xff; ret; 
0x00000000000dfba6: add byte ptr [rax], al; sub byte ptr [rdx], al; cli; jmp qword ptr [rcx]; 
0x00000000000d9026: add byte ptr [rax], al; sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x00000000000df536: add byte ptr [rax], al; sub cl, ch; stc; jmp qword ptr [rbx]; 
0x00000000000da72a: add byte ptr [rax], al; sub dword ptr [rax], r8d; add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x000000000007ffa3: add byte ptr [rax], al; sub dword ptr [rsi + 4], 1; je 0x7ffd1; mov rax, rdx; pop rbx; ret; 
0x000000000003699c: add byte ptr [rax], al; sub eax, ecx; ret; 
0x000000000001da18: add byte ptr [rax], al; sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000021c16: add byte ptr [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000007f556: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000000504b1: add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000007f66e: add byte ptr [rax], al; sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000000b3f10: add byte ptr [rax], al; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x00000000000dbdb6: add byte ptr [rax], al; sub sil, bpl; jmp qword ptr [rbx]; 
0x0000000000016b82: add byte ptr [rax], al; syscall; 
0x0000000000056513: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x56520; ret; 
0x0000000000057623: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x57630; ret; 
0x0000000000057653: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x0000000000057683: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x0000000000058d36: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58d43; ret; 
0x0000000000058d63: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58d70; ret; 
0x0000000000058e33: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000058e63: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x0000000000059016: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59023; ret; 
0x0000000000059043: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59050; ret; 
0x0000000000084e83: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x84e90; ret; 
0x00000000000b1d83: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xb1d90; ret; 
0x00000000000590f5: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x0000000000052a23: add byte ptr [rax], al; syscall; ret; 
0x000000000004e714: add byte ptr [rax], al; test ah, 0x40; jne 0x4e800; lea rax, [rdi + 0xf]; ret; 
0x00000000000de146: add byte ptr [rax], al; test al, 0x2f; clc; call qword ptr [rdi]; 
0x000000000004e6c2: add byte ptr [rax], al; test al, 0x40; jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x00000000000d757a: add byte ptr [rax], al; test al, 0x55; sti; jmp qword ptr [rax - 0x53]; 
0x00000000000d7812: add byte ptr [rax], al; test al, 0x66; cld; jmp rax; 
0x00000000000da506: add byte ptr [rax], al; test al, 0x83; hlt; jmp qword ptr [rax]; 
0x00000000000da656: add byte ptr [rax], al; test al, 0x89; hlt; call qword ptr [rsi]; 
0x00000000000d6f62: add byte ptr [rax], al; test al, 0x92; clc; lcall [rdi + rdi*2 - 0x67280000]; clc; call qword ptr [rax]; 
0x00000000000d7632: add byte ptr [rax], al; test al, 0x93; sti; jmp qword ptr [rax]; 
0x00000000000e168e: add byte ptr [rax], al; test al, 0x98; add byte ptr [rax], al; jl 0xe169c; sti; call qword ptr [rdi + 1]; 
0x00000000000dbea6: add byte ptr [rax], al; test al, 0x99; cmc; call rsp; 
0x00000000000d7932: add byte ptr [rax], al; test al, 0x9b; cld; jmp qword ptr [rax - 0x3e]; 
0x00000000000d794a: add byte ptr [rax], al; test al, 0xa0; cld; dec dword ptr [rax]; ret; 
0x00000000000d77a2: add byte ptr [rax], al; test al, 0xcf; sti; jmp qword ptr [rax - 0x47]; 
0x00000000000df256: add byte ptr [rax], al; test al, 0xd6; stc; jmp qword ptr [rbx + 8]; 
0x00000000000e2326: add byte ptr [rax], al; test al, 0xe0; sti; call qword ptr [rax]; 
0x00000000000d749a: add byte ptr [rax], al; test al, 0xef; cli; jmp rax; 
0x00000000000d8fd2: add byte ptr [rax], al; test byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rbx], dl; hlt; jmp qword ptr [rcx + 1]; 
0x00000000000e016a: add byte ptr [rax], al; test byte ptr [rbx + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x000000000002d01e: add byte ptr [rax], al; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000000d9b6a: add byte ptr [rax], al; test byte ptr [rip + 0x5ab00000], bl; hlt; call qword ptr [rdi]; 
0x000000000004e635: add byte ptr [rax], al; test dh, 0x40; jne 0x4e570; lea rax, [rdi + 0xf]; ret; 
0x000000000004e67b: add byte ptr [rax], al; test dh, 4; jne 0x4e570; lea rax, [rdi + 0xb]; ret; 
0x000000000004e5b2: add byte ptr [rax], al; test dl, 0x40; jne 0x4e570; lea rax, [rdi + 7]; ret; 
0x000000000004e5e0: add byte ptr [rax], al; test dl, 4; jne 0x4e570; lea rax, [rdi + 3]; ret; 
0x0000000000058cb9: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x00000000000083c1: add byte ptr [rax], al; test rax, rax; je 0x83ca; call rax; 
0x00000000000083c1: add byte ptr [rax], al; test rax, rax; je 0x83ca; call rax; add rsp, 8; ret; 
0x0000000000008c68: add byte ptr [rax], al; test rax, rax; je 0x8c78; jmp rax; 
0x0000000000008ca9: add byte ptr [rax], al; test rax, rax; je 0x8cb8; jmp rax; 
0x00000000000b697e: add byte ptr [rax], al; test rax, rax; je 0xb698a; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000b96b9: add byte ptr [rax], al; test rbx, rbx; mov qword ptr [rip + 0x2306db], rbx; jne 0xb96a8; pop rbx; ret; 
0x000000000009ef07: add byte ptr [rax], al; test rdx, rdx; je 0x9ef18; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000008189e: add byte ptr [rax], al; test rsi, rsi; jne 0x818a9; xor rax, rax; ret; 
0x00000000000353fe: add byte ptr [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000004a5fe: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000004a2fe: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000008136e: add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000000e0f4a: add byte ptr [rax], al; xchg eax, ecx; add byte ptr [rax], al; jp 0xe0fc9; bnd jmp qword ptr [rcx]; 
0x00000000000e37da: add byte ptr [rax], al; xchg eax, esp; push rdx; std; call qword ptr [rcx]; 
0x00000000000e0f7a: add byte ptr [rax], al; xchg eax, esp; xchg eax, ecx; add byte ptr [rax], al; sbb dh, 0xfa; jmp qword ptr [rdx]; 
0x00000000000d950a: add byte ptr [rax], al; xchg eax, esp; xor dh, ah; jmp rdi; 
0x00000000000d6172: add byte ptr [rax], al; xlatb; or al, 0xf4; call rsp; 
0x00000000000dc21a: add byte ptr [rax], al; xor al, 0x44; add byte ptr [rax], al; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x00000000000dbf3a: add byte ptr [rax], al; xor al, 0xdd; cmc; jmp qword ptr [rdi + 0x2b]; 
0x00000000000e2016: add byte ptr [rax], al; xor byte ptr [rdx - 0x423c0000], ah; sti; call qword ptr [rax]; 
0x00000000000dbd9e: add byte ptr [rax], al; xor byte ptr [rdx], ch; cmc; jmp qword ptr [rbx]; 
0x000000000006a997: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000008565e: add byte ptr [rax], al; xor eax, eax; leave; ret; 
0x0000000000017ed3: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6ab5: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000185ba: add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000005688e: add byte ptr [rax], al; xor eax, eax; syscall; 
0x0000000000035919: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000079483: add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000000575d4: add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000005736a: add byte ptr [rax], al; xor edi, edi; syscall; 
0x0000000000016bb4: add byte ptr [rax], al; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000016e47: add byte ptr [rax], al; xor esi, esi; call 0x18820; add rsp, 8; ret; 
0x0000000000055d44: add byte ptr [rax], al; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x000000000005919c: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000055c5e: add byte ptr [rax], al; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000007a576: add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000004e56e: add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000000e1d37: add byte ptr [rax], bh; mov dl, 0xfb; jmp qword ptr [rbp]; 
0x00000000000d7943: add byte ptr [rax], bh; movabs al, byte ptr [0xa0a80000c2e8fffc]; cld; dec dword ptr [rax]; ret; 
0x00000000000d7003: add byte ptr [rax], bh; or al, 0xf9; call qword ptr [rax - 0x79]; 
0x00000000000e28c7: add byte ptr [rax], bh; outsd dx, dword ptr [rsi]; cld; call qword ptr [rax]; 
0x00000000000d7773: add byte ptr [rax], bh; ret 0xfffb; 
0x00000000000a6c3c: add byte ptr [rax], bh; ret; 
0x00000000000d6f9b: add byte ptr [rax], bh; sar eax, cl; call qword ptr [rax]; 
0x00000000000d61b3: add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x00000000000d7173: add byte ptr [rax], bl; add al, 0xfa; push qword ptr [rcx + rdx*4 + 0x2cb80000]; cli; jmp rsp; 
0x00000000000d6d9b: add byte ptr [rax], bl; clc; call qword ptr [rax + 0x74]; 
0x00000000000d78d3: add byte ptr [rax], bl; js 0xd78d3; jmp rax; 
0x00000000000d64f3: add byte ptr [rax], bl; mov ah, 0xf4; jmp qword ptr [rax + 0x41]; 
0x00000000000d6abb: add byte ptr [rax], bl; mov cl, 0xf7; jmp qword ptr [rax]; 
0x00000000000d9027: add byte ptr [rax], ch; adc al, 0xf4; call qword ptr [rax]; 
0x00000000000dfba7: add byte ptr [rax], ch; add bh, dl; jmp qword ptr [rcx]; 
0x00000000000d9b67: add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rbp + rbx + 0x5ab00000], al; hlt; call qword ptr [rdi]; 
0x00000000000e1e13: add byte ptr [rax], ch; add byte ptr [rax], al; mov bl, 0xfb; call qword ptr [rdi]; 
0x00000000000d744b: add byte ptr [rax], ch; in al, dx; cli; call qword ptr [rax - 0x5c]; 
0x00000000000dcba7: add byte ptr [rax], ch; mov edi, esi; jmp rdi; 
0x00000000000d61ab: add byte ptr [rax], ch; sbb dh, ah; dec dword ptr [rdx + rbp]; add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x00000000000d621b: add byte ptr [rax], ch; sub ah, dh; jmp rsp; 
0x00000000000d8fd7: add byte ptr [rax], cl; adc esi, esp; jmp qword ptr [rcx + 1]; 
0x0000000000000c97: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret 6; 
0x00000000000e39d7: add byte ptr [rax], cl; add byte ptr [rax], al; hlt; mov ebx, 0x59800000; std; jmp qword ptr [rax]; 
0x00000000000d750b: add byte ptr [rax], cl; add eax, 0xa820fffb; add byte ptr [rax], al; cmp byte ptr [rsi], dl; sti; call qword ptr [rax - 0x58]; 
0x00000000000d674b: add byte ptr [rax], cl; cmc; call qword ptr [rax + 0x50]; 
0x00000000000d627b: add byte ptr [rax], cl; cmp esi, esp; jmp qword ptr [rax]; 
0x00000000000d6fb3: add byte ptr [rax], cl; in eax, dx; clc; dec dword ptr [rax + 0x78000084]; idiv eax; jmp qword ptr [rax]; 
0x00000000000d78cb: add byte ptr [rax], cl; js 0xd78cb; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x00000000000d651b: add byte ptr [rax], cl; mov bh, 0xf4; jmp rax; 
0x00000000000b509e: add byte ptr [rax], cl; mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000b5097: add byte ptr [rax], cl; mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000b5090: add byte ptr [rax], cl; mov byte ptr [rip + 0x235c15], 8; mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000b5089: add byte ptr [rax], cl; mov byte ptr [rip + 0x235c1b], 8; mov byte ptr [rip + 0x235c15], 8; mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000d6b83: add byte ptr [rax], cl; ret 0xfff7; 
0x00000000000b50a5: add byte ptr [rax], cl; ret; 
0x00000000000d666b: add byte ptr [rax], cl; sal esp, cl; jmp qword ptr [rax]; 
0x00000000000e0e47: add byte ptr [rax], cl; sar edx, 1; jmp qword ptr [rdx]; 
0x00000000000d7123: add byte ptr [rax], cl; xlatb; stc; jmp rax; 
0x00000000000dc827: add byte ptr [rax], dh; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 9], ah; jmp rsi; 
0x00000000000ddee3: add byte ptr [rax], dh; add byte ptr [rax], al; add byte ptr [rcx], ah; add byte ptr [rbx + rdx], al; clc; jmp qword ptr [rdx]; 
0x00000000000de89f: add byte ptr [rax], dh; lahf; clc; call qword ptr [rdx]; 
0x00000000000e1cbf: add byte ptr [rax], dh; mov cl, 0xfb; jmp qword ptr [rdx]; 
0x00000000000beb68: add byte ptr [rax], dh; stc; dec dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x00000000000dbd9f: add byte ptr [rax], dh; sub dh, ch; jmp qword ptr [rbx]; 
0x00000000000da54f: add byte ptr [rax], dh; test ah, dh; call qword ptr [rsi]; 
0x00000000000da3bb: add byte ptr [rax], dl; add byte ptr [rax], al; add al, bl; and eax, 0x81bc0000; hlt; call qword ptr [rdi]; 
0x00000000000e37d3: add byte ptr [rax], dl; add byte ptr [rax], al; add al, dh; mov ecx, 0x52940000; std; call qword ptr [rcx]; 
0x00000000000e22f7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [0xffffffffe0a00000], dl; sti; call qword ptr [rax]; 
0x00000000000dd86b: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x2c00005a], cl; sal edi, 1; jmp qword ptr [rdx]; 
0x00000000000d979b: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x63ffffe7], bh; hlt; call qword ptr [rax]; 
0x00000000000de963: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x7bffff95], al; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax]; 
0x00000000000de927: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rbx + rbp*2], al; add byte ptr [rax - 0x5c], ah; clc; call qword ptr [rcx]; 
0x00000000000e2937: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rbx + rbp*4], dl; add byte ptr [rax - 0x26], al; cld; call qword ptr [rax]; 
0x00000000000ddb1f: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rbx*2 - 0x54810000], bh; bnd jmp qword ptr [rbx]; 
0x00000000000e0f47: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rcx + rdx*4], ah; add byte ptr [rdx + 0x77], bh; bnd jmp qword ptr [rcx]; 
0x00000000000da547: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rax], dh; test ah, dh; call qword ptr [rsi]; 
0x00000000000d901f: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdx + rdx], bh; add byte ptr [rax], al; sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x00000000000dc407: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi + rax*2], ah; add byte ptr [rax], al; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x0000000000081e5f: add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x305ba]; cmove rax, rdx; ret; 
0x000000000008f4f8: add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000009d0f5: add byte ptr [rax], dl; lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000002daa5: add byte ptr [rax], dl; lea rdx, [rip + 0x22a12]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e3f5: add byte ptr [rax], dl; lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000000e18f7: add byte ptr [rax], dl; wait; add byte ptr [rax], al; mov ah, 0x17; sti; jmp qword ptr [rdx + 5]; 
0x00000000000d974c: add byte ptr [rax], r8b; add byte ptr [rax + 0x19], ch; add byte ptr [rax], al; cld; cmp dh, ah; jmp rdx; 
0x00000000000d8fd0: add byte ptr [rax], r8b; add byte ptr [rax + rax + 0x13080000], al; hlt; jmp qword ptr [rcx + 1]; 
0x00000000000e0af8: add byte ptr [rax], r8b; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x00000000000dc21d: add byte ptr [rax], r8b; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x000000000005824d: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002daf5: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000dc45d: add byte ptr [rax], r8b; and byte ptr [rbx - 9], dl; call qword ptr [rbx]; 
0x00000000000dc40d: add byte ptr [rax], r8b; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x00000000000d6619: add byte ptr [rax], r8b; cmp ah, cl; hlt; jmp qword ptr [rax + 0x46]; 
0x000000000008edfd: add byte ptr [rax], r8b; cmp byte ptr [rip + 0x25c4c1], 0; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000208d5: add byte ptr [rax], r8b; cmp eax, -1; je 0x20858; mov eax, 0xffffffff; ret; 
0x0000000000020ac5: add byte ptr [rax], r8b; cmp eax, -1; je 0x20a48; mov eax, 0xffffffff; ret; 
0x000000000002252d: add byte ptr [rax], r8b; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000004e1ad: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000002d9bd: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000005767d: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; 
0x000000000005767d: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x0000000000058e5d: add byte ptr [rax], r8b; mov eax, 0x32; syscall; 
0x0000000000058e5d: add byte ptr [rax], r8b; mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x0000000000084ead: add byte ptr [rax], r8b; mov eax, 0x66; syscall; 
0x0000000000084ead: add byte ptr [rax], r8b; mov eax, 0x66; syscall; ret; 
0x000000000005764d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; 
0x000000000005764d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x0000000000052a1d: add byte ptr [rax], r8b; mov eax, 0xc9; syscall; 
0x0000000000052a1d: add byte ptr [rax], r8b; mov eax, 0xc9; syscall; ret; 
0x00000000000229cd: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x00000000000b753d: add byte ptr [rax], r8b; mov eax, 2; ret; 
0x000000000002253d: add byte ptr [rax], r8b; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000058d8d: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x292652]; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000058cad: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x2927ea]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000005945d: add byte ptr [rax], r8b; mov eax, edi; ror ax, 8; ret; 
0x000000000007df95: add byte ptr [rax], r8b; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000004db9d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000882dd: add byte ptr [rax], r8b; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000005900d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000000b45a5: add byte ptr [rax], r8b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000000a8ad: add byte ptr [rax], r8b; mov rax, -0x58; add rax, qword ptr fs:[0]; ret; 
0x00000000000565c5: add byte ptr [rax], r8b; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000852a5: add byte ptr [rax], r8b; mov rax, -0x58; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000068d6d: add byte ptr [rax], r8b; mov rax, -0x70; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000021acd: add byte ptr [rax], r8b; mov rax, -1; ret; 
0x000000000008c6e5: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000002320d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000233ad: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x0000000000082eed: add byte ptr [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x000000000004e21d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004dbfd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000055c2d: add byte ptr [rax], r8b; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005692d: add byte ptr [rax], r8b; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000004dbdd: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000002a4dd: add byte ptr [rax], r8b; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x000000000004fa8d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000004fa7d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000004fa6d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000004fa5d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000004fa4d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000004fa3d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000000359dd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000002092d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005ed4d: add byte ptr [rax], r8b; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000003ea43: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000068da3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dc3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000016c13: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000003ebd3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb53: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000016c0d: add byte ptr [rax], r8b; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000008b58d: add byte ptr [rax], r8b; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x00000000000d6581: add byte ptr [rax], r8b; or dh, al; hlt; jmp qword ptr [rax + 0x44]; 
0x000000000009cc2d: add byte ptr [rax], r8b; pop rbx; ret; 
0x0000000000008cb5: add byte ptr [rax], r8b; ret; 
0x0000000000021c15: add byte ptr [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000007f555: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000002d01d: add byte ptr [rax], r8b; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000000353fd: add byte ptr [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000004ff6d: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000056576: add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000008ed0d: add byte ptr [rbp + 0x10], dh; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x000000000009d03f: add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x000000000001846e: add byte ptr [rbp + 0x19], al; rol byte ptr [rcx - 0x7d], cl; ret 0x4404; 
0x000000000008523d: add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x00000000000521ee: add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000000918a4: add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x000000000001da19: add byte ptr [rbp + 0x29], cl; hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000000917e4: add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000001d29a: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000000a1639: add byte ptr [rbp + 0x31], al; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0x49]; 
0x00000000000559e0: add byte ptr [rbp + 0x31], al; inc dword ptr [rbp + 0x31]; imul bl; ret 0x8b48; 
0x0000000000081fba: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000007f87f: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007fa5b: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007a577: add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000055c5f: add byte ptr [rbp + 0x31], al; sar byte ptr [rax + 0x3d], cl; syscall; 
0x0000000000091a05: add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x0000000000084e3f: add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000000a9061: add byte ptr [rbp + 0x39], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000093d10: add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000005770f: add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x00000000000882d0: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000000567a6: add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000055bc5: add byte ptr [rbp + 0x451675c0], al; xor edx, edx; mov eax, 0x3d; syscall; 
0x000000000008510b: add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000009d86d: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000016db6: add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x00000000000205f7: add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000056b36: add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x00000000000a91ef: add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000613b1: add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x00000000000a9111: add byte ptr [rbp + 0x6e], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000001a73d: add byte ptr [rbp + 0x76], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000058c09: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000009de44: add byte ptr [rbp + 0xa], dh; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000b5b1c: add byte ptr [rbp + 0xf], al; mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x0000000000094fc4: add byte ptr [rbp + 0xf], al; mov dh, 0xe4; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000009293f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000009282f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000574a5: add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x00000000000a959a: add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x000000000008ee06: add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x000000000005397b: add byte ptr [rbp + 1], cl; ret 0x894c; 
0x0000000000053d1f: add byte ptr [rbp + 1], cl; ret 0xf983; 
0x000000000009fa5a: add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x0000000000068e7e: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000009cf5c: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000002417f: add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000019990: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000008518e: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000092105: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000093f0: add byte ptr [rbp + rax - 0x18], dh; mov eax, 0xc90004ff; ret; 
0x000000000000954a: add byte ptr [rbp + rax - 0x18], dh; pop rsi; inc byte ptr [rax + rax]; leave; ret; 
0x000000000000965f: add byte ptr [rbp + rax - 0x18], dh; std; add al, 0; leave; ret; 
0x00000000000deb63: add byte ptr [rbp + rbp*2], bh; add byte ptr [rax - 0x42], bl; clc; call qword ptr [rbx]; 
0x00000000000d9b6b: add byte ptr [rbp + rbx + 0x5ab00000], al; hlt; call qword ptr [rdi]; 
0x00000000000c8c37: add byte ptr [rbp + rcx + 0xdbf0000], bh; add byte ptr [rax], al; ret 0xd; 
0x00000000000378ff: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rdx + 8], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rsi], esi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a41f: add byte ptr [rbp + rcx*4 + 0x1d], cl; fnstcw word ptr [rax]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b28f: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul ebp, dword ptr [rdx], 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul edx, dword ptr [rsi + 8], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; jns 0x38917; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a56f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rdi], esi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b13f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x4900082b; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003837f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x49000857; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f2fa: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov esi, 0x490007f0; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038196: add byte ptr [rbp + rcx*4 + 0x1d], cl; movabs byte ptr [0x4993146349000859], al; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003822f: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rcx + 8], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afef: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rip + 0x63490008], ebp; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037cef: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop r14; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae9f: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop rcx; or byte ptr cs:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003861f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rbp + 8], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3df: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rcx], ebp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a0f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rcx + 8], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rdx], edi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad4f: add byte ptr [rbp + rcx*4 + 0x1d], cl; test eax, 0x4900082f; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f8f: add byte ptr [rbp + rcx*4 + 0x1d], cl; test eax, 0x4900085b; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaaf: add byte ptr [rbp + rcx*4 + 0x1d], cl; xor cl, byte ptr [r8]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002519c: add byte ptr [rbp + rcx*4 + 0x24], cl; sub ecx, dword ptr [rax + 0x39]; ret; 
0x000000000001e088: add byte ptr [rbp + rcx*4 + 0x25], cl; sbb byte ptr [rbx - 0x76b7ffd4], dh; ret 0x294d; 
0x00000000000762d2: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000747dd: add byte ptr [rbp + rcx*4 + 0x35], cl; ret 0x58c; 
0x00000000000291eb: add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x0000000000028809: add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000007f96e: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x000000000007fa68: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x000000000007fb62: add byte ptr [rbp + rcx*4 + 0x4d], cl; ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x00000000000e3373: add byte ptr [rbp + rsi*4 + 0x3d980000], cl; std; jmp qword ptr [rbx + 1]; 
0x000000000002e78c: add byte ptr [rbp - 0x12], dh; test byte ptr [rip + 0x2bc147], 2; lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000059181: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x59190; ret; 
0x000000000005911e: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5912c; ret; 
0x00000000000e22e8: add byte ptr [rbp - 0x1f6c0000], ah; sti; call qword ptr [rdx]; 
0x00000000000b96c4: add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x000000000007363f: add byte ptr [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x00000000000238bb: add byte ptr [rbp - 0x38ef8b40], al; add eax, 0x2c6556; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000058cba: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000000c8ee3: add byte ptr [rbp - 0x3ffffff1], bh; sldt word ptr [rax]; ret; 
0x0000000000084fd4: add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000568c5: add byte ptr [rbp - 0x47e98a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000056b95: add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000058d95: add byte ptr [rbp - 0x47e98a40], al; sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000c7e83: add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x0000000000052847: add byte ptr [rbp - 0x57c03b0], cl; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x00000000000a2a16: add byte ptr [rbp - 0x57f2fad], cl; or dword ptr [rdi], ecx; xchg eax, esi; ret 0x8348; 
0x000000000005627a: add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000076479: add byte ptr [rbp - 0x75], cl; je 0x764a2; and byte ptr [rax + 1], cl; ret; 
0x00000000000270be: add byte ptr [rbp - 0x75], cl; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000007c877: add byte ptr [rbp - 0x76ba7fec], cl; call 0x1fff1c3; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000094555: add byte ptr [rbp - 0x77], al; ret 0xc748; 
0x000000000006696f: add byte ptr [rbp - 0x7cf78140], al; call 0x849f27b; pop rbx; ret; 
0x00000000000dc02b: add byte ptr [rbp - 0xa], al; jmp qword ptr [rsi]; 
0x000000000005a945: add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000046b69: add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000000520b5: add byte ptr [rbx + 0x157401f8], al; cmp eax, 2; je 0x520c8; xor eax, eax; ret; 
0x00000000000bab63: add byte ptr [rbx + 0x22cc8a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000009d56d: add byte ptr [rbx + 0x24d6ec0d], cl; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000008f785: add byte ptr [rbx + 0x258a5b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000008eba2: add byte ptr [rbx + 0x25bf6f05], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000008eb05: add byte ptr [rbx + 0x25c00c05], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000005a93f: add byte ptr [rbx + 0x290baa05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000058d8f: add byte ptr [rbx + 0x29265205], cl; add byte ptr [rbp - 0x47e98a40], al; sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000058caf: add byte ptr [rbx + 0x2927ea05], cl; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000056b8f: add byte ptr [rbx + 0x29485205], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000b1d65: add byte ptr [rbx + 0x2b], 4; mov byte ptr [rsp + rbx*8 - 0xd], dh; ret; 
0x000000000002db3f: add byte ptr [rbx + 0x2bcd8a15], cl; add bh, dh; ret 0; 
0x000000000002a457: add byte ptr [rbx + 0x2bd3963d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000022907: add byte ptr [rbx + 0x2c74b505], al; add byte ptr [rcx], al; ret; 
0x0000000000023eff: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000084cd9: add byte ptr [rbx + 0x31d2313b], cl; imul al; stosd dword ptr [rdi], eax; sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x000000000004e1ff: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000004dbcf: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000097ba: add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000065d3b: add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000001a163: add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000004e1cf: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000004dbaf: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000036820: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x000000000004d6df: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000055c1d: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056bd9: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000006876f: add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x6877f; call rax; 
0x0000000000039a8f: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003988f: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003968f: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000004fd3b: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x4ff50; xor eax, eax; ret; 
0x0000000000036a82: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x000000000003ea4f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x000000000002bc3f: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; jmp rax; 
0x000000000001c2d8: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000001c47a: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000000ecc1: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000001a03b: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000006806f: add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000005ba3c: add byte ptr [rbx + 0x63], cl; xor al, 0xb1; add rsi, r9; jmp rsi; 
0x000000000007ffa4: add byte ptr [rbx + 0x7401046e], al; mov rax, rdx; pop rbx; ret; 
0x000000000008c277: add byte ptr [rbx + 0x7525087b], al; adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000009d5a0: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000003f0ff: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f08f: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f01f: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000081e4a: add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000000e158b: add byte ptr [rbx + rax - 5], dl; jmp qword ptr [rbx + 1]; 
0x00000000000e016b: add byte ptr [rbx + rax*4 + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x00000000000de64b: add byte ptr [rbx + rax*4 - 8], dl; jmp rax; 
0x00000000000de5cb: add byte ptr [rbx + rax*4], ah; clc; call qword ptr [rdx]; 
0x00000000000de92b: add byte ptr [rbx + rbp*2], al; add byte ptr [rax - 0x5c], ah; clc; call qword ptr [rcx]; 
0x00000000000de953: add byte ptr [rbx + rbp*2], ch; add byte ptr [rax - 0x5c], bh; clc; call qword ptr [rcx]; 
0x00000000000de913: add byte ptr [rbx + rbp*2], ch; add byte ptr [rax], al; pop rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rdi]; 
0x00000000000e297b: add byte ptr [rbx + rbp*4 - 0xc000000], dl; cld; jmp qword ptr [rcx]; 
0x00000000000e293b: add byte ptr [rbx + rbp*4], dl; add byte ptr [rax - 0x26], al; cld; call qword ptr [rax]; 
0x000000000000a301: add byte ptr [rbx + rbp*8], al; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000008eafe: add byte ptr [rbx + rcx*4 + 0x1d], cl; or al, al; and eax, 0xc058b00; shl byte ptr [rip + 0x138b4100], 0x39; ret 0x840f; 
0x000000000002725f: add byte ptr [rbx + rcx*4 + 0x40], cl; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000612db: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000093ee7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000000a93e7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000065a29: add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000da783: add byte ptr [rbx + rcx*4], cl; hlt; call qword ptr [rbx]; 
0x00000000000ddeeb: add byte ptr [rbx + rdx], al; clc; jmp qword ptr [rdx]; 
0x0000000000056a37: add byte ptr [rbx - 0x358af602], al; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000007a6ef: add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x0000000000051e4e: add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x000000000009919d: add byte ptr [rbx - 0x5a76b], cl; inc dword ptr [rbx - 0x78f0d006]; and dword ptr [rax], r8d; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000097bbd: add byte ptr [rbx - 0x5a76b], cl; inc dword ptr [rbx - 0x78f0d006]; cmp al, 0; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000098fed: add byte ptr [rbx - 0x5a76b], cl; inc dword ptr [rbx - 0x78f0d006]; mov esp, dword ptr [rax + rax]; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000099725: add byte ptr [rbx - 0x5a76b], cl; inc dword ptr [rbx - 0x78f0d006]; sbb qword ptr [r8], r8; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000097b66: add byte ptr [rbx - 0x5a76b], cl; inc dword ptr [rbx - 0x78f0d006]; sub dword ptr [rax + rax], esi; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000074c92: add byte ptr [rbx - 0x6bf00008], al; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000009ce31: add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x379f0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004d6ef: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000004bf2f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000736fc: add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000000985cd: add byte ptr [rbx - 0x78f0d006], al; and eax, 0x83000039; ret 0xbf08; 
0x0000000000079f6b: add byte ptr [rbx - 0x78f0d008], al; mov eax, 0x8900001d; ret 0x349; 
0x000000000007961d: add byte ptr [rbx - 0x78f0d008], al; mov ebx, 0x89000025; ret 0x349; 
0x000000000006f7cb: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x00000000000790cf: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900002b; ret 0x349; 
0x000000000000a424: add byte ptr [rbx - 0x7bf00008], al; int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000004fb96: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000000fe05: add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000012de9: add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000013b36: add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x000000000001aad8: add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000010b7c: add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x0000000000012df2: add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000012d4f: add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x00000000000770b3: add byte ptr [rbx - 0x8bf43], al; call qword ptr [rbx + 0xf]; 
0x00000000000ddb23: add byte ptr [rbx*2 - 0x54810000], bh; bnd jmp qword ptr [rbx]; 
0x00000000000e1aeb: add byte ptr [rbx*4 + 0x29200000], al; sti; call rbx; 
0x000000000008b0b8: add byte ptr [rbx], al; add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000000d8d30: add byte ptr [rbx], al; hlt; jmp qword ptr [rax]; 
0x00000000000be830: add byte ptr [rbx], ch; clc; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000270ff: add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000749b5: add byte ptr [rcx + 0x29], cl; ret; 
0x000000000001b4cf: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x000000000001b436: add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x00000000000b3112: add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x0000000000081a0f: add byte ptr [rcx + 0x39], cl; ret; 
0x000000000001a0fd: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x00000000000233a0: add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000019ea1: add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x000000000001a030: add byte ptr [rcx + 0x480a75f0], cl; add esp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000092082: add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x000000000001ce10: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; ret; 
0x000000000007f2fc: add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000000373ee: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006856e: add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x0000000000035c4c: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000004da28: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000006e201: add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x0000000000079fba: add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x000000000005b962: add byte ptr [rcx + 0x63], cl; xor al, 0xa9; add rsi, r9; jmp rsi; 
0x0000000000081e44: add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000009dc46: add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x0000000000051b27: add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000020e20: add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000002e27d: add byte ptr [rcx + 0xf], al; mov dh, 0x44; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000076cc8: add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x000000000002e277: add byte ptr [rcx + 0xf], al; mov dh, 0x54; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x000000000008873c: add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x0000000000074567: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000007957e: add byte ptr [rcx + 1], al; ret 0x8b48; 
0x0000000000017345: add byte ptr [rcx + 1], cl; ret 0x149; 
0x00000000000b5960: add byte ptr [rcx + 1], cl; ret 0xef89; 
0x000000000005029f: add byte ptr [rcx + 1], cl; ret; 
0x000000000002337d: add byte ptr [rcx + rax + 0x57], al; sbb byte ptr [rax + 0x39], cl; ret; 
0x000000000008ec64: add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000000b0f2: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x00000000000dff83: add byte ptr [rcx + rax*4 + 0x14580000], bl; cli; jmp rdx; 
0x00000000000850ec: add byte ptr [rcx + rbp - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000e270b: add byte ptr [rcx + rbp*4], ah; add byte ptr [rax], al; sub byte ptr [rdx - 4], 0xff; ret; 
0x00000000000da72b: add byte ptr [rcx + rbp], al; add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x00000000000e1793: add byte ptr [rcx + rbx*4 + 0x9880000], ch; sti; call qword ptr [rdx]; 
0x00000000000e175b: add byte ptr [rcx + rbx*4], dh; add byte ptr [rax + 9], dl; sti; jmp qword ptr [rsi]; 
0x0000000000020ca4: add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x0000000000080257: add byte ptr [rcx + rcx*4 + 0x23], cl; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000068cb1: add byte ptr [rcx + rcx*4 + 0x25], al; ret; 
0x000000000000e356: add byte ptr [rcx + rcx*4 + 0x2d], cl; ret 0x2db5; 
0x00000000000bb77f: add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000001dd1a: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000008cce9: add byte ptr [rcx + rcx*4 - 0x12], cl; xor eax, eax; call 0x8e000; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000006bc52: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000007799f: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000006b6ac: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000000822d1: add byte ptr [rcx + rcx*4 - 0x17], cl; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000055f3c: add byte ptr [rcx + rcx*4 - 0x18], al; syscall; 
0x0000000000083789: add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x00000000000800ef: add byte ptr [rcx + rcx*4 - 0x1d], cl; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000058dc4: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x2b; syscall; 
0x00000000000568f4: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000056824: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000005c95c: add byte ptr [rcx + rcx*4 - 0x1f], cl; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000001c93f: add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000001e1de: add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000016bd7: add byte ptr [rcx + rcx*4 - 0x40], al; jne 0x16bfc; add rsp, 0x118; ret; 
0x0000000000024ade: add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082e32: add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000081c6f: add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000021763: add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000007ddac: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000000bae8f: add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000082423: add byte ptr [rcx + rcx*4 - 7], cl; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000006df8d: add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000084fcc: add byte ptr [rcx + rdi - 0x75], dh; add eax, 0x266413; test eax, eax; jne 0x85036; mov eax, 0x101; syscall; 
0x00000000000e0f7b: add byte ptr [rcx + rdx*4 - 0x21800000], dl; cli; jmp qword ptr [rdx]; 
0x00000000000e0f4b: add byte ptr [rcx + rdx*4], ah; add byte ptr [rdx + 0x77], bh; bnd jmp qword ptr [rcx]; 
0x00000000000daf9b: add byte ptr [rcx + rsi - 0x2a500000], dh; hlt; jmp rsi; 
0x00000000000566f1: add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x00000000000187dc: add byte ptr [rcx - 0x1e], al; jg 0x18825; mov dword ptr [rax], edx; mov dword ptr [rsi], edx; ret; 
0x000000000008e48e: add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000055782: add byte ptr [rcx - 0x39], al; add byte ptr [r9], r8b; add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x00000000000c8c33: add byte ptr [rcx - 0x43fffff3], bh; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000006361f: add byte ptr [rcx - 0x46], al; add eax, 0xe9000000; ret; 
0x0000000000016ce2: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000056bbb: add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000079b4c: add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000007d834: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000008eb0b: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000008eba8: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x0000000000079f67: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x00000000000790cb: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x00000000000173b7: add byte ptr [rcx - 0x75], cl; add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000006b4f7: add byte ptr [rcx - 0x75], cl; ja 0x6b514; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000000bb86a: add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x000000000006d8cf: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000001b13f: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000079194: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000b310b: add byte ptr [rcx - 0x75], cl; xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000007997e: add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x0000000000059107: add byte ptr [rcx - 0x77], al; ret; 
0x000000000000d700: add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000000baee5: add byte ptr [rcx - 0x77], cl; ret 0x8349; 
0x0000000000089774: add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000085cc2: add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000002dc2b: add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x000000000002dbe4: add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000b452f: add byte ptr [rcx - 0x77], cl; retf 0x8040; call qword ptr [rax + 0x74]; 
0x000000000005735f: add byte ptr [rcx - 0x77], cl; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000000950bc: add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000007edbb: add byte ptr [rcx - 0x7cb7e8f4], cl; ret 0x4804; 
0x000000000006c061: add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x0000000000077545: add byte ptr [rcx - 0x7d], al; in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x0000000000069197: add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x00000000000235bf: add byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x000000000006940e: add byte ptr [rcx - 0x7d], cl; ret 0x6601; 
0x00000000000300af: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000002e9bf: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000027107: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000006db2d: add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x00000000000b67af: add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000008180b: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000a0b2b: add byte ptr [rcx - 0xa], al; ret 0x7501; 
0x00000000000d9de0: add byte ptr [rcx - 0xc], ch; call qword ptr [rdi]; 
0x000000000001ea41: add byte ptr [rcx - 1], al; xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000035472: add byte ptr [rcx - 9], cl; ret 1; 
0x0000000000035498: add byte ptr [rcx - 9], cl; ret 2; 
0x00000000000bd9bc: add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000e0afb: add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x00000000000639de: add byte ptr [rcx], 0; add al, ch; jo 0x639e0; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x00000000000d5ae0: add byte ptr [rcx], 0xfe; jmp qword ptr [rax + 1]; 
0x00000000000ddee8: add byte ptr [rcx], ah; add byte ptr [rbx + rdx], al; clc; jmp qword ptr [rdx]; 
0x00000000000940f7: add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x0000000000055786: add byte ptr [rcx], al; add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x00000000000233d9: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2c43e3; ret; 
0x00000000000233b9: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2c43fb; ret; 
0x000000000002417b: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000051a10: add byte ptr [rcx], al; add byte ptr [rax], al; cmp rdx, rcx; jne 0x519f2; vzeroupper; ret; 
0x00000000000504af: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000017dbf: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000850e5: add byte ptr [rcx], al; cmp eax, 0x410000; je 0x85118; mov eax, 0x101; syscall; 
0x000000000002d00c: add byte ptr [rcx], al; je 0x2d038; test rax, rax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x00000000000850ea: add byte ptr [rcx], al; je 0x85118; mov eax, 0x101; syscall; 
0x0000000000008ced: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000008f78b: add byte ptr [rcx], al; pop rbx; ret; 
0x000000000002290d: add byte ptr [rcx], al; ret; 
0x000000000005a95c: add byte ptr [rcx], bh; ret; 
0x00000000000590bf: add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000052bd1: add byte ptr [rcx], ch; ret 0xd129; 
0x0000000000052aeb: add byte ptr [rcx], ch; ret; 
0x000000000001bba6: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000a9414: add byte ptr [rcx], cl; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000d7f27: add byte ptr [rcx], dh; adc esi, ebx; jmp qword ptr [rcx + 1]; 
0x00000000000249cb: add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x000000000008051b: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000055d45: add byte ptr [rcx], dh; idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x0000000000016e48: add byte ptr [rcx], dh; imul al; rcr byte ptr [rcx], 1; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000093656: add byte ptr [rcx], dh; imul al; ret 0xf74e; 
0x0000000000079484: add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000080cf1: add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000000832b4: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x0000000000017ed4: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000008104c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000007fe48: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x0000000000016bb5: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000000a4aa: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; sar byte ptr [rsi + 0x20000], 0xe8; xchg eax, edi; ret 4; 
0x000000000000a449: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; sar byte ptr [rsi + 0x20001], 0xe8; clc; ret 4; 
0x000000000005a97b: add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x0000000000084e75: add byte ptr [rcx], dh; shr bl, 0xb5; call 0x593b0; nop; mov eax, 0x3f; syscall; 
0x0000000000051952: add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000e258b: add byte ptr [rdi + 0x3da00000], ah; cld; call qword ptr [rdx]; 
0x00000000000518f2: add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000b65f0: add byte ptr [rdi + 1], bh; call rax; 
0x00000000000e1d33: add byte ptr [rdi + rbx*4], cl; add byte ptr [rax], bh; mov dl, 0xfb; jmp qword ptr [rbp]; 
0x0000000000059c16: add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x59c28; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000070b35: add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000000d8d2b: add byte ptr [rdi + rcx], al; add byte ptr [rax], al; add esi, esp; jmp qword ptr [rax]; 
0x00000000000dbd9b: add byte ptr [rdi + rdi + 0x2a300000], dh; cmc; jmp qword ptr [rbx]; 
0x00000000000dfd73: add byte ptr [rdi + rdi*2 + 0x6e80000], cl; cli; jmp qword ptr [rbx]; 
0x00000000000dfd8b: add byte ptr [rdi + rdi*2 + 0x7000000], ah; cli; jmp qword ptr [rbx]; 
0x00000000000dfda3: add byte ptr [rdi + rdi*2 + 0x7180000], bh; cli; jmp qword ptr [rsi]; 
0x00000000000dbcf3: add byte ptr [rdi + rdi], cl; add byte ptr [rax], al; sbb byte ptr [rdi], ah; cmc; call qword ptr [rsi]; 
0x00000000000e3163: add byte ptr [rdi + rsi - 3], cl; call qword ptr [rbx]; 
0x00000000000c8edb: add byte ptr [rdi - 0x45fffff1], dh; sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000000ddb27: add byte ptr [rdi - 0x55], bh; bnd jmp qword ptr [rbx]; 
0x00000000000da54b: add byte ptr [rdi], ah; add byte ptr [rax], dh; test ah, dh; call qword ptr [rsi]; 
0x00000000000dfd90: add byte ptr [rdi], al; cli; jmp qword ptr [rbx]; 
0x00000000000da503: add byte ptr [rdi], bl; add byte ptr [rax], al; test al, 0x83; hlt; jmp qword ptr [rax]; 
0x00000000000d6278: add byte ptr [rdi], ch; add byte ptr [rax], al; or byte ptr [rbx], bh; hlt; jmp qword ptr [rax]; 
0x00000000000508a6: add byte ptr [rdi], cl; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000016b96: add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000090aa6: add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x000000000003e216: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000051aa7: add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000003f24f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000003f2bf: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000004fa7f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000004fa6f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000004fa3f: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000004fa5f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000004fa4f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000000a2a12: add byte ptr [rdi], cl; mov dh, 0x5d; add byte ptr [rbp - 0x57f2fad], cl; or dword ptr [rdi], ecx; xchg eax, esi; ret 0x8348; 
0x00000000000b5744: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000094707: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007c27b: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000051b5f: add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x00000000000b4551: add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000002fc5f: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000016463: add byte ptr [rdi], cl; mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000002092f: add byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ce1f: add byte ptr [rdi], cl; mov dh, 2; ret; 
0x00000000000359df: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000003551f: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000006fd13: add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x00000000000352cf: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000352ff: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000352ef: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000810bf: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x81100; add rax, rdi; ret; 
0x00000000000810cf: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000352df: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000079fb4: add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x0000000000016b6b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b73: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b7b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000000a487: add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000000b5ad7: add byte ptr [rdi], cl; test byte ptr [rdx], dl; add al, byte ptr [rax]; add byte ptr [rax + 0xf], cl; mov edi, 0x148015b; ret; 
0x00000000000b1f5b: add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x000000000009ce51: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000056a27: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x000000000001b7cd: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000020316: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000084ff9: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x000000000001afe6: add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000021818: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000065d2e: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000056694: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000000942d7: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000009ca38: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000b2c6c: add byte ptr [rdi], cl; test ebp, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000002be4e: add byte ptr [rdi], cl; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000056215: add byte ptr [rdi], cl; xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x68f19; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000077128: add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000551b5: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf748; 
0x000000000002a86e: add byte ptr [rdi], cl; xchg eax, ebx; ret 0x3d83; 
0x00000000000861b3: add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x000000000005da14: add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x000000000007dda7: add byte ptr [rdx + 0x10], bh; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000000a13e: add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000004d69f: add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000004beef: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x00000000000b67b7: add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000008bb8c: add byte ptr [rdx + 0x63], cl; add al, 0xa1; add rax, rcx; jmp rax; 
0x000000000008c4b4: add byte ptr [rdx + 0x63], cl; add al, 0xa7; add rax, rdi; jmp rax; 
0x0000000000058cb5: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000017e12: add byte ptr [rdx + 0x6c], bh; call 0xaa30; xor eax, eax; ret; 
0x00000000000e0f4f: add byte ptr [rdx + 0x77], bh; bnd jmp qword ptr [rcx]; 
0x00000000000590ec: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x000000000001cab7: add byte ptr [rdx + rax - 0xd], dh; ret; 
0x00000000000e3abe: add byte ptr [rdx + rax - 0xfffffb], bl; inc dword ptr [rcx]; or ch, byte ptr [rdi + 5]; ret; 
0x0000000000081e41: add byte ptr [rdx + rax], cl; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000008046e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e80e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db1e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e7de: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000008053e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081dee: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000008049e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000000de89b: add byte ptr [rdx + rbp*2 - 0x60d00000], dh; clc; call qword ptr [rdx]; 
0x00000000000e185b: add byte ptr [rdx + rbx*4], dh; add byte ptr [rax + 0x11], al; sti; jmp qword ptr [rcx]; 
0x00000000000b68f7: add byte ptr [rdx + rbx*8 + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x00000000000c8837: add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000005a963: add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x28be4c; pop rbx; ret; 
0x0000000000065370: add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x000000000006536f: add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x00000000000229a3: add byte ptr [rdx + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x229d0; movzx eax, byte ptr [rax]; ret; 
0x00000000000d9023: add byte ptr [rdx + rdx], bh; add byte ptr [rax], al; sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x00000000000e12e3: add byte ptr [rdx + rsi*8], cl; cli; call rdx; 
0x000000000006726e: add byte ptr [rdx - 0x77], cl; xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x6727e; call rsi; 
0x00000000000dc830: add byte ptr [rdx - 9], ah; jmp rsi; 
0x00000000000dc220: add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x00000000000a08d9: add byte ptr [rdx], ah; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000000a450: add byte ptr [rdx], al; add al, ch; clc; ret 4; 
0x000000000000a4b1: add byte ptr [rdx], al; add al, ch; xchg eax, edi; ret 4; 
0x00000000000b4c6b: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000068e2c: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000002e74e: add byte ptr [rdx], al; lea rdx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e60e: add byte ptr [rdx], al; lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4ae: add byte ptr [rdx], al; lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7b5: add byte ptr [rdx], al; lea rdx, [rip + 0x224c2]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e675: add byte ptr [rdx], al; lea rdx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e515: add byte ptr [rdx], al; lea rdx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e794: add byte ptr [rdx], al; lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002e654: add byte ptr [rdx], al; lea rdx, [rip + 0x22a53]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e5b4: add byte ptr [rdx], al; lea rdx, [rip + 0x23373]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000002d9e8: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008046c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e80c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db1c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e7dc: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000008053c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081dec: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000008049c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000000850e7: add byte ptr [rip + 0x410000], bh; je 0x85118; mov eax, 0x101; syscall; 
0x00000000000850e6: add byte ptr [rip + 0x410000], dil; je 0x85118; mov eax, 0x101; syscall; 
0x0000000000080020: add byte ptr [rip + 0x48000000], al; mov eax, edx; pop rbx; ret; 
0x0000000000080471: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e811: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db21: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e7e1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000080541: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081df1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000000804a1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000003725f: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000003725e: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000036992: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000007527f: add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000000352c5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000004db75: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000022845: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000003ea45: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000068da5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dc5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000016c15: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000007f7f5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000022885: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b6905: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000022865: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x000000000003ebd5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb55: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000052a10: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x0000000000050405: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000081885: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x00000000000352c4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000022864: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x0000000000050404: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000081884: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x00000000000590ba: add byte ptr [rsi + 0x80], bh; cmp eax, edx; jne 0x590cc; nop; mov eax, 0xca; syscall; 
0x00000000000591a7: add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000008b014: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x0000000000055f37: add byte ptr [rsi + 0x81], bh; mov eax, r13d; syscall; 
0x00000000000590e7: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000050595: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000035f54: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008106b: add byte ptr [rsi + 0xf], ah; je 0x810bf; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000070c03: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x23e8; 
0x0000000000070bda: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000024567: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x0000000000023f9f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x000000000007395a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xcce8; 
0x0000000000070ba1: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000080fb4: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000024566: add byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x00000000000b6c0e: add byte ptr [rsi + 1], bh; mov edi, 1; call rax; 
0x00000000000e1693: add byte ptr [rsi + rax - 5], bh; call qword ptr [rdi + 1]; 
0x00000000000dc40b: add byte ptr [rsi + rax*2], ah; add byte ptr [rax], al; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x000000000002e461: add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x00000000000d9f4b: add byte ptr [rsi + rbp*2], dl; hlt; call qword ptr [rdi]; 
0x00000000000b6897: add byte ptr [rsi + rbx*8 + 0x48], dh; add esp, 8; ret; 
0x00000000000e1238: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000000e11d0: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000000e1204: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000000dbbf3: add byte ptr [rsi + rdi], cl; add byte ptr [rax], al; sbb byte ptr [rdi], bl; cmc; jmp qword ptr [rbx]; 
0x0000000000064130: add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x000000000006412f: add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x00000000000c902f: add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000000c882f: add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x00000000000be9f4: add byte ptr [rsi - 0x50af0008], ch; clc; jmp rax; 
0x0000000000008645: add byte ptr [rsi - 0x70], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000b1d7d: add byte ptr [rsi - 0x70], ah; mov eax, 0x26; syscall; 
0x00000000000b1d7d: add byte ptr [rsi - 0x70], ah; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xb1d90; ret; 
0x000000000005903d: add byte ptr [rsi - 0x70], ah; mov eax, 0x29; syscall; 
0x000000000005903d: add byte ptr [rsi - 0x70], ah; mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x59050; ret; 
0x0000000000058d5d: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x0000000000058d5d: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x58d70; ret; 
0x00000000000568bd: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rip + 0x294b22]; test eax, eax; jne 0x568e0; mov eax, 1; syscall; 
0x0000000000068f1d: add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000004beff: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000004bf0f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000007f33b: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000001e0a1: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000020970: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000000de0b3: add byte ptr [rsi - 8], bl; call rcx; 
0x000000000002e427: add byte ptr [rsi - 9], dh; ret 0; 
0x0000000000016e29: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000cc6d7: add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000052534: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d9843: add byte ptr [rsp + rax*2], cl; hlt; call qword ptr [rdi + 2]; 
0x00000000000dc21b: add byte ptr [rsp + rax*2], dh; add byte ptr [rax], al; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x00000000000da563: add byte ptr [rsp + rax*4 - 0xc], bh; call qword ptr [rdi + 1]; 
0x00000000000da53b: add byte ptr [rsp + rax*4], ah; hlt; call qword ptr [rdi]; 
0x00000000000dfba3: add byte ptr [rsp + rbp*2], dl; add byte ptr [rax], ch; add bh, dl; jmp qword ptr [rcx]; 
0x00000000000e1a33: add byte ptr [rsp + rbx*4], cl; add al, cl; and al, 0xfb; call qword ptr [rax]; 
0x00000000000da29b: add byte ptr [rsp + rdi*2 - 0xc], dl; jmp qword ptr [rdi + 2]; 
0x00000000000dc4c3: add byte ptr [rsp + rdx*2 - 9], ch; call qword ptr [rcx + 1]; 
0x00000000000d923b: add byte ptr [rsp + rdx], dl; add al, ah; and al, 0xf4; jmp qword ptr [rdx + 1]; 
0x0000000000060dec: add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x000000000008b632: add byte ptr [rsp + rsi*2], al; or bh, bh; and eax, 0x25cbe4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x00000000000e29b3: add byte ptr [rsp + rsi*8], bh; cld; jmp rsp; 
0x000000000005dbd2: add byte ptr [rsp - 0x18], dh; int 0xaa; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000005dbd1: add byte ptr [rsp - 0x18], sil; int 0xaa; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000de943: add byte ptr [rsp - 8], ch; call qword ptr [rcx]; 
0x00000000000de1eb: add byte ptr [rsp], al; add byte ptr [rax], al; and byte ptr [rdi], bh; clc; jmp qword ptr [rdi + 0x11]; 
0x00000000000e2233: add byte ptr [rsp], cl; add byte ptr [rax - 0x23], cl; sti; jmp qword ptr [rbp]; 
0x00000000000d6269: add byte ptr cs:[rax], al; cwde; cmp esp, esi; jmp rax; 
0x00000000000d6261: add byte ptr cs:[rax], al; js 0xd629d; hlt; call qword ptr [rax - 0x67ffffd2]; cmp esp, esi; jmp rax; 
0x000000000000a300: add byte ptr cs:[rbx + rbp*8], al; mov byte ptr [rcx], bh; ret 0x860f; 
0x0000000000008cec: add byte ptr cs:[rcx], al; pop rbp; ret; 
0x00000000000dbbf5: add byte ptr ds:[rax], al; sbb byte ptr [rdi], bl; cmc; jmp qword ptr [rbx]; 
0x0000000000087cc7: add byte ptr es:[rax + 0x39], cl; ret 0xf48; 
0x00000000000821bd: add byte ptr es:[rax + 0x39], cl; ret; 
0x000000000007ce32: add byte ptr es:[rax + 0x63], cl; ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x00000000000794c4: add byte ptr es:[rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x0000000000079b9a: add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000078cda: add byte ptr es:[rax - 0x77], cl; ret 0x2b48; 
0x0000000000084fd3: add byte ptr es:[rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000058cb7: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000000de1ed: add byte ptr fs:[rax], al; and byte ptr [rdi], bh; clc; jmp qword ptr [rdi + 0x11]; 
0x00000000000d6b01: add byte ptr fs:[rax], al; clc; mov dh, 0xf7; call rsp; 
0x00000000000de3d5: add byte ptr gs:[rax], al; js 0xde442; clc; jmp qword ptr [rsi + 0xa]; 
0x00000000000d6379: add byte ptr ss:[rax], al; js 0xd63eb; hlt; call rsp; 
0x000000000004a12f: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000000bd808: add ch, bh; idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x00000000000d34dc: add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000d34dd: add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000076cc4: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000053881: add ch, byte ptr [rcx]; ret 0x48d; 
0x0000000000076d03: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000000d968f: add ch, byte ptr [rsi + rcx + 8]; ret; 
0x00000000000e13b0: add ch, dh; cli; jmp qword ptr [rsi]; 
0x0000000000051af8: add cl, al; call 0xfe59e0b; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000004bf17: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x00000000000774e2: add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x0000000000076a36: add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x000000000006335e: add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000051874: add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x000000000001b4f3: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000001b5d4: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000005eefc: add cl, byte ptr [rax + 1]; fimul word ptr [rax + 1]; ret; 
0x000000000002e74f: add cl, byte ptr [rax - 0x73]; adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e60f: add cl, byte ptr [rax - 0x73]; adc eax, 0x22309; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4af: add cl, byte ptr [rax - 0x73]; adc eax, 0x22479; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7b6: add cl, byte ptr [rax - 0x73]; adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e676: add cl, byte ptr [rax - 0x73]; adc eax, 0x225f2; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e516: add cl, byte ptr [rax - 0x73]; adc eax, 0x22762; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e795: add cl, byte ptr [rax - 0x73]; adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002e655: add cl, byte ptr [rax - 0x73]; adc eax, 0x22a53; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e5b5: add cl, byte ptr [rax - 0x73]; adc eax, 0x23373; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000004d7b5: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa5: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000004bed5: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000004bf18: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x000000000004be85: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000009d7a5: add cl, byte ptr [rax - 0x77]; je 0x9d7ce; or byte ptr [rax + 1], cl; ret; 
0x000000000008e124: add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000007f226: add cl, byte ptr [rax - 0x77]; sti; jne 0x7f298; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000022522: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000018793: add cl, byte ptr [rax - 0x7d]; ret 0x4804; 
0x000000000004a6e0: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x000000000004a743: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x0000000000093aad: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x000000000003dc17: add cl, byte ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006db24: add cl, byte ptr [rbp - 0x7b]; ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000003f092: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000004bf53: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000004d735: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x000000000004bf95: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000078d13: add cl, byte ptr [rcx + rcx*4 - 0xe]; call qword ptr [rax + 0x38]; 
0x0000000000017357: add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x000000000006002a: add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000bab5d: add cl, byte ptr [rdi]; test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x22cc8a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000000fdff: add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000013446: add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000013b30: add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x000000000005059b: add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000004bf15: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000004d6f3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000004bf33: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x000000000009ffd8: add cl, ch; cmp al, byte ptr [rsi - 0x6f99000a]; add rsp, 8; ret; 
0x0000000000053e0a: add cl, ch; cmp bl, 0xff; call qword ptr [rbp + 0x53]; 
0x00000000000b9c9c: add cl, ch; jle 0xb9c79; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000009aaa0: add cl, ch; ret 0xff9f; 
0x000000000006c51a: add cl, ch; ret 0xfffa; 
0x0000000000062dd8: add cl, ch; ret 0xfffd; 
0x00000000000520c7: add cl, ch; ret; 
0x00000000000b569c: add cl, ch; retf 0xfffc; jmp qword ptr [rsi + 0xf]; 
0x0000000000044c1a: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000097036: add cl, ch; sub edx, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000009d0e4: add cl, ch; xchg eax, esi; fdecstp; jmp qword ptr [rsi + 0xf]; 
0x0000000000008edc: add cl, cl; ret; 
0x00000000000bddfc: add dh, ah; idiv edi; nop; fdiv st(7); call qword ptr [rax - 0x26]; 
0x00000000000777d8: add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000006c022: add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x00000000000d5ead: add dh, bh; call qword ptr [rsi]; 
0x00000000000cbd37: add dh, bh; xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x000000000003f243: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000001cab9: add dh, bl; ret; 
0x000000000002e49e: add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000050067: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50060; ret; 
0x0000000000050117: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50110; ret; 
0x00000000000d9bc1: add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000041f78: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000506ef: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000d76db: add dh, dh; mov ch, 0xfb; call qword ptr [rax]; 
0x000000000005f22e: add dh, dh; ret 0x4801; 
0x000000000002c94f: add dh, dh; ret 0x4804; 
0x000000000008c038: add dh, dh; ret 0x7403; 
0x00000000000575bf: add dh, dh; ret 0x7404; 
0x000000000004e5c7: add dh, dh; ret 0x7501; 
0x000000000004e5d4: add dh, dh; ret 0x7502; 
0x000000000004e5e1: add dh, dh; ret 0x7504; 
0x000000000004e599: add dh, dh; ret 0x7510; 
0x000000000004e5a6: add dh, dh; ret 0x7520; 
0x000000000002e6cc: add dh, dh; ret 0x7540; 
0x000000000002cc73: add dh, dh; ret 0xf02; 
0x00000000000684c8: add dh, dh; ret 0xf04; 
0x0000000000024ec9: add dh, dh; ret 0xf08; 
0x00000000000743c1: add dh, dh; ret 0xf40; 
0x00000000000743a7: add dh, dh; ret 0xf50; 
0x0000000000024f96: add dh, dh; ret; 
0x00000000000d18ba: add dl, byte ptr [rax + 0x38]; xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x00000000000bea24: add dl, dh; clc; call qword ptr [rax]; 
0x00000000000bea24: add dl, dh; clc; call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000000893fd: add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x000000000007d837: add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000007c655: add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000005dde3: add dword ptr [r8 - 0x7d], r9d; ret; 
0x000000000006856b: add dword ptr [r8], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x0000000000052537: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004d6a1: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x0000000000072fba: add dword ptr [rax + 0x29], ecx; fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x0000000000055d4c: add dword ptr [rax + 0x38], edi; syscall; 
0x000000000008f5c9: add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000008f5db: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000006945f: add dword ptr [rax + 0x39], ecx; ret 0x8841; 
0x000000000007239a: add dword ptr [rax + 0x39], ecx; ret 0x8c0f; 
0x0000000000018cb3: add dword ptr [rax + 0x39], ecx; ret 0xd774; 
0x0000000000018c3d: add dword ptr [rax + 0x39], ecx; ret 0xed75; 
0x0000000000020e9d: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000008edc3: add dword ptr [rax + 0x39], ecx; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x25c4f8], 0; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x00000000000654e0: add dword ptr [rax + 0x39], r9d; ret; 
0x000000000008edc2: add dword ptr [rax + 0x39], r9d; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x25c4f8], 0; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x00000000000b7813: add dword ptr [rax + 0x7900ff7a], eax; sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x0000000000021c03: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x000000000009646c: add dword ptr [rax + 1], ecx; ret; 
0x0000000000091977: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000169ea: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000088bf5: add dword ptr [rax + 9], ecx; ret 0x1475; 
0x00000000000280ae: add dword ptr [rax + 9], ecx; ret 0x8949; 
0x0000000000088bc7: add dword ptr [rax + 9], ecx; ret 0xe75; 
0x00000000000851c0: add dword ptr [rax + rax], edx; mov eax, ecx; syscall; 
0x000000000002d00d: add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x000000000002d093: add dword ptr [rax + rdi - 0x3e], eax; jne 0x2d080; sub rax, 0x10; ret; 
0x0000000000008fdf: add dword ptr [rax - 0x360bba75], edx; ret; 
0x0000000000008d96: add dword ptr [rax - 0x361bba75], edx; ret; 
0x000000000008d663: add dword ptr [rax - 0x39], ecx; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000008f3e2: add dword ptr [rax - 0x3f], ecx; out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x000000000006ea3b: add dword ptr [rax - 0x4f743], eax; jmp qword ptr [rax]; 
0x000000000000bb5f: add dword ptr [rax - 0x6bf0d006], eax; ret 0xb60f; 
0x000000000002d024: add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x000000000007d838: add dword ptr [rax - 0x75], ecx; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000004bef1: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x00000000000943dc: add dword ptr [rax - 0x77], ecx; adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000080503: add dword ptr [rax - 0x77], ecx; add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000004d7b2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000004bed2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000004be82: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000004d732: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x000000000004bf92: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000008ed13: add dword ptr [rax - 0x77], ecx; add eax, 0x25c195; ret; 
0x00000000000183a8: add dword ptr [rax - 0x77], ecx; mov qword ptr ds:[rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x000000000006b920: add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000005e347: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x000000000001e266: add dword ptr [rax - 0x77], ecx; ret 0x3c75; 
0x000000000000ee5c: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000008ed12: add dword ptr [rax - 0x77], r9d; add eax, 0x25c195; ret; 
0x0000000000090912: add dword ptr [rax - 0x7d], ecx; mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x0000000000090f83: add dword ptr [rax - 0x7d], ecx; ret 0x4118; 
0x0000000000091303: add dword ptr [rax - 0x7d], ecx; ret 0x4418; 
0x00000000000698c9: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000007c656: add dword ptr [rax - 0x7d], ecx; ret 0x8502; 
0x000000000000bba9: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x000000000005e936: add dword ptr [rax - 0x7d], ecx; ret 0x8b01; 
0x000000000007cca7: add dword ptr [rax - 0x7d], ecx; ret 0x8b04; 
0x000000000001761b: add dword ptr [rax - 0x7d], ecx; ret 0xf10; 
0x0000000000018916: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000077549: add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x000000000006c065: add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000000e890: add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x00000000000e016d: add dword ptr [rax], 0; shl byte ptr [rbx], 1; cli; jmp qword ptr [rax]; 
0x00000000000590e9: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x00000000000dff55: add dword ptr [rax], 0xfa0e8800; jmp qword ptr [rbx]; 
0x00000000000dff85: add dword ptr [rax], 0xfa145800; jmp rdx; 
0x00000000000dffcd: add dword ptr [rax], 0xfa1af000; jmp qword ptr [rax]; 
0x00000000000dffe5: add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x00000000000639df: add dword ptr [rax], eax; add al, ch; jo 0x639e0; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x0000000000088fbe: add dword ptr [rax], eax; add al, ch; push 0x1a; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b2a65: add dword ptr [rax], eax; add al, ch; ret; 
0x0000000000087de6: add dword ptr [rax], eax; add al, ch; sub al, 0xf8; jmp qword ptr [rsi - 0x70]; 
0x00000000000606f7: add dword ptr [rax], eax; add al, ch; xor dword ptr [rbx - 0x76be0006], esp; ret; 
0x000000000001a484: add dword ptr [rax], eax; add bl, dh; ret; 
0x0000000000051a11: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x0000000000081433: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000008118f: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000023b4a: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x00000000000758f3: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000002d44a: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x903ac; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000063358: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000009d0fb: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x0000000000028c1d: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x0000000000024f46: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000051acd: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0x6d089; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000000664f3: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff449ee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000056419: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x00000000000645c6: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x00000000000b6435: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000053e71: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000005096e: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000007f259: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000005a3f1: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x00000000000b3f0f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000029260: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000005877c: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000064222: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000034f57: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000288b5: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000002deae: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000498cf: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034f85: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000075bc8: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005ca01: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000cbd3a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000000caeea: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000000cad0a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000000cb4a2: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000000cad12: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000007d4e8: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b64f5: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000005a960: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x5a970; mov dword ptr [rip + 0x28be4c], edx; pop rbx; ret; 
0x000000000006e655: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x000000000002417c: add dword ptr [rax], eax; add byte ptr [rax], al; jne 0x24188; add rsp, 0x20; pop rbx; ret; 
0x00000000000856ea: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x000000000002341a: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000590ee: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000056281: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000008e0fd: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000b6c10: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000008b011: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000055f34: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, r13d; syscall; 
0x0000000000093f66: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000000233da: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233ba: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x000000000007c7ad: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000001c6e4: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000079b4f: add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000007a10d: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0ba: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b8d: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f2c: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079ee7: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e53: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000213a3: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000009ea9e: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000008f791: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000075e30: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000568cb: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000079481: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000007a574: add dword ptr [rax], eax; add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000001846c: add dword ptr [rax], eax; add byte ptr [rbp + 0x19], al; rol byte ptr [rcx - 0x7d], cl; ret 0x4404; 
0x000000000001d298: add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000000559de: add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; inc dword ptr [rbp + 0x31]; imul bl; ret 0x8b48; 
0x00000000000b5b1a: add dword ptr [rax], eax; add byte ptr [rbp + 0xf], al; mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000000bab61: add dword ptr [rax], eax; add byte ptr [rbx + 0x22cc8a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000007def4: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000005b5f2: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000008eafc: add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x1d], cl; or al, al; and eax, 0xc058b00; shl byte ptr [rip + 0x138b4100], 0x39; ret 0x840f; 
0x0000000000012d4d: add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000006856c: add dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x00000000000566ef: add dword ptr [rax], eax; add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x00000000000bb868: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000085cc0: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000052ae9: add dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x00000000000d7f25: add dword ptr [rax], eax; add byte ptr [rcx], dh; adc esi, ebx; jmp qword ptr [rcx + 1]; 
0x000000000000a485: add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000000b4c69: add dword ptr [rax], eax; add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007f339: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000001e09f: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000004e5c5: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x000000000004e5d2: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000004e5df: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000004e597: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000004e5a4: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000004e5b1: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x00000000000684c6: add dword ptr [rax], eax; add dh, dh; ret 0xf04; 
0x0000000000024f94: add dword ptr [rax], eax; add dh, dh; ret; 
0x000000000002e80b: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db1b: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002db2c: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000ae681: add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000001a0fc: add dword ptr [rax], eax; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000abe16: add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0312: add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000b7620: add dword ptr [rax], eax; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000940f8: add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000000ecc0: add dword ptr [rax], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000059c14: add dword ptr [rax], ebp; add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x59c28; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000003dd97: add dword ptr [rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000059c21: add dword ptr [rax], esp; jmp rdx; 
0x00000000000503d7: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x503d0; sub rax, 1; ret; 
0x0000000000050287: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x50280; lea rax, [rcx - 1]; ret; 
0x00000000000a5296: add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], cl; ret 0x4502; 
0x00000000000820e5: add dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000008215f: add dword ptr [rbp + 0x31], eax; shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000184f4: add dword ptr [rbp + 0x39], ecx; ret; 
0x000000000007c8d5: add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000007c64f: add dword ptr [rbp + 0xf48ff7e], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x00000000000527e9: add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000006bea2: add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x000000000003f102: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x00000000000a5293: add dword ptr [rbx + 0x194501fa], eax; rol byte ptr [rcx - 0x7d], cl; ret 0x4502; 
0x0000000000083364: add dword ptr [rbx + 0x41], ebx; mov dword ptr [rbx + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x00000000000090f4: add dword ptr [rbx + 0x453bfc45], ecx; in al, 0x72; cdq; nop; leave; ret; 
0x00000000000799b5: add dword ptr [rbx - 0x4f743], eax; jmp qword ptr [rax]; 
0x0000000000062b51: add dword ptr [rbx - 0x67f3f1f], eax; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000163de: add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x0000000000018791: add dword ptr [rbx], eax; add cl, byte ptr [rax - 0x7d]; ret 0x4804; 
0x000000000004d721: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000004bf51: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000006a322: add dword ptr [rcx + 0x39], ecx; ret; 
0x000000000004d701: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000004bf41: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000004d6f1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000004bf31: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000057e53: add dword ptr [rcx + 9], ecx; ret; 
0x000000000001735a: add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x000000000004bf21: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000007c44e: add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000009548b: add dword ptr [rcx - 0x77], ecx; or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000067b98: add dword ptr [rcx - 0x78], eax; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000074a81: add dword ptr [rcx - 0x7d], ecx; ret 0x2504; 
0x000000000008833b: add dword ptr [rcx - 0x7d], ecx; ret 0xf01; 
0x0000000000059a15: add dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000009c57: add dword ptr [rcx - 0x7d], ecx; rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x00000000000566ee: add dword ptr [rcx], eax; add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000005666d: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000084fda: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000001a0fb: add dword ptr [rcx], eax; add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x00000000000947c9: add dword ptr [rcx], edi; ret 0x850f; 
0x0000000000051702: add dword ptr [rdi + 0x15], esi; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x0000000000050983: add dword ptr [rdi + 0x26], esi; jb 0x5098d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000051870: add dword ptr [rdi + 0x2c], esi; jb 0x51877; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000051a38: add dword ptr [rdi + 0x3a], esi; jb 0x51a3f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000050ce3: add dword ptr [rdi + 0x3b], esi; jb 0x50ced; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000051133: add dword ptr [rdi + 0x53], esi; jb 0x5113d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000e123d: add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000000e11d5: add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000000e1209: add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000000e11e6: add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000000e121a: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000000e124e: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000dd79d: add dword ptr [rdi], 3; ret 0xa01; 
0x00000000000d82d6: add dword ptr [rdi], 3; ret; 
0x000000000002116b: add dword ptr [rdi], ecx; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x21189; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000064aa0: add dword ptr [rdi], ecx; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x0000000000051e51: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x00000000000baedf: add dword ptr [rdi], ecx; test dh, al; add eax, 0x89490000; ret 0x8349; 
0x0000000000062411: add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x00000000000893fe: add dword ptr [rdi], ecx; xchg eax, ebp; ret 0xc283; 
0x00000000000820e3: add dword ptr [rdx + 1], ebp; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000506fc: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000041f8d: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000009d5ab: add dword ptr [rdx + rax*2], 1; ret; 
0x0000000000090916: add dword ptr [rdx + rdx*8 - 0x41f0308b], eax; sal edi, 0xd8; ret; 
0x0000000000051566: add dword ptr [rdx - 0x2f], esp; jge 0x515b3; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000041ee6: add dword ptr [rdx - 0x2f], esp; jl 0x41f33; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000000513c7: add dword ptr [rdx - 0x2f], esp; std; jg 0x51417; jmp qword ptr [rdx - 0x2f]; 
0x0000000000050693: add dword ptr [rdx - 0xf], esp; jl 0x506e0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000507d3: add dword ptr [rdx - 0xf], esp; jl 0x50820; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000e03ac: add dword ptr [rdx], 0x4a; ret; 
0x00000000000e3810: add dword ptr [rdx], 0x58; ret; 
0x00000000000dbb34: add dword ptr [rdx], 0x5a; ret; 
0x0000000000022908: add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000017dba: add dword ptr [rip + 0x2d35c7], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000077fa9: add dword ptr [rip - 0x74bb0007], -0x63; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000007ffa8: add dword ptr [rsi + 0x48], esi; mov eax, edx; pop rbx; ret; 
0x00000000000d968b: add dword ptr [rsi + rcx + 0x30], ecx; add ch, byte ptr [rsi + rcx + 8]; ret; 
0x000000000004bf02: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000004bf12: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000ae375: add dword ptr ds:[rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1bd7: add dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003dd96: add dword ptr es:[rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000080479: add eax, 0x1422; cmove rax, rdx; ret; 
0x00000000000b372d: add eax, 0x1489066; ret 0xb70f; 
0x00000000000182bc: add eax, 0x18c48348; ret; 
0x000000000002e819: add eax, 0x1b512; cmove rax, rdx; ret; 
0x000000000002db29: add eax, 0x1c832; cmove rax, rdx; ret; 
0x00000000000b8fbd: add eax, 0x1cf4e; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b761d: add eax, 0x1e8ae; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000565fa: add eax, 0x1f0fc3f3; add byte ptr [rax - 0x39], cl; ret 0xffa8; 
0x0000000000082be5: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a615: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035405: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000b4517: add eax, 0x20d2c; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000b454d: add eax, 0x21462; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b451f: add eax, 0x2148c; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000002e400: add eax, 0x21b7b; cmove rax, rdx; ret; 
0x000000000002e759: add eax, 0x22132; cmovne rax, rdx; ret; 
0x000000000002e619: add eax, 0x22262; cmovne rax, rdx; ret; 
0x000000000002e4b9: add eax, 0x223d2; cmovne rax, rdx; ret; 
0x000000000002e7c0: add eax, 0x2247b; cmovne rax, rdx; ret; 
0x000000000002e680: add eax, 0x225ab; cmovne rax, rdx; ret; 
0x000000000002e520: add eax, 0x2271b; cmovne rax, rdx; ret; 
0x000000000002e79f: add eax, 0x228cc; cmovne rax, rdx; ret; 
0x000000000002dab0: add eax, 0x2296b; cmovne rax, rdx; ret; 
0x000000000002e65f: add eax, 0x229fc; cmovne rax, rdx; ret; 
0x000000000002e4ff: add eax, 0x22b6c; cmovne rax, rdx; ret; 
0x00000000000ba57e: add eax, 0x230511; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000b9705: add eax, 0x230762; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000b9cf9: add eax, 0x230c66; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000002e56e: add eax, 0x231dd; cmovne rax, rdx; ret; 
0x000000000002e5bf: add eax, 0x2330c; cmovne rax, rdx; ret; 
0x00000000000ba580: add eax, 0x23; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000009d59c: add eax, 0x24d6cf; jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000009d751: add eax, 0x24dd4a; ret; 
0x000000000009c989: add eax, 0x24e1ba; ret; 
0x000000000009c96e: add eax, 0x24e1d5; add rsp, 8; ret; 
0x000000000009c982: add eax, 0x24e1d9; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000009c967: add eax, 0x24e1f4; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x000000000008ee72: add eax, 0x2581a1; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x000000000009150a: add eax, 0x259625; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000008ee7c: add eax, 0x25c027; mov qword ptr [rsi], rax; ret; 
0x000000000008ee0b: add eax, 0x25c0a0; ret; 
0x000000000008edd2: add eax, 0x25c0d9; add rsp, 8; ret; 
0x000000000008ed16: add eax, 0x25c195; ret; 
0x000000000008edca: add eax, 0x25c4f8; add byte ptr [rax - 0x77], cl; add eax, 0x25c0d9; add rsp, 8; ret; 
0x0000000000084fd0: add eax, 0x266413; test eax, eax; jne 0x85036; mov eax, 0x101; syscall; 
0x000000000007a117: add eax, 0x26ae04; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0c4: add eax, 0x26ae57; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b97: add eax, 0x26ae84; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f36: add eax, 0x26afe5; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079ef1: add eax, 0x26b02a; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079eac: add eax, 0x26b06f; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e5d: add eax, 0x26b0be; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000794c1: add eax, 0x26b75a; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000006e5b0: add eax, 0x275d6b; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e95f: add eax, 0x275ebc; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e911: add eax, 0x275f0a; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e862: add eax, 0x275fb9; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e806: add eax, 0x276015; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e566: add eax, 0x2762b5; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e518: add eax, 0x276303; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0b7: add eax, 0x276464; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006736a: add eax, 0x27f5d1; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x0000000000065be2: add eax, 0x284d71; ret; 
0x000000000005a932: add eax, 0x28d9c9; ret; 
0x000000000005d682: add eax, 0x28de81; ret; 
0x00000000000591db: add eax, 0x292208; add rsp, 8; ret; 
0x0000000000058d91: add eax, 0x292652; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000058cb1: add eax, 0x2927ea; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x00000000000574c1: add eax, 0x293f22; test eax, eax; jne 0x574e0; mov eax, 0x4a; syscall; 
0x0000000000060b3f: add eax, 0x29480000; ret 0x349; 
0x0000000000056b91: add eax, 0x294852; test eax, eax; jne 0x56bb0; mov eax, 3; syscall; 
0x00000000000569fe: add eax, 0x2949e5; test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x00000000000568c1: add eax, 0x294b22; test eax, eax; jne 0x568e0; mov eax, 1; syscall; 
0x00000000000567f1: add eax, 0x294bf2; test eax, eax; jne 0x56810; xor eax, eax; syscall; 
0x000000000002e7b1: add eax, 0x2bc126; add cl, byte ptr [rax - 0x73]; adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e790: add eax, 0x2bc147; add cl, byte ptr [rax - 0x73]; adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002e74a: add eax, 0x2bc18d; add cl, byte ptr [rax - 0x73]; adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e739: add eax, 0x2bc192; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000002e671: add eax, 0x2bc266; add cl, byte ptr [rax - 0x73]; adc eax, 0x225f2; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e4aa: add eax, 0x2bc42d; add cl, byte ptr [rax - 0x73]; adc eax, 0x22479; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e499: add eax, 0x2bc432; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000002e3f1: add eax, 0x2bc515; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000029a07: add eax, 0x2bde34; ret; 
0x00000000000299f9: add eax, 0x2bde4a; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x0000000000029a11: add eax, 0x2c0406; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000002341f: add eax, 0x2c43c8; ret; 
0x0000000000023415: add eax, 0x2c43d6; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000233e0: add eax, 0x2c43e3; ret; 
0x00000000000233c0: add eax, 0x2c43fb; ret; 
0x00000000000233d5: add eax, 0x2c4416; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233b5: add eax, 0x2c4436; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x00000000000232b6: add eax, 0x2c456d; ret; 
0x0000000000023246: add eax, 0x2c458d; ret; 
0x0000000000023236: add eax, 0x2c45a5; ret; 
0x0000000000022872: add eax, 0x2c4889; ret; 
0x00000000000238c1: add eax, 0x2c6556; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000238b7: add eax, 0x2c6564; test eax, eax; je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x0000000000023435: add eax, 0x2c6a0a; ret; 
0x000000000002296d: add eax, 0x2c7452; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000009c9c: add eax, 0x2e0c5f; add rsp, 0x88; pop rbx; ret; 
0x0000000000008776: add eax, 0x2e23f9; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x00000000000df224: add eax, 0x3400e4e; ret; 
0x0000000000061ece: add eax, 0x358d4800; ret; 
0x00000000000747dc: add eax, 0x358d4c00; ret 0x58c; 
0x000000000009cf5e: add eax, 0x38c48348; ret; 
0x000000000002722e: add eax, 0x39480000; ret 0xf275; 
0x0000000000082c05: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a635: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035415: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000007ca7b: add eax, 0x4634800; xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x00000000000be271: add eax, 0x474fff8; clc; jmp rsp; 
0x0000000000080021: add eax, 0x48000000; mov eax, edx; pop rbx; ret; 
0x000000000004d738: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x000000000004bf68: add eax, 0x48054289; mov eax, edi; ret; 
0x000000000003ed83: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e296: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc36: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000004224b: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000050870: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000004daf7: add eax, 0x4900070f; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000be32d: add eax, 0x4e0fff8; clc; call qword ptr [rax + 4]; 
0x00000000000be2ed: add eax, 0x4f0fff8; clc; jmp qword ptr [rax + 4]; 
0x0000000000009661: add eax, 0x4fd49e8; add cl, cl; ret; 
0x000000000000954c: add eax, 0x4fe5ee8; add cl, cl; ret; 
0x00000000000093f2: add eax, 0x4ffb8e8; add cl, cl; ret; 
0x0000000000009251: add eax, 0x50159e8; add cl, cl; ret; 
0x0000000000008ed7: add eax, 0x504d3e8; add cl, cl; ret; 
0x00000000000be26d: add eax, 0x504fff8; clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x000000000004d7b9: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa9: add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000000be329: add eax, 0x560fff8; clc; jmp rax; 
0x00000000000be2e9: add eax, 0x570fff8; clc; push rax; add al, 0xf8; jmp qword ptr [rax + 4]; 
0x000000000009d100: add eax, 0x5b; cmovne rax, rdx; ret; 
0x00000000000cc8d1: add eax, 0x5ba0000; add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000000cc8dd: add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x000000000007f23a: add eax, 0x5c415d5b; ret; 
0x0000000000082c53: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a683: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035443: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000003d917: add eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002e7e9: add eax, 0x6922; cmove rax, rdx; ret; 
0x0000000000070c02: add eax, 0x6f0f6600; ret 0x23e8; 
0x0000000000070bd9: add eax, 0x6f0f6600; ret 0x290f; 
0x0000000000073959: add eax, 0x6f0f6600; ret 0xcce8; 
0x0000000000009c94: add eax, 0x7f; and eax, 0xffffffc0; mov qword ptr [rip + 0x2e0c5f], rax; add rsp, 0x88; pop rbx; ret; 
0x0000000000034b97: add eax, 0x83480000; ret 0x4910; 
0x0000000000047ec1: add eax, 0x83480000; ret 0xe910; 
0x0000000000034bc5: add eax, 0x83480000; ret 0xeb10; 
0x000000000006c825: add eax, 0x83ffffef; ret; 
0x0000000000084ec6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x0000000000084eb6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000084ed6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000004d73b: add eax, 0x8428d48; ret; 
0x0000000000080549: add eax, 0x892; cmove rax, rdx; ret; 
0x0000000000016b98: add eax, 0x8944c689; ret 0xeab8; 
0x0000000000067063: add eax, 0x89480000; ret 0x2948; 
0x00000000000b58c1: add eax, 0x89480002; ret; 
0x000000000005320d: add eax, 0x89489066; ret; 
0x00000000000baee3: add eax, 0x89490000; ret 0x8349; 
0x00000000000b60b4: add eax, 0x8b413577; or byte ptr [r9 + 0x63], r9b; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000077faa: add eax, 0x8b44fff9; popfq; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000baed7: add eax, 0x8b480000; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x00000000000270bc: add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000074566: add eax, 0x940f4100; ret; 
0x0000000000090aa8: add eax, 0x940fc085; ret 0x3d; 
0x0000000000081df9: add eax, 0xa22; cmove rax, rdx; ret; 
0x00000000000d750d: add eax, 0xa820fffb; add byte ptr [rax], al; cmp byte ptr [rsi], dl; sti; call qword ptr [rax - 0x58]; 
0x00000000000b5742: add eax, 0xb60f0000; ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000002e27c: add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000016b8e: add eax, 0xb8c78948; mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000036c8a: add eax, 0xc0310000; ret; 
0x000000000007c27a: add eax, 0xc0b60f00; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000004d7bd: add eax, 0xc428d48; ret; 
0x000000000004e29d: add eax, 0xc478d48; ret; 
0x0000000000087162: add eax, 0xc6e80000; cmp al, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000006f8a3: add eax, 0xd1e6e800; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000002e282: add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000063622: add eax, 0xe9000000; ret; 
0x000000000009d0e1: add eax, 0xe9000000; xchg eax, esi; fdecstp; jmp qword ptr [rsi + 0xf]; 
0x000000000000a32d: add eax, 0xe912002e; ret; 
0x000000000003f0ea: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000804a9: add eax, 0xf32; cmove rax, rdx; ret; 
0x000000000003f0f3: add eax, 0xf7f0ff3; ret; 
0x00000000000299f2: add eax, 0xffffeb59; mov qword ptr [rip + 0x2bde4a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x0000000000029a00: add eax, 0xfffff57b; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x000000000005c9e5: add eax, 1; push rax; call rbx; 
0x0000000000082a21: add eax, 1; ret; 
0x0000000000082a18: add eax, 2; ret; 
0x0000000000082a31: add eax, 3; ret; 
0x000000000000a8b9: add eax, dword ptr [0]; ret; 
0x00000000000228f7: add eax, dword ptr [eax]; add rsp, 0x80; mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x000000000008b0f8: add eax, dword ptr [rax]; add bl, dh; ret; 
0x00000000000b2ec6: add eax, dword ptr [rax]; add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000b359c: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000000bf4a: add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; shr byte ptr [rax + 0x48ffffff], 0xc7; ret; 
0x000000000007cae1: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x50f3d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000008b0b9: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000007c32c: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x514ae; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000266c8: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x00000000000b40f9: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000069599: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x695c4; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000009ee5e: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000009deb: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x000000000002a5e7: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000029dea: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000029fb0: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000034d77: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048061: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034da5: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000005d5d4: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008f781: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x258a5b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000005770c: add eax, dword ptr [rax]; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000082a73: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000056b9b: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000005911c: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5912c; ret; 
0x0000000000051e4c: add eax, dword ptr [rax]; add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x00000000000b3110: add eax, dword ptr [rax]; add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x0000000000055780: add eax, dword ptr [rax]; add byte ptr [rcx - 0x39], al; add byte ptr [r9], r8b; add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000059105: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000006fd11: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x00000000000b1f59: add eax, dword ptr [rax]; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x00000000000591a5: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000008c036: add eax, dword ptr [rax]; add dh, dh; ret 0x7403; 
0x000000000008ac2f: add eax, dword ptr [rax]; add dh, dh; ret 0xf08; 
0x00000000000228f8: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000024967: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000051b4b: add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x0000000000090a9c: add eax, dword ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000009ce3a: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000094706: add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000094fc3: add eax, dword ptr [rax]; movzx r12d, r12b; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000021ac9: add eax, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000051b30: add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000008ccfc: add eax, dword ptr [rbp - 0xb8]; call rax; 
0x00000000000a5290: add eax, dword ptr [rbx - 0x57cfe1e]; add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], cl; ret 0x4502; 
0x00000000000b32fd: add eax, dword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000000e11e9: add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x000000000006b26c: add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d83b76; ret 0x8341; 
0x000000000005be22: add eax, dword ptr [rdi + 0x10]; call rax; 
0x000000000005c09b: add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000091894: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091cc4: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000919f5: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x00000000000e121d: add eax, dword ptr [rdx]; cld; ret; 
0x00000000000e1251: add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005bacf: add eax, dword ptr [rsi + 0x10]; add r14, 0x18; call rax; 
0x000000000008bd76: add eax, dword ptr [rsi]; call rax; 
0x000000000005bc75: add eax, dword ptr [rsi]; mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x00000000000b3160: add eax, dword ptr [rsi]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000005bf45: add eax, dword ptr [rsp]; mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x00000000000b455a: add eax, eax; jmp rax; 
0x000000000000b0f4: add eax, ebp; jmp rax; 
0x000000000008c097: add eax, ebx; call rax; 
0x000000000005aa3c: add eax, ebx; jmp rax; 
0x000000000004a1e8: add eax, ecx; add rax, rdi; vzeroupper; ret; 
0x000000000007c33b: add eax, ecx; jmp rax; 
0x00000000000835c9: add eax, ecx; mov dword ptr [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx; 
0x0000000000035171: add eax, ecx; ret; 
0x0000000000082b0d: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a54d: add eax, ecx; sub rax, rdx; vzeroupper; ret; 
0x000000000003535d: add eax, ecx; vzeroupper; ret; 
0x000000000003516e: add eax, edi; add rax, rcx; ret; 
0x0000000000082b0a: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a54a: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000003535a: add eax, edi; add rax, rcx; vzeroupper; ret; 
0x000000000007c96b: add eax, edi; jmp rax; 
0x00000000000352e4: add eax, edi; ret; 
0x000000000009d2b0: add eax, edi; sub rax, r8; ret; 
0x0000000000082bc5: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a605: add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x00000000000505aa: add eax, edi; sub rax, rsi; ret; 
0x00000000000353f5: add eax, edi; vzeroupper; ret; 
0x000000000009d598: add eax, edx; cmp rax, qword ptr [rip + 0x24d6cf]; jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000000ae8a: add eax, edx; jmp rax; 
0x0000000000017cac: add eax, edx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000004a4f6: add eax, edx; sub rax, rdi; ret; 
0x000000000008271b: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x000000000008ec66: add eax, esi; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000051adc: add eax, esi; jmp rax; 
0x00000000000b4579: add eax, esi; test dil, dil; js 0xb45a8; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b7649: add eax, esi; test dil, dil; js 0xb7678; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b8fe9: add eax, esi; test dil, dil; js 0xb9018; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b574d: add eax, esp; jmp rax; 
0x00000000000835c8: add eax, r9d; mov dword ptr [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx; 
0x0000000000070818: add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000083522: add ebp, dword ptr [rcx]; ret 0x48d; 
0x0000000000083cc0: add ebp, eax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x000000000008bd72: add ebx, 0x18; add rax, qword ptr [r14]; call rax; 
0x00000000000b3351: add ebx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3279: add ebx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000000b3b5a: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000000b1e50: add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x0000000000020ce1: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000e120e: add ebx, dword ptr [rbx + 3]; ret; 
0x00000000000b8a4b: add ebx, edi; hlt; call qword ptr [rax + 0x8c48348]; pop rbx; pop rbp; ret; 
0x00000000000a9250: add ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000003f2b3: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000051a0e: add ecx, 0x100; cmp rdx, rcx; jne 0x519f2; vzeroupper; ret; 
0x000000000005184b: add ecx, 0x80; cmp rdx, rcx; jne 0x51837; vzeroupper; ret; 
0x000000000004bf55: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x000000000002e287: add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x000000000006551d: add ecx, dword ptr [rax + 0x39]; ret; 
0x00000000000172be: add ecx, dword ptr [rax + 1]; fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000a0458: add ecx, dword ptr [rax - 0x73]; lodsq rax, qword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009cca6: add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000004bf59: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000008e1c7: add ecx, dword ptr [rax - 0x77]; mov rax, rcx; ret; 
0x000000000005ded3: add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x00000000000b5272: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000017cb1: add ecx, dword ptr [rbp + rcx*4 + 0x64]; ret; 
0x000000000009078a: add ecx, dword ptr [rbp - 0x77]; dec byte ptr [rax - 0x7d]; ret; 
0x0000000000092c80: add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x000000000003f022: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000e11da: add ecx, dword ptr [rbx + 3]; ret; 
0x000000000004e204: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x000000000004dbd4: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000001a165: add ecx, dword ptr [rcx + rcx*4 + 0x42]; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x00000000000b32fe: add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000000187bc: add ecx, dword ptr [rcx + rcx*4 - 0x3f]; mov r8, rdx; mov qword ptr [rdi + 8], rcx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x000000000004bf56: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x000000000002d451: add ecx, dword ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000000527ef: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000005284d: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x00000000000d8901: add ecx, dword ptr [rsi + rcx - 0x50]; add al, byte ptr [rdx]; ret 0xb00e; 
0x0000000000073649: add ecx, eax; mov eax, r9d; ret; 
0x0000000000035c52: add ecx, ebx; jmp rcx; 
0x0000000000051b04: add ecx, esi; jmp rcx; 
0x000000000004dab5: add edi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x70f3d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e13d: add edi, 0x10; lea r11, [rip + 0x70939]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db1d: add edi, 0x10; lea r11, [rip + 0x70ed9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000050549: add edi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x50588; movsxd rax, ecx; ret; 
0x000000000008b00d: add edi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000004e172: add edi, 0x20; lea r11, [rip + 0x70904]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db52: add edi, 0x20; lea r11, [rip + 0x70ea4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000055f2d: add edi, 0x28; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000000591a2: add edi, 0x308; mov esi, 0x80; syscall; 
0x000000000004e03f: add edi, 0x30; lea r11, [rip + 0x70a37]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000be279: add edi, eax; call qword ptr [rbx + rax - 8]; jmp rsp; 
0x00000000000be13d: add edi, eax; call qword ptr [rsi]; 
0x00000000000be2fd: add edi, eax; call rax; 
0x00000000000be2f9: add edi, eax; inc dword ptr [rax + 3]; clc; call rax; 
0x00000000000be101: add edi, eax; jmp rax; 
0x00000000000be27d: add edi, eax; jmp rsp; 
0x00000000000be339: add edi, eax; push qword ptr [rax]; add edi, eax; call rax; 
0x0000000000072104: add edi, eax; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000000e158d: add edi, ebx; jmp qword ptr [rbx + 1]; 
0x00000000000a909f: add edi, ebx; jmp qword ptr [rsi + 0x2e]; 
0x0000000000068574: add edi, ebx; jmp rdi; 
0x0000000000040ab1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7db43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040931: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7dcc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7de43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040632: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7dfc2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7e143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040331: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7e2c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7e443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040031: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7e5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7e743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd31: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7e8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7ea43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa31: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7ebc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7ed43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f731: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7eec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7f043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x80123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de51: add edi, edx; add rsi, rdx; lea r11, [rip + 0x802a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x80423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db52: add edi, edx; add rsi, rdx; lea r11, [rip + 0x805a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x80723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d851: add edi, edx; add rsi, rdx; lea r11, [rip + 0x808a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x80a23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d551: add edi, edx; add rsi, rdx; lea r11, [rip + 0x80ba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x80d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d251: add edi, edx; add rsi, rdx; lea r11, [rip + 0x80ea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x81023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf51: add edi, edx; add rsi, rdx; lea r11, [rip + 0x811a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x81323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc51: add edi, edx; add rsi, rdx; lea r11, [rip + 0x814a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x81623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f67: add edi, edx; add rsi, rdx; lea r11, [rip + 0x83d8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037597: add edi, edx; add rsi, rdx; lea r11, [rip + 0x8659d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001646c: add edi, edx; jmp rdi; 
0x0000000000040d1c: add edi, edx; lea r11, [rip + 0x7d8db]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f477: add edi, edx; lea r11, [rip + 0x7f180]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f31b: add edi, edx; lea r11, [rip + 0x7f2dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e228: add edi, edx; lea r11, [rip + 0x7fecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c61a: add edi, edx; lea r11, [rip + 0x816dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c997: add edi, edx; lea r11, [rip + 0x81760]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c825: add edi, edx; lea r11, [rip + 0x818d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e7b: add edi, edx; lea r11, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db6: add edi, edx; lea r11, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374ab: add edi, edx; lea r11, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e6: add edi, edx; lea r11, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000366a1: add edi, edx; lea r11, [rip + 0x87356]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036627: add edi, edx; lea r11, [rip + 0x873d0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036598: add edi, edx; lea r11, [rip + 0x8745f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003638d: add edi, edx; lea r11, [rip + 0x8766a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003625b: add edi, edx; lea r11, [rip + 0x8779c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036195: add edi, edx; lea r11, [rip + 0x87862]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036117: add edi, edx; lea r11, [rip + 0x878e0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036080: add edi, edx; lea r11, [rip + 0x87977]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e84: add edi, edx; lea r11, [rip + 0x87b73]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d53: add edi, edx; lea r11, [rip + 0x87ca4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c44: add edi, edx; lea r11, [rip + 0x87db3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000038190: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c54c: add edi, edx; sfence; lea r11, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b64: add edi, edx; sfence; lea r11, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d7b65: add edi, esi; call rax; 
0x00000000000d5ecd: add edi, esi; jmp qword ptr [rax + 0x17]; 
0x00000000000d5ebd: add edi, esi; jmp rax; 
0x000000000004e0f8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x7097b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dad8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x70f1b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000187d7: add edx, 0x3039; and edx, 0x7fffffff; mov dword ptr [r8], edx; mov dword ptr [rsi], edx; ret; 
0x0000000000092ee2: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x0000000000018566: add edx, eax; xor eax, eax; mov dword ptr [rsi], r10d; pop rbp; ret; 
0x00000000000b8b4b: add edx, edi; hlt; call qword ptr [rax + 0x8c48348]; pop rbx; pop rbp; ret; 
0x0000000000016183: add edx, edi; jmp rdx; 
0x000000000004e139: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x70939]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db19: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x70ed9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000005bad3: add esi, 0x18; call rax; 
0x000000000004e16e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x70904]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db4e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x70ea4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e03b: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x70a37]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000001b027: add esi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000008f3e0: add esi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x0000000000090914: add esi, 1; test dl, dl; jne 0x908ea; movsx eax, cl; neg eax; ret; 
0x00000000000b7519: add esi, dword ptr [rbp + 4]; ret; 
0x000000000005b5eb: add esi, dword ptr [rbp - 0x53]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000066926: add esi, dword ptr [rdi + rax - 0xd]; ret; 
0x0000000000068075: add esi, eax; jmp rsi; 
0x0000000000083748: add esi, eax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x000000000003f1d3: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000050905: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000565ac: add esi, ebx; ret; 
0x0000000000028f00: add esi, ebx; stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000004e0b1: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x709c2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e094: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x709df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da91: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x70f62]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da74: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x70f7f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000005b968: add esi, ecx; jmp rsi; 
0x0000000000051c0e: add esi, edi; int1; pop rbx; mov eax, eax; ret; 
0x00000000000d5ae1: add esi, edi; jmp qword ptr [rax + 1]; 
0x00000000000a6a7f: add esi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000040d19: add esi, edx; add rdi, rdx; lea r11, [rip + 0x7d8db]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f474: add esi, edx; add rdi, rdx; lea r11, [rip + 0x7f180]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f318: add esi, edx; add rdi, rdx; lea r11, [rip + 0x7f2dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e225: add esi, edx; add rdi, rdx; lea r11, [rip + 0x7fecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c617: add esi, edx; add rdi, rdx; lea r11, [rip + 0x816dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c994: add esi, edx; add rdi, rdx; lea r11, [rip + 0x81760]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c822: add esi, edx; add rdi, rdx; lea r11, [rip + 0x818d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e78: add esi, edx; add rdi, rdx; lea r11, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db3: add esi, edx; add rdi, rdx; lea r11, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374a8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e3: add esi, edx; add rdi, rdx; lea r11, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003669e: add esi, edx; add rdi, rdx; lea r11, [rip + 0x87356]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036624: add esi, edx; add rdi, rdx; lea r11, [rip + 0x873d0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036595: add esi, edx; add rdi, rdx; lea r11, [rip + 0x8745f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003638a: add esi, edx; add rdi, rdx; lea r11, [rip + 0x8766a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036258: add esi, edx; add rdi, rdx; lea r11, [rip + 0x8779c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036192: add esi, edx; add rdi, rdx; lea r11, [rip + 0x87862]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036114: add esi, edx; add rdi, rdx; lea r11, [rip + 0x878e0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003607d: add esi, edx; add rdi, rdx; lea r11, [rip + 0x87977]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e81: add esi, edx; add rdi, rdx; lea r11, [rip + 0x87b73]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d50: add esi, edx; add rdi, rdx; lea r11, [rip + 0x87ca4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c41: add esi, edx; add rdi, rdx; lea r11, [rip + 0x87db3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000040ab4: add esi, edx; lea r11, [rip + 0x7db43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040934: add esi, edx; lea r11, [rip + 0x7dcc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b4: add esi, edx; lea r11, [rip + 0x7de43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040635: add esi, edx; lea r11, [rip + 0x7dfc2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b4: add esi, edx; lea r11, [rip + 0x7e143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040334: add esi, edx; lea r11, [rip + 0x7e2c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b4: add esi, edx; lea r11, [rip + 0x7e443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040034: add esi, edx; lea r11, [rip + 0x7e5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb4: add esi, edx; lea r11, [rip + 0x7e743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd34: add esi, edx; lea r11, [rip + 0x7e8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb4: add esi, edx; lea r11, [rip + 0x7ea43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa34: add esi, edx; lea r11, [rip + 0x7ebc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b4: add esi, edx; lea r11, [rip + 0x7ed43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f734: add esi, edx; lea r11, [rip + 0x7eec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b4: add esi, edx; lea r11, [rip + 0x7f043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd4: add esi, edx; lea r11, [rip + 0x80123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de54: add esi, edx; lea r11, [rip + 0x802a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd4: add esi, edx; lea r11, [rip + 0x80423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db55: add esi, edx; lea r11, [rip + 0x805a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d4: add esi, edx; lea r11, [rip + 0x80723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d854: add esi, edx; lea r11, [rip + 0x808a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d4: add esi, edx; lea r11, [rip + 0x80a23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d554: add esi, edx; lea r11, [rip + 0x80ba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d4: add esi, edx; lea r11, [rip + 0x80d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d254: add esi, edx; lea r11, [rip + 0x80ea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d4: add esi, edx; lea r11, [rip + 0x81023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf54: add esi, edx; lea r11, [rip + 0x811a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd4: add esi, edx; lea r11, [rip + 0x81323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc54: add esi, edx; lea r11, [rip + 0x814a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad4: add esi, edx; lea r11, [rip + 0x81623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b490: add esi, edx; lea r11, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b340: add esi, edx; lea r11, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1f0: add esi, edx; lea r11, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b0a0: add esi, edx; lea r11, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af50: add esi, edx; lea r11, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae00: add esi, edx; lea r11, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acb0: add esi, edx; lea r11, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa10: add esi, edx; lea r11, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8c0: add esi, edx; lea r11, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a770: add esi, edx; lea r11, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a620: add esi, edx; lea r11, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4d0: add esi, edx; lea r11, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a380: add esi, edx; lea r11, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a230: add esi, edx; lea r11, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f6a: add esi, edx; lea r11, [rip + 0x83d8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038ac0: add esi, edx; lea r11, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038970: add esi, edx; lea r11, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038820: add esi, edx; lea r11, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386d0: add esi, edx; lea r11, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038580: add esi, edx; lea r11, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038430: add esi, edx; lea r11, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382e0: add esi, edx; lea r11, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038040: add esi, edx; lea r11, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ef0: add esi, edx; lea r11, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037da0: add esi, edx; lea r11, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c50: add esi, edx; lea r11, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037b00: add esi, edx; lea r11, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379b0: add esi, edx; lea r11, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037860: add esi, edx; lea r11, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003759a: add esi, edx; lea r11, [rip + 0x8659d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d8d31: add esi, esp; jmp qword ptr [rax]; 
0x00000000000504ad: add esp, 0x100; sub rax, rdx; ret; 
0x00000000000097b5: add esp, 0x1030; pop rbx; pop r12; pop rbp; ret; 
0x0000000000066ab6: add esp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000592fc: add esp, 0x10; pop rbx; and eax, 0xc; pop rbp; pop r12; ret; 
0x0000000000020811: add esp, 0x10; pop rbx; jmp rax; 
0x000000000001a741: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056bdf: add esp, 0x10; pop rbx; ret; 
0x0000000000092088: add esp, 0x110; pop rbx; ret; 
0x0000000000016bde: add esp, 0x118; ret; 
0x0000000000016ac0: add esp, 0x148; ret; 
0x0000000000024329: add esp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000295f3: add esp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000029c1e: add esp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000005a75a: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001b7d5: add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000182be: add esp, 0x18; ret; 
0x0000000000029641: add esp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000b637e: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b5ef: add esp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000002d730: add esp, 0x20; call 0x1a2e0; call 0x16e60; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000002131d: add esp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000020efd: add esp, 0x20; pop rbx; jmp rax; 
0x0000000000021356: add esp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000092109: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020c6f: add esp, 0x20; pop rbx; ret; 
0x00000000000b6aa4: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000b6ab1: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000052632: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a9065: add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000005657a: add esp, 0x28; ret; 
0x000000000005d768: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b4371: add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000000942df: add esp, 0x30; pop rbx; ret; 
0x00000000000169b4: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002031e: add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000085241: add esp, 0x38; ret; 
0x00000000000a96ac: add esp, 0x40; pop rbx; ret; 
0x000000000009161c: add esp, 0x48; jmp qword ptr [rax]; 
0x0000000000056252: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a9793: add esp, 0x50; pop rbx; ret; 
0x00000000000915aa: add esp, 0x58; jmp qword ptr [rax]; 
0x0000000000009a38: add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000567aa: add esp, 0x58; ret; 
0x000000000005669c: add esp, 0x68; ret; 
0x0000000000081f14: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056a2f: add esp, 0x78; ret; 
0x0000000000053f1f: add esp, 0x80; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000001a3c7: add esp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000180a3: add esp, 0x80; add rsp, 8; ret; 
0x0000000000075fae: add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000000228fb: add esp, 0x80; mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x000000000002496a: add esp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000024ad9: add esp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000181f8: add esp, 0x80; mov rax, rbx; pop rbx; ret; 
0x00000000000736f7: add esp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000084d23: add esp, 0x80; pop rbx; ret; 
0x000000000006a993: add esp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000017ecf: add esp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000058c0d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000009ca2: add esp, 0x88; pop rbx; ret; 
0x000000000000a42f: add esp, 0x98; ret; 
0x000000000007d277: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000084e43: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000065d36: add esp, 0xb8; pop rbx; pop r12; ret; 
0x000000000001e565: add esp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009d6f1: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000019ea7: add esp, 0xd0; pop rbx; ret; 
0x000000000001a036: add esp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000019994: add esp, 0xd8; ret; 
0x0000000000070815: add esp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000001bbe4: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000009ea9a: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000001bb4f: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000008f69b: add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000001a3ce: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000008e0f9: add esp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000058240: add esp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x00000000000573fc: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000208c9: add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000000a95e9: add esp, 8; movzx eax, al; neg eax; ret; 
0x000000000001d8d4: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000000aae3: add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000083cb: add esp, 8; ret; 
0x000000000002daf9: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000006e519: add esp, dword ptr [rbx + 0x27]; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x000000000008c4b1: add esp, dword ptr [rip + 0x634a0004]; add al, 0xa7; add rax, rdi; jmp rax; 
0x0000000000041ee5: add qword ptr [r10 - 0x2f], r12; jl 0x41f33; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000028c1c: add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000009548a: add qword ptr [rcx - 0x77], rcx; or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000017db9: add qword ptr [rip + 0x2d35c7], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000187d6: add r10d, 0x3039; and edx, 0x7fffffff; mov dword ptr [r8], edx; mov dword ptr [rsi], edx; ret; 
0x0000000000018565: add r10d, eax; xor eax, eax; mov dword ptr [rsi], r10d; pop rbp; ret; 
0x000000000003f2b2: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000083cbf: add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x000000000005bad2: add r14, 0x18; call rax; 
0x0000000000083747: add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x000000000003f242: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000003f1d2: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000000b0000: add r8, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034da4: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000b4578: add r8, rsi; test dil, dil; js 0xb45a8; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b7648: add r8, rsi; test dil, dil; js 0xb7678; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b8fe8: add r8, rsi; test dil, dil; js 0xb9018; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x0000000000024966: add r8d, dword ptr [r8]; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x00000000000654fe: add r9b, byte ptr [rax + 0x39]; ret; 
0x000000000006551c: add r9d, dword ptr [rax + 0x39]; ret; 
0x0000000000073648: add r9d, eax; mov eax, r9d; ret; 
0x00000000000b17b2: add rax, -0x7cb80000; ret 0xe910; 
0x0000000000082be4: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a614: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035404: add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000082c04: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a634: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035414: add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000082c52: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a682: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035442: add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000082a20: add rax, 1; ret; 
0x0000000000082a17: add rax, 2; ret; 
0x0000000000082a30: add rax, 3; ret; 
0x000000000000a8b8: add rax, qword ptr [0]; ret; 
0x000000000005bf44: add rax, qword ptr [r12]; mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x000000000005bace: add rax, qword ptr [r14 + 0x10]; add r14, 0x18; call rax; 
0x000000000008bd75: add rax, qword ptr [r14]; call rax; 
0x000000000005bc74: add rax, qword ptr [r14]; mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x00000000000b315f: add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000005be21: add rax, qword ptr [r15 + 0x10]; call rax; 
0x000000000008ccfb: add rax, qword ptr [rbp - 0xb8]; call rax; 
0x00000000000b32fc: add rax, qword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000005c09a: add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000091893: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091cc3: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000919f4: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x000000000000a8b7: add rax, qword ptr fs:[0]; ret; 
0x000000000008c096: add rax, r11; call rax; 
0x00000000000b574c: add rax, r12; jmp rax; 
0x000000000000b0f3: add rax, r13; jmp rax; 
0x00000000000b477b: add rax, r15; jmp rax; 
0x00000000000b4559: add rax, r8; jmp rax; 
0x00000000000b5b25: add rax, r9; jmp rax; 
0x000000000005aab3: add rax, rbp; jmp rax; 
0x000000000005aa3b: add rax, rbx; jmp rax; 
0x000000000004a1e7: add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000007c33a: add rax, rcx; jmp rax; 
0x0000000000035170: add rax, rcx; ret; 
0x0000000000082b0c: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a54c: add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000003535c: add rax, rcx; vzeroupper; ret; 
0x000000000003516d: add rax, rdi; add rax, rcx; ret; 
0x0000000000082b09: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a549: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000035359: add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000007c96a: add rax, rdi; jmp rax; 
0x00000000000352e3: add rax, rdi; ret; 
0x000000000009d2af: add rax, rdi; sub rax, r8; ret; 
0x0000000000082bc4: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a604: add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000505a9: add rax, rdi; sub rax, rsi; ret; 
0x00000000000353f4: add rax, rdi; vzeroupper; ret; 
0x000000000009d597: add rax, rdx; cmp rax, qword ptr [rip + 0x24d6cf]; jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000000ae89: add rax, rdx; jmp rax; 
0x0000000000017cab: add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000004a4f5: add rax, rdx; sub rax, rdi; ret; 
0x000000000008271a: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000051adb: add rax, rsi; jmp rax; 
0x000000000008bd71: add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x00000000000b3350: add rbx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3278: add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000051a0d: add rcx, 0x100; cmp rdx, rcx; jne 0x519f2; vzeroupper; ret; 
0x000000000005184a: add rcx, 0x80; cmp rdx, rcx; jne 0x51837; vzeroupper; ret; 
0x0000000000035c51: add rcx, r11; jmp rcx; 
0x0000000000051b03: add rcx, rsi; jmp rcx; 
0x000000000004dab4: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x70f3d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e13c: add rdi, 0x10; lea r11, [rip + 0x70939]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db1c: add rdi, 0x10; lea r11, [rip + 0x70ed9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000050548: add rdi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x50588; movsxd rax, ecx; ret; 
0x000000000008b00c: add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000004e171: add rdi, 0x20; lea r11, [rip + 0x70904]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db51: add rdi, 0x20; lea r11, [rip + 0x70ea4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000055f2c: add rdi, 0x28; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000000591a1: add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000004e03e: add rdi, 0x30; lea r11, [rip + 0x70a37]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000001646b: add rdi, r10; jmp rdi; 
0x0000000000068573: add rdi, r11; jmp rdi; 
0x0000000000040ab0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7db43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040930: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7dcc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7de43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040631: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7dfc2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7e143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040330: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7e2c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7e443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040030: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7e5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7e743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd30: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7e8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7ea43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa30: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7ebc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7ed43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f730: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7eec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7f043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x80123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de50: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x802a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x80423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db51: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x805a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x80723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d850: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x808a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x80a23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d550: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x80ba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x80d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d250: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x80ea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x81023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf50: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x811a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x81323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc50: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x814a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x81623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f66: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x83d8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037596: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x8659d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040d1b: add rdi, rdx; lea r11, [rip + 0x7d8db]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f476: add rdi, rdx; lea r11, [rip + 0x7f180]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f31a: add rdi, rdx; lea r11, [rip + 0x7f2dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e227: add rdi, rdx; lea r11, [rip + 0x7fecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c619: add rdi, rdx; lea r11, [rip + 0x816dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c996: add rdi, rdx; lea r11, [rip + 0x81760]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c824: add rdi, rdx; lea r11, [rip + 0x818d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e7a: add rdi, rdx; lea r11, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db5: add rdi, rdx; lea r11, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374aa: add rdi, rdx; lea r11, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e5: add rdi, rdx; lea r11, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000366a0: add rdi, rdx; lea r11, [rip + 0x87356]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036626: add rdi, rdx; lea r11, [rip + 0x873d0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036597: add rdi, rdx; lea r11, [rip + 0x8745f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003638c: add rdi, rdx; lea r11, [rip + 0x8766a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003625a: add rdi, rdx; lea r11, [rip + 0x8779c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036194: add rdi, rdx; lea r11, [rip + 0x87862]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036116: add rdi, rdx; lea r11, [rip + 0x878e0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003607f: add rdi, rdx; lea r11, [rip + 0x87977]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e83: add rdi, rdx; lea r11, [rip + 0x87b73]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d52: add rdi, rdx; lea r11, [rip + 0x87ca4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c43: add rdi, rdx; lea r11, [rip + 0x87db3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003818f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c54b: add rdi, rdx; sfence; lea r11, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b63: add rdi, rdx; sfence; lea r11, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004e0f7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x7097b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dad7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x70f1b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000092ee1: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000016182: add rdx, rdi; jmp rdx; 
0x000000000004e138: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x70939]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db18: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x70ed9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e16d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x70904]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db4d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x70ea4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e03a: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x70a37]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000001b026: add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000008f3df: add rsi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x0000000000090913: add rsi, 1; test dl, dl; jne 0x908ea; movsx eax, cl; neg eax; ret; 
0x0000000000068074: add rsi, r8; jmp rsi; 
0x000000000005b967: add rsi, r9; jmp rsi; 
0x000000000004e0b0: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x709c2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e093: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x709df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da90: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x70f62]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da73: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x70f7f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000040d18: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7d8db]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f473: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7f180]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f317: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7f2dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e224: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7fecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c616: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x816dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c993: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x81760]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c821: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x818d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e77: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db2: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374a7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e2: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003669d: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x87356]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036623: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x873d0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036594: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x8745f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036389: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x8766a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036257: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x8779c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036191: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x87862]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036113: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x878e0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003607c: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x87977]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e80: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x87b73]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d4f: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x87ca4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c40: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x87db3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000040ab3: add rsi, rdx; lea r11, [rip + 0x7db43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040933: add rsi, rdx; lea r11, [rip + 0x7dcc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b3: add rsi, rdx; lea r11, [rip + 0x7de43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040634: add rsi, rdx; lea r11, [rip + 0x7dfc2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b3: add rsi, rdx; lea r11, [rip + 0x7e143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040333: add rsi, rdx; lea r11, [rip + 0x7e2c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b3: add rsi, rdx; lea r11, [rip + 0x7e443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040033: add rsi, rdx; lea r11, [rip + 0x7e5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb3: add rsi, rdx; lea r11, [rip + 0x7e743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd33: add rsi, rdx; lea r11, [rip + 0x7e8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb3: add rsi, rdx; lea r11, [rip + 0x7ea43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa33: add rsi, rdx; lea r11, [rip + 0x7ebc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b3: add rsi, rdx; lea r11, [rip + 0x7ed43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f733: add rsi, rdx; lea r11, [rip + 0x7eec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b3: add rsi, rdx; lea r11, [rip + 0x7f043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd3: add rsi, rdx; lea r11, [rip + 0x80123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de53: add rsi, rdx; lea r11, [rip + 0x802a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd3: add rsi, rdx; lea r11, [rip + 0x80423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db54: add rsi, rdx; lea r11, [rip + 0x805a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d3: add rsi, rdx; lea r11, [rip + 0x80723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d853: add rsi, rdx; lea r11, [rip + 0x808a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d3: add rsi, rdx; lea r11, [rip + 0x80a23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d553: add rsi, rdx; lea r11, [rip + 0x80ba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d3: add rsi, rdx; lea r11, [rip + 0x80d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d253: add rsi, rdx; lea r11, [rip + 0x80ea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d3: add rsi, rdx; lea r11, [rip + 0x81023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf53: add rsi, rdx; lea r11, [rip + 0x811a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd3: add rsi, rdx; lea r11, [rip + 0x81323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc53: add rsi, rdx; lea r11, [rip + 0x814a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad3: add rsi, rdx; lea r11, [rip + 0x81623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b48f: add rsi, rdx; lea r11, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b33f: add rsi, rdx; lea r11, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1ef: add rsi, rdx; lea r11, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b09f: add rsi, rdx; lea r11, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af4f: add rsi, rdx; lea r11, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003adff: add rsi, rdx; lea r11, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acaf: add rsi, rdx; lea r11, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa0f: add rsi, rdx; lea r11, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8bf: add rsi, rdx; lea r11, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a76f: add rsi, rdx; lea r11, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a61f: add rsi, rdx; lea r11, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4cf: add rsi, rdx; lea r11, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a37f: add rsi, rdx; lea r11, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a22f: add rsi, rdx; lea r11, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f69: add rsi, rdx; lea r11, [rip + 0x83d8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038abf: add rsi, rdx; lea r11, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003896f: add rsi, rdx; lea r11, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003881f: add rsi, rdx; lea r11, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386cf: add rsi, rdx; lea r11, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003857f: add rsi, rdx; lea r11, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003842f: add rsi, rdx; lea r11, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382df: add rsi, rdx; lea r11, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003803f: add rsi, rdx; lea r11, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037eef: add rsi, rdx; lea r11, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037d9f: add rsi, rdx; lea r11, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c4f: add rsi, rdx; lea r11, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037aff: add rsi, rdx; lea r11, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379af: add rsi, rdx; lea r11, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003785f: add rsi, rdx; lea r11, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037599: add rsi, rdx; lea r11, [rip + 0x8659d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000504ac: add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000097b4: add rsp, 0x1030; pop rbx; pop r12; pop rbp; ret; 
0x0000000000066ab5: add rsp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000592fb: add rsp, 0x10; pop rbx; and eax, 0xc; pop rbp; pop r12; ret; 
0x0000000000020810: add rsp, 0x10; pop rbx; jmp rax; 
0x000000000001a740: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056bde: add rsp, 0x10; pop rbx; ret; 
0x0000000000092087: add rsp, 0x110; pop rbx; ret; 
0x0000000000016bdd: add rsp, 0x118; ret; 
0x0000000000016abf: add rsp, 0x148; ret; 
0x0000000000024328: add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000295f2: add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000029c1d: add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000005a759: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001b7d4: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000182bd: add rsp, 0x18; ret; 
0x0000000000029640: add rsp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000b637d: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b5ee: add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000002d72f: add rsp, 0x20; call 0x1a2e0; call 0x16e60; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000002131c: add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000020efc: add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000021355: add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000092108: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020c6e: add rsp, 0x20; pop rbx; ret; 
0x00000000000b6aa3: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000b6ab0: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000052631: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a9064: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000056579: add rsp, 0x28; ret; 
0x000000000005d767: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b4370: add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000000942de: add rsp, 0x30; pop rbx; ret; 
0x00000000000169b3: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002031d: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000085240: add rsp, 0x38; ret; 
0x00000000000a96ab: add rsp, 0x40; pop rbx; ret; 
0x000000000009161b: add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000056251: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a9792: add rsp, 0x50; pop rbx; ret; 
0x00000000000915a9: add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000009a37: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000567a9: add rsp, 0x58; ret; 
0x000000000005669b: add rsp, 0x68; ret; 
0x0000000000081f13: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056a2e: add rsp, 0x78; ret; 
0x0000000000053f1e: add rsp, 0x80; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000001a3c6: add rsp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000180a2: add rsp, 0x80; add rsp, 8; ret; 
0x0000000000075fad: add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000000228fa: add rsp, 0x80; mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000024969: add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000024ad8: add rsp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000181f7: add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x00000000000736f6: add rsp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000084d22: add rsp, 0x80; pop rbx; ret; 
0x000000000006a992: add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000017ece: add rsp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000058c0c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000009ca1: add rsp, 0x88; pop rbx; ret; 
0x000000000000a42e: add rsp, 0x98; ret; 
0x000000000007d276: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000084e42: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000065d35: add rsp, 0xb8; pop rbx; pop r12; ret; 
0x000000000001e564: add rsp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009d6f0: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000019ea6: add rsp, 0xd0; pop rbx; ret; 
0x000000000001a035: add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000019993: add rsp, 0xd8; ret; 
0x0000000000070814: add rsp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000001bbe3: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000009ea99: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000001bb4e: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000008f69a: add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000001a3cd: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000008e0f8: add rsp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000005823f: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x00000000000573fb: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000208c8: add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000000a95e8: add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000001d8d3: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000000aae2: add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000083ca: add rsp, 8; ret; 
0x000000000002daf8: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009d5aa: add word ptr [rdx + rax*2], 1; ret; 
0x00000000000bddb8: and ah, 0xf7; inc dword ptr [rax + 0x10fff7e6]; fincstp; call rax; 
0x00000000000d3ad1: and ah, bh; jmp rcx; 
0x00000000000bea7c: and ah, dh; clc; call qword ptr [rax]; 
0x00000000000bea7c: and ah, dh; clc; call qword ptr [rax]; idiv eax; jmp qword ptr [rax]; 
0x00000000000d61e5: and ah, dh; jmp rax; 
0x000000000009d0f4: and al, 0; adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000009fa58: and al, 0; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x0000000000098ffa: and al, 0; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000da299: and al, 0; add byte ptr [rsp + rdi*2 - 0xc], dl; jmp qword ptr [rdi + 2]; 
0x000000000009c971: and al, 0; add rsp, 8; ret; 
0x000000000009d5a8: and al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x000000000009d59f: and al, 0; jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000009fa4e: and al, 0; jne 0x9fad0; cmp qword ptr [rip + 0x2474f5], 0; jne 0x9fa5f; pop rbx; ret; 
0x000000000009cdca: and al, 0; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009c985: and al, 0; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000009c96a: and al, 0; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x000000000009c98c: and al, 0; ret; 
0x00000000000b6988: and al, 0x10; add rsp, 0x28; ret; 
0x000000000001b79e: and al, 0x10; call qword ptr [rbp + 0x18]; 
0x0000000000057868: and al, 0x10; call rax; 
0x000000000009204b: and al, 0x10; call rdx; 
0x000000000008505c: and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000000a04c: and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000005bc7f: and al, 0x10; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x0000000000026c7c: and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000005bd5d: and al, 0x10; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x000000000001b92a: and al, 0x10; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000020f28: and al, 0x10; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000007f972: and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000017153: and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000008242a: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000000171e3: and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000017278: and al, 0x10; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000b921d: and al, 0x14; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000009ee5c: and al, 0x14; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x00000000000d908c: and al, 0x15; hlt; call qword ptr [rdi]; 
0x000000000008df33: and al, 0x18; call 0x8d860; add rsp, 0xd8; ret; 
0x000000000000a055: and al, 0x18; call rax; 
0x0000000000056b0c: and al, 0x18; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x000000000001b92f: and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000085060: and al, 0x18; mov eax, 0x101; syscall; 
0x0000000000056a40: and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000005bc7a: and al, 0x18; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x000000000005bd58: and al, 0x18; mov qword ptr [rsp + 0x10], r9; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x000000000005c968: and al, 0x18; mov r9, r13; call rbx; 
0x000000000007f88d: and al, 0x18; mov rdi, r12; call rbx; 
0x000000000008242f: and al, 0x18; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000092046: and al, 0x18; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000020f23: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000085057: and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000000612ee: and al, 0x20; call rax; 
0x00000000000820f0: and al, 0x20; call rbx; 
0x0000000000056b16: and al, 0x20; je 0x56b40; mov eax, 0x48; syscall; 
0x0000000000026c77: and al, 0x20; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000005bd53: and al, 0x20; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r9; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x000000000005ef82: and al, 0x20; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000060d2a: and al, 0x20; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000000d1624: and al, 0x26; outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x00000000000295f0: and al, 0x28; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000029c1b: and al, 0x28; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x0000000000026c72: and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000009160a: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000091598: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000055cf4: and al, 0x28; mov rax, qword ptr [r12 + 8]; test rax, rax; je 0x55d02; call rax; 
0x000000000005ef7d: and al, 0x28; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000002cb23: and al, 0x28; mov rdi, rbp; call rax; 
0x000000000005f691: and al, 0x28; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000006406e: and al, 0x28; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000851b8: and al, 0x28; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000005fb6b: and al, 0x30; call rbx; 
0x0000000000056b11: and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x00000000000822de: and al, 0x30; mov rdi, rbp; call rbx; 
0x000000000009160f: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x000000000009159d: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000000d005c: and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000060dea: and al, 0x38; add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x000000000005f69b: and al, 0x38; call rbx; 
0x0000000000081fc8: and al, 0x38; lea rcx, [rax + 1]; call rbx; 
0x000000000005f3a7: and al, 0x38; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000091614: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000000915a2: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000005fb66: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000000612df: and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000074abc: and al, 0x40; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000006536e: and al, 0x40; add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x000000000006412e: and al, 0x40; add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x00000000000b4c67: and al, 0x40; add dword ptr [rax], eax; add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000091619: and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000000915a7: and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000064078: and al, 0x40; call rbx; 
0x00000000000612e9: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000005f696: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005f3a2: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000008388c: and al, 0x40; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000005fb61: and al, 0x40; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000000835cd: and al, 0x40; mov rsi, rbp; mov rdi, r12; call rbx; 
0x0000000000056a78: and al, 0x41; mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000dc40c: and al, 0x46; add byte ptr [rax], al; and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x000000000009ef11: and al, 0x48; add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000020838: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x00000000000b40ff: and al, 0x48; add esp, 0x38; ret; 
0x000000000007e809: and al, 0x48; mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007f5d1: and al, 0x48; mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000020d8b: and al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000001d514: and al, 0x48; mov edi, ebx; call rax; 
0x0000000000064073: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000612e4: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000005f39d: and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000081fc4: and al, 0x4c; lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000005bf47: and al, 0x4c; mov dword ptr [rsp + 0x18], edx; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x00000000000b3357: and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x000000000001e1e5: and al, 0x4c; mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000000b3305: and al, 0x4c; mov esi, esp; mov edi, ebp; call rax; 
0x0000000000083891: and al, 0x50; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000009189a: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091cca: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x000000000002a4e3: and al, 0x68; call rax; 
0x00000000000919fb: and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x000000000000b83c: and al, 0x80; add byte ptr [rax], al; add al, ch; ret 0xffcd; 
0x000000000001d789: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffdaf7e; jmp qword ptr [rsi + 0x2e]; 
0x00000000000de5cc: and al, 0x83; clc; call qword ptr [rdx]; 
0x000000000007118e: and al, 0x83; ret; 
0x00000000000654d9: and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000000da53c: and al, 0x84; hlt; call qword ptr [rdi]; 
0x00000000000654f7: and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000065515: and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x0000000000065a2d: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000233a3: and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x000000000000d6fc: and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000000bb77b: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000000bae8b: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000006033b: and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x0000000000083c6c: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r12; call rbx; 
0x0000000000083785: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x00000000000e270c: and al, 0xa9; add byte ptr [rax], al; sub byte ptr [rdx - 4], 0xff; ret; 
0x000000000008399a: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; call rbx; 
0x00000000000097eb: and al, 0xb; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000089770: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000055c20: and al, 0xc; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056bdc: and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x0000000000056bd3: and al, 0xc; call 0x59160; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000056a83: and al, 0xc; mov eax, 0x48; syscall; 
0x000000000000a050: and al, 0xc; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000020833: and al, 0xc; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000016b6f: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x00000000000b4528: and al, 0xd8; ret; 
0x0000000000016b77: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000092037: and al, 0xe8; push rbx; outsb dx, byte ptr [rsi]; std; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x000000000001c3e7: and al, 0xe8; ret; 
0x00000000000a94a4: and al, 0xe8; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000022413: and al, 0xe9; ret 0xfffd; 
0x00000000000a94ac: and al, 0xec; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000a94a0: and al, 0xf0; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000bbf20: and al, 0xf2; hlt; call qword ptr [rsi]; 
0x00000000000d9241: and al, 0xf4; jmp qword ptr [rdx + 1]; 
0x00000000000d620d: and al, 0xf4; lcall [rsp + rbp + 0x27480000]; hlt; call rax; 
0x000000000006074e: and al, 0xf6; ret; 
0x00000000000a9461: and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000a9467: and al, 0xf8; ret; 
0x0000000000076164: and al, 0xf9; dec dword ptr [rax - 0x39]; ret 0xff88; 
0x00000000000e1a39: and al, 0xfb; call qword ptr [rax]; 
0x00000000000a941b: and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000a9421: and al, 0xfc; ret; 
0x000000000009fac7: and al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000002e47a: and al, 2; add bh, dh; ret 0; 
0x000000000002e4b4: and al, 2; add byte ptr [rax - 0x73], cl; add eax, 0x223d2; cmovne rax, rdx; ret; 
0x000000000002e7bb: and al, 2; add byte ptr [rax - 0x73], cl; add eax, 0x2247b; cmovne rax, rdx; ret; 
0x00000000000182b9: and al, 4; jne 0x182c2; add rsp, 0x18; ret; 
0x000000000005684c: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020f2d: and al, 8; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000021353: and al, 8; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x000000000001de1b: and al, 8; call 0x1cab0; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000001715f: and al, 8; call rax; 
0x0000000000026c81: and al, 8; call rcx; 
0x000000000007ca72: and al, 8; ja 0x7caa8; lea rdi, [rip + 0x50eef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000566eb: and al, 8; mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000056b43: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000005bc84: and al, 8; mov qword ptr [rsp], rcx; call rax; 
0x0000000000057863: and al, 8; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000001b170: and al, 8; mov rdi, r15; call rax; 
0x00000000000b8890: and al, 8; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x000000000001de25: and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000055cf9: and al, 8; test rax, rax; je 0x55d02; call rax; 
0x000000000001a6f1: and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000000be8b9: and al, bh; call qword ptr [rax + 0x22]; 
0x00000000000be879: and al, bh; call rax; 
0x00000000000be879: and al, bh; call rax; and eax, edi; call qword ptr [rax]; 
0x00000000000be879: and al, bh; call rax; and eax, edi; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; 
0x000000000006df6d: and al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000002e5da: and al, byte ptr [rdx]; add bh, dh; ret 0; 
0x000000000004a75a: and al, byte ptr [rsp - 0xb7f68c]; ret 0xc148; 
0x0000000000076d01: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000000862d5: and bh, al; dec dword ptr [rax + 0x39]; ret; 
0x00000000000612ef: and bh, bh; rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x00000000000e19e1: and bh, bl; call qword ptr [rbx]; 
0x00000000000574c2: and bh, byte ptr [rdi]; sub dword ptr [rax], eax; test eax, eax; jne 0x574e0; mov eax, 0x4a; syscall; 
0x000000000005cb1a: and bh, byte ptr [rdx - 0x6f990006]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d0605: and bh, byte ptr [rsi - 0x5e0466e]; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000000bd8f5: and bh, dh; jmp qword ptr [rax]; 
0x0000000000068764: and bh, dl; jmp qword ptr [rsi + 0xf]; 
0x00000000000d11a3: and bl, byte ptr [rdx + 0x7a]; pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000bea5c: and bl, dh; clc; inc dword ptr [rax - 0xd]; clc; jmp qword ptr [rax - 0xd]; 
0x000000000001b439: and byte ptr [r8 + 1], r9b; ret; 
0x0000000000068773: and byte ptr [r8 - 0x77], r9b; sti; test rax, rax; je 0x6877f; call rax; 
0x0000000000020750: and byte ptr [r9 + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000052c56: and byte ptr [r9 + 0x5d], r8b; pop r14; pop r15; ret; 
0x000000000001b39e: and byte ptr [r9 - 0x77], r9b; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000000d7510: and byte ptr [rax + 0x16380000], ch; sti; call qword ptr [rax - 0x58]; 
0x000000000007f32e: and byte ptr [rax + 0x3b], cl; push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007f5cb: and byte ptr [rax + 0x3b], cl; sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000082be7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a617: and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000035407: and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000009df1: and byte ptr [rax + 1], cl; ret 0xb70f; 
0x000000000001b43a: and byte ptr [rax + 1], cl; ret; 
0x0000000000073bbe: and byte ptr [rax + 9], cl; ret 0xff83; 
0x000000000004a4ed: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000082769: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000005ef83: and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000060d2b: and byte ptr [rax - 0x75], cl; je 0x60d54; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000076a19: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000006b4ff: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000086bf3: and byte ptr [rax - 0x75], cl; sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x000000000001d6e9: and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffe4ede; jmp qword ptr [rsi + 0x2e]; 
0x0000000000068774: and byte ptr [rax - 0x77], cl; sti; test rax, rax; je 0x6877f; call rax; 
0x00000000000b6a56: and byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000755f4: and byte ptr [rax - 0x7d], cl; ret 0xe920; 
0x000000000005dc66: and byte ptr [rax - 0x7d], cl; ret; 
0x000000000001d032: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x00000000000be8ee: and byte ptr [rax], ah; adc byte ptr [rdi], bh; clc; jmp qword ptr [rax]; 
0x00000000000be8ec: and byte ptr [rax], ah; and byte ptr [rax], ah; adc byte ptr [rdi], bh; clc; jmp qword ptr [rax]; 
0x00000000000be8ea: and byte ptr [rax], ah; and byte ptr [rax], ah; and byte ptr [rax], ah; adc byte ptr [rdi], bh; clc; jmp qword ptr [rax]; 
0x000000000007fda3: and byte ptr [rax], al; add byte ptr [rax + rdx - 0x75], dh; jo 0x7fd31; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000000b6a24: and byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000079ea2: and byte ptr [rax], al; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000051bea: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000098f6a: and byte ptr [rax], al; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000377b5: and byte ptr [rbp + rcx*4 + 0x1d], cl; and dword ptr [rbx + 8], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a185: and byte ptr [rbp + rcx*4 + 0x1d], cl; jae 0x3a1c6; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000bba41: and byte ptr [rbp - 0x77], cl; ret; 
0x0000000000053079: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000009210b: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000075853: and byte ptr [rbx + rcx*4 + 0x40], cl; sub cl, ch; ret 0xffe8; 
0x0000000000092162: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x00000000000be9d4: and byte ptr [rbx - 0x5b2f0008], 0xf8; jmp qword ptr [rax]; 
0x000000000007c95c: and byte ptr [rbx - 0x78f0d608], al; mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000b7565: and byte ptr [rbx - 0x7fbf8f19], al; jmp qword ptr [rax]; 
0x00000000000d8440: and byte ptr [rbx - 0xd], bl; call qword ptr [rdx]; 
0x00000000000dc460: and byte ptr [rbx - 9], dl; call qword ptr [rbx]; 
0x00000000000b697c: and byte ptr [rbx], 0; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x00000000000be100: and byte ptr [rbx], al; clc; jmp rax; 
0x00000000000bdecc: and byte ptr [rbx], dl; clc; push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x000000000006b510: and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000076a2e: and byte ptr [rcx + 0x2b], cl; push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000020751: and byte ptr [rcx + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000052c57: and byte ptr [rcx + 0x5d], al; pop r14; pop r15; ret; 
0x000000000001f8b9: and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000001bba1: and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000007c1c2: and byte ptr [rcx + rbp], bh; ja 0x7c1f0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000005bd54: and byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x18; mov qword ptr [rsp + 0x10], r9; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x0000000000026c78: and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000000a94a9: and byte ptr [rcx - 0x2413dbbc], cl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x000000000002131f: and byte ptr [rcx - 0x2dcea42f], cl; jmp rax; 
0x0000000000017af7: and byte ptr [rcx - 0x353eb711], cl; adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000078359: and byte ptr [rcx - 0x537bf0ce], cl; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x78378; test byte ptr [rax - 0x7c000019], ah; ret; 
0x00000000000b6c04: and byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x00000000000a1ea5: and byte ptr [rcx - 0x77], cl; ret; 
0x000000000001b39f: and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000006d6f9: and byte ptr [rcx - 1], bh; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000000be8f4: and byte ptr [rcx - 8], al; push qword ptr [rax]; clc; inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; 
0x000000000006bcba: and byte ptr [rcx], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000055d4b: and byte ptr [rcx], al; mov eax, 0x38; syscall; 
0x000000000005938e: and byte ptr [rcx], ch; add byte ptr [rax + 0x39], cl; ret 0xda75; 
0x00000000000e1af0: and byte ptr [rcx], ch; sti; call rbx; 
0x000000000008efb4: and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000051611: and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005093c: and byte ptr [rdi + 0x7e], dh; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000051661: and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bd9b4: and byte ptr [rdi + rsi*8 - 1], 0xf0; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000bdca8: and byte ptr [rdi - 0x578f0009], ah; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000d6b78: and byte ptr [rdi], ah; add al, ch; sal edi, 0xff; cmp byte ptr [rdi], ah; add byte ptr [rax], cl; ret 0xfff7; 
0x00000000000de1f0: and byte ptr [rdi], bh; clc; jmp qword ptr [rdi + 0x11]; 
0x0000000000050b51: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000556ca: and byte ptr [rdi], cl; mov dh, 0x7b; or dword ptr [rbx + rcx*4 + 0x34], ecx; ret 0x348; 
0x00000000000b5caa: and byte ptr [rdi], cl; test byte ptr [rdi - 0x18000000], bh; stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x000000000004e6bd: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x000000000001a05b: and byte ptr [rdi], cl; test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x000000000004e5a0: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000000be5dc: and byte ptr [rdi], dh; clc; push qword ptr [rax + 0x40fff836]; clc; call rax; 
0x00000000000d9508: and byte ptr [rdi], dl; add byte ptr [rax], al; xchg eax, esp; xor dh, ah; jmp rdi; 
0x0000000000041f26: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000000506b8: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000000dc410: and byte ptr [rdx - 9], dl; call qword ptr [rax]; 
0x00000000000be3c4: and byte ptr [rdx], bh; clc; push qword ptr [rax + 0x40fff839]; cmp eax, edi; call rax; 
0x0000000000035cea: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000035ce5: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b4511: and byte ptr [rsi + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0x20d2c]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x0000000000051ba8: and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000082a12: and ch, 0xf; je 0x82a30; add rax, 2; ret; 
0x00000000000bde88: and ch, al; idiv edi; jo 0xbde54; idiv edi; rol bh, 0xf7; call qword ptr [rax]; 
0x00000000000812ec: and ch, al; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000000582dd: and ch, bh; push rbx; ret; 
0x00000000000d5acc: and ch, bh; std; call qword ptr [rax]; 
0x00000000000829fd: and cl, 0xf; je 0x82a20; ret; 
0x0000000000059d11: and cl, byte ptr [rax + 0x63]; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000001b6ed: and cl, byte ptr [rax - 0x75]; and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000008edb4: and cl, byte ptr [rax - 0x77]; ret 0x1f0f; 
0x00000000000568c2: and cl, byte ptr [rbx + 0x29]; add byte ptr [rbp - 0x47e98a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000b65e2: and cl, byte ptr [rcx - 0x77]; call 0x48e4ef32; mov edx, dword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000003552d: and cl, byte ptr [rcx - 0x77]; ret; 
0x0000000000081dfa: and cl, byte ptr [rdx]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000755f8: and cl, ch; push rax; call 0xffffffff895555ff; ret 0x894c; 
0x00000000000bb181: and cl, ch; sar ebx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000051b13: and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x00000000000bddbc: and dh, 0xf7; call qword ptr [rax]; 
0x00000000000bddbc: and dh, 0xf7; call qword ptr [rax]; fincstp; call rax; 
0x0000000000055fdd: and dh, ah; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000059589: and dh, al; sub byte ptr [rcx], al; ret; 
0x00000000000bd8f9: and dh, bh; inc dword ptr [rax]; adc bh, dh; call qword ptr [rax + 0x27]; 
0x0000000000063a0a: and dh, byte ptr [rax - 6]; jmp qword ptr [rsi - 0x70]; 
0x00000000000bf22c: and dh, byte ptr [rdx - 7]; call rcx; 
0x00000000000bf264: and dh, byte ptr [rdx - 7]; dec dword ptr [rbp + 0x73]; stc; call rcx; 
0x00000000000bf264: and dh, byte ptr [rdx - 7]; dec dword ptr [rbp + 0x73]; stc; call rcx; jno 0xbf268; jmp rsp; 
0x00000000000bf250: and dh, byte ptr [rdx - 7]; jmp qword ptr [rdx]; 
0x00000000000be4b0: and dh, byte ptr [rip + 0x34b2fff8]; clc; inc dword ptr [rdx + 0x34]; clc; call rdx; 
0x0000000000076d00: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000000bddb4: and dl, 0xf7; inc dword ptr [rax - 0x7f00081c]; out 0xf7, al; call qword ptr [rax]; 
0x00000000000bddb4: and dl, 0xf7; inc dword ptr [rax - 0x7f00081c]; out 0xf7, al; call qword ptr [rax]; fincstp; call rax; 
0x00000000000e0e80: and dl, dl; cli; jmp qword ptr [rsi]; 
0x0000000000076878: and dword ptr [r8], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x000000000001b6f0: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000095483: and dword ptr [rax + 0x48000012], 0xffffff8d; add qword ptr [rcx - 0x77], rcx; or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000009ffd6: and dword ptr [rax + rax], 0xf6863ae9; jmp qword ptr [rsi - 0x70]; 
0x00000000000d9fd5: and dword ptr [rax], eax; add al, bh; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rsi]; 
0x0000000000076879: and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x00000000000991aa: and dword ptr [rax], eax; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000d9f49: and dword ptr [rax], eax; add byte ptr [rsi + rbp*2], dl; hlt; call qword ptr [rdi]; 
0x00000000000d3142: and dword ptr [rax], edx; jmp qword ptr [rdi]; 
0x00000000000991a9: and dword ptr [rax], r8d; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000abe39: and dword ptr [rbx + 1], 0; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000377b9: and dword ptr [rbx + 8], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000021b27: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000021b7f: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b8c89: and dword ptr [rbx], esp; add al, ch; mov edi, 0xe8fff4f8; retf 0xf5e1; jmp qword ptr [rsi + 0x2e]; 
0x00000000000592b7: and dword ptr [rcx], ebp; add byte ptr [rax + 0x39], cl; ret 0xd975; 
0x00000000000229ae: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x000000000002e71a: and dword ptr [rdx], eax; add bh, dh; ret 0; 
0x000000000002e754: and dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x22132; cmovne rax, rdx; ret; 
0x00000000000d01f9: and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000000d3141: and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000592b6: and dword ptr ss:[rcx], ebp; add byte ptr [rax + 0x39], cl; ret 0xd975; 
0x000000000000a8bb: and eax, 0; ret; 
0x000000000008bb7f: and eax, 0x134d870f; add byte ptr [rax], al; lea rcx, [rip + 0x42d93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000008046d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e80d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db1d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e7dd: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000008053d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081ded: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000008049d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000008b637: and eax, 0x25cbe4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000008ed1: and eax, 0x28; je 0x8edd; call 0x593b0; leave; ret; 
0x000000000000924b: and eax, 0x28; je 0x9257; call 0x593b0; leave; ret; 
0x00000000000093ec: and eax, 0x28; je 0x93f8; call 0x593b0; leave; ret; 
0x0000000000009546: and eax, 0x28; je 0x9552; call 0x593b0; leave; ret; 
0x000000000000965b: and eax, 0x28; je 0x9667; call 0x593b0; leave; ret; 
0x0000000000016db2: and eax, 0x28; jne 0x16e03; add rsp, 0x148; ret; 
0x000000000001998c: and eax, 0x28; jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019a38: and eax, 0x28; jne 0x19a47; add rsp, 0xd8; ret; 
0x0000000000019aed: and eax, 0x28; jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019bad: and eax, 0x28; jne 0x19bbc; add rsp, 0xd8; ret; 
0x00000000000521ea: and eax, 0x28; jne 0x52214; add rsp, 0x20; pop rbx; ret; 
0x0000000000056572: and eax, 0x28; jne 0x56589; add rsp, 0x28; ret; 
0x0000000000056690: and eax, 0x28; jne 0x56749; add rsp, 0x68; ret; 
0x00000000000567a2: and eax, 0x28; jne 0x567eb; add rsp, 0x58; ret; 
0x0000000000056a23: and eax, 0x28; jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b32: and eax, 0x28; jne 0x56b83; add rsp, 0x68; ret; 
0x00000000000574a1: and eax, 0x28; jne 0x574b7; add rsp, 0x28; ret; 
0x0000000000068e7a: and eax, 0x28; jne 0x68e86; add rsp, 0x18; ret; 
0x000000000007609d: and eax, 0x28; jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c0fd: and eax, 0x28; jne 0x7c10c; add rsp, 0xd8; ret; 
0x0000000000084ff5: and eax, 0x28; jne 0x850b9; add rsp, 0x78; ret; 
0x0000000000085107: and eax, 0x28; jne 0x85153; add rsp, 0x58; ret; 
0x000000000008518a: and eax, 0x28; jne 0x85199; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000085239: and eax, 0x28; jne 0x8525b; add rsp, 0x38; ret; 
0x00000000000916e5: and eax, 0x28; jne 0x916f2; add rsp, 0x20; pop rbx; ret; 
0x00000000000917e0: and eax, 0x28; jne 0x91813; add rsp, 0x38; ret; 
0x00000000000918a0: and eax, 0x28; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091a01: and eax, 0x28; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091cd0: and eax, 0x28; jne 0x91cfe; add rsp, 0x68; ret; 
0x0000000000093d0c: and eax, 0x28; jne 0x93d4e; leave; ret; 
0x00000000000942d3: and eax, 0x28; jne 0x94394; add rsp, 0x30; pop rbx; ret; 
0x000000000009cf58: and eax, 0x28; jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d03b: and eax, 0x28; jne 0x9d054; add rsp, 0x38; ret; 
0x00000000000a9596: and eax, 0x28; jne 0xa95ac; add rsp, 0x38; ret; 
0x0000000000016bd3: and eax, 0x28; mov eax, r8d; jne 0x16bfc; add rsp, 0x118; ret; 
0x000000000001a6e9: and eax, 0x28; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000016ab5: and eax, 0x28; mov rax, rdx; jne 0x16ac7; add rsp, 0x148; ret; 
0x00000000000182b1: and eax, 0x28; movsxd rax, dword ptr [rsp + 4]; jne 0x182c2; add rsp, 0x18; ret; 
0x0000000000017bc8: and eax, 0x30; call rax; 
0x0000000000017b02: and eax, 0x30; call rdx; 
0x0000000000017bee: and eax, 0x30; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000051b2d: and eax, 0x3fc00; pop rbx; ret; 
0x0000000000051c0a: and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000051b78: and eax, 0x3fffc00; pop rbx; ret; 
0x00000000000850e3: and eax, 0x410000; cmp eax, 0x410000; je 0x85118; mov eax, 0x101; syscall; 
0x0000000000056bd7: and eax, 0x448b0000; and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x000000000008ed0c: and eax, 0x48107500; lea eax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x000000000008b582: and eax, 0x48c03100; add esp, 8; ret; 
0x000000000008c4b2: and eax, 0x634a0004; add al, 0xa7; add rax, rdi; jmp rax; 
0x000000000008ee7f: and eax, 0x6894800; ret; 
0x000000000008e77e: and eax, 0x6e05c700; ret; 
0x000000000008eba1: and eax, 0x6f058b00; mov edi, 0x8b410025; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000005b95c: and eax, 0x746870f; add byte ptr [rax], al; movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x000000000008ee75: and eax, 0x7894800; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x000000000005ba36: and eax, 0x7dd870f; add byte ptr [rax], al; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x0000000000051c23: and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000051bc7: and eax, 0x7ff80000; ret; 
0x00000000000a9410: and eax, 0x7fffff; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000da3c1: and eax, 0x81bc0000; hlt; call qword ptr [rdi]; 
0x00000000000985d3: and eax, 0x83000039; ret 0xbf08; 
0x000000000008edcd: and eax, 0x89480000; add eax, 0x25c0d9; add rsp, 8; ret; 
0x000000000005606e: and eax, 0x8948fffb; ret; 
0x000000000008ed04: and eax, 0x8b480000; xor eax, 0x25c1a2; jne 0x8ed20; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x000000000002e67b: and eax, 0x8d480002; add eax, 0x225ab; cmovne rax, rdx; ret; 
0x00000000000595ea: and eax, 0x8d48f631; cmp eax, 0x660fd; mov eax, 0x15; syscall; 
0x000000000008eb04: and eax, 0xc058b00; shl byte ptr [rip + 0x138b4100], 0x39; ret 0x840f; 
0x0000000000059187: and eax, 0xc; cmp eax, 4; je 0x59190; ret; 
0x0000000000059300: and eax, 0xc; pop rbp; pop r12; ret; 
0x0000000000056bb9: and eax, 0xdf890000; mov edx, eax; mov eax, 3; syscall; 
0x000000000008ee04: and eax, 0xf750000; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x0000000000051afc: and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000000fdfa: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000013441: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000037260: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000036993: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000009c97: and eax, 0xffffffc0; mov qword ptr [rip + 0x2e0c5f], rax; add rsp, 0x88; pop rbx; ret; 
0x000000000004a434: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d3: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x00000000000b4595: and eax, 0xfffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x00000000000b692b: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000921ac: and eax, 2; sub eax, 1; ret; 
0x000000000003dcd9: and eax, dword ptr [rax + rcx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b697d: and eax, dword ptr [rax]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x00000000000b9cfc: and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000b9708: and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000884f9: and eax, dword ptr [rax]; clc; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000b96c3: and eax, dword ptr [rax]; jne 0xb96a8; pop rbx; ret; 
0x000000000003dfd9: and eax, dword ptr [rcx]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d9: and eax, dword ptr [rdi]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002e614: and eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22262; cmovne rax, rdx; ret; 
0x0000000000060b3e: and eax, dword ptr [rip + 0x29480000]; ret 0x349; 
0x000000000008142e: and eax, ecx; je 0x815f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000be87d: and eax, edi; call qword ptr [rax]; 
0x00000000000be87d: and eax, edi; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; 
0x00000000000be87d: and eax, edi; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; clc; call rax; 
0x00000000000a9456: and eax, esi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000083cbc: and ebp, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x000000000002e799: and ebp, dword ptr [rcx]; add al, byte ptr [rax]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000021b28: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000021b80: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000083cb9: and ebp, edi; and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x0000000000059122: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x5912c; ret; 
0x000000000005bac2: and ecx, 0xf; cmp cl, 0xa; je 0x5c08f; add rax, qword ptr [r14 + 0x10]; add r14, 0x18; call rax; 
0x000000000005be15: and ecx, 0xf; cmp cl, 0xa; je 0x5c0cf; add rax, qword ptr [r15 + 0x10]; call rax; 
0x0000000000037265: and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000036998: and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000008025a: and ecx, dword ptr [rax - 0x39]; or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000005858a: and ecx, dword ptr [rax - 0x77]; ret 0xabe; 
0x000000000001c6de: and ecx, dword ptr [rcx + rcx*4 + 0x43]; or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000003d6d9: and ecx, dword ptr [rdx]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d9: and ecx, dword ptr [rip + 0x63490008]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000028c1a: and ecx, ebp; add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x00000000000b450f: and edi, 0x20; je 0xb452a; movss xmm0, dword ptr [rip + 0x20d2c]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x0000000000039fd9: and edi, dword ptr [rip + 0x63490008]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000ae399: and edi, dword ptr [rsi]; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000e0171: and edi, edx; jmp qword ptr [rax]; 
0x00000000000187dd: and edx, 0x7fffffff; mov dword ptr [r8], edx; mov dword ptr [rsi], edx; ret; 
0x0000000000051b8e: and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000003d0d9: and edx, dword ptr [rax]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd9: and edx, dword ptr [rbx]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002d739: and edx, dword ptr [rdi + 0x1f0ffffe]; add byte ptr [rax + 0x16], bh; ret; 
0x000000000003cad9: and edx, dword ptr [rsi]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000815be: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000083744: and esi, 1; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x00000000000816b2: and esi, eax; je 0x815f0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000814bc: and esi, ecx; je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000083741: and esi, edi; and r14d, 1; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x00000000000d6205: and esi, esp; dec dword ptr [rax - 0x47ffffd4]; and al, 0xf4; lcall [rsp + rbp + 0x27480000]; hlt; call rax; 
0x0000000000059121: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5912c; ret; 
0x0000000000083cb8: and r13, r15; and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x00000000000812eb: and r13b, r8b; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000083cbb: and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x0000000000083740: and r14, r15; and r14d, 1; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x0000000000083743: and r14d, 1; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x000000000005606d: and rax, 0xffffffff8948fffb; ret; 
0x000000000004a433: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d2: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x00000000000b4594: and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x000000000008142d: and rax, rcx; je 0x815f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000a9455: and rax, rsi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000815bd: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000816b1: and rsi, rax; je 0x815f0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000814bb: and rsi, rcx; je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000059588: and sil, al; sub byte ptr [rcx], al; ret; 
0x00000000000d3ad0: and spl, r15b; jmp rcx; 
0x0000000000078d16: bnd call qword ptr [rax + 0x38]; 
0x000000000006b509: bnd call qword ptr [rbx + 0x38]; 
0x00000000000da9a6: bnd call qword ptr [rsi]; 
0x0000000000026c6a: bnd jmp 0x26ae3; mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000026d30: bnd jmp 0x26b3e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000000ddb2a: bnd jmp qword ptr [rbx]; 
0x00000000000e0f52: bnd jmp qword ptr [rcx]; 
0x000000000004a611: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035401: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000004a631: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035411: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000004a67f: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000003543f: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000004a1e4: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000003516a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000004a546: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000035356: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000352e0: bsf eax, eax; add rax, rdi; ret; 
0x0000000000082bc1: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a601: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000353f1: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000081301: bsf eax, eax; cmp rdx, rax; jbe 0x81370; add rax, rdi; vzeroupper; ret; 
0x00000000000352f0: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000035300: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000352d0: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000352b9: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000049d73: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000049b53: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000080e59: bsf eax, eax; sub rdx, rax; jbe 0x81100; add rax, rdi; add rax, rcx; ret; 
0x00000000000810c0: bsf eax, eax; sub rdx, rax; jbe 0x81100; add rax, rdi; ret; 
0x00000000000810d0: bsf eax, eax; sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000810e0: bsf eax, eax; sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000810f0: bsf eax, eax; sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000004a396: bsf eax, edx; ret; 
0x0000000000082607: bsf eax, edx; shr rax, 2; ret; 
0x0000000000035bf1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000035c11: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000035bd7: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000035961: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000002fe1a: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000002fee0: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000002fcac: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000004a4f2: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000082717: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000004e111: bsf edx, edx; lea r11, [rip + 0x70965]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0b4: bsf edx, edx; lea r11, [rip + 0x709c2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e097: bsf edx, edx; lea r11, [rip + 0x709df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004daf1: bsf edx, edx; lea r11, [rip + 0x70f05]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dab9: bsf edx, edx; lea r11, [rip + 0x70f3d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da94: bsf edx, edx; lea r11, [rip + 0x70f62]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da77: bsf edx, edx; lea r11, [rip + 0x70f7f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000002fc41: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000049e90: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000049c70: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000004a3e2: bsf rax, rdx; ret; 
0x0000000000082606: bsf rax, rdx; shr rax, 2; ret; 
0x000000000002fe19: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000002fedf: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000002fcab: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000004a4f1: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000082716: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000004e110: bsf rdx, rdx; lea r11, [rip + 0x70965]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0b3: bsf rdx, rdx; lea r11, [rip + 0x709c2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e096: bsf rdx, rdx; lea r11, [rip + 0x709df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004daf0: bsf rdx, rdx; lea r11, [rip + 0x70f05]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dab8: bsf rdx, rdx; lea r11, [rip + 0x70f3d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da93: bsf rdx, rdx; lea r11, [rip + 0x70f62]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da76: bsf rdx, rdx; lea r11, [rip + 0x70f7f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000002fc40: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000081437: bsr eax, eax; add rax, rdi; ret; 
0x0000000000081811: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000816bb: bsr eax, esi; add rax, rdi; ret; 
0x00000000000815c9: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x00000000000814c5: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x0000000000081436: bsr rax, rax; add rax, rdi; ret; 
0x00000000000816ba: bsr rax, rsi; add rax, rdi; ret; 
0x00000000000815c8: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000814c4: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000000359cc: bswap eax; bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000000359ce: bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000081a53: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000082713: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000819b4: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x0000000000081a52: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000082712: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000819b3: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x00000000000bd804: call 0x10bcf05; std; idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x00000000000b7536: call 0x16e60; nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x000000000002d738: call 0x16e60; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000000b759c: call 0x16e60; nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; ret; 
0x00000000000595ad: call 0x184dd0fa; jg 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000016e4b: call 0x18820; add rsp, 8; ret; 
0x0000000000076312: call 0x18cbe65f; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000594b1: call 0x199a0; pop rax; mov rax, rbx; pop rdx; pop rbx; ret; 
0x000000000002d733: call 0x1a2e0; call 0x16e60; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000001de1d: call 0x1cab0; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000009073: call 0x1ec38ea; nop; mov eax, dword ptr [rbp - 0xc]; leave; ret; 
0x0000000000008fdb: call 0x1ec4052; nop; mov eax, dword ptr [rbp - 0xc]; leave; ret; 
0x000000000007c87d: call 0x1fff1c3; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x000000000001e7ed: call 0x203e0; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a94a5: call 0x20f355f2; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000a94a8: call 0x244f1dcd; in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005386b: call 0x2946f871; ret; 
0x0000000000035914: call 0x298dc28; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000007c95b: call 0x2a004c80; ja 0x7c9f0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000008f695: call 0x2a2e0; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000001a0f9: call 0x2a2e0; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000908b8: call 0x2a2e0; mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000008ef3d: call 0x2a2e0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b97be: call 0x2a2e0; test rbx, rbx; mov rdx, rbx; jne 0xb97b8; pop rbx; ret; 
0x00000000000d6d94: call 0x390d65c6; je 0xd6d9b; add byte ptr [rax], bl; clc; call qword ptr [rax + 0x74]; 
0x000000000006cf3a: call 0x3948cf3e; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000985c6: call 0x3c8d94cc; cmp dword ptr [rax], eax; add byte ptr [rbx - 0x78f0d006], al; and eax, 0x83000039; ret 0xbf08; 
0x00000000000183a7: call 0x3e8acbad; mov qword ptr [rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x000000000001a52c: call 0x415de68e; pop rbp; pop r14; ret; 
0x000000000002bc13: call 0x415efd75; pop rbp; pop r14; ret; 
0x000000000002c113: call 0x415f0275; pop rbp; pop r14; ret; 
0x0000000000053277: call 0x416173d9; pop rbp; pop r14; ret; 
0x000000000009da8e: call 0x41661bf0; pop rbp; ret; 
0x000000000006eb2f: call 0x4206eb2e; call qword ptr [rdi + 0x38]; 
0x00000000000b65e5: call 0x48e4ef32; mov edx, dword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000004a764: call 0x48ed9279; mov eax, edi; ret; 
0x000000000004a844: call 0x48ed9359; mov eax, edx; ret; 
0x0000000000040ed4: call 0x490416ad; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006df9b: call 0x4906df9a; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000006b463: call 0x4d06b45e; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000083cb4: call 0x4dfdc606; and ebp, edi; and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x0000000000036d65: call 0x4e727d5d; call 0xf6a5621; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003e830: call 0x4ef3f827; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000041350: call 0x4ef42347; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000000a420: call 0x569c0; cmp eax, -1; je 0xa4fb; add rsp, 0x98; ret; 
0x0000000000008f60: call 0x574c0; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x000000000008b6db: call 0x57650; test eax, eax; js 0x8b6f2; pop rbx; ret; 
0x000000000005770a: call 0x57acd; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x00000000000228f5: call 0x590b0; add rsp, 0x80; mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000024964: call 0x590b0; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000001809d: call 0x590e0; add rsp, 0x80; add rsp, 8; ret; 
0x0000000000075fa8: call 0x590e0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000000181f2: call 0x590e0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x0000000000084d1d: call 0x590e0; add rsp, 0x80; pop rbx; ret; 
0x000000000006a98d: call 0x590e0; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000000574e7: call 0x59100; mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x0000000000056bb7: call 0x59100; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000056bd5: call 0x59160; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000000591d4: call 0x591f0; lea rax, [rip + 0x292208]; add rsp, 8; ret; 
0x0000000000009a32: call 0x593b0; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000008ed8: call 0x593b0; leave; ret; 
0x00000000000567eb: call 0x593b0; mov eax, dword ptr [rip + 0x294bf2]; test eax, eax; jne 0x56810; xor eax, eax; syscall; 
0x000000000008525b: call 0x593b0; mov ecx, 0xc; mov eax, ecx; syscall; 
0x0000000000021ac6: call 0x593b0; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x000000000009d747: call 0x593b0; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x24dd4a]; ret; 
0x0000000000065bd4: call 0x593b0; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x284d71]; ret; 
0x000000000005d678: call 0x593b0; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28de81]; ret; 
0x0000000000084e7a: call 0x593b0; nop; mov eax, 0x3f; syscall; 
0x00000000000664fd: call 0x5a9a0; mov rdi, r14; call rbx; 
0x000000000005d255: call 0x5a9a0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000000667d4: call 0x5a9a0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000001a0ff: call 0x5c42fe5f; ret; 
0x000000000001a563: call 0x5c4302c3; pop r13; pop r14; ret; 
0x000000000001a644: call 0x5c4303a4; pop r13; ret; 
0x000000000001a67f: call 0x5c4303df; pop r13; ret; 
0x000000000001df48: call 0x5c433ca8; ret; 
0x000000000001df64: call 0x5c433cc4; ret; 
0x000000000001ec83: call 0x5c4349e3; ret; 
0x0000000000022e43: call 0x5c438ba3; pop r13; pop r14; ret; 
0x0000000000022eef: call 0x5c438c4f; pop r13; pop r14; ret; 
0x000000000002a0b6: call 0x5c43fe16; pop r13; pop r14; ret; 
0x00000000000576f3: call 0x5c46d453; mov esi, 2; jmp rax; 
0x0000000000057c2f: call 0x5c46d98f; pop r13; ret; 
0x000000000008de74: call 0x5c4a3bd4; pop r13; ret; 
0x000000000008f5f3: call 0x5c4a5353; ret; 
0x000000000008f610: call 0x5c4a5370; ret; 
0x000000000008f64d: call 0x5c4a53ad; ret; 
0x000000000009da6c: call 0x5c4b37cc; pop r13; ret; 
0x00000000000b3af7: call 0x5c4c9857; pop r13; ret; 
0x00000000000b3b26: call 0x5c4c9886; pop r13; ret; 
0x000000000002cdf3: call 0x5d442a39; pop r14; pop r15; ret; 
0x000000000003faf7: call 0x634cfb03; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd3a: call 0x634cfd46; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006ccb0: call 0x634fccb4; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x0000000000017cb0: call 0x648ec8b8; ret; 
0x0000000000068d56: call 0x65068d5a; mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000068db3: call 0x65068db7; add rax, qword ptr [0]; ret; 
0x00000000000829f5: call 0x74daadfc; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000037248: call 0x75cbaa5d; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000007c1c1: call 0x7730fde6; sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000082b14: call 0x7800f01b; ret; 
0x0000000000082bcc: call 0x7800f0d3; ret; 
0x0000000000082bf0: call 0x7800f0f7; ret; 
0x0000000000082c10: call 0x7800f117; ret; 
0x0000000000082c5e: call 0x7800f165; ret; 
0x0000000000082cfd: call 0x7800f204; ret; 
0x0000000000082e38: call 0x7800f33f; ret; 
0x0000000000082e6a: call 0x7800f371; ret; 
0x0000000000082e81: call 0x7800f388; ret; 
0x0000000000082ea5: call 0x7800f3ac; ret; 
0x0000000000082ec5: call 0x7800f3cc; ret; 
0x0000000000082ee5: call 0x7800f3ec; ret; 
0x0000000000082ef5: call 0x7800f3fc; ret; 
0x0000000000082f1c: call 0x7800f423; ret; 
0x0000000000082f40: call 0x7800f447; ret; 
0x0000000000082f60: call 0x7800f467; ret; 
0x0000000000082fae: call 0x7800f4b5; ret; 
0x000000000008f6d2: call 0x7c943ed8; ret; 
0x000000000009f83f: call 0x7c954045; ret; 
0x0000000000066975: call 0x849f27b; pop rbx; ret; 
0x00000000000b8c54: call 0x8550; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000008cde: call 0x8600; call 0x8c50; mov byte ptr [rip + 0x2e06d1], 1; pop rbp; ret; 
0x000000000009fe4c: call 0x8618; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b1ddd: call 0x886d0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000091728: call 0x8a5b0; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000000b3b53: call 0x8a5b0; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000008ce3: call 0x8c50; mov byte ptr [rip + 0x2e06d1], 1; pop rbp; ret; 
0x000000000008e0f7: call 0x8cd6444; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000ba668: call 0x8d029b5; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000008df35: call 0x8d860; add rsp, 0xd8; ret; 
0x000000000008c083: call 0x8e000; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000008ccef: call 0x8e000; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000006695c: call 0x91790; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000093cff: call 0x930b0; mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x93d4e; leave; ret; 
0x000000000009401b: call 0x942e7; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000009acf: call 0x97c0; mov eax, 0; leave; ret; 
0x00000000000a9504: call 0x9de70; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000009165d: call 0x9de70; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000008edf6: call 0xaa30; nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x25c4c1], 0; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x0000000000017e18: call 0xaa30; xor eax, eax; ret; 
0x000000000000aff7: call 0xaf932ff; ja 0xad21; lea rdx, [rip + 0xb0ed7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b0e3: call 0xaf933eb; ja 0xad4f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000000a96e3: call 0xb3b60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000a960f: call 0xb3e60; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000000b40f7: call 0xb44a0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000b697b: call 0xb8d00; test rax, rax; je 0xb698a; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000036d6a: call 0xf6a5621; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000051afa: call 0xfe59e0b; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000098362: call 0xffffffff8351cfdc; ret; 
0x00000000000b471b: call 0xffffffff850e905f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x00000000000b479e: call 0xffffffff850e90e2; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xa472; 
0x00000000000755fb: call 0xffffffff895555ff; ret 0x894c; 
0x000000000006b26f: call 0xffffffff89d83b76; ret 0x8341; 
0x00000000000d7878: call 0xffffffff980d793a; jo 0xd787b; call qword ptr [rax]; 
0x000000000001ace6: call 0xffffffffa206d833; ret 0x2c; 
0x00000000000d7630: call 0xffffffffa80d76e5; xchg eax, ebx; sti; jmp qword ptr [rax]; 
0x00000000000d766c: call 0xffffffffad0d720d; mov dl, 0; add byte ptr [rax - 0x5f], ch; sti; jmp rax; 
0x00000000000bdb40: call 0xffffffffb10bd2f6; mov bl, 0xf7; call qword ptr [rax + 0x70fff7b5]; mov bh, 0xf7; call qword ptr [rax - 0x47]; 
0x00000000000b761f: call 0xffffffffb61a7625; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000d6afc: call 0xffffffffc10d62b7; add byte ptr fs:[rax], al; clc; mov dh, 0xf7; call rsp; 
0x0000000000035bc2: call 0xffffffffc52dd1c6; std; xlatb; ret; 
0x0000000000058245: call 0xffffffffe104dfa5; nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ce938: call 0xffffffffe90ce50f; sar bl, cl; push qword ptr [rbx - 0x4c00041b]; in eax, 0xfb; jmp rax; 
0x0000000000038ce3: call 0xfffffffff0621834; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b6b3: call 0xfffffffff0624204; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038bb3: call 0xfffffffff0631504; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bf1: call 0xfffffffff0631542; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038c29: call 0xfffffffff063157a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038c67: call 0xfffffffff06315b8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038c9f: call 0xfffffffff06315f0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038cc7: call 0xfffffffff0631618; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038cef: call 0xfffffffff0631640; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b583: call 0xfffffffff0633ed4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003b5c1: call 0xfffffffff0633f12; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b5f9: call 0xfffffffff0633f4a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003b637: call 0xfffffffff0633f88; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b66f: call 0xfffffffff0633fc0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b697: call 0xfffffffff0633fe8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b6bf: call 0xfffffffff0634010; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000b6c4b: call 0xfffffffff080f79c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dca: call 0xfffffffff080f91b; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b6f1c: call 0xfffffffff080fa6d; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6f68: call 0xfffffffff080fab9; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b70ef: call 0xfffffffff080fc40; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b7283: call 0xfffffffff080fdd4; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b72a8: call 0xfffffffff080fdf9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000d6d40: call 0xfffffffff80d6db6; sbb al, 0xf8; jmp qword ptr [rax]; 
0x00000000000b1e4b: call 0xfffffffff8cc66ab; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x0000000000051b2b: call 0xfffffffffc05403e; add eax, dword ptr [rax]; pop rbx; ret; 
0x0000000000051b76: call 0xfffffffffc054081; inc dword ptr [rbx]; pop rbx; ret; 
0x000000000001d790: call 0xfffffffffffdaf7e; jmp qword ptr [rsi + 0x2e]; 
0x000000000001d6f0: call 0xfffffffffffe4ede; jmp qword ptr [rsi + 0x2e]; 
0x00000000000be88b: call qword ptr [rax + 0x10]; 
0x00000000000be88b: call qword ptr [rax + 0x10]; clc; call rax; 
0x00000000000be84f: call qword ptr [rax + 0x11]; 
0x00000000000be84f: call qword ptr [rax + 0x11]; clc; call rax; 
0x00000000000be0cf: call qword ptr [rax + 0x12]; 
0x00000000000be0cf: call qword ptr [rax + 0x12]; clc; jmp rax; 
0x00000000000be893: call qword ptr [rax + 0x13]; 
0x00000000000be893: call qword ptr [rax + 0x13]; clc; call rax; 
0x00000000000be857: call qword ptr [rax + 0x14]; 
0x00000000000be857: call qword ptr [rax + 0x14]; clc; call rax; 
0x00000000000be89b: call qword ptr [rax + 0x16]; 
0x00000000000be89b: call qword ptr [rax + 0x16]; clc; call rax; 
0x00000000000be85f: call qword ptr [rax + 0x17]; 
0x00000000000be85f: call qword ptr [rax + 0x17]; clc; call rax; 
0x000000000001e0aa: call qword ptr [rax + 0x18]; 
0x00000000000be8a3: call qword ptr [rax + 0x19]; 
0x00000000000be8a3: call qword ptr [rax + 0x19]; clc; call rax; 
0x00000000000be867: call qword ptr [rax + 0x1a]; 
0x00000000000be867: call qword ptr [rax + 0x1a]; clc; call rax; 
0x00000000000be8ab: call qword ptr [rax + 0x1c]; 
0x00000000000be8ab: call qword ptr [rax + 0x1c]; clc; call rax; 
0x00000000000be86f: call qword ptr [rax + 0x1d]; 
0x00000000000be86f: call qword ptr [rax + 0x1d]; clc; call rax; 
0x000000000005a924: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x28d9c9]; ret; 
0x00000000000be8b3: call qword ptr [rax + 0x1f]; 
0x00000000000be8b3: call qword ptr [rax + 0x1f]; clc; call rax; 
0x00000000000be877: call qword ptr [rax + 0x20]; 
0x00000000000be877: call qword ptr [rax + 0x20]; clc; call rax; 
0x00000000000be877: call qword ptr [rax + 0x20]; clc; call rax; and eax, edi; call qword ptr [rax]; 
0x00000000000bdec7: call qword ptr [rax + 0x20fff813]; adc edi, eax; push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x00000000000be8bb: call qword ptr [rax + 0x22]; 
0x00000000000d60ef: call qword ptr [rax + 0x24]; 
0x00000000000bd8ff: call qword ptr [rax + 0x27]; 
0x00000000000be83b: call qword ptr [rax + 0x29]; 
0x00000000000be637: call qword ptr [rax + 0x2a]; 
0x00000000000bd91f: call qword ptr [rax + 0x30]; 
0x00000000000be97f: call qword ptr [rax + 0x30fff888]; mov bh, al; call rax; 
0x00000000000249cd: call qword ptr [rax + 0x31]; 
0x00000000000be5bf: call qword ptr [rax + 0x33]; 
0x00000000000be3ef: call qword ptr [rax + 0x35]; 
0x00000000000be3ef: call qword ptr [rax + 0x35]; clc; jmp rax; 
0x000000000006d4a6: call qword ptr [rax + 0x38]; 
0x00000000000be5c7: call qword ptr [rax + 0x39]; 
0x00000000000be5c7: call qword ptr [rax + 0x39]; clc; jmp rax; 
0x00000000000d63ef: call qword ptr [rax + 0x3a]; 
0x000000000001da26: call qword ptr [rax + 0x40]; 
0x00000000000be8ff: call qword ptr [rax + 0x47]; 
0x00000000000be8ff: call qword ptr [rax + 0x47]; clc; jmp qword ptr [rax + 0x49]; 
0x00000000000d6717: call qword ptr [rax + 0x4c]; 
0x00000000000d674f: call qword ptr [rax + 0x50]; 
0x00000000000d6797: call qword ptr [rax + 0x54]; 
0x00000000000bd99f: call qword ptr [rax + 0x5d]; 
0x00000000000d689f: call qword ptr [rax + 0x5e]; 
0x00000000000d6957: call qword ptr [rax + 0x60]; 
0x00000000000d6b87: call qword ptr [rax + 0x67]; 
0x00000000000d6b87: call qword ptr [rax + 0x67]; add byte ptr [rax], al; pop rax; ret 0xfff7; 
0x000000000007f233: call qword ptr [rax + 0x68]; 
0x00000000000d6cf7: call qword ptr [rax + 0x70]; 
0x00000000000bdb47: call qword ptr [rax + 0x70fff7b5]; mov bh, 0xf7; call qword ptr [rax - 0x47]; 
0x00000000000bdde3: call qword ptr [rax + 0x70fff7da]; fdivr st(7), st(0); call qword ptr [rax - 0x22]; 
0x00000000000bdd27: call qword ptr [rax + 0x70fff7dd]; fcomip st(7); call qword ptr [rax - 0x1f]; 
0x00000000000bfa43: call qword ptr [rax + 0x70fff9a5]; movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000bd9e3: call qword ptr [rax + 0x71]; 
0x00000000000bd9e3: call qword ptr [rax + 0x71]; idiv edi; jb 0xbd9e2; push qword ptr [rax]; jae 0xbd9e6; jmp qword ptr [rax]; 
0x00000000000b4535: call qword ptr [rax + 0x74]; 
0x00000000000b7582: call qword ptr [rax + 0x75]; 
0x00000000000d62cf: call qword ptr [rax + 0x78000031]; hlt; call rax; 
0x000000000001e1ec: call qword ptr [rax + 0x78]; 
0x00000000000b8a4e: call qword ptr [rax + 0x8c48348]; pop rbx; pop rbp; ret; 
0x00000000000be883: call qword ptr [rax + 0xd]; 
0x00000000000be883: call qword ptr [rax + 0xd]; clc; call rax; 
0x00000000000bdef7: call qword ptr [rax + 0xe]; 
0x00000000000be847: call qword ptr [rax + 0xe]; clc; call rax; 
0x00000000000bdef7: call qword ptr [rax + 0xe]; clc; jmp rax; 
0x00000000000dc133: call qword ptr [rax + 1]; 
0x00000000000be333: call qword ptr [rax + 4]; 
0x00000000000be12f: call qword ptr [rax + 5]; 
0x00000000000be127: call qword ptr [rax + 6]; 
0x00000000000be127: call qword ptr [rax + 6]; clc; call rax; 
0x00000000000be11f: call qword ptr [rax + 7]; 
0x00000000000be11f: call qword ptr [rax + 7]; clc; call rax; 
0x000000000001b938: call qword ptr [rax + 8]; 
0x00000000000be117: call qword ptr [rax + 8]; clc; call rax; 
0x00000000000be10f: call qword ptr [rax + 9]; 
0x00000000000be10f: call qword ptr [rax + 9]; clc; call rax; 
0x00000000000cd68b: call qword ptr [rax - 0x14]; 
0x000000000006ebe8: call qword ptr [rax - 0x18]; 
0x00000000000b8f97: call qword ptr [rax - 0x18]; ret 0xf5de; 
0x000000000006ebe8: call qword ptr [rax - 0x18]; xchg eax, ecx; ret 0xffff; 
0x00000000000be9c7: call qword ptr [rax - 0x1f000761]; movabs al, byte ptr [0xa380fff8a230fff8]; clc; call rax; 
0x00000000000bdd2f: call qword ptr [rax - 0x1f]; 
0x00000000000bdd4b: call qword ptr [rax - 0x21]; 
0x00000000000bddeb: call qword ptr [rax - 0x22]; 
0x00000000000bdd67: call qword ptr [rax - 0x23]; 
0x00000000000bde03: call qword ptr [rax - 0x26]; 
0x00000000000bdd9f: call qword ptr [rax - 0x27]; 
0x00000000000bde1f: call qword ptr [rax - 0x28]; 
0x00000000000bdea3: call qword ptr [rax - 0x32]; 
0x00000000000d7a2f: call qword ptr [rax - 0x38]; 
0x00000000000bde4f: call qword ptr [rax - 0x39]; 
0x00000000000d7907: call qword ptr [rax - 0x3f]; 
0x00000000000bdb5b: call qword ptr [rax - 0x41]; 
0x00000000000bdb57: call qword ptr [rax - 0x43]; 
0x00000000000bdb53: call qword ptr [rax - 0x45]; 
0x00000000000bdb4f: call qword ptr [rax - 0x47]; 
0x00000000000beae3: call qword ptr [rax - 0x4f000707]; stc; clc; call rax; 
0x00000000000beac3: call qword ptr [rax - 0x4f000708]; clc; clc; call rax; 
0x00000000000bd927: call qword ptr [rax - 0x4f0008ce]; xor esi, edi; call rax; 
0x00000000000bd907: call qword ptr [rax - 0x4f0008d7]; sub dh, bh; call rax; 
0x00000000000be9f7: call qword ptr [rax - 0x51]; 
0x00000000000be9f7: call qword ptr [rax - 0x51]; clc; jmp rax; 
0x00000000000d7517: call qword ptr [rax - 0x58]; 
0x00000000000bfa4b: call qword ptr [rax - 0x5b]; 
0x00000000000d744f: call qword ptr [rax - 0x5c]; 
0x00000000000bdcd7: call qword ptr [rax - 0x5e]; 
0x00000000000d7397: call qword ptr [rax - 0x60]; 
0x00000000000bdc83: call qword ptr [rax - 0x65]; 
0x00000000000d6267: call qword ptr [rax - 0x67ffffd2]; cmp esp, esi; jmp rax; 
0x00000000000be997: call qword ptr [rax - 0x6e]; 
0x00000000000cda27: call qword ptr [rax - 0x700050e]; cli; call rax; 
0x000000000007a4a0: call qword ptr [rax - 0x75]; 
0x00000000000d7087: call qword ptr [rax - 0x76]; 
0x00000000000d7047: call qword ptr [rax - 0x77]; 
0x00000000000d7007: call qword ptr [rax - 0x79]; 
0x00000000000be977: call qword ptr [rax - 0x7b]; 
0x00000000000d5aa3: call qword ptr [rax - 0xb]; 
0x00000000000bea37: call qword ptr [rax - 0xe]; 
0x00000000000bea37: call qword ptr [rax - 0xe]; clc; jmp qword ptr [rax - 0xe]; 
0x00000000000bd80f: call qword ptr [rax - 3]; 
0x00000000000beafb: call qword ptr [rax - 6]; 
0x00000000000beadb: call qword ptr [rax - 7]; 
0x00000000000beab7: call qword ptr [rax - 8]; 
0x00000000000bea8f: call qword ptr [rax - 9]; 
0x00000000000bea8f: call qword ptr [rax - 9]; clc; jmp qword ptr [rax - 9]; 
0x00000000000e1a3b: call qword ptr [rax]; 
0x00000000000d5ec7: call qword ptr [rax]; add bh, dh; dec dword ptr [rax]; add edi, esi; jmp qword ptr [rax + 0x17]; 
0x00000000000bea27: call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000000bdda3: call qword ptr [rax]; fcomi st(7); push rax; fdivr st(7), st(0); call rax; 
0x00000000000bddbf: call qword ptr [rax]; fincstp; call rax; 
0x00000000000bea7f: call qword ptr [rax]; idiv eax; jmp qword ptr [rax]; 
0x00000000000b46b7: call qword ptr [rax]; jne 0xb46d8; xor eax, eax; ret; 
0x00000000000d7577: call qword ptr [rax]; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; test al, 0x55; sti; jmp qword ptr [rax - 0x53]; 
0x00000000000bdc47: call qword ptr [rax]; mov ah, 0xf7; push rax; mov ch, 0xf7; jmp rax; 
0x00000000000bdbc7: call qword ptr [rax]; mov ch, 0xf7; push rax; mov dh, 0xf7; call rax; 
0x00000000000bdb97: call qword ptr [rax]; mov ebp, 0xbf10fff7; idiv edi; movabs al, byte ptr [0x40fff7b360fff7b1]; mov ch, 0xf7; jmp qword ptr [rax]; 
0x00000000000d7447: call qword ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; sub ah, ch; cli; call qword ptr [rax - 0x5c]; 
0x00000000000bd9af: call qword ptr [rax]; movsxd rsi, edi; inc dword ptr [rax - 0xf00089c]; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000be87f: call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; 
0x00000000000be87f: call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; clc; call rax; 
0x00000000000be9e7: call qword ptr [rax]; stosb byte ptr [rdi], al; clc; jmp qword ptr [rax - 0x55]; 
0x00000000000be7ef: call qword ptr [rax]; sub edi, eax; inc dword ptr [rax - 0xf0007d6]; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x000000000001a784: call qword ptr [rbp + 0x18]; 
0x000000000001a6f8: call qword ptr [rbp + 0x20]; 
0x0000000000075fd5: call qword ptr [rbp + 0x27]; 
0x000000000001b035: call qword ptr [rbp + 0x30]; 
0x000000000006adf3: call qword ptr [rbp + 0x38]; 
0x0000000000008d04: call qword ptr [rbp + 0x48]; 
0x00000000000128fe: call qword ptr [rbp + 0x53]; 
0x000000000001a37a: call qword ptr [rbp + 0x60]; 
0x0000000000020d16: call qword ptr [rbp + 0x68]; 
0x000000000001cde5: call qword ptr [rbp + 0x70]; 
0x00000000000dc5af: call qword ptr [rbp + 1]; 
0x000000000001b636: call qword ptr [rbp + 8]; 
0x00000000000d624f: call qword ptr [rbp + rbp + 0x30e80000]; hlt; jmp rax; 
0x0000000000009f3e: call qword ptr [rbx + 0x10]; 
0x0000000000020e2c: call qword ptr [rbx + 0x18]; 
0x000000000006b50a: call qword ptr [rbx + 0x38]; 
0x00000000000669a9: call qword ptr [rbx + 0x48]; 
0x00000000000b7303: call qword ptr [rbx + 0x4c]; 
0x00000000000254bc: call qword ptr [rbx + 0x50]; 
0x0000000000028e46: call qword ptr [rbx + 0x64]; 
0x00000000000d18c0: call qword ptr [rbx + 0x7c]; 
0x000000000006db30: call qword ptr [rbx + 0xf]; 
0x00000000000e1f33: call qword ptr [rbx + 1]; 
0x00000000000dc20b: call qword ptr [rbx + 4]; 
0x00000000000be27b: call qword ptr [rbx + rax - 8]; jmp rsp; 
0x00000000000bf4d7: call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; jmp rsp; 
0x00000000000bf4df: call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; jmp rsp; 
0x000000000008b7fb: call qword ptr [rbx - 0x77]; 
0x00000000000e19e3: call qword ptr [rbx]; 
0x00000000000bfa23: call qword ptr [rbx]; stc; call rax; 
0x00000000000bebc3: call qword ptr [rcx + 0x30]; 
0x00000000000bebd3: call qword ptr [rcx + 0x30]; stc; lcall [rdi + rbp]; stc; call qword ptr [rax]; 
0x000000000006bc64: call qword ptr [rcx + 0x38]; 
0x00000000000dc4c7: call qword ptr [rcx + 1]; 
0x00000000000d11ad: call qword ptr [rcx - 0x66]; 
0x00000000000e368b: call qword ptr [rcx]; 
0x0000000000021d31: call qword ptr [rdi + 0x18]; 
0x00000000000d5ee3: call qword ptr [rdi + 0x28]; 
0x00000000000beba3: call qword ptr [rdi + 0x30]; 
0x00000000000beba3: call qword ptr [rdi + 0x30]; stc; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000d3a4b: call qword ptr [rdi + 0x31fffc16]; sub esp, edi; jmp rcx; 
0x000000000006dc0a: call qword ptr [rdi + 0x38]; 
0x000000000001d104: call qword ptr [rdi + 0x40]; 
0x000000000001ff2e: call qword ptr [rdi + 0x58]; 
0x000000000008a478: call qword ptr [rdi + 0x60]; 
0x000000000001aa41: call qword ptr [rdi + 0x70]; 
0x00000000000bf1b3: call qword ptr [rdi + 0x73]; 
0x00000000000bf1b3: call qword ptr [rdi + 0x73]; stc; lcall [rax]; jb 0xbf1b4; call rcx; 
0x000000000001ea7e: call qword ptr [rdi + 0x78]; 
0x00000000000da567: call qword ptr [rdi + 1]; 
0x00000000000d9847: call qword ptr [rdi + 2]; 
0x00000000000be06b: call qword ptr [rdi + rcx - 8]; jmp rsp; 
0x00000000000d5e7f: call qword ptr [rdi - 1]; 
0x00000000000d5e7f: call qword ptr [rdi - 1]; std; jmp qword ptr [rdx - 1]; 
0x00000000000d9b73: call qword ptr [rdi]; 
0x00000000000bdfa3: call qword ptr [rdx + 0x10]; 
0x00000000000bdfa3: call qword ptr [rdx + 0x10]; clc; jmp rdx; 
0x00000000000be4ab: call qword ptr [rdx + 0x22fff835]; xor eax, 0x34b2fff8; clc; inc dword ptr [rdx + 0x34]; clc; call rdx; 
0x00000000000be687: call qword ptr [rdx + 0x30]; 
0x00000000000be49b: call qword ptr [rdx + 0x37]; 
0x00000000000be49b: call qword ptr [rdx + 0x37]; clc; jmp rdx; 
0x00000000000bf19f: call qword ptr [rdx + 0x4fff972]; jb 0xbf1a0; call rcx; 
0x00000000000b6afb: call qword ptr [rdx + 0x50]; 
0x00000000000e1103: call qword ptr [rdx + 1]; 
0x00000000000bdf93: call qword ptr [rdx]; 
0x000000000008b57e: call qword ptr [rip + 0x25cc9c]; xor eax, eax; add rsp, 8; ret; 
0x00000000000dc0a7: call qword ptr [rsi + 0x16]; 
0x000000000001cd4f: call qword ptr [rsi + 0x18]; 
0x0000000000021041: call qword ptr [rsi + 0x20]; 
0x00000000000bdf0f: call qword ptr [rsi + 0x26fff812]; adc bh, al; push qword ptr [rsi + 0x46fff811]; adc eax, edi; call rsi; 
0x00000000000be407: call qword ptr [rsi + 0x26fff839]; cmp eax, edi; push qword ptr [rsi + 0x46fff838]; cmp al, bh; call rsi; 
0x00000000000d39d3: call qword ptr [rsi + 0x28]; 
0x000000000002473d: call qword ptr [rsi + 0x2c]; 
0x00000000000d2eff: call qword ptr [rsi + 0x30]; 
0x00000000000be437: call qword ptr [rsi + 0x34]; 
0x00000000000be437: call qword ptr [rsi + 0x34]; clc; jmp rsi; 
0x0000000000070625: call qword ptr [rsi + 0x38]; 
0x000000000009c7e7: call qword ptr [rsi + 0x48]; 
0x0000000000024bcd: call qword ptr [rsi + 0x50]; 
0x0000000000009375: call qword ptr [rsi + 0x51]; 
0x00000000000dfd2b: call qword ptr [rsi + 1]; 
0x00000000000d6617: call qword ptr [rsi + rax*2]; add byte ptr [rax], al; cmp ah, cl; hlt; jmp qword ptr [rax + 0x46]; 
0x00000000000be563: call qword ptr [rsi + rsi - 8]; jmp rsp; 
0x00000000000bdaa7: call qword ptr [rsi - 0x6c]; 
0x00000000000da68b: call qword ptr [rsi]; 
0x00000000000083c8: call rax; 
0x00000000000be897: call rax; adc al, 0xf8; call qword ptr [rax + 0x16]; 
0x00000000000be853: call rax; adc bh, al; call qword ptr [rax + 0x14]; 
0x00000000000be88f: call rax; adc eax, edi; call qword ptr [rax + 0x13]; 
0x00000000000bded7: call rax; adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000083c8: call rax; add rsp, 8; ret; 
0x00000000000be8b7: call rax; and al, bh; call qword ptr [rax + 0x22]; 
0x00000000000be87b: call rax; and eax, edi; call qword ptr [rax]; 
0x00000000000be87b: call rax; and eax, edi; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; 
0x00000000000be3cf: call rax; cmp al, bh; jmp qword ptr [rax + 0x38]; 
0x00000000000bdddf: call rax; fdiv st(7); call qword ptr [rax + 0x70fff7da]; fdivr st(7), st(0); call qword ptr [rax - 0x22]; 
0x00000000000beaa7: call rax; idiv eax; push rax; idiv eax; call qword ptr [rax]; 
0x00000000000bea17: call rax; int1; clc; jmp rax; 
0x00000000000be987: call rax; mov edi, eax; push qword ptr [rax - 0x73]; clc; call qword ptr [rax]; 
0x00000000000be9d7: call rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; jmp qword ptr [rax]; 
0x00000000000be843: call rax; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000be113: call rax; or al, bh; call qword ptr [rax + 8]; 
0x00000000000be10b: call rax; or eax, edi; call qword ptr [rax + 9]; 
0x00000000000be91f: call rax; push rdi; clc; jmp rax; 
0x00000000000bde83: call rax; ret; 
0x00000000000d7ae7: call rax; retf 0; fcom st(4); std; jmp qword ptr [rax]; 
0x00000000000bde6f: call rax; sal edi, 1; jmp qword ptr [rax]; 
0x00000000000be863: call rax; sbb al, bh; call qword ptr [rax + 0x1a]; 
0x00000000000be8a7: call rax; sbb bh, al; call qword ptr [rax + 0x1c]; 
0x00000000000be86b: call rax; sbb edi, eax; call qword ptr [rax + 0x1d]; 
0x00000000000d6217: call rax; sub al, 0; add byte ptr [rax], ch; sub ah, dh; jmp rsp; 
0x00000000000bd90f: call rax; sub esi, edi; push rax; sub al, 0xf7; call qword ptr [rax]; 
0x0000000000008b1d: call rbx; 
0x0000000000026c83: call rcx; 
0x00000000000bf1ff: call rcx; jno 0xbf1fc; call rcx; jno 0xbf200; jmp rsp; 
0x00000000000bf203: call rcx; jno 0xbf200; jmp rsp; 
0x00000000000bf223: call rcx; jno 0xbf220; call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf227: call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf23f: call rcx; jno 0xbf23c; call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf243: call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf26b: call rcx; jno 0xbf268; jmp rsp; 
0x00000000000bf357: call rcx; jno 0xbf354; call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf35b: call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf397: call rcx; jno 0xbf394; call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf39b: call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf3b3: call rcx; jno 0xbf3b0; jmp rsp; 
0x00000000000bf3c3: call rcx; jno 0xbf3c0; call rcx; jno 0xbf3c4; jmp rsp; 
0x00000000000bf3c7: call rcx; jno 0xbf3c4; jmp rsp; 
0x0000000000057ca3: call rdi; 
0x0000000000017b07: call rdx; 
0x00000000000bdf83: call rdx; adc edi, eax; jmp qword ptr [rdx + 0x13]; 
0x00000000000be683: call rdx; xor al, bh; call qword ptr [rdx + 0x30]; 
0x000000000005cc71: call rsi; 
0x00000000000bdf1f: call rsi; adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x0000000000057761: call rsp; 
0x00000000000d6177: call rsp; sub byte ptr [rax], al; add al, ch; or al, 0xf4; call qword ptr [rax + 0x29]; 
0x000000000001b433: cdq; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x00000000000e1795: cdq; add byte ptr [rax], al; mov byte ptr [rcx], cl; sti; call qword ptr [rdx]; 
0x00000000000e175d: cdq; add byte ptr [rax], al; push rax; or ebx, edi; jmp qword ptr [rsi]; 
0x000000000002dead: cdq; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000b5b24: cdq; add rax, r9; jmp rax; 
0x00000000000dbea9: cdq; cmc; call rsp; 
0x00000000000d29a0: cdq; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000000d299b: cdq; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000000090fc: cdq; nop; leave; ret; 
0x0000000000037ba3: cdq; pop rdi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a963: cdq; xor ecx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006e5f9: cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000006ec9b: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275778]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e643: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275dd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000006e5a8: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e957: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e909: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e85a: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e7fe: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e55e: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e510: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0af: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000774e1: clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x000000000008e123: clc; add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x0000000000013b2f: clc; add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x000000000002d023: clc; add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x00000000000163dd: clc; add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x00000000000b1e4f: clc; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x000000000005ded2: clc; add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x000000000003516f: clc; add rax, rcx; ret; 
0x0000000000082b0b: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a54b: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000003535b: clc; add rax, rcx; vzeroupper; ret; 
0x00000000000be88a: clc; call qword ptr [rax + 0x10]; 
0x00000000000be88a: clc; call qword ptr [rax + 0x10]; clc; call rax; 
0x00000000000be84e: clc; call qword ptr [rax + 0x11]; 
0x00000000000be84e: clc; call qword ptr [rax + 0x11]; clc; call rax; 
0x00000000000be0ce: clc; call qword ptr [rax + 0x12]; 
0x00000000000be0ce: clc; call qword ptr [rax + 0x12]; clc; jmp rax; 
0x00000000000be892: clc; call qword ptr [rax + 0x13]; 
0x00000000000be892: clc; call qword ptr [rax + 0x13]; clc; call rax; 
0x00000000000be856: clc; call qword ptr [rax + 0x14]; 
0x00000000000be856: clc; call qword ptr [rax + 0x14]; clc; call rax; 
0x00000000000be89a: clc; call qword ptr [rax + 0x16]; 
0x00000000000be89a: clc; call qword ptr [rax + 0x16]; clc; call rax; 
0x00000000000be85e: clc; call qword ptr [rax + 0x17]; 
0x00000000000be85e: clc; call qword ptr [rax + 0x17]; clc; call rax; 
0x00000000000be8a2: clc; call qword ptr [rax + 0x19]; 
0x00000000000be8a2: clc; call qword ptr [rax + 0x19]; clc; call rax; 
0x00000000000be866: clc; call qword ptr [rax + 0x1a]; 
0x00000000000be866: clc; call qword ptr [rax + 0x1a]; clc; call rax; 
0x00000000000be8aa: clc; call qword ptr [rax + 0x1c]; 
0x00000000000be8aa: clc; call qword ptr [rax + 0x1c]; clc; call rax; 
0x00000000000be86e: clc; call qword ptr [rax + 0x1d]; 
0x00000000000be86e: clc; call qword ptr [rax + 0x1d]; clc; call rax; 
0x00000000000be8b2: clc; call qword ptr [rax + 0x1f]; 
0x00000000000be8b2: clc; call qword ptr [rax + 0x1f]; clc; call rax; 
0x00000000000be876: clc; call qword ptr [rax + 0x20]; 
0x00000000000be876: clc; call qword ptr [rax + 0x20]; clc; call rax; 
0x00000000000be876: clc; call qword ptr [rax + 0x20]; clc; call rax; and eax, edi; call qword ptr [rax]; 
0x00000000000bdec6: clc; call qword ptr [rax + 0x20fff813]; adc edi, eax; push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x00000000000be8ba: clc; call qword ptr [rax + 0x22]; 
0x00000000000be83a: clc; call qword ptr [rax + 0x29]; 
0x00000000000be636: clc; call qword ptr [rax + 0x2a]; 
0x00000000000be97e: clc; call qword ptr [rax + 0x30fff888]; mov bh, al; call rax; 
0x00000000000be5be: clc; call qword ptr [rax + 0x33]; 
0x00000000000be3ee: clc; call qword ptr [rax + 0x35]; 
0x00000000000be3ee: clc; call qword ptr [rax + 0x35]; clc; jmp rax; 
0x00000000000be5c6: clc; call qword ptr [rax + 0x39]; 
0x00000000000be5c6: clc; call qword ptr [rax + 0x39]; clc; jmp rax; 
0x00000000000be8fe: clc; call qword ptr [rax + 0x47]; 
0x00000000000be8fe: clc; call qword ptr [rax + 0x47]; clc; jmp qword ptr [rax + 0x49]; 
0x00000000000d6cf6: clc; call qword ptr [rax + 0x70]; 
0x00000000000d6d9e: clc; call qword ptr [rax + 0x74]; 
0x00000000000be882: clc; call qword ptr [rax + 0xd]; 
0x00000000000be882: clc; call qword ptr [rax + 0xd]; clc; call rax; 
0x00000000000bdef6: clc; call qword ptr [rax + 0xe]; 
0x00000000000be846: clc; call qword ptr [rax + 0xe]; clc; call rax; 
0x00000000000bdef6: clc; call qword ptr [rax + 0xe]; clc; jmp rax; 
0x00000000000be332: clc; call qword ptr [rax + 4]; 
0x00000000000be12e: clc; call qword ptr [rax + 5]; 
0x00000000000be126: clc; call qword ptr [rax + 6]; 
0x00000000000be126: clc; call qword ptr [rax + 6]; clc; call rax; 
0x00000000000be11e: clc; call qword ptr [rax + 7]; 
0x00000000000be11e: clc; call qword ptr [rax + 7]; clc; call rax; 
0x00000000000be116: clc; call qword ptr [rax + 8]; 
0x00000000000be116: clc; call qword ptr [rax + 8]; clc; call rax; 
0x00000000000be10e: clc; call qword ptr [rax + 9]; 
0x00000000000be10e: clc; call qword ptr [rax + 9]; clc; call rax; 
0x00000000000be9c6: clc; call qword ptr [rax - 0x1f000761]; movabs al, byte ptr [0xa380fff8a230fff8]; clc; call rax; 
0x00000000000beae2: clc; call qword ptr [rax - 0x4f000707]; stc; clc; call rax; 
0x00000000000beac2: clc; call qword ptr [rax - 0x4f000708]; clc; clc; call rax; 
0x00000000000be9f6: clc; call qword ptr [rax - 0x51]; 
0x00000000000be9f6: clc; call qword ptr [rax - 0x51]; clc; jmp rax; 
0x00000000000be996: clc; call qword ptr [rax - 0x6e]; 
0x00000000000be976: clc; call qword ptr [rax - 0x7b]; 
0x00000000000bea36: clc; call qword ptr [rax - 0xe]; 
0x00000000000bea36: clc; call qword ptr [rax - 0xe]; clc; jmp qword ptr [rax - 0xe]; 
0x00000000000beafa: clc; call qword ptr [rax - 6]; 
0x00000000000beada: clc; call qword ptr [rax - 7]; 
0x00000000000beab6: clc; call qword ptr [rax - 8]; 
0x00000000000bea8e: clc; call qword ptr [rax - 9]; 
0x00000000000bea8e: clc; call qword ptr [rax - 9]; clc; jmp qword ptr [rax - 9]; 
0x00000000000bdee6: clc; call qword ptr [rax]; 
0x00000000000bea26: clc; call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000000bea7e: clc; call qword ptr [rax]; idiv eax; jmp qword ptr [rax]; 
0x00000000000be87e: clc; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; 
0x00000000000be87e: clc; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; clc; call rax; 
0x00000000000be9e6: clc; call qword ptr [rax]; stosb byte ptr [rdi], al; clc; jmp qword ptr [rax - 0x55]; 
0x00000000000be7ee: clc; call qword ptr [rax]; sub edi, eax; inc dword ptr [rax - 0xf0007d6]; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000be27a: clc; call qword ptr [rbx + rax - 8]; jmp rsp; 
0x00000000000deb6a: clc; call qword ptr [rbx]; 
0x00000000000de932: clc; call qword ptr [rcx]; 
0x00000000000be06a: clc; call qword ptr [rdi + rcx - 8]; jmp rsp; 
0x00000000000de14a: clc; call qword ptr [rdi]; 
0x00000000000bdfa2: clc; call qword ptr [rdx + 0x10]; 
0x00000000000bdfa2: clc; call qword ptr [rdx + 0x10]; clc; jmp rdx; 
0x00000000000be686: clc; call qword ptr [rdx + 0x30]; 
0x00000000000be49a: clc; call qword ptr [rdx + 0x37]; 
0x00000000000be49a: clc; call qword ptr [rdx + 0x37]; clc; jmp rdx; 
0x00000000000bdf92: clc; call qword ptr [rdx]; 
0x00000000000bdf0e: clc; call qword ptr [rsi + 0x26fff812]; adc bh, al; push qword ptr [rsi + 0x46fff811]; adc eax, edi; call rsi; 
0x00000000000be406: clc; call qword ptr [rsi + 0x26fff839]; cmp eax, edi; push qword ptr [rsi + 0x46fff838]; cmp al, bh; call rsi; 
0x00000000000be436: clc; call qword ptr [rsi + 0x34]; 
0x00000000000be436: clc; call qword ptr [rsi + 0x34]; clc; jmp rsi; 
0x00000000000be562: clc; call qword ptr [rsi + rsi - 8]; jmp rsp; 
0x00000000000bdf2e: clc; call qword ptr [rsi]; 
0x00000000000bded6: clc; call rax; 
0x00000000000be896: clc; call rax; adc al, 0xf8; call qword ptr [rax + 0x16]; 
0x00000000000be852: clc; call rax; adc bh, al; call qword ptr [rax + 0x14]; 
0x00000000000be88e: clc; call rax; adc eax, edi; call qword ptr [rax + 0x13]; 
0x00000000000bded6: clc; call rax; adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000be8b6: clc; call rax; and al, bh; call qword ptr [rax + 0x22]; 
0x00000000000be87a: clc; call rax; and eax, edi; call qword ptr [rax]; 
0x00000000000be87a: clc; call rax; and eax, edi; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; 
0x00000000000be3ce: clc; call rax; cmp al, bh; jmp qword ptr [rax + 0x38]; 
0x00000000000beaa6: clc; call rax; idiv eax; push rax; idiv eax; call qword ptr [rax]; 
0x00000000000bea16: clc; call rax; int1; clc; jmp rax; 
0x00000000000be986: clc; call rax; mov edi, eax; push qword ptr [rax - 0x73]; clc; call qword ptr [rax]; 
0x00000000000be9d6: clc; call rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; jmp qword ptr [rax]; 
0x00000000000be842: clc; call rax; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000be112: clc; call rax; or al, bh; call qword ptr [rax + 8]; 
0x00000000000be10a: clc; call rax; or eax, edi; call qword ptr [rax + 9]; 
0x00000000000be91e: clc; call rax; push rdi; clc; jmp rax; 
0x00000000000be862: clc; call rax; sbb al, bh; call qword ptr [rax + 0x1a]; 
0x00000000000be8a6: clc; call rax; sbb bh, al; call qword ptr [rax + 0x1c]; 
0x00000000000be86a: clc; call rax; sbb edi, eax; call qword ptr [rax + 0x1d]; 
0x00000000000de0b6: clc; call rcx; 
0x00000000000bdf82: clc; call rdx; 
0x00000000000bdf82: clc; call rdx; adc edi, eax; jmp qword ptr [rdx + 0x13]; 
0x00000000000be682: clc; call rdx; xor al, bh; call qword ptr [rdx + 0x30]; 
0x00000000000bdf1e: clc; call rsi; 
0x00000000000bdf1e: clc; call rsi; adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x00000000000be04a: clc; call rsp; 
0x00000000000beac1: clc; clc; call qword ptr [rax - 0x4f000708]; clc; clc; call rax; 
0x00000000000beab5: clc; clc; call qword ptr [rax - 8]; 
0x00000000000bead1: clc; clc; call qword ptr [rax]; 
0x00000000000beac9: clc; clc; call rax; 
0x00000000000beab1: clc; clc; push qword ptr [rax]; clc; clc; call qword ptr [rax - 8]; 
0x00000000000beacd: clc; clc; push rax; clc; clc; call qword ptr [rax]; 
0x00000000000cda2c: clc; cli; call rax; 
0x000000000002d028: clc; cmovne rax, rcx; ret; 
0x00000000000367fd: clc; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x00000000000862d6: clc; dec dword ptr [rax + 0x39]; ret; 
0x00000000000d6fb6: clc; dec dword ptr [rax + 0x78000084]; idiv eax; jmp qword ptr [rax]; 
0x00000000000804e0: clc; dec dword ptr [rax + 1]; ret; 
0x000000000009bfe7: clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x000000000009c1b7: clc; dec dword ptr [rax - 0x77]; ret 0x850f; 
0x000000000007d5e9: clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x000000000000a9bc: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000884fb: clc; dec dword ptr [rax - 0x7d]; ret; 
0x000000000006f1b6: clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000006f1df: clc; dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x000000000006d15e: clc; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000007fe4d: clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x0000000000074c94: clc; dec dword ptr [rdi]; xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000d6e16: clc; dec eax; jbe 0xd6e1b; add byte ptr [rax + 0x34], bl; clc; jmp rax; 
0x00000000000d8bd8: clc; div bl; jmp qword ptr [rdx]; 
0x00000000000b8c56: clc; hlt; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000006c513: clc; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000077b83: clc; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000bded2: clc; inc dword ptr [rax + 0x12]; clc; call rax; 
0x00000000000bded2: clc; inc dword ptr [rax + 0x12]; clc; call rax; adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000be0fa: clc; inc dword ptr [rax + 0x20fff80d]; add edi, eax; jmp rax; 
0x00000000000be5e2: clc; inc dword ptr [rax + 0x36]; clc; call rax; 
0x00000000000be3ca: clc; inc dword ptr [rax + 0x39]; clc; call rax; 
0x00000000000be3ca: clc; inc dword ptr [rax + 0x39]; clc; call rax; cmp al, bh; jmp qword ptr [rax + 0x38]; 
0x00000000000be8fa: clc; inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; 
0x00000000000be8fa: clc; inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; clc; jmp qword ptr [rax + 0x49]; 
0x00000000000be26e: clc; inc dword ptr [rax + 0x474fff8]; clc; jmp rsp; 
0x00000000000be0ea: clc; inc dword ptr [rax + 0xf]; clc; call rax; 
0x00000000000be82a: clc; inc dword ptr [rax + 0xfff82b]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000be2fa: clc; inc dword ptr [rax + 3]; clc; call rax; 
0x00000000000be9d2: clc; inc dword ptr [rax - 0x2f00075d]; movsb byte ptr [rdi], byte ptr [rsi]; clc; jmp qword ptr [rax]; 
0x00000000000bea66: clc; inc dword ptr [rax - 0x5f00070d]; clc; inc eax; clc; jmp rax; 
0x00000000000bea42: clc; inc dword ptr [rax - 0x5f00070e]; clc; push qword ptr [rax - 0x3f00070e]; clc; jmp rax; 
0x00000000000bea5e: clc; inc dword ptr [rax - 0xd]; clc; jmp qword ptr [rax - 0xd]; 
0x00000000000bea32: clc; inc dword ptr [rax - 0xe]; clc; call qword ptr [rax - 0xe]; 
0x00000000000bea32: clc; inc dword ptr [rax - 0xe]; clc; call qword ptr [rax - 0xe]; clc; jmp qword ptr [rax - 0xe]; 
0x00000000000be7f2: clc; inc dword ptr [rax - 0xf0007d6]; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000bea8a: clc; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; 
0x00000000000bea8a: clc; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; clc; jmp qword ptr [rax - 9]; 
0x00000000000bea22: clc; inc dword ptr [rax]; clc; call qword ptr [rax]; 
0x00000000000bea22: clc; inc dword ptr [rax]; clc; call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000000bea56: clc; inc dword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000000bea76: clc; inc dword ptr [rax]; hlt; clc; jmp qword ptr [rax]; 
0x00000000000be9f2: clc; inc dword ptr [rax]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x00000000000be82e: clc; inc dword ptr [rax]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000be26a: clc; inc dword ptr [rbp + rax + 0x504fff8]; clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x00000000000be03e: clc; inc dword ptr [rbp + rcx - 8]; push qword ptr [rbx + rdx + 0x1344fff8]; clc; call rsp; 
0x00000000000be046: clc; inc dword ptr [rbx + rdx - 8]; call rsp; 
0x00000000000679a2: clc; inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x00000000000be4b6: clc; inc dword ptr [rdx + 0x34]; clc; call rdx; 
0x00000000000bdf1a: clc; inc dword ptr [rsi + 0x11]; clc; call rsi; 
0x00000000000bdf1a: clc; inc dword ptr [rsi + 0x11]; clc; call rsi; adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x00000000000be412: clc; inc dword ptr [rsi + 0x38]; clc; call rsi; 
0x00000000000be0ca: clc; inc eax; adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000be0ca: clc; inc eax; adc bh, al; call qword ptr [rax + 0x12]; clc; jmp rax; 
0x00000000000be336: clc; inc eax; add edi, eax; push qword ptr [rax]; add edi, eax; call rax; 
0x00000000000bea4e: clc; inc eax; clc; jmp rax; 
0x00000000000be5c2: clc; inc eax; cmp eax, edi; call qword ptr [rax + 0x39]; 
0x00000000000be5c2: clc; inc eax; cmp eax, edi; call qword ptr [rax + 0x39]; clc; jmp rax; 
0x00000000000bea12: clc; inc eax; int1; clc; call rax; 
0x00000000000be91a: clc; inc eax; push rbp; clc; call rax; 
0x00000000000be9e2: clc; inc eax; test al, 0xf8; call qword ptr [rax]; 
0x00000000000be3ea: clc; inc eax; xor eax, 0x3550fff8; clc; jmp rax; 
0x00000000000bdf9e: clc; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; 
0x00000000000bdf9e: clc; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; clc; jmp rdx; 
0x00000000000be432: clc; inc esi; xor al, 0xf8; call qword ptr [rsi + 0x34]; 
0x00000000000be432: clc; inc esi; xor al, 0xf8; call qword ptr [rsi + 0x34]; clc; jmp rsi; 
0x00000000000be55e: clc; inc esp; clc; call qword ptr [rsi + rsi - 8]; jmp rsp; 
0x00000000000d6374: clc; insb byte ptr [rdi], dx; hlt; push qword ptr [rsi + rsi + 0x6d780000]; hlt; call rsp; 
0x000000000001dd14: clc; jbe 0x1de18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000006b6a6: clc; jbe 0x6ccc5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006bc4c: clc; jbe 0x6cd59; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000008c60: clc; je 0x8c78; mov rax, 0; test rax, rax; je 0x8c78; jmp rax; 
0x0000000000051c26: clc; jg 0x51c20; int1; mov eax, eax; ret; 
0x0000000000062247: clc; jg 0x621d3; ret 0xdb76; 
0x00000000000bdeda: clc; jmp qword ptr [rax + 0x11]; 
0x00000000000be7fa: clc; jmp qword ptr [rax + 0x29]; 
0x00000000000be5ea: clc; jmp qword ptr [rax + 0x35]; 
0x00000000000be3d2: clc; jmp qword ptr [rax + 0x38]; 
0x00000000000be902: clc; jmp qword ptr [rax + 0x49]; 
0x00000000000d6e46: clc; jmp qword ptr [rax + 0x77]; 
0x00000000000be106: clc; jmp qword ptr [rax + 0xa]; 
0x00000000000be0f2: clc; jmp qword ptr [rax + 0xe]; 
0x00000000000be2f2: clc; jmp qword ptr [rax + 4]; 
0x00000000000be32a: clc; jmp qword ptr [rax + 5]; 
0x00000000000be322: clc; jmp qword ptr [rax + 6]; 
0x00000000000be31a: clc; jmp qword ptr [rax + 7]; 
0x00000000000be312: clc; jmp qword ptr [rax + 8]; 
0x00000000000be30a: clc; jmp qword ptr [rax + 9]; 
0x00000000000be9ea: clc; jmp qword ptr [rax - 0x55]; 
0x00000000000bea62: clc; jmp qword ptr [rax - 0xd]; 
0x00000000000bea3a: clc; jmp qword ptr [rax - 0xe]; 
0x00000000000bea92: clc; jmp qword ptr [rax - 9]; 
0x00000000000bdeca: clc; jmp qword ptr [rax]; 
0x00000000000de1f2: clc; jmp qword ptr [rdi + 0x11]; 
0x00000000000bdf86: clc; jmp qword ptr [rdx + 0x13]; 
0x00000000000bdf7e: clc; jmp qword ptr [rdx + 0xd]; 
0x00000000000bdfb6: clc; jmp qword ptr [rdx]; 
0x00000000000bdf22: clc; jmp qword ptr [rsi + 0x10]; 
0x000000000007fd90: clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000be41a: clc; jmp qword ptr [rsi + 0x37]; 
0x00000000000de3da: clc; jmp qword ptr [rsi + 0xa]; 
0x00000000000802a5: clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000087dec: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000000bdf12: clc; jmp qword ptr [rsi]; 
0x000000000006e0bf: clc; jmp rax; 
0x00000000000bdfa6: clc; jmp rdx; 
0x00000000000bdf02: clc; jmp rsi; 
0x00000000000be06e: clc; jmp rsp; 
0x00000000000be67a: clc; lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000d6f66: clc; lcall [rdi + rdi*2 - 0x67280000]; clc; call qword ptr [rax]; 
0x00000000000be03a: clc; lcall [rsi + 0x44fff80d]; or eax, 0x13b4fff8; clc; inc dword ptr [rbx + rdx - 8]; call rsp; 
0x000000000003c706: clc; lea r11, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c550: clc; lea r11, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c42: clc; lea r11, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b68: clc; lea r11, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b6c53: clc; leave; ret; 
0x00000000000be67e: clc; ljmp [rcx + rbp]; clc; call rdx; 
0x00000000000be67e: clc; ljmp [rcx + rbp]; clc; call rdx; xor al, bh; call qword ptr [rdx + 0x30]; 
0x00000000000be676: clc; ljmp [rdx + rbp]; clc; lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000d76a8: clc; mov bl, 0; add byte ptr [rax - 0x57], ch; sti; jmp qword ptr [rax - 0x4c]; 
0x00000000000d1602: clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000d6b04: clc; mov dh, 0xf7; call rsp; 
0x000000000001cb34: clc; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d7790: clc; mov eax, 0xca580000; sti; call qword ptr [rax]; 
0x0000000000038d07: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003965b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003985b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a5b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ceb: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003962f: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003982f: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a2f: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038cbf: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039677: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e5c7: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000039877: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e537: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000039a77: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e4a7: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038d23: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000005170e: clc; mov qword ptr [rdi], rcx; ret; 
0x000000000005188d: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000041f5c: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000005099a: clc; mov qword ptr [rdi], rsi; ret; 
0x00000000000b4597: clc; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x0000000000036d7f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x00000000000b6dd2: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000367f9: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x0000000000009acb: clc; mov rdi, rax; call 0x97c0; mov eax, 0; leave; ret; 
0x0000000000050992: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000000a9462: clc; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000035542: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000007cb51: clc; or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x00000000000d9fd8: clc; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rsi]; 
0x0000000000024d76: clc; pop rbp; pop r12; ret; 
0x00000000000be832: clc; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000be62e: clc; push qword ptr [rax + 0x2b]; clc; jmp rax; 
0x00000000000be0e6: clc; push qword ptr [rax + 0x40fff80f]; psubb mm7, mm7; ror byte ptr [rsi], 1; clc; jmp qword ptr [rax + 0xe]; 
0x00000000000bdece: clc; push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x00000000000be5de: clc; push qword ptr [rax + 0x40fff836]; clc; call rax; 
0x00000000000be3c6: clc; push qword ptr [rax + 0x40fff839]; cmp eax, edi; call rax; 
0x00000000000be302: clc; push qword ptr [rax + 0xa]; clc; push rax; or eax, edi; jmp qword ptr [rax + 9]; 
0x00000000000be9ee: clc; push qword ptr [rax + 0xfff8ac]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x00000000000be2ea: clc; push qword ptr [rax + 5]; clc; push rax; add al, 0xf8; jmp qword ptr [rax + 4]; 
0x00000000000be83e: clc; push qword ptr [rax - 0x2f0007f5]; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000bea4a: clc; push qword ptr [rax - 0x3f00070e]; clc; jmp rax; 
0x00000000000bea0e: clc; push qword ptr [rax - 0x3f00070f]; int1; clc; call rax; 
0x00000000000be916: clc; push qword ptr [rax - 0x3f0007ad]; push rbp; clc; call rax; 
0x00000000000be9de: clc; push qword ptr [rax - 0x59]; clc; inc eax; test al, 0xf8; call qword ptr [rax]; 
0x00000000000be98a: clc; push qword ptr [rax - 0x73]; clc; call qword ptr [rax]; 
0x00000000000be0c6: clc; push qword ptr [rax]; adc edi, eax; inc eax; adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000be33a: clc; push qword ptr [rax]; add edi, eax; call rax; 
0x00000000000beab2: clc; push qword ptr [rax]; clc; clc; call qword ptr [rax - 8]; 
0x00000000000be8f6: clc; push qword ptr [rax]; clc; inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; 
0x00000000000bea2e: clc; push qword ptr [rax]; clc; inc dword ptr [rax - 0xe]; clc; call qword ptr [rax - 0xe]; 
0x00000000000beaf6: clc; push qword ptr [rax]; cli; clc; call qword ptr [rax - 6]; 
0x00000000000bea86: clc; push qword ptr [rax]; idiv eax; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; 
0x00000000000be982: clc; push qword ptr [rax]; mov bh, al; call rax; 
0x00000000000be9ce: clc; push qword ptr [rax]; movabs byte ptr [0xa4d0fff8a380fff8], al; clc; jmp qword ptr [rax]; 
0x00000000000bdeee: clc; push qword ptr [rax]; psubb mm7, mm7; ror byte ptr [rsi], 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000bead6: clc; push qword ptr [rax]; stc; clc; call qword ptr [rax - 7]; 
0x00000000000be9a2: clc; push qword ptr [rax]; xchg eax, edi; clc; call rax; 
0x000000000007f237: clc; push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x0000000000021bbf: clc; push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000be042: clc; push qword ptr [rbx + rdx + 0x1344fff8]; clc; call rsp; 
0x0000000000084e13: clc; push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x00000000000be4b2: clc; push qword ptr [rdx + 0x42fff834]; xor al, 0xf8; call rdx; 
0x00000000000bdf9a: clc; push qword ptr [rdx]; adc eax, edi; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; 
0x00000000000bdf16: clc; push qword ptr [rsi + 0x46fff811]; adc eax, edi; call rsi; 
0x00000000000be40e: clc; push qword ptr [rsi + 0x46fff838]; cmp al, bh; call rsi; 
0x00000000000bdefe: clc; push qword ptr [rsi + 0xd]; clc; jmp rsi; 
0x00000000000be42e: clc; push qword ptr [rsi]; xor eax, 0x34c6fff8; clc; call qword ptr [rsi + 0x34]; 
0x00000000000be272: clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x00000000000be2ee: clc; push rax; add al, 0xf8; jmp qword ptr [rax + 4]; 
0x00000000000beace: clc; push rax; clc; clc; call qword ptr [rax]; 
0x00000000000beaaa: clc; push rax; idiv eax; call qword ptr [rax]; 
0x00000000000d6e8e: clc; push rax; js 0xd6e93; add byte ptr [rax + 0x4a], cl; clc; call qword ptr [rax]; 
0x00000000000be0f6: clc; push rax; or eax, 0xd80fff8; clc; jmp qword ptr [rax]; 
0x00000000000be306: clc; push rax; or eax, edi; jmp qword ptr [rax + 9]; 
0x00000000000beaee: clc; push rax; stc; clc; call qword ptr [rax]; 
0x00000000000be7f6: clc; push rax; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000be62a: clc; push rax; sub edi, eax; push qword ptr [rax + 0x2b]; clc; jmp rax; 
0x00000000000be97a: clc; push rax; xchg al, bh; call qword ptr [rax + 0x30fff888]; mov bh, al; call rax; 
0x00000000000d67ac: clc; push rbp; cmc; push qword ptr [rsi + rdx*2 + 0x59e80000]; cmc; jmp qword ptr [rax + 0x57]; 
0x00000000000bdf26: clc; push rsi; psubb mm7, mm7; xchg byte ptr [rdi], cl; clc; call qword ptr [rsi]; 
0x000000000000a454: clc; ret 4; 
0x000000000001cb65: clc; ret; 
0x0000000000059461: clc; ror ax, 8; ret; 
0x00000000000d6d44: clc; sbb al, 0xf8; jmp qword ptr [rax]; 
0x000000000009287a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000008271f: clc; shr rax, 2; ret; 
0x00000000000d6234: clc; sub ah, dh; jmp qword ptr [rax]; 
0x00000000000da7e0: clc; sub dword ptr [rax], eax; add ah, ch; mov esi, esp; call qword ptr [rsi]; 
0x000000000007c95e: clc; sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000009d2b1: clc; sub rax, r8; ret; 
0x0000000000082bc6: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a606: clc; sub rax, rdx; vzeroupper; ret; 
0x00000000000505ab: clc; sub rax, rsi; ret; 
0x00000000000353f6: clc; vzeroupper; ret; 
0x00000000000e12e0: clc; xchg eax, esp; add byte ptr [rax], al; or al, 0xf2; cli; call rdx; 
0x0000000000093d07: clc; xor rax, qword ptr fs:[0x28]; jne 0x93d4e; leave; ret; 
0x00000000000d3138: cld; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000dffe4: cld; add dword ptr [rax], 0xfa1df800; jmp qword ptr [rbx]; 
0x0000000000051b4a: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x0000000000051b2f: cld; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000000d7906: cld; call qword ptr [rax - 0x3f]; 
0x00000000000d787e: cld; call qword ptr [rax]; 
0x00000000000e25de: cld; call qword ptr [rbx]; 
0x00000000000d3a4a: cld; call qword ptr [rdi + 0x31fffc16]; sub esp, edi; jmp rcx; 
0x00000000000e2592: cld; call qword ptr [rdx]; 
0x00000000000d39d2: cld; call qword ptr [rsi + 0x28]; 
0x00000000000e26e2: cld; call rdi; 
0x00000000000d783e: cld; call rsp; 
0x00000000000a96be: cld; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d9754: cld; cmp dh, ah; jmp rdx; 
0x00000000000090f7: cld; cmp eax, dword ptr [rbp - 0x1c]; jb 0x9096; nop; leave; ret; 
0x000000000004fd41: cld; cmp eax, ecx; jne 0x4ff50; xor eax, eax; ret; 
0x0000000000036826: cld; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x00000000000561f2: cld; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000d79ae: cld; dec dword ptr [rax*8 - 0x29f80000]; cld; jmp qword ptr [rax]; 
0x00000000000d794e: cld; dec dword ptr [rax]; ret; 
0x0000000000081e3b: cld; dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000000d78ce: cld; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x00000000000bd805: cld; idiv bh; add ch, bh; idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x00000000000be3bd: cld; idiv edi; sahf; xor edi, eax; jmp qword ptr [rax]; 
0x00000000000d3ace: cld; inc dword ptr [rax - 4]; jmp rcx; 
0x000000000008b6de: cld; inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x0000000000051c0c: cld; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000051b7a: cld; inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000081e5b: cld; inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffcfa46; cmove rax, rdx; ret; 
0x00000000000d3aca: cld; inc dword ptr [rdx + 0x44fffc1c]; and ah, bh; jmp rcx; 
0x00000000000d797e: cld; inc esp; ret; 
0x00000000000c1184: cld; je 0xc1181; jmp rsp; 
0x00000000000d7936: cld; jmp qword ptr [rax - 0x3e]; 
0x00000000000d7956: cld; jmp qword ptr [rax]; 
0x00000000000e284e: cld; jmp qword ptr [rcx]; 
0x00000000000d38f6: cld; jmp qword ptr [rdi]; 
0x00000000000e26b2: cld; jmp qword ptr [rdx]; 
0x000000000005e7b4: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000055e2b: cld; jmp qword ptr [rsi + 0xf]; 
0x000000000008ce4c: cld; jmp qword ptr [rsi - 0x70]; 
0x00000000000d7816: cld; jmp rax; 
0x00000000000d3a42: cld; jmp rcx; 
0x00000000000e29b6: cld; jmp rsp; 
0x00000000000594b4: cld; lcall [rax + 0x48]; mov eax, ebx; pop rdx; pop rbx; ret; 
0x00000000000d7836: cld; ljmp [rax - 0x77ffff44]; insb byte ptr [rdi], dx; cld; call rsp; 
0x00000000000d7926: cld; ljmp [rax]; ret 0; 
0x00000000000d76d8: cld; mov ah, 0; add dh, dh; mov ch, 0xfb; call qword ptr [rax]; 
0x0000000000039492: cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039695: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039895: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039a95: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000051716: cld; mov dword ptr [rdi], ecx; ret; 
0x0000000000051898: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000041f6e: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000509a8: cld; mov dword ptr [rdi], esi; ret; 
0x0000000000036823: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x000000000004fd3e: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x4ff50; xor eax, eax; ret; 
0x0000000000036a85: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x00000000000509a2: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000038eca: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390aa: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003928a: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003946a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003908e: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003926e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003944e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390c6: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e756: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000392a6: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e6d6: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039486: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e656: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000038ee6: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e7d6: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000056ce7: cld; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000024a30: cld; mov word ptr [rcx], cs; add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x00000000000a941c: cld; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000800d0: cld; or eax, 0x3948fffa; ret; 
0x00000000000d3a46: cld; push qword ptr [rcx]; sub esp, edi; call qword ptr [rdi + 0x31fffc16]; sub esp, edi; jmp rcx; 
0x00000000000d3ac6: cld; push qword ptr [rcx]; sub esp, edi; inc dword ptr [rdx + 0x44fffc1c]; and ah, bh; jmp rcx; 
0x00000000000d3a3e: cld; push qword ptr [rcx]; sub esp, edi; jmp rcx; 
0x00000000000d3a3a: cld; push qword ptr [rcx]; sub esp, edi; push qword ptr [rcx]; sub esp, edi; jmp rcx; 
0x0000000000038d71: cld; ret; 
0x00000000000df9c9: cld; stc; jmp qword ptr [rdx]; 
0x00000000000d713d: cld; stc; jmp rsp; 
0x00000000000d5ad9: cld; std; call rax; 
0x00000000000d0ab6: cld; test al, 0x97; xchg eax, esp; ret; 
0x00000000000420dd: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ea3: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000004239f: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000005066b: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000051232: cld; vzeroupper; ret; 
0x00000000000d7000: cld; xchg byte ptr [rax], al; add byte ptr [rax], bh; or al, 0xf9; call qword ptr [rax - 0x79]; 
0x000000000001832d: cli; adc byte ptr [rcx], ch; ret 0xc269; 
0x00000000000516fc: cli; add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x0000000000081e5e: cli; add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x305ba]; cmove rax, rdx; ret; 
0x0000000000053880: cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x0000000000076a35: cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x000000000001b4f2: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000000fdfe: cli; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000013445: cli; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x00000000000506ee: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000a5295: cli; add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], cl; ret 0x4502; 
0x0000000000051701: cli; add dword ptr [rdi + 0x15], esi; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x0000000000050982: cli; add dword ptr [rdi + 0x26], esi; jb 0x5098d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000005186f: cli; add dword ptr [rdi + 0x2c], esi; jb 0x51877; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000051a37: cli; add dword ptr [rdi + 0x3a], esi; jb 0x51a3f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000050ce2: cli; add dword ptr [rdi + 0x3b], esi; jb 0x50ced; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000051132: cli; add dword ptr [rdi + 0x53], esi; jb 0x5113d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000506fb: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000041f8c: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000083521: cli; add ebp, dword ptr [rcx]; ret 0x48d; 
0x00000000000527ee: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000005284c: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x0000000000051610: cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000051660: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b5ca9: cli; and byte ptr [rdi], cl; test byte ptr [rdi - 0x18000000], bh; stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000506b7: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000006d4a5: cli; call qword ptr [rax + 0x38]; 
0x00000000000cd68a: cli; call qword ptr [rax - 0x14]; 
0x00000000000d744e: cli; call qword ptr [rax - 0x5c]; 
0x00000000000d73fe: cli; call qword ptr [rax - 0x5e]; 
0x00000000000d7396: cli; call qword ptr [rax - 0x60]; 
0x00000000000cda26: cli; call qword ptr [rax - 0x700050e]; cli; call rax; 
0x00000000000c1156: cli; call qword ptr [rax]; 
0x00000000000e1102: cli; call qword ptr [rdx + 1]; 
0x00000000000dfd2a: cli; call qword ptr [rsi + 1]; 
0x00000000000cda2e: cli; call rax; 
0x00000000000e12e6: cli; call rdx; 
0x00000000000cd902: cli; call rsp; 
0x00000000000beaf9: cli; clc; call qword ptr [rax - 6]; 
0x00000000000beaf5: cli; clc; push qword ptr [rax]; cli; clc; call qword ptr [rax - 6]; 
0x00000000000656b2: cli; cmp al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000059835: cli; cmp eax, 0x83497174; ret; 
0x00000000000800d2: cli; dec dword ptr [rax + 0x39]; ret; 
0x00000000000c117e: cli; dec dword ptr [rsi*2 + 0x74fcfffa]; cli; jmp rsp; 
0x00000000000b8b4c: cli; hlt; call qword ptr [rax + 0x8c48348]; pop rbx; pop rbp; ret; 
0x0000000000074c0a: cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000051b4e: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x000000000006799f: cli; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x00000000000639e5: cli; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x00000000000606fd: cli; inc dword ptr [rcx - 0x77]; ret; 
0x00000000000517b8: cli; ja 0x517ca; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000051768: cli; ja 0x517d3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000000506a4: cli; jb 0x506b6; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000041f47: cli; jg 0x41f51; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000000506c6: cli; jg 0x506d0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000050cf9: cli; jg 0x50d03; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000051161: cli; jg 0x5116b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000051882: cli; jg 0x5188c; vzeroupper; ret; 
0x0000000000051a58: cli; jg 0x51a62; vzeroupper; ret; 
0x00000000000d726e: cli; jmp qword ptr [rax - 0x67]; 
0x00000000000cd6b2: cli; jmp qword ptr [rax]; 
0x00000000000dfd7a: cli; jmp qword ptr [rbx]; 
0x00000000000e0b02: cli; jmp qword ptr [rcx + 0xe]; 
0x00000000000dfbaa: cli; jmp qword ptr [rcx]; 
0x00000000000e0e2e: cli; jmp qword ptr [rdx]; 
0x000000000005c2a0: cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000005dbd8: cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000e0dc2: cli; jmp qword ptr [rsi + 5]; 
0x00000000000e0ee2: cli; jmp qword ptr [rsi + 7]; 
0x000000000005cb1c: cli; jmp qword ptr [rsi - 0x70]; 
0x00000000000e13b2: cli; jmp qword ptr [rsi]; 
0x00000000000d73c6: cli; jmp rax; 
0x0000000000016184: cli; jmp rdx; 
0x00000000000c1186: cli; jmp rsp; 
0x00000000000c117a: cli; lcall [rsp + rsi*2]; cli; dec dword ptr [rsi*2 + 0x74fcfffa]; cli; jmp rsp; 
0x0000000000028ef7: cli; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000000cd8fe: cli; ljmp [rcx + rsi*8]; cli; call rsp; 
0x00000000000cd8f2: cli; ljmp [rcx + rsi*8]; cli; jmp rsp; 
0x00000000000cd8fa: cli; ljmp [rcx + rsi*8]; cli; ljmp [rcx + rsi*8]; cli; call rsp; 
0x000000000006fd0f: cli; mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x0000000000039898: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039892: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b888c: cli; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x000000000001da1f: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000016466: cli; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000035548: cli; movzx edx, dl; sub eax, edx; ret; 
0x00000000000345f6: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b6879: cli; or byte ptr [rdi], cl; test dword ptr [rdx + 0x48fff51e], edx; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000000506d0: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000000a2a1b: cli; or dword ptr [rdi], ecx; xchg eax, esi; ret 0x8348; 
0x00000000000d2f21: cli; push 0x6e; ja 0xd2ea9; ret 0x48f; 
0x00000000000cd686: cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax - 0x14]; 
0x00000000000cd6ba: cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax]; 
0x00000000000cd6ae: cli; push qword ptr [rax - 0x15]; cli; jmp qword ptr [rax]; 
0x00000000000cd682: cli; push qword ptr [rax - 0x15]; cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax - 0x14]; 
0x00000000000cd6b6: cli; push qword ptr [rax - 0x15]; cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax]; 
0x00000000000d7176: cli; push qword ptr [rcx + rdx*4 + 0x2cb80000]; cli; jmp rsp; 
0x0000000000051639: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000590ab: cli; setae al; ret; 
0x00000000000df901: cli; stc; jmp qword ptr [rbx]; 
0x000000000004a439: cli; test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d8: cli; test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x00000000000819a8: cli; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x0000000000081938: cli; test rdx, rdx; je 0x819e0; bsf rax, rdx; ret; 
0x0000000000082668: cli; test rdx, rdx; je 0x82690; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000825fc: cli; test rdx, rdx; je 0x826a0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000423ad: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000d060a: cli; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000000954d2: cmc; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000000b0258: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000082a11: cmc; and ch, 0xf; je 0x82a30; add rax, 2; ret; 
0x0000000000083cb7: cmc; and r13, r15; and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x00000000000d674e: cmc; call qword ptr [rax + 0x50]; 
0x00000000000d6796: cmc; call qword ptr [rax + 0x54]; 
0x00000000000d689e: cmc; call qword ptr [rax + 0x5e]; 
0x00000000000d6816: cmc; call qword ptr [rax]; 
0x00000000000dbcfa: cmc; call qword ptr [rsi]; 
0x00000000000bc0ea: cmc; call rbx; 
0x00000000000dbeaa: cmc; call rsp; 
0x00000000000e13b1: cmc; cli; jmp qword ptr [rsi]; 
0x00000000000bc142: cmc; dec dword ptr [rax + 0x45fff5a5]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp qword ptr [rcx]; 
0x00000000000b595c: cmc; dec dword ptr [rax - 0x75]; add byte ptr [rcx + 1], cl; ret 0xef89; 
0x00000000000b4775: cmc; dec dword ptr [rcx + 0x63]; add al, 0x87; add rax, r15; jmp rax; 
0x00000000000bc146: cmc; inc dword ptr [rbp - 0x5a]; cmc; jmp qword ptr [rcx]; 
0x000000000009fa56: cmc; je 0x9fa7d; add byte ptr [rax], al; jne 0x9fa5f; pop rbx; ret; 
0x00000000000d67b6: cmc; jmp qword ptr [rax + 0x57]; 
0x00000000000d67f6: cmc; jmp qword ptr [rax]; 
0x00000000000dbdea: cmc; jmp qword ptr [rbx + 2]; 
0x00000000000dbbfa: cmc; jmp qword ptr [rbx]; 
0x00000000000bc14a: cmc; jmp qword ptr [rcx]; 
0x00000000000dbf3e: cmc; jmp qword ptr [rdi + 0x2b]; 
0x00000000000b5a44: cmc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b36d5: cmc; jmp qword ptr [rsi + 0xf]; 
0x00000000000b8f9c: cmc; jmp qword ptr [rsi - 0x70]; 
0x00000000000d6726: cmc; jmp rax; 
0x00000000000bc0e6: cmc; ljmp [rbx]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000000d3349: cmc; mov ch, 0xab; ret; 
0x000000000003e6da: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003911e: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e6d3: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039287: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000392a3: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004fa83: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000000d01f7: cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000000d67ae: cmc; push qword ptr [rsi + rdx*2 + 0x59e80000]; cmc; jmp qword ptr [rax + 0x57]; 
0x000000000004fa87: cmc; sub eax, edx; ret; 
0x00000000000d2985: cmc; xlatb; ret 0x4e27; 
0x0000000000023219: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000023218: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000051b54: cmove eax, ecx; pop rbx; ret; 
0x000000000007f7e1: cmove eax, ecx; ret; 
0x000000000002d9f3: cmove eax, edx; add rsp, 8; ret; 
0x0000000000051b1c: cmove eax, edx; pop rbx; ret; 
0x000000000002db2f: cmove eax, edx; ret; 
0x000000000001ec7f: cmove ebp, esp; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000001ec7e: cmove ebp, r12d; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000018154: cmove ebx, eax; mov rax, rbx; pop rbx; ret; 
0x000000000008e228: cmove ecx, eax; mov rax, rcx; ret; 
0x00000000000b1dda: cmove edx, eax; call 0x886d0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000590a4: cmove edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000007f7e0: cmove r8, rcx; ret; 
0x0000000000051b53: cmove rax, rcx; pop rbx; ret; 
0x000000000002d9f2: cmove rax, rdx; add rsp, 8; ret; 
0x0000000000051b1b: cmove rax, rdx; pop rbx; ret; 
0x000000000002db2e: cmove rax, rdx; ret; 
0x0000000000018153: cmove rbx, rax; mov rax, rbx; pop rbx; ret; 
0x000000000008e227: cmove rcx, rax; mov rax, rcx; ret; 
0x00000000000590a3: cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000002d02a: cmovne eax, ecx; ret; 
0x000000000007e3c1: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000020c69: cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000051bac: cmovne eax, edx; pop rbx; ret; 
0x000000000002dab6: cmovne eax, edx; ret; 
0x0000000000049fc4: cmovne eax, edx; vzeroupper; ret; 
0x00000000000815c1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000815c5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000002d029: cmovne rax, rcx; ret; 
0x0000000000051bab: cmovne rax, rdx; pop rbx; ret; 
0x000000000002dab5: cmovne rax, rdx; ret; 
0x0000000000049fc3: cmovne rax, rdx; vzeroupper; ret; 
0x00000000000815c0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000815c4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000006848d: cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x0000000000059c18: cmovs eax, dword ptr [rbp + 0x480a74d2]; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000001865c: cmovs eax, dword ptr [rbx + 0x194540fa]; rol byte ptr [rcx - 0x7d], cl; ret 0xe902; 
0x000000000005ed5c: cmovs eax, edx; ret; 
0x0000000000041f55: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000b72c8: cmovs ecx, dword ptr [rcx + 0x1bffe]; add byte ptr [rax], al; jmp rax; 
0x000000000007f548: cmovs edi, dword ptr [rcx]; int1; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x0000000000051afe: cmovs esp, dword ptr [rbx + 0xc]; xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x0000000000051b90: cmovs esp, dword ptr [rbx + 4]; xchg eax, esi; add rax, rsi; jmp rax; 
0x00000000000b6b22: cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000009d2a6: cmp ah, byte ptr [rbx + 0x1f]; adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000050598: cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x00000000000505e2: cmp ah, byte ptr [rbx - 0x37]; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000004783a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004839a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047b7a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004735a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000047eba: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004769a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000046e7a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004805a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x00000000000471ba: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000472f0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047ff0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047b10: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048330: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047630: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000047150: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047e50: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x00000000000d661c: cmp ah, cl; hlt; jmp qword ptr [rax + 0x46]; 
0x000000000000a140: cmp al, 0; add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000097bca: cmp al, 0; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000b8f7c: cmp al, 0x10; jne 0xb8f98; xor eax, eax; ret; 
0x00000000000d9024: cmp al, 0x12; add byte ptr [rax], al; sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x0000000000063b82: cmp al, 0x24; add byte ptr [rcx - 0x77], al; ret; 
0x000000000005da12: cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x0000000000020837: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000081fc3: cmp al, 0x24; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000007c1c3: cmp al, 0x29; ja 0x7c1f0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d38f4: cmp al, 0x2b; cld; jmp qword ptr [rdi]; 
0x00000000000b476f: cmp al, 0x2f; ja 0x86f0; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x00000000000d62c8: cmp al, 0x31; add byte ptr [rax], al; mov byte ptr [rdi - 0xc], al; call qword ptr [rax + 0x78000031]; hlt; call rax; 
0x00000000000d1600: cmp al, 0x46; clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000ddb24: cmp al, 0x5d; add byte ptr [rax], al; jg 0xddad5; bnd jmp qword ptr [rbx]; 
0x00000000000d11a8: cmp al, 0x7b; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000e2324: cmp al, 0xa5; add byte ptr [rax], al; test al, 0xe0; sti; call qword ptr [rax]; 
0x00000000000d3135: cmp al, 0xaa; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000068571: cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x0000000000016469: cmp al, 0xba; add rdi, r10; jmp rdi; 
0x00000000000d7930: cmp al, 0xc2; add byte ptr [rax], al; test al, 0x9b; cld; jmp qword ptr [rax - 0x3e]; 
0x00000000000d0063: cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000000b573d: cmp al, 0xee; ja 0xb5cb1; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000000e29b4: cmp al, 0xf4; cld; jmp rsp; 
0x00000000000d628d: cmp al, 0xf4; jmp qword ptr [rax + 0x2f]; 
0x00000000000beac0: cmp al, 0xf8; call qword ptr [rax - 0x4f000708]; clc; clc; call rax; 
0x000000000005866d: cmp al, 0xff; dec dword ptr [rax - 0x7f]; ret; 
0x00000000000656b3: cmp al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000023876: cmp al, 3; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000007cae0: cmp al, 3; add byte ptr [rax], al; lea rdx, [rip + 0x50f3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007a113: cmp al, 7; lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0c0: cmp al, 7; lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b93: cmp al, 7; lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f32: cmp al, 7; lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079eed: cmp al, 7; lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079ea8: cmp al, 7; lea rax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e59: cmp al, 7; lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e5ac: cmp al, 7; lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e95b: cmp al, 7; lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e90d: cmp al, 7; lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e85e: cmp al, 7; lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e802: cmp al, 7; lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e562: cmp al, 7; lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e514: cmp al, 7; lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0b3: cmp al, 7; lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000003a099: cmp al, 8; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b68d8: cmp al, 8; jne 0x8718; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x00000000000be415: cmp al, bh; call rsi; 
0x00000000000be411: cmp al, bh; inc dword ptr [rsi + 0x38]; clc; call rsi; 
0x00000000000be3d1: cmp al, bh; jmp qword ptr [rax + 0x38]; 
0x0000000000087167: cmp al, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000d63e9: cmp al, byte ptr [rax]; add al, bl; test esp, esi; call qword ptr [rax + 0x3a]; 
0x000000000009ffda: cmp al, byte ptr [rsi - 0x6f99000a]; add rsp, 8; ret; 
0x000000000004fdee: cmp al, byte ptr [rsi - 1]; jne 0x4ff65; xor eax, eax; ret; 
0x00000000000d73fc: cmp al, cl; cli; call qword ptr [rax - 0x5e]; 
0x000000000003698b: cmp al, cl; jne 0x37260; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000004fea2: cmp al, cl; jne 0x4ff65; cmp eax, ecx; jne 0x4ff65; xor eax, eax; ret; 
0x000000000004ff5f: cmp al, cl; jne 0x4ff65; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000000d7784: cmp al, cl; sti; jmp rax; 
0x00000000000352d6: cmp al, dh; ret; 
0x00000000000352d5: cmp al, r14b; ret; 
0x00000000000be414: cmp al, r15b; call rsi; 
0x00000000000b46b6: cmp bh, 0x10; jne 0xb46d8; xor eax, eax; ret; 
0x00000000000b469e: cmp bh, 0x30; jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b7572: cmp bh, 0x30; jne 0xb7580; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b75c2: cmp bh, 0x30; jne 0xb75d0; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b4698: cmp bh, 0x50; je 0xb46bb; cmp dil, 0x30; jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b7581: cmp bh, 0x50; jne 0xb759b; xor eax, eax; ret; 
0x00000000000b75d1: cmp bh, 0x50; jne 0xb75eb; xor eax, eax; ret; 
0x00000000000b7517: cmp bh, 3; jne 0xb7520; ret; 
0x00000000000b7521: cmp bh, 4; jne 0xb7535; mov eax, 8; ret; 
0x00000000000be405: cmp bh, al; call qword ptr [rsi + 0x26fff839]; cmp eax, edi; push qword ptr [rsi + 0x46fff838]; cmp al, bh; call rsi; 
0x00000000000be3c5: cmp bh, al; push qword ptr [rax + 0x40fff839]; cmp eax, edi; call rax; 
0x00000000000bd97d: cmp bh, dh; call rax; 
0x0000000000053e0c: cmp bl, 0xff; call qword ptr [rbp + 0x53]; 
0x00000000000d6f9c: cmp bl, dl; clc; call qword ptr [rax]; 
0x000000000001a8d2: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x00000000000b67b0: cmp byte ptr [r9 + 0xdf], 0; je 0xb679c; add rsp, 0x18; ret; 
0x00000000000866fb: cmp byte ptr [rax + 0x29], cl; ret 0x8d49; 
0x000000000001c28f: cmp byte ptr [rax + 0x29], cl; ret; 
0x000000000001d009: cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000000a5bb: cmp byte ptr [rax + 0x39], cl; ret 0x4f76; 
0x000000000006be37: cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000000810c7: cmp byte ptr [rax + 1], cl; clc; ret; 
0x000000000007ddb5: cmp byte ptr [rax + 1], cl; ret; 
0x000000000007d840: cmp byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000000d6d98: cmp byte ptr [rax + rax], dh; sbb byte ptr [rsi], ch; clc; call qword ptr [rax + 0x74]; 
0x00000000000d7944: cmp byte ptr [rax - 0x3d170004], ah; add byte ptr [rax], al; test al, 0xa0; cld; dec dword ptr [rax]; ret; 
0x00000000000d7390: cmp byte ptr [rax - 0x48780000], ah; cli; call qword ptr [rax - 0x60]; 
0x0000000000068fa7: cmp byte ptr [rax - 0x73], cl; dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x000000000001b796: cmp byte ptr [rax - 0x75], cl; adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x000000000005f3a8: cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000091615: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000000915a3: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000000612e0: cmp byte ptr [rax - 0x75], cl; je 0x61309; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000069124: cmp byte ptr [rax - 0x75], cl; jl 0x6914d; and byte ptr [rax + 1], cl; ret; 
0x000000000001a8d3: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000083c37: cmp byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000009422f: cmp byte ptr [rax - 0x77], cl; xlatb; mov byte ptr [rsi], al; jne 0x94210; mov rax, rsi; ret; 
0x000000000007d5e6: cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000060cb4: cmp byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000035306: cmp byte ptr [rax], ah; ret; 
0x0000000000055d4e: cmp byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000b679f: cmp byte ptr [rax], al; je 0xb680b; add rsp, 0x18; ret; 
0x000000000003a424: cmp byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000049b60: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x00000000000352f6: cmp byte ptr [rax], dl; ret; 
0x00000000000352f5: cmp byte ptr [rax], r10b; ret; 
0x0000000000035305: cmp byte ptr [rax], r12b; ret; 
0x0000000000049b5f: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000072849: cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000000e1219: cmp byte ptr [rbx + 0x2030d07], al; cld; ret; 
0x00000000000e124d: cmp byte ptr [rbx + 0x2030d07], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000e11e5: cmp byte ptr [rbx + 0x3030d07], al; or al, byte ptr [rcx]; ret; 
0x00000000000169b6: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000020320: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000e123b: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x1370303; ret; 
0x00000000000e11d3: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x34b0303; ret; 
0x00000000000e1207: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x35b0303; ret; 
0x00000000000d11a7: cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000d762c: cmp byte ptr [rbx - 0x4f170005], dl; add byte ptr [rax], al; test al, 0x93; sti; jmp qword ptr [rax]; 
0x000000000007f270: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000000b67b1: cmp byte ptr [rcx + 0xdf], 0; je 0xb679c; add rsp, 0x18; ret; 
0x0000000000020cdb: cmp byte ptr [rcx + rcx*4 + 0x63], cl; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d7004: cmp byte ptr [rcx + rdi*8], cl; call qword ptr [rax - 0x79]; 
0x000000000006b50c: cmp byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000008fb16: cmp byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x0000000000021c04: cmp byte ptr [rcx], 0xa; je 0x21c18; cmp rsi, rcx; jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x00000000000d64f0: cmp byte ptr [rcx], al; add byte ptr [rax], bl; mov ah, 0xf4; jmp qword ptr [rax + 0x41]; 
0x00000000000b6890: cmp byte ptr [rdi + rsi + 0xd8], 0; je 0xb6878; add rsp, 8; ret; 
0x00000000000b68f0: cmp byte ptr [rdi + rsi + 0xd8], 0; je 0xb68d4; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x00000000000e28c8: cmp byte ptr [rdi - 4], ch; call qword ptr [rax]; 
0x00000000000d6b80: cmp byte ptr [rdi], ah; add byte ptr [rax], cl; ret 0xfff7; 
0x0000000000063354: cmp byte ptr [rdi], cl; test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x00000000000d6d1c: cmp byte ptr [rdi], dl; clc; jmp qword ptr [rax]; 
0x00000000000371f0: cmp byte ptr [rdi], dl; ret 0x2373; 
0x00000000000371d9: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000371c2: cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000035c7e: cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000366dd: cmp byte ptr [rdi], dl; ret; 
0x00000000000d73f8: cmp byte ptr [rdx - 0x37c80000], ah; cli; call qword ptr [rax - 0x5e]; 
0x00000000000d61b4: cmp byte ptr [rdx], bl; hlt; jmp qword ptr [rax + 0x2a]; 
0x000000000008ee00: cmp byte ptr [rip + 0x25c4c1], 0; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000e1c20: cmp byte ptr [rsi - 0x50540000], bl; sti; jmp qword ptr [rdx]; 
0x00000000000d7514: cmp byte ptr [rsi], dl; sti; call qword ptr [rax - 0x58]; 
0x00000000000376ea: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d7a75: cmp ch, bh; jmp qword ptr [rax - 0x37]; 
0x0000000000027257: cmp ch, cl; movabs dword ptr [0x8b4c001f0ffffffe], eax; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000005bac5: cmp cl, 0xa; je 0x5c08f; add rax, qword ptr [r14 + 0x10]; add r14, 0x18; call rax; 
0x000000000005be18: cmp cl, 0xa; je 0x5c0cf; add rax, qword ptr [r15 + 0x10]; call rax; 
0x000000000009bf8e: cmp cl, 0xff; dec dword ptr [rax + 0x6b]; ret; 
0x000000000006ba5a: cmp cl, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000090995: cmp cl, 9; jbe 0x90980; cmp r8d, eax; je 0x908e6; sub eax, r8d; ret; 
0x00000000000505e5: cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000050064: cmp cl, byte ptr [rax + rdx + 2]; jne 0x50080; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50060; ret; 
0x0000000000050114: cmp cl, byte ptr [rax + rdx + 2]; jne 0x50130; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50110; ret; 
0x00000000000b2582: cmp cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000003a236: cmp cl, byte ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000000d727: cmp cl, ch; ret 0xfffb; 
0x0000000000094015: cmp cx, 0x7fff; je 0x94004; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000b7034: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d9755: cmp dh, ah; jmp rdx; 
0x0000000000049fc1: cmp dh, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000051a3a: cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000b46b5: cmp dil, 0x10; jne 0xb46d8; xor eax, eax; ret; 
0x00000000000b469d: cmp dil, 0x30; jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b7571: cmp dil, 0x30; jne 0xb7580; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b75c1: cmp dil, 0x30; jne 0xb75d0; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b4697: cmp dil, 0x50; je 0xb46bb; cmp dil, 0x30; jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b7580: cmp dil, 0x50; jne 0xb759b; xor eax, eax; ret; 
0x00000000000b75d0: cmp dil, 0x50; jne 0xb75eb; xor eax, eax; ret; 
0x00000000000b7516: cmp dil, 3; jne 0xb7520; ret; 
0x00000000000b7520: cmp dil, 4; jne 0xb7535; mov eax, 8; ret; 
0x00000000000506b6: cmp dl, 0x20; jb 0x506c5; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000000506a3: cmp dl, 0x40; jb 0x506b6; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050981: cmp dl, 1; ja 0x509ac; jb 0x5098d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000050ce1: cmp dl, 1; ja 0x50d21; jb 0x50ced; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000051131: cmp dl, 1; ja 0x51189; jb 0x5113d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000051700: cmp dl, 1; ja 0x5171a; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x000000000005186e: cmp dl, 1; ja 0x5189f; jb 0x51877; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000051a36: cmp dl, 1; ja 0x51a75; jb 0x51a3f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000041f8b: cmp dl, 1; jb 0x41f94; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000506fa: cmp dl, 1; jb 0x50701; mov byte ptr [rdi], cl; ret; 
0x00000000000506ed: cmp dl, 2; jb 0x506fa; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000506e2: cmp dl, 4; jb 0x506ed; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x00000000000506cf: cmp dl, 8; jb 0x506de; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000000b6878: cmp dl, 8; jne 0x8713; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000002d095: cmp dl, al; jne 0x2d080; sub rax, 0x10; ret; 
0x000000000002d094: cmp dl, r8b; jne 0x2d080; sub rax, 0x10; ret; 
0x00000000000b60b0: cmp dword ptr [r15 + 8], 5; ja 0xb60ec; mov eax, dword ptr [r15 + 8]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000000985cb: cmp dword ptr [rax], eax; add byte ptr [rbx - 0x78f0d006], al; and eax, 0x83000039; ret 0xbf08; 
0x000000000003a386: cmp dword ptr [rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000187d9: cmp dword ptr [rax], esi; add byte ptr [rax], al; and edx, 0x7fffffff; mov dword ptr [r8], edx; mov dword ptr [rsi], edx; ret; 
0x0000000000084fce: cmp dword ptr [rbx + 0x26641305], ecx; add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000008c278: cmp dword ptr [rbx + 8], 0x25; jne 0x8c290; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000009f31: cmp dword ptr [rbx + 8], 0x25; mov r14, qword ptr [rbx]; jne 0xa150; call qword ptr [rbx + 0x10]; 
0x0000000000018528: cmp dword ptr [rbx + rcx*4 + 0x59], ecx; sub byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x000000000003e218: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000000b679d: cmp dword ptr [rcx + 0x38], 0; je 0xb680b; add rsp, 0x18; ret; 
0x000000000007f544: cmp dword ptr [rcx], 0xa; je 0x7f558; cmp rcx, rsi; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x0000000000023215: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000b60b1: cmp dword ptr [rdi + 8], 5; ja 0xb60ec; mov eax, dword ptr [r15 + 8]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000005c090: cmp dword ptr [rdx + 6], 0; je 0x5bace; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000005c0d0: cmp dword ptr [rdx + 6], 0; je 0x5be21; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000037903: cmp dword ptr [rdx + 8], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000021c05: cmp dword ptr [rdx], ecx; je 0x21c18; cmp rsi, rcx; jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x000000000007f545: cmp dword ptr [rdx], ecx; je 0x7f558; cmp rcx, rsi; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x000000000009fa54: cmp dword ptr [rip + 0x2474f5], 0; jne 0x9fa5f; pop rbx; ret; 
0x000000000002d007: cmp dword ptr [rip + 0x2bce16], 1; je 0x2d038; test rax, rax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x00000000000b756e: cmp dword ptr [rsi + 0x1f], esi; cmp dil, 0x30; jne 0xb7580; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b75be: cmp dword ptr [rsi + 0x1f], esi; cmp dil, 0x30; jne 0xb75d0; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b737a: cmp dword ptr [rsi + 8], ecx; ja 0xb7381; sbb eax, eax; ret; 
0x0000000000085658: cmp dword ptr [rsi], eax; je 0x85728; xor eax, eax; leave; ret; 
0x000000000003a6c3: cmp dword ptr [rsi], esi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002d9ef: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008f39f: cmp eax, -1; cmove rax, rdx; ret; 
0x00000000000208d8: cmp eax, -1; je 0x20858; mov eax, 0xffffffff; ret; 
0x0000000000020ac8: cmp eax, -1; je 0x20a48; mov eax, 0xffffffff; ret; 
0x000000000007f236: cmp eax, -1; je 0x7f240; pop rbx; pop rbp; pop r12; ret; 
0x000000000000a425: cmp eax, -1; je 0xa4fb; add rsp, 0x98; ret; 
0x0000000000021bbe: cmp eax, -1; jne 0x21b7f; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005aa32: cmp eax, 0x16; ja 0x5aa80; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000005aaa9: cmp eax, 0x17; ja 0x5aa80; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000059d0d: cmp eax, 0x1e; ja 0x59d34; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009fa55: cmp eax, 0x2474f5; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x000000000008ee01: cmp eax, 0x25c4c1; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x000000000006e601: cmp eax, 0x275e1a; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000007c95d: cmp eax, 0x29; ja 0x7c9f0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000002d008: cmp eax, 0x2bce16; add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x000000000001cab2: cmp eax, 0x2ca4e8; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000000c76c: cmp eax, 0x2da7c6; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000008cd9: cmp eax, 0x2de32a; call 0x8600; call 0x8c50; mov byte ptr [rip + 0x2e06d1], 1; pop rbp; ret; 
0x000000000007c326: cmp eax, 0x37; ja 0x7c6e0; lea rcx, [rip + 0x514ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000007cadb: cmp eax, 0x37; ja 0x7ce20; lea rdx, [rip + 0x50f3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000090a99: cmp eax, 0x3e062; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x00000000000850e8: cmp eax, 0x410000; je 0x85118; mov eax, 0x101; syscall; 
0x000000000008d242: cmp eax, 0x418b9; mov eax, 0x15; syscall; 
0x000000000008c4b0: cmp eax, 0x42503; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000007cae7: cmp eax, 0x4800050f; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004dabf: cmp eax, 0x4900070f; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000007ca78: cmp eax, 0x50eef; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000039f70: cmp eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000595ef: cmp eax, 0x660fd; mov eax, 0x15; syscall; 
0x00000000000d14e1: cmp eax, 0x7170d773; mov ebp, 0xfb67d10d; ret; 
0x00000000000d14de: cmp eax, 0x733db8a1; xlatb; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x000000000008027b: cmp eax, 0x788d48ff; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000002375c: cmp eax, 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000059a0f: cmp eax, 0x83482f74; ret; 
0x0000000000059836: cmp eax, 0x83497174; ret; 
0x00000000000943bf: cmp eax, 0x84fffebd; sal byte ptr [rcx + rsi + 0x48], 0x8b; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x0000000000081724: cmp eax, 0x89000001; ret 0x8948; 
0x00000000000ae67f: cmp eax, 0x8b00013b; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000017e0e: cmp eax, 0xa46ba; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x0000000000016179: cmp eax, 0xa5ea2; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000000aff9: cmp eax, 0xa; ja 0xad21; lea rdx, [rip + 0xb0ed7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b0e5: cmp eax, 0xa; ja 0xad4f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000080472: cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e812: cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db22: cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e7e2: cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000080542: cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081df2: cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000000804a2: cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x0000000000055fd7: cmp eax, 0xfffff000; ja 0x56000; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000056518: cmp eax, 0xfffff001; jae 0x56520; ret; 
0x0000000000057628: cmp eax, 0xfffff001; jae 0x57630; ret; 
0x0000000000057658: cmp eax, 0xfffff001; jae 0x57660; ret; 
0x0000000000057688: cmp eax, 0xfffff001; jae 0x57690; ret; 
0x0000000000058d3b: cmp eax, 0xfffff001; jae 0x58d43; ret; 
0x0000000000058d68: cmp eax, 0xfffff001; jae 0x58d70; ret; 
0x0000000000058e38: cmp eax, 0xfffff001; jae 0x58e40; ret; 
0x0000000000058e68: cmp eax, 0xfffff001; jae 0x58e70; ret; 
0x000000000005901b: cmp eax, 0xfffff001; jae 0x59023; ret; 
0x0000000000059048: cmp eax, 0xfffff001; jae 0x59050; ret; 
0x0000000000084e88: cmp eax, 0xfffff001; jae 0x84e90; ret; 
0x00000000000b1d88: cmp eax, 0xfffff001; jae 0xb1d90; ret; 
0x00000000000520b6: cmp eax, 1; je 0x520d0; cmp eax, 2; je 0x520c8; xor eax, eax; ret; 
0x00000000000520bb: cmp eax, 2; je 0x520c8; xor eax, eax; ret; 
0x000000000005918a: cmp eax, 4; je 0x59190; ret; 
0x00000000000d6429: cmp eax, dword ptr [rax]; add al, bl; xchg eax, esi; hlt; jmp qword ptr [rax]; 
0x00000000000090f8: cmp eax, dword ptr [rbp - 0x1c]; jb 0x9096; nop; leave; ret; 
0x00000000000ae680: cmp eax, dword ptr [rcx]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x000000000007f5cd: cmp eax, dword ptr [rdx + 0x18]; jbe 0x7f5f6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000009d59b: cmp eax, dword ptr [rip + 0x24d6cf]; jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000020ef4: cmp eax, eax; jbe 0x20f08; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000009099b: cmp eax, eax; je 0x908e6; sub eax, r8d; ret; 
0x000000000001a373: cmp eax, ecx; jbe 0x1a3e8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000020808: cmp eax, ecx; jbe 0x20820; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000020969: cmp eax, ecx; jbe 0x20a20; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020b91: cmp eax, ecx; jbe 0x20c28; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020d0f: cmp eax, ecx; jbe 0x20d48; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000020d88: cmp eax, ecx; jbe 0x20db0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000021b18: cmp eax, ecx; jbe 0x21b50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000021baf: cmp eax, ecx; jbe 0x21bd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f44d: cmp eax, ecx; jbe 0x7f480; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000005054f: cmp eax, ecx; jle 0x50588; movsxd rax, ecx; ret; 
0x000000000004fd42: cmp eax, ecx; jne 0x4ff50; xor eax, eax; ret; 
0x000000000004feaa: cmp eax, ecx; jne 0x4ff65; xor eax, eax; ret; 
0x000000000004ff63: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000000be5c5: cmp eax, edi; call qword ptr [rax + 0x39]; 
0x00000000000be5c5: cmp eax, edi; call qword ptr [rax + 0x39]; clc; jmp rax; 
0x00000000000be489: cmp eax, edi; call qword ptr [rdx]; 
0x00000000000be3cd: cmp eax, edi; call rax; 
0x00000000000be3cd: cmp eax, edi; call rax; cmp al, bh; jmp qword ptr [rax + 0x38]; 
0x00000000000be3c9: cmp eax, edi; inc dword ptr [rax + 0x39]; clc; call rax; 
0x00000000000be3c9: cmp eax, edi; inc dword ptr [rax + 0x39]; clc; call rax; cmp al, bh; jmp qword ptr [rax + 0x38]; 
0x000000000001dd13: cmp eax, edi; jbe 0x1de18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000006b6a5: cmp eax, edi; jbe 0x6ccc5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006bc4b: cmp eax, edi; jbe 0x6cd59; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000008c5f: cmp eax, edi; je 0x8c78; mov rax, 0; test rax, rax; je 0x8c78; jmp rax; 
0x00000000000be409: cmp eax, edi; jmp qword ptr [rsi]; 
0x00000000000be5c9: cmp eax, edi; jmp rax; 
0x00000000000be40d: cmp eax, edi; push qword ptr [rsi + 0x46fff838]; cmp al, bh; call rsi; 
0x00000000000229ab: cmp eax, edx; jae 0x229d0; movzx eax, byte ptr [rax]; ret; 
0x00000000000590c0: cmp eax, edx; jne 0x590cc; nop; mov eax, 0xca; syscall; 
0x000000000008edc5: cmp eax, edx; jne 0x8eddc; mov byte ptr [rip + 0x25c4f8], 0; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x0000000000020712: cmp eax, esi; jbe 0x20770; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000006c164: cmp eax, esi; jbe 0x6ccdd; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006be20: cmp eax, esi; jbe 0x6cd41; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000077998: cmp eax, esi; jbe 0x78710; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007e668: cmp eax, esi; jbe 0x7e6a0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000007f4e7: cmp eax, esi; jbe 0x7f500; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000005b95a: cmp ebp, 0x25; ja 0x5c0a9; movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x0000000000059126: cmp ebx, 0xa; je 0x5912c; ret; 
0x0000000000094016: cmp ecx, 0xe8747fff; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000059581: cmp ecx, dword ptr [rax + 0x18]; ja 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000595af: cmp ecx, dword ptr [rax + 0x18]; jg 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000005cac2: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000003a18a: cmp ecx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008f3e8: cmp ecx, dword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x00000000000a0351: cmp ecx, dword ptr [rdx + 0x28]; jae 0xa0330; mov eax, 1; ret; 
0x000000000007f7de: cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000036e05: cmp ecx, eax; jne 0x37233; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000368ab: cmp ecx, eax; jne 0x37233; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000000367ff: cmp ecx, eax; jne 0x37233; xor eax, eax; ret; 
0x00000000000368f6: cmp ecx, eax; jne 0x3723f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000036827: cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x0000000000036af8: cmp ecx, eax; jne 0x3724a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000008e178: cmp ecx, eax; jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x00000000000921a8: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000093d12: cmp ecx, ecx; ret; 
0x000000000007f54a: cmp ecx, esi; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x000000000007f0be: cmp edi, dword ptr [rax + 0x18]; jbe 0x7f0eb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000073630: cmp edi, eax; ja 0x73610; mov eax, r9d; ret; 
0x00000000000b8755: cmp edi, eax; je 0xb8770; mov rsi, qword ptr [r13 + r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x0000000000050969: cmp edi, ecx; jb 0x50ad4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050cc4: cmp edi, ecx; jb 0x50e91; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005110f: cmp edi, ecx; jb 0x5134c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050902: cmp edi, edx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000007362f: cmp edi, r8d; ja 0x73610; mov eax, r9d; ret; 
0x0000000000018150: cmp edx, -1; cmove rbx, rax; mov rax, rbx; pop rbx; ret; 
0x0000000000081e5d: cmp edx, 0x1000; lea rdx, [rip - 0x305ba]; cmove rax, rdx; ret; 
0x000000000005165f: cmp edx, 0x20; ja 0x5166f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005160f: cmp edx, 0x20; ja 0x51678; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000018d25: cmp edx, 0x24; jbe 0x18d40; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000019455: cmp edx, 0x24; jbe 0x19470; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000517b7: cmp edx, 0x40; ja 0x517ca; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000051767: cmp edx, 0x40; ja 0x517d3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000051b4d: cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x0000000000017bb3: cmp edx, 3; jne 0x17ae0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007f330: cmp edx, dword ptr [rax + 0x18]; jbe 0x7f354; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000081315: cmp edx, eax; jbe 0x81370; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000081335: cmp edx, eax; jbe 0x81370; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000081355: cmp edx, eax; jbe 0x81370; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000081305: cmp edx, eax; jbe 0x81370; add rax, rdi; vzeroupper; ret; 
0x0000000000051852: cmp edx, ecx; jne 0x51837; vzeroupper; ret; 
0x0000000000051a15: cmp edx, ecx; jne 0x519f2; vzeroupper; ret; 
0x00000000000590aa: cmp edx, edi; setae al; ret; 
0x0000000000016ad9: cmp esi, -1; jne 0x16af8; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000229e9: cmp esi, -1; setne al; neg eax; ret; 
0x000000000005ba34: cmp esi, 0x25; ja 0x5c21a; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x0000000000056a38: cmp esi, 9; jne 0x56a07; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000007e805: cmp esi, dword ptr [rax + 0x18]; jbe 0x7e82e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007e9b5: cmp esi, dword ptr [rax + 0x18]; jbe 0x7e9e2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000084cdb: cmp esi, dword ptr [rcx]; sal byte ptr [rcx], cl; imul al; stosd dword ptr [rdi], eax; sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000050ce5: cmp esi, dword ptr [rdx + 5]; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000d1798: cmp esi, dword ptr [rsi + 0x33]; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000081cb5: cmp esi, eax; jbe 0x81d30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000d2984: cmp esi, ebp; xlatb; ret 0x4e27; 
0x0000000000021c0a: cmp esi, ecx; jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x00000000000d6285: cmp esi, esp; inc dword ptr [rax + 0x2f]; add byte ptr [rax], al; mov byte ptr [rsp + rsi*8], bh; jmp qword ptr [rax + 0x2f]; 
0x00000000000d627d: cmp esi, esp; jmp qword ptr [rax]; 
0x000000000001e09a: cmp esp, edx; jbe 0x1e280; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000d626d: cmp esp, esi; jmp rax; 
0x00000000000b679c: cmp qword ptr [r9 + 0x38], 0; je 0xb680b; add rsp, 0x18; ret; 
0x0000000000023214: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009fa53: cmp qword ptr [rip + 0x2474f5], 0; jne 0x9fa5f; pop rbx; ret; 
0x00000000000b7379: cmp qword ptr [rsi + 8], rcx; ja 0xb7381; sbb eax, eax; ret; 
0x0000000000085657: cmp qword ptr [rsi], rax; je 0x85728; xor eax, eax; leave; ret; 
0x0000000000051130: cmp r10b, 1; ja 0x51189; jb 0x5113d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000059125: cmp r11d, 0xa; je 0x5912c; ret; 
0x000000000001e099: cmp r12, rdx; jbe 0x1e280; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000005ba33: cmp r14, 0x25; ja 0x5c21a; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x00000000000b8754: cmp r15, rax; je 0xb8770; mov rsi, qword ptr [r13 + r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000009099a: cmp r8d, eax; je 0x908e6; sub eax, r8d; ret; 
0x0000000000090994: cmp r9b, 9; jbe 0x90980; cmp r8d, eax; je 0x908e6; sub eax, r8d; ret; 
0x0000000000055fd6: cmp rax, -0x1000; ja 0x56000; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000056517: cmp rax, -0xfff; jae 0x56520; ret; 
0x0000000000057627: cmp rax, -0xfff; jae 0x57630; ret; 
0x0000000000057657: cmp rax, -0xfff; jae 0x57660; ret; 
0x0000000000057687: cmp rax, -0xfff; jae 0x57690; ret; 
0x0000000000058d3a: cmp rax, -0xfff; jae 0x58d43; ret; 
0x0000000000058d67: cmp rax, -0xfff; jae 0x58d70; ret; 
0x0000000000058e37: cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000058e67: cmp rax, -0xfff; jae 0x58e70; ret; 
0x000000000005901a: cmp rax, -0xfff; jae 0x59023; ret; 
0x0000000000059047: cmp rax, -0xfff; jae 0x59050; ret; 
0x0000000000084e87: cmp rax, -0xfff; jae 0x84e90; ret; 
0x00000000000b1d87: cmp rax, -0xfff; jae 0xb1d90; ret; 
0x000000000002d9ee: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008f39e: cmp rax, -1; cmove rax, rdx; ret; 
0x000000000005aa31: cmp rax, 0x16; ja 0x5aa80; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000005aaa8: cmp rax, 0x17; ja 0x5aa80; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000059d0c: cmp rax, 0x1e; ja 0x59d34; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007f5cc: cmp rax, qword ptr [rdx + 0x18]; jbe 0x7f5f6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000009d59a: cmp rax, qword ptr [rip + 0x24d6cf]; jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000020ef3: cmp rax, r8; jbe 0x20f08; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000001a372: cmp rax, rcx; jbe 0x1a3e8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000020807: cmp rax, rcx; jbe 0x20820; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000020968: cmp rax, rcx; jbe 0x20a20; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020b90: cmp rax, rcx; jbe 0x20c28; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020d0e: cmp rax, rcx; jbe 0x20d48; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000020d87: cmp rax, rcx; jbe 0x20db0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000021b17: cmp rax, rcx; jbe 0x21b50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000021bae: cmp rax, rcx; jbe 0x21bd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f44c: cmp rax, rcx; jbe 0x7f480; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000001dd12: cmp rax, rdi; jbe 0x1de18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000006b6a4: cmp rax, rdi; jbe 0x6ccc5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006bc4a: cmp rax, rdi; jbe 0x6cd59; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000008c5e: cmp rax, rdi; je 0x8c78; mov rax, 0; test rax, rax; je 0x8c78; jmp rax; 
0x00000000000229aa: cmp rax, rdx; jae 0x229d0; movzx eax, byte ptr [rax]; ret; 
0x000000000008edc4: cmp rax, rdx; jne 0x8eddc; mov byte ptr [rip + 0x25c4f8], 0; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x0000000000020711: cmp rax, rsi; jbe 0x20770; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000006c163: cmp rax, rsi; jbe 0x6ccdd; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006be1f: cmp rax, rsi; jbe 0x6cd41; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000077997: cmp rax, rsi; jbe 0x78710; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007e667: cmp rax, rsi; jbe 0x7e6a0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000007f4e6: cmp rax, rsi; jbe 0x7f500; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000005b959: cmp rbp, 0x25; ja 0x5c0a9; movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x0000000000059580: cmp rcx, qword ptr [rax + 0x18]; ja 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000595ae: cmp rcx, qword ptr [rax + 0x18]; jg 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000008f3e7: cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x00000000000a0350: cmp rcx, qword ptr [rdx + 0x28]; jae 0xa0330; mov eax, 1; ret; 
0x000000000007f7dd: cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000008e177: cmp rcx, r8; jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000036e04: cmp rcx, rax; jne 0x37233; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000368aa: cmp rcx, rax; jne 0x37233; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000000367fe: cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x00000000000921a7: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000007f549: cmp rcx, rsi; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x000000000007f0bd: cmp rdi, qword ptr [rax + 0x18]; jbe 0x7f0eb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000050968: cmp rdi, r9; jb 0x50ad4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050cc3: cmp rdi, r9; jb 0x50e91; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005110e: cmp rdi, r9; jb 0x5134c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050901: cmp rdi, rdx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005165e: cmp rdx, 0x20; ja 0x5166f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005160e: cmp rdx, 0x20; ja 0x51678; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000517b6: cmp rdx, 0x40; ja 0x517ca; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000051766: cmp rdx, 0x40; ja 0x517d3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000017bb2: cmp rdx, 3; jne 0x17ae0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007f32f: cmp rdx, qword ptr [rax + 0x18]; jbe 0x7f354; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000081314: cmp rdx, rax; jbe 0x81370; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000081334: cmp rdx, rax; jbe 0x81370; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000081354: cmp rdx, rax; jbe 0x81370; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000081304: cmp rdx, rax; jbe 0x81370; add rax, rdi; vzeroupper; ret; 
0x0000000000051851: cmp rdx, rcx; jne 0x51837; vzeroupper; ret; 
0x0000000000051a14: cmp rdx, rcx; jne 0x519f2; vzeroupper; ret; 
0x00000000000590a9: cmp rdx, rdi; setae al; ret; 
0x0000000000016ad8: cmp rsi, -1; jne 0x16af8; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000007e804: cmp rsi, qword ptr [rax + 0x18]; jbe 0x7e82e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007e9b4: cmp rsi, qword ptr [rax + 0x18]; jbe 0x7e9e2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000081cb4: cmp rsi, rax; jbe 0x81d30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000021c09: cmp rsi, rcx; jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x0000000000049fc0: cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000005c08f: cmp word ptr [rdx + 6], 0; je 0x5bace; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000005c0cf: cmp word ptr [rdx + 6], 0; je 0x5be21; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000000856dd: cmp word ptr [rsi + 0x14], 0x2f75; jne 0x8560d; mov eax, 1; leave; ret; 
0x00000000000b0857: cmpsb byte ptr [rsi], byte ptr [rdi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b0b57: cmpsb byte ptr [rsi], byte ptr [rdi]; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003cd16: cmpsb byte ptr [rsi], byte ptr [rdi]; adc dword ptr [rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b1a57: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003dc16: cmpsb byte ptr [rsi], byte ptr [rdi]; add cl, byte ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d916: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b1757: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x83480000; ret 0x4910; 
0x00000000000baed6: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x8b480000; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x0000000000036c89: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x00000000000bc0e9: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000000bc141: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; dec dword ptr [rax + 0x45fff5a5]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp qword ptr [rcx]; 
0x00000000000bc149: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp qword ptr [rcx]; 
0x00000000000bc0e5: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; ljmp [rbx]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x000000000003df16: cmpsb byte ptr [rsi], byte ptr [rdi]; inc dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000047976: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b1457: cmpsb byte ptr [rsi], byte ptr [rdi]; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003d616: cmpsb byte ptr [rsi], byte ptr [rdi]; or byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b1157: cmpsb byte ptr [rsi], byte ptr [rdi]; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003d316: cmpsb byte ptr [rsi], byte ptr [rdi]; or ecx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000903b6: cmpsb byte ptr [rsi], byte ptr [rdi]; rol dword ptr [rax], cl; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000000875c: cmpsb byte ptr [rsi], byte ptr [rdi]; seta dl; sbb dl, 0; test dl, dl; jne 0x8768; ret; 
0x00000000000be42c: cmpsb byte ptr [rsi], byte ptr [rdi]; xor eax, 0x3536fff8; clc; inc esi; xor al, 0xf8; call qword ptr [rsi + 0x34]; 
0x00000000000e25d9: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; je 0xe261e; cld; call qword ptr [rbx]; 
0x000000000008c4b8: cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, rdi; jmp rax; 
0x00000000000be9e1: cmpsd dword ptr [rsi], dword ptr [rdi]; clc; inc eax; test al, 0xf8; call qword ptr [rax]; 
0x00000000000bdca9: cmpsd dword ptr [rsi], dword ptr [rdi]; idiv edi; jo 0xbdc56; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x0000000000000c88: cmpsd dword ptr [rsi], dword ptr [rdi]; ret 6; 
0x000000000003af55: cmpsd dword ptr [rsi], dword ptr [rdi]; sub eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000000c76e: cmpsd dword ptr [rsi], dword ptr [rdi]; sub eax, 0x89480000; ret; 
0x00000000000d34d5: cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000000b4720: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000002429c: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000b47a3: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xa472; 
0x000000000001affb: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000000bb77c: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000000bae8c: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000000e1691: cwde; add byte ptr [rax], al; jl 0xe169c; sti; call qword ptr [rdi + 1]; 
0x00000000000d66f0: cwde; add byte ptr [rax], al; or cl, ch; hlt; jmp qword ptr [rax]; 
0x00000000000b6380: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000862d4: cwde; and bh, al; dec dword ptr [rax + 0x39]; ret; 
0x00000000000d6f6d: cwde; clc; call qword ptr [rax]; 
0x00000000000d72cd: cwde; cli; call rax; 
0x00000000000d72d5: cwde; cli; jmp rsp; 
0x00000000000d626c: cwde; cmp esp, esi; jmp rax; 
0x00000000000bdcc1: cwde; idiv edi; rcr byte ptr [rbx - 0x62ef0009], 0xf7; jmp qword ptr [rax - 0x62]; 
0x00000000000d5a9c: cwde; in eax, dx; std; push qword ptr [rax - 0x12]; std; call qword ptr [rax - 0xb]; 
0x00000000000d67f4: cwde; je 0xd67ec; jmp qword ptr [rax]; 
0x00000000000bb44b: cwde; jmp qword ptr [rdx]; 
0x00000000000d787c: cwde; jo 0xd787b; call qword ptr [rax]; 
0x000000000006e5fa: cwde; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000006ec9c: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275778]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e644: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275dd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000006e5a9: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e958: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e90a: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e85b: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e7ff: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e55f: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e511: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0b0: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000d62e4: cwde; push rdi; hlt; call rax; 
0x00000000000d7574: cwde; push rdx; sti; call qword ptr [rax]; 
0x00000000000d7940: cwde; ret 0; 
0x0000000000000c28: cwde; ret 6; 
0x000000000007fb94: cwde; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000da780: cwde; sub dword ptr [rax], eax; add byte ptr [rbx + rcx*4], cl; hlt; call qword ptr [rbx]; 
0x00000000000d61e0: cwde; sub eax, dword ptr [rax]; add al, bl; and ah, dh; jmp rax; 
0x00000000000d7cbc: cwde; sub edi, esi; call rax; 
0x000000000004bc61: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x000000000004bc62: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x0000000000042502: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000051225: dec byte ptr [rax + 0x7f]; je 0x51241; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000051403: dec byte ptr [rax + 0x7f]; jg 0x5140b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000000515a9: dec byte ptr [rax + 0x7f]; jg 0x515b1; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000005122d: dec byte ptr [rax + 0x7f]; jl 0x51249; cld; vzeroupper; ret; 
0x0000000000051336: dec byte ptr [rax + 0x7f]; jns 0x51339; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000000514cf: dec byte ptr [rax + 0x7f]; jns 0x514d2; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000005133d: dec byte ptr [rax + 0x7f]; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000006b469: dec byte ptr [rax - 0x75]; mov ebp, 0xfffff758; call rax; 
0x00000000000907ef: dec byte ptr [rax - 0x77]; fisttp word ptr [rax - 0x77]; ret 0x75e8; 
0x0000000000080390: dec byte ptr [rax - 0x77]; ret; 
0x000000000009078d: dec byte ptr [rax - 0x7d]; ret; 
0x00000000000578d2: dec byte ptr [rbx + rcx*4 + 0x5f]; or byte ptr [rcx - 0xa], al; ret; 
0x0000000000017636: dec byte ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x00000000000171e7: dec byte ptr [rcx + rcx*4 - 0x11]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000007284c: dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000056a39: dec byte ptr [rcx]; jne 0x56a07; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000000509b0: dec byte ptr [rdi]; mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000000c091: dec byte ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000064aa3: dec dword ptr [r8 - 0x7d]; ret 0x8801; 
0x00000000000d5ec3: dec dword ptr [rax + 0x10fffe02]; add bh, dh; dec dword ptr [rax]; add edi, esi; jmp qword ptr [rax + 0x17]; 
0x000000000006b506: dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x000000000004bda2: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x00000000000924b1: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x00000000000925f1: dec dword ptr [rax + 0x29]; ret 0x894c; 
0x00000000000288f5: dec dword ptr [rax + 0x29]; ret 0x8d4c; 
0x000000000001b19d: dec dword ptr [rax + 0x29]; ret; 
0x0000000000076a20: dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000000814b7: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000007c8d2: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000001d29d: dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000000800d3: dec dword ptr [rax + 0x39]; ret; 
0x00000000000bc143: dec dword ptr [rax + 0x45fff5a5]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp qword ptr [rcx]; 
0x0000000000026c6f: dec dword ptr [rax + 0x48282454]; mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000000941ae: dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x000000000006ccb2: dec dword ptr [rax + 0x63]; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000009bf91: dec dword ptr [rax + 0x6b]; ret; 
0x00000000000d6fb7: dec dword ptr [rax + 0x78000084]; idiv eax; jmp qword ptr [rax]; 
0x000000000007c652: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x00000000000816b9: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x0000000000068fab: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000098b58: dec dword ptr [rax + 1]; ret 0x348; 
0x00000000000804e1: dec dword ptr [rax + 1]; ret; 
0x00000000000d6667: dec dword ptr [rax + rcx*2]; add byte ptr [rax], al; or bl, dl; hlt; jmp qword ptr [rax]; 
0x00000000000d62ff: dec dword ptr [rax - 0x17ffffcd]; pop rbp; hlt; jmp rax; 
0x00000000000ba57b: dec dword ptr [rax - 0x39]; add eax, 0x230511; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000b9702: dec dword ptr [rax - 0x39]; add eax, 0x230762; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000b9cf6: dec dword ptr [rax - 0x39]; add eax, 0x230c66; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000091507: dec dword ptr [rax - 0x39]; add eax, 0x259625; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000005649f: dec dword ptr [rax - 0x39]; ret 0; 
0x0000000000056444: dec dword ptr [rax - 0x39]; ret 0x8000; 
0x00000000000563b7: dec dword ptr [rax - 0x39]; ret 0xff80; 
0x0000000000076166: dec dword ptr [rax - 0x39]; ret 0xff88; 
0x0000000000056735: dec dword ptr [rax - 0x39]; ret 0xffa8; 
0x000000000005630c: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000000bf53: dec dword ptr [rax - 0x39]; ret; 
0x000000000009ddd1: dec dword ptr [rax - 0x39]; sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000000564cf: dec dword ptr [rax - 0x39]; shr byte ptr [rax + 0x48ffffff], 0xc7; ret 0xffff; 
0x000000000001866c: dec dword ptr [rax - 0x39]; shr byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000d6207: dec dword ptr [rax - 0x47ffffd4]; and al, 0xf4; lcall [rsp + rbp + 0x27480000]; hlt; call rax; 
0x0000000000094bf3: dec dword ptr [rax - 0x73]; adc eax, 0x3ed29; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b1ce: dec dword ptr [rax - 0x73]; adc eax, 0xb0d62; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b001: dec dword ptr [rax - 0x73]; adc eax, 0xb0ed7; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000ae7d: dec dword ptr [rax - 0x73]; adc eax, 0xb102f; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000649b4: dec dword ptr [rax - 0x73]; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000002e3fd: dec dword ptr [rax - 0x73]; add eax, 0x21b7b; cmove rax, rdx; ret; 
0x000000000007c7a3: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000008f5c5: dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x0000000000028d48: dec dword ptr [rax - 0x73]; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000000b595d: dec dword ptr [rax - 0x75]; add byte ptr [rcx + 1], cl; ret 0xef89; 
0x0000000000093d03: dec dword ptr [rax - 0x75]; clc; xor rax, qword ptr fs:[0x28]; jne 0x93d4e; leave; ret; 
0x000000000001a8cf: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000005d25c: dec dword ptr [rax - 0x75]; jne 0x5d1f1; call rsi; 
0x00000000000bb777: dec dword ptr [rax - 0x75]; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000007697b: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000006bc5c: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000001de21: dec dword ptr [rax - 0x75]; push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000002082c: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000006df97: dec dword ptr [rax - 0x75]; xchg eax, ebp; call 0x4906df9a; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000000667d8: dec dword ptr [rax - 0x75]; xchg eax, ebp; push 0x4cffffff; mov edi, esi; call rdx; 
0x000000000009172c: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000029a04: dec dword ptr [rax - 0x77]; add eax, 0x2bde34; ret; 
0x00000000000299f6: dec dword ptr [rax - 0x77]; add eax, 0x2bde4a; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x00000000000b3b57: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000026d2d: dec dword ptr [rax - 0x77]; bnd jmp 0x26b3e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000008ef41: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000096a28: dec dword ptr [rax - 0x77]; fimul dword ptr [rax + 0x29]; ret 0x8b48; 
0x0000000000078f59: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x000000000006d6fe: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x0000000000026d35: dec dword ptr [rax - 0x77]; push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000007b4e6: dec dword ptr [rax - 0x77]; ret 0x11e8; 
0x000000000008526e: dec dword ptr [rax - 0x77]; ret 0x1477; 
0x00000000000291ef: dec dword ptr [rax - 0x77]; ret 0x2948; 
0x00000000000851cd: dec dword ptr [rax - 0x77]; ret 0x7577; 
0x000000000009bfe8: dec dword ptr [rax - 0x77]; ret 0x840f; 
0x000000000009c1b8: dec dword ptr [rax - 0x77]; ret 0x850f; 
0x0000000000028f6c: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000002d967: dec dword ptr [rax - 0x77]; ret 0x854d; 
0x0000000000016cf2: dec dword ptr [rax - 0x77]; ret 0x870f; 
0x000000000007b178: dec dword ptr [rax - 0x77]; ret 0x8b44; 
0x00000000000561f3: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000008815c: dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x00000000000575e5: dec dword ptr [rax - 0x77]; ret 0xa076; 
0x0000000000056391: dec dword ptr [rax - 0x77]; ret 0xa0e9; 
0x000000000008c777: dec dword ptr [rax - 0x77]; ret 0xb0e8; 
0x00000000000649cd: dec dword ptr [rax - 0x77]; ret 0xb2eb; 
0x000000000005637d: dec dword ptr [rax - 0x77]; ret 0xb4e9; 
0x0000000000079289: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000008577c: dec dword ptr [rax - 0x77]; ret 0xefeb; 
0x000000000007d5ea: dec dword ptr [rax - 0x77]; ret 0xf41; 
0x000000000000e73f: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x0000000000083d10: dec dword ptr [rax - 0x77]; ret 0xfe9; 
0x000000000000a9bd: dec dword ptr [rax - 0x77]; ret; 
0x00000000000a1761: dec dword ptr [rax - 0x77]; sbb cl, ch; idiv dil; jmp qword ptr [rsi + 0xf]; 
0x00000000000b97c2: dec dword ptr [rax - 0x7b]; fisttp dword ptr [rax - 0x77]; fidiv dword ptr [rbp - 0x13]; pop rbx; ret; 
0x0000000000075fce: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 5; call qword ptr [rbp + 0x27]; 
0x00000000000853c6: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a4e68: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0xfffe; 
0x00000000000b852b: dec dword ptr [rax - 0x7b]; sal byte ptr [rdi + rbx*8 + 0x48], 0x89; ret; 
0x000000000009cdbf: dec dword ptr [rax - 0x7b]; sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x24bd94; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009d06e: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000009f83c: dec dword ptr [rax - 0x7d]; call 0x7c954045; ret; 
0x000000000009bfe4: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x000000000009c1b4: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret 0x850f; 
0x0000000000077173: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000006412a: dec dword ptr [rax - 0x7d]; jl 0x64153; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x00000000000627d1: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000060ebb: dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x000000000000ec8b: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000064aa4: dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000000b78f7: dec dword ptr [rax - 0x7d]; ret 0xe902; 
0x000000000000d68f: dec dword ptr [rax - 0x7d]; ret; 
0x00000000000675a8: dec dword ptr [rax - 0x7d]; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000003e21c: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000058670: dec dword ptr [rax - 0x7f]; ret; 
0x0000000000086a07: dec dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x00000000000d79af: dec dword ptr [rax*8 - 0x29f80000]; cld; jmp qword ptr [rax]; 
0x00000000000d5ecb: dec dword ptr [rax]; add edi, esi; jmp qword ptr [rax + 0x17]; 
0x00000000000d6caf: dec dword ptr [rax]; outsd dx, dword ptr [rsi]; add byte ptr [rax], al; js 0xd6cc0; clc; jmp qword ptr [rax]; 
0x00000000000d6887: dec dword ptr [rax]; pop rsi; add byte ptr [rax], al; js 0xd6815; cmc; jmp qword ptr [rax]; 
0x00000000000d794f: dec dword ptr [rax]; ret; 
0x00000000000d5a93: dec dword ptr [rax]; sub eax, 0x2d08fff3; lcall [rax + 0x70fffded]; out dx, al; std; call qword ptr [rax - 0xb]; 
0x00000000000d5a97: dec dword ptr [rax]; sub eax, 0xed98fff3; std; push qword ptr [rax - 0x12]; std; call qword ptr [rax - 0xb]; 
0x00000000000beb6b: dec dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x00000000000d622f: dec dword ptr [rbp + 0x28f80000]; hlt; jmp qword ptr [rax]; 
0x000000000006d9db: dec dword ptr [rbp + 0x29]; fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000006f3d4: dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x00000000000bf267: dec dword ptr [rbp + 0x73]; stc; call rcx; 
0x00000000000bf267: dec dword ptr [rbp + 0x73]; stc; call rcx; jno 0xbf268; jmp rsp; 
0x000000000008c5a6: dec dword ptr [rbp + rcx*4 + 0x2d]; ret 0x422; 
0x000000000000e88b: dec dword ptr [rbp - 0x73]; je 0xe896; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000000c467: dec dword ptr [rbp - 0x75]; push rsp; ret 0x4820; 
0x00000000000755fd: dec dword ptr [rbp - 0x77]; ret 0x894c; 
0x000000000006a416: dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x00000000000d5e7b: dec dword ptr [rbp - 2]; std; call qword ptr [rdi - 1]; 
0x00000000000d5e7b: dec dword ptr [rbp - 2]; std; call qword ptr [rdi - 1]; std; jmp qword ptr [rdx - 1]; 
0x00000000000d5e77: dec dword ptr [rbp - 2]; std; dec dword ptr [rbp - 2]; std; call qword ptr [rdi - 1]; 
0x0000000000009d04: dec dword ptr [rbx + 0x2e0bd115]; add bh, dh; ret 0; 
0x000000000002cfdd: dec dword ptr [rbx + 0x90c2454]; ret 0xbae9; 
0x0000000000072b21: dec dword ptr [rbx - 0x1237b]; inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000007f488: dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000007b075: dec dword ptr [rbx - 0x177cefbe]; xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x000000000007ea1b: dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000095081: dec dword ptr [rbx - 0x5ff7b]; inc dword ptr [rcx - 0x77]; ret 0x8341; 
0x000000000006f32f: dec dword ptr [rcx + 0x39]; ret 0x850f; 
0x000000000008be19: dec dword ptr [rcx + 0x39]; ret 0x860f; 
0x000000000006dc13: dec dword ptr [rcx + 0x39]; ret; 
0x000000000009cca4: dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000000b4776: dec dword ptr [rcx + 0x63]; add al, 0x87; add rax, r15; jmp rax; 
0x0000000000078617: dec dword ptr [rcx + 0x63]; ret 0x8545; 
0x0000000000078a95: dec dword ptr [rcx + 0x63]; ret; 
0x000000000000b0ed: dec dword ptr [rcx + 0x63]; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000051b72: dec dword ptr [rcx + 0x6e8c1c8]; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000081e3c: dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000008c095: dec dword ptr [rcx + rax - 0x28]; call rax; 
0x0000000000078d02: dec dword ptr [rcx + rbp - 0x1f]; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000000940dd: dec dword ptr [rcx + rcx*4 + 0x4f]; or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000038eae: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000009413c: dec dword ptr [rcx + rcx*4 + 7]; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000077677: dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x000000000007766d: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000006d499: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000076971: dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000007a398: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000000793ca: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007a515: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007a3a2: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rax + 0x38]; 
0x00000000000793d7: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rcx + 0x38]; 
0x000000000005d259: dec dword ptr [rcx + rcx*4 - 1]; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000006b466: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000000b8889: dec dword ptr [rcx + rcx*4 - 6]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x000000000006d905: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000066501: dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000000667df: dec dword ptr [rcx + rcx*4 - 9]; call rdx; 
0x000000000006b2c6: dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x00000000000a0f75: dec dword ptr [rcx - 0x39]; ret; 
0x0000000000078d0f: dec dword ptr [rcx - 0x3f]; inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000007996e: dec dword ptr [rcx - 0x4e773]; ljmp [rcx]; ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x0000000000095358: dec dword ptr [rcx - 0x61f43]; dec dword ptr [rax + 0x39]; ret; 
0x000000000000b838: dec dword ptr [rcx - 0x73]; mov esp, 0x8024; add al, ch; ret 0xffcd; 
0x0000000000063562: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000000174af: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000017354: dec dword ptr [rcx - 0x75]; add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x000000000008c160: dec dword ptr [rcx - 0x77]; ret 0x13e9; 
0x000000000000d6d1: dec dword ptr [rcx - 0x77]; ret 0x149; 
0x000000000008cb00: dec dword ptr [rcx - 0x77]; ret 0x9be9; 
0x00000000000785e4: dec dword ptr [rcx - 0x77]; ret 0xff31; 
0x000000000006db77: dec dword ptr [rcx - 0x77]; ret; 
0x00000000000264e6: dec dword ptr [rcx - 0x7b]; ret; 
0x000000000006d97f: dec dword ptr [rcx - 0x7d]; ret; 
0x00000000000d5e57: dec dword ptr [rcx]; add bh, dh; dec dword ptr [rcx]; add bh, dh; jmp rax; 
0x00000000000d5e5b: dec dword ptr [rcx]; add bh, dh; jmp rax; 
0x000000000006de7b: dec dword ptr [rdi + rcx + 0x48]; ret 0x958b; 
0x0000000000095b4f: dec dword ptr [rdi]; lahf; ret 0xd729; 
0x0000000000020920: dec dword ptr [rdi]; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006f1e0: dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000000613bf: dec dword ptr [rdi]; test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x0000000000035bb6: dec dword ptr [rdi]; test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x00000000000559da: dec dword ptr [rdi]; test dword ptr [rcx + rax], edx; add byte ptr [rbp + 0x31], al; inc dword ptr [rbp + 0x31]; imul bl; ret 0x8b48; 
0x000000000004fdf0: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000006d15f: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000007b7e6: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000008d25a: dec dword ptr [rdi]; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002b56c: dec dword ptr [rdi]; xchg eax, ebp; ret 0xd020; 
0x00000000000229eb: dec dword ptr [rdi]; xchg eax, ebp; sal bh, 0xd8; ret; 
0x000000000007fe4e: dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x0000000000074c95: dec dword ptr [rdi]; xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000949b6: dec dword ptr [rdx + 0x63]; add al, 0xa2; add rax, rdx; jmp rax; 
0x00000000000d61af: dec dword ptr [rdx + rbp]; add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x00000000000c117f: dec dword ptr [rsi*2 + 0x74fcfffa]; cli; jmp rsp; 
0x00000000000bf1ef: dec dword ptr [rsi]; jb 0xbf1ec; jmp rsp; 
0x00000000000d6e17: dec eax; jbe 0xd6e1b; add byte ptr [rax + 0x34], bl; clc; jmp rax; 
0x00000000000d7057: dec eax; mov dword ptr [rax], eax; add byte ptr [rax + 0x2e], cl; stc; jmp rax; 
0x00000000000d78cf: dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x00000000000d7497: dec eax; movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; test al, 0xef; cli; jmp rax; 
0x00000000000d68c7: dec eax; pop rsi; add byte ptr [rax], al; mov dl, cl; cmc; jmp rax; 
0x00000000000d5f37: dec eax; xor esi, edi; jmp qword ptr [rax + 0x31]; 
0x00000000000d711f: dec esp; mov es, word ptr [rax]; add byte ptr [rax], cl; xlatb; stc; jmp rax; 
0x000000000004bda1: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x00000000000814b6: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000000d8bd9: div bl; jmp qword ptr [rdx]; 
0x0000000000093f44: div byte ptr [rbp + 0x29]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000818a2: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000094012: div byte ptr [rbp - 0x11]; cmp cx, 0x7fff; je 0x94004; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000008e1c5: div byte ptr [rbx + rax + 0x48]; mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x0000000000073646: div eax; add r9d, eax; mov eax, r9d; ret; 
0x0000000000051c28: div ecx; mov eax, eax; ret; 
0x0000000000051c0f: div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000d671d: div esp; jmp rsp; 
0x0000000000073645: div r8d; add r9d, eax; mov eax, r9d; ret; 
0x00000000000b451d: divps xmm0, xmmword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000b451c: divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000bbebc: f2xm1; hlt; call rax; 
0x000000000009c983: fabs; and al, 0; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x00000000000b68f3: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx + rbx*8 + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x00000000000b6893: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rsi + rbx*8 + 0x48], dh; add esp, 8; ret; 
0x000000000001ccb0: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000001a038: fadd dword ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000019996: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000040b77: fadd dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000dc4c0: fadd dword ptr [rsi]; add byte ptr [rsp + rdx*2 - 9], ch; call qword ptr [rcx + 1]; 
0x00000000000218d4: fadd dword ptr [rsp + rbp - 0x7c0f7700]; ret 0x2501; 
0x0000000000073633: fadd qword ptr [rcx + rcx*4 - 0x38]; ret; 
0x000000000004e5b0: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x4e570; lea rax, [rdi + 7]; ret; 
0x00000000000406f7: fadd qword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000036881: fbld tbyte ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b9534: fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003687f: fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000005387e: fcmovb st(0), st(1); cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000004a66b: fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000006c346: fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x00000000000d7aec: fcom st(4); std; jmp qword ptr [rax]; 
0x00000000000ce9a0: fcom st(4); sti; jmp rax; 
0x00000000000bdd25: fcomi st(7); call qword ptr [rax + 0x70fff7dd]; fcomip st(7); call qword ptr [rax - 0x1f]; 
0x00000000000bdd65: fcomi st(7); call qword ptr [rax - 0x23]; 
0x00000000000bdd85: fcomi st(7); jmp qword ptr [rax]; 
0x00000000000bdda5: fcomi st(7); push rax; fdivr st(7), st(0); call rax; 
0x00000000000bdd2d: fcomip st(7); call qword ptr [rax - 0x1f]; 
0x00000000000bdd6d: fcomip st(7); call qword ptr [rax]; 
0x00000000000bdd0d: fcomip st(7); jmp qword ptr [rax - 0x1f]; 
0x00000000000bdd8d: fcomip st(7); jmp rax; 
0x00000000000bdd4d: fcomip st(7); push qword ptr [rax]; loope 0xbdd4a; jmp qword ptr [rax]; 
0x000000000001e993: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000001e8c6: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000057401: fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000000d61dc: fcomp dword ptr [rdi]; hlt; lcall [rax - 0x27ffffd5]; and ah, dh; jmp rax; 
0x00000000000d34f9: fcomp dword ptr [rdx + 0x21]; ret; 
0x00000000000594b9: fcomp dword ptr [rdx + 0x5b]; ret; 
0x000000000009d0e7: fdecstp; jmp qword ptr [rsi + 0xf]; 
0x00000000000a96a8: fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000000a978f: fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000092084: fdiv dword ptr [rbp + 0x1e]; add rsp, 0x110; pop rbx; ret; 
0x0000000000036d4f: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036b4f: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006fb63: fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000007b454: fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x00000000000bdde1: fdiv st(7); call qword ptr [rax + 0x70fff7da]; fdivr st(7), st(0); call qword ptr [rax - 0x22]; 
0x00000000000bde01: fdiv st(7); call qword ptr [rax - 0x26]; 
0x00000000000e0f81: fdivp st(2); jmp qword ptr [rdx]; 
0x00000000000d77d5: fdivp st(3); call rax; 
0x0000000000028f6a: fdivp st(7); dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000d6554: fdivr dword ptr [rsp + rsi*8 + 0x42e0ff]; add byte ptr [rax + 0x4cfff4bf], ch; add byte ptr [r8], al; pop rax; ret 0xfff4; 
0x00000000000df9c4: fdivr qword ptr [rbx]; add al, cl; cld; stc; jmp qword ptr [rdx]; 
0x00000000000da9a5: fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000b1d6b: fdivr st(3), st(0); ret; 
0x00000000000d0ab5: fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x00000000000bdde9: fdivr st(7), st(0); call qword ptr [rax - 0x22]; 
0x00000000000bdda9: fdivr st(7), st(0); call rax; 
0x00000000000b9141: fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000007b7ef: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000004ff68: fdivr st(7); ret; 
0x00000000000b8f9b: fdivrp st(5); jmp qword ptr [rsi - 0x70]; 
0x000000000004e712: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x4e800; lea rax, [rdi + 0xf]; ret; 
0x0000000000008761: fiadd dword ptr [rax]; test dl, dl; jne 0x8768; ret; 
0x0000000000019228: fiadd dword ptr [rbp + 0x450f48c9]; ret 0x8348; 
0x00000000000407b9: fiadd word ptr [r15]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001c6ea: fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x000000000008118e: fiadd word ptr [rcx]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000001e09e: fiadd word ptr [rcx]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000040577: fiadd word ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d39d0: ficomp dword ptr [rsp + rdi*8]; call qword ptr [rsi + 0x28]; 
0x00000000000d3346: ficomp word ptr [rdx - 0x19]; cmc; mov ch, 0xab; ret; 
0x00000000000b97c8: fidiv dword ptr [rbp - 0x13]; pop rbx; ret; 
0x0000000000036c4f: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003694f: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a0355: fidivr dword ptr [rax + 1]; ret; 
0x0000000000040ab9: fild dword ptr [r15]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008fd77: fild dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000040877: fild dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000000a32c: fild dword ptr [rip - 0x16edffd2]; ret; 
0x000000000006f8a2: fild dword ptr [rip - 0x2e191800]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000b96c1: fild dword ptr [rsi]; and eax, dword ptr [rax]; jne 0xb96a8; pop rbx; ret; 
0x00000000000b67b3: fild word ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x0000000000072422: fild word ptr [rbp - 0x77]; ret 0x8b4c; 
0x00000000000664f8: fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff449ee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000000403f7: fild word ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000023e8c: fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000063569: fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000096a2b: fimul dword ptr [rax + 0x29]; ret 0x8b48; 
0x00000000000907e7: fimul dword ptr [rax + 0x39]; ret 0x7472; 
0x0000000000072fbd: fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x00000000000a1cf4: fimul dword ptr [rax + 0x39]; ret 0xf48; 
0x0000000000024f8d: fimul dword ptr [rax + 0x39]; ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x00000000000505a5: fimul dword ptr [rax + 0x63]; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000081a55: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000082715: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000034416: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000007993d: fimul dword ptr [rax - 0x3f]; clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x00000000000b68f9: fimul dword ptr [rax - 0x77]; adc al, 0xf7; add rsp, 8; ret; 
0x0000000000017ca7: fimul dword ptr [rax - 9]; ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648ec8b8; ret; 
0x000000000006be2a: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000038f31: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000005eeff: fimul word ptr [rax + 1]; ret; 
0x00000000000b60eb: fimul word ptr [rax - 0x7d]; ret; 
0x00000000000747da: fimul word ptr [rbp + rax + 0x358d4c00]; ret 0x58c; 
0x0000000000038f32: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000006d9e1: fimul word ptr [rcx + rcx*4 - 9]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000000bdda1: fincstp; call qword ptr [rax]; 
0x00000000000bdda1: fincstp; call qword ptr [rax]; fcomi st(7); push rax; fdivr st(7), st(0); call rax; 
0x00000000000bddc1: fincstp; call rax; 
0x0000000000058dcf: fistp qword ptr [rax + 0x2b]; syscall; 
0x0000000000058fa6: fistp qword ptr [rax + 0x2c]; syscall; 
0x0000000000058ee6: fistp qword ptr [rax + 0x2d]; syscall; 
0x0000000000055c02: fistp qword ptr [rax + 0x3d]; syscall; 
0x00000000000568ff: fistp qword ptr [rax + 1]; syscall; 
0x000000000001b6f7: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000000208ce: fistp word ptr [rbx + 0x5d]; jmp rax; 
0x000000000007e6f0: fistp word ptr [rbx + 0x5d]; pop r12; jmp rax; 
0x00000000000b43ba: fisttp dword ptr [rax + 9]; ror dword ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000000b9531: fisttp dword ptr [rax - 0x77]; fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000066b37: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000b97c5: fisttp dword ptr [rax - 0x77]; fidiv dword ptr [rbp - 0x13]; pop rbx; ret; 
0x0000000000092e41: fisttp dword ptr [rax - 0x77]; ret; 
0x00000000000b96bd: fisttp dword ptr [rax - 0x77]; sbb eax, 0x2306db; jne 0xb96a8; pop rbx; ret; 
0x0000000000073e0c: fisttp dword ptr [rax - 0x7b]; rol byte ptr [rcx + 0xf], 0x94; ret; 
0x000000000008efb6: fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000074ab8: fisttp dword ptr [rax - 0x7d]; jl 0x74ae1; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x00000000000b5b20: fisttp dword ptr [rbx + 0x63]; add al, 0x99; add rax, r9; jmp rax; 
0x0000000000092e5b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000096831: fisttp dword ptr [rcx - 0x77]; ret; 
0x0000000000063247: fisttp dword ptr [rcx - 0x7d]; ret; 
0x00000000000b78bd: fisttp dword ptr [rdi]; mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000002b15b: fisttp dword ptr [rdi]; xchg eax, ebp; ret 0xd020; 
0x000000000008d0d4: fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000039111: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000002e30a: fisttp qword ptr [rax + 0x29]; ret; 
0x000000000000ecae: fisttp qword ptr [rax - 0x7d]; ret 0x4401; 
0x00000000000504a2: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000039112: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038d61: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e5d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038da9: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000576f0: fisttp word ptr [rax - 0x77]; call 0x5c46d453; mov esi, 2; jmp rax; 
0x00000000000907f2: fisttp word ptr [rax - 0x77]; ret 0x75e8; 
0x00000000000b8530: fisttp word ptr [rax - 0x77]; ret; 
0x000000000000a803: fisttp word ptr [rax - 0x7d]; ret; 
0x0000000000092edf: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000056bbd: fisttp word ptr [rcx + 0x3b8c2]; add byte ptr [rax], al; syscall; 
0x00000000000574ed: fisttp word ptr [rcx + 0x4ab8c2]; add byte ptr [rax], al; syscall; 
0x0000000000038d62: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e5e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038daa: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000006d9de: fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000048cad: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000036c51: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000004e54f: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000036951: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000005388f: fisubr dword ptr [rcx]; ret 0x428d; 
0x000000000004e591: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000000299fb: fisubr word ptr [rbx]; add byte ptr [rax - 0x73], cl; add eax, 0xfffff57b; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x00000000000947fb: fld dword ptr [rax - 0x78f0dd07]; ret; 
0x00000000000409f7: fld dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000093154: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x000000000000bcfc: fld qword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x000000000005ba39: fld qword ptr [rdi]; add byte ptr [rax], al; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x00000000000d17a1: fld qword ptr [rsi + 0x32]; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000049adf: fld qword ptr [rsi + 0xc8b0007]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000816f2: fld st(5); std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000000a94ae: fld xword ptr [rsp - 0x18]; ret; 
0x00000000000d34d1: fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000c0010: fldcw word ptr [rsi - 0x50770007]; stc; jmp qword ptr [rax - 0x51]; 
0x000000000002e753: fldenv [rcx]; add al, byte ptr [rax]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x00000000000352a7: fldenv [rsi + 0xf]; je 0x352fb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000080fc9: fldenv [rsi + 0xf]; je 0x8101d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000036cd1: fldenv [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000351c1: fldenv [rsi + 0xf]; xlatb; ret; 
0x00000000000a92ad: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000093dad: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000075e2c: fldpi; stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000093ef4: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000057425: fmul dword ptr [rax + 0x39]; ret; 
0x00000000000a6819: fmul dword ptr [rax - 0x39]; ret; 
0x000000000001c098: fmul dword ptr [rax - 0x77]; ret; 
0x00000000000172c1: fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000005507c: fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000e3688: fmul dword ptr [rax - 3]; call qword ptr [rcx]; 
0x00000000000b3114: fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x0000000000086a0a: fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x00000000000b6c07: fmul dword ptr [rcx + rcx*4 - 0x17]; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x00000000000b64e9: fmul dword ptr [rcx + rcx*4 - 0x1f]; mov rdx, qword ptr [r12]; or esi, 2; mov edi, 1; call rax; 
0x0000000000039301: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009eee2: fmul qword ptr [rax - 0x77]; ret; 
0x0000000000039302: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000002ea09: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000004292f: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000006cf3f: fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000816f0: fnsave dword ptr [rcx + rbx*8 - 0x3b]; std; xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000002e56f: fnsave dword ptr [rcx]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000036a4f: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003a423: fnstcw word ptr [rax]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000036ccf: fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000016a09: fpatan; ret; 
0x000000000009d752: frstor dword ptr [rax + r8]; ret; 
0x000000000009d753: frstor dword ptr [rax + rax]; ret; 
0x0000000000036a51: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a4e66: fsin; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0xfffe; 
0x000000000003c61f: fst qword ptr [rsi]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d1487: fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x00000000000b05df: fstp qword ptr [rbx]; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000d1800: fstp st(0); ret 0xde5d; 
0x00000000000d61e4: fsub dword ptr [rax]; hlt; jmp rax; 
0x0000000000056528: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000055c38: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000056868: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000000da3c0: fsub dword ptr [rip - 0x7e440000]; hlt; call qword ptr [rdi]; 
0x0000000000036d51: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000004aad4: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000036b51: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000049ccc: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000009d053: fsubp st(0); push rdi; ret; 
0x000000000000ba7a: fsubp st(0); sar dl, 1; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000d7570: fsubr dword ptr [rax + rax - 0x4ad6800]; call qword ptr [rax]; 
0x00000000000d622c: fsubr dword ptr [rax]; hlt; dec dword ptr [rbp + 0x28f80000]; hlt; jmp qword ptr [rax]; 
0x00000000000e28c4: fsubr qword ptr [rdx + 0x6f380000]; cld; call qword ptr [rax]; 
0x00000000000a924d: fsubr st(0); pop rbp; add ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000056b64: fsubr st(3); ret 0xf66; 
0x000000000006c24e: fsubrp st(7); stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000089c61: fucomi st(3); ret 0x1f0f; 
0x000000000003590e: fucomi st(4); vptest ymm5, ymm0; jae 0x35bb0; xor eax, eax; vzeroupper; ret; 
0x00000000000888f8: fucomip st(0); ret 0xfa51; 
0x00000000000b8237: fucomip st(0); ret; 
0x000000000006ac6d: fyl2xp1; dec dword ptr [rax + 0x29]; ret; 
0x00000000000b9c9f: fyl2xp1; jmp qword ptr [rsi + 0xf]; 
0x000000000006c05e: hlt; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000000d617e: hlt; call qword ptr [rax + 0x29]; 
0x00000000000d63ee: hlt; call qword ptr [rax + 0x3a]; 
0x00000000000d6716: hlt; call qword ptr [rax + 0x4c]; 
0x00000000000d62ce: hlt; call qword ptr [rax + 0x78000031]; hlt; call rax; 
0x00000000000b8a4d: hlt; call qword ptr [rax + 0x8c48348]; pop rbx; pop rbp; ret; 
0x00000000000d6266: hlt; call qword ptr [rax - 0x67ffffd2]; cmp esp, esi; jmp rax; 
0x00000000000d97a6: hlt; call qword ptr [rax]; 
0x00000000000d624e: hlt; call qword ptr [rbp + rbp + 0x30e80000]; hlt; jmp rax; 
0x00000000000da786: hlt; call qword ptr [rbx]; 
0x00000000000bbf42: hlt; call qword ptr [rcx]; 
0x00000000000da566: hlt; call qword ptr [rdi + 1]; 
0x00000000000d9846: hlt; call qword ptr [rdi + 2]; 
0x00000000000d9b72: hlt; call qword ptr [rdi]; 
0x00000000000da732: hlt; call qword ptr [rdx]; 
0x00000000000d6616: hlt; call qword ptr [rsi + rax*2]; add byte ptr [rax], al; cmp ah, cl; hlt; jmp qword ptr [rax + 0x46]; 
0x00000000000da68a: hlt; call qword ptr [rsi]; 
0x00000000000bbebe: hlt; call rax; 
0x00000000000d6216: hlt; call rax; sub al, 0; add byte ptr [rax], ch; sub ah, dh; jmp rsp; 
0x00000000000d6176: hlt; call rsp; 
0x00000000000d6176: hlt; call rsp; sub byte ptr [rax], al; add al, ch; or al, 0xf4; call qword ptr [rax + 0x29]; 
0x00000000000bea7d: hlt; clc; call qword ptr [rax]; 
0x00000000000bea7d: hlt; clc; call qword ptr [rax]; idiv eax; jmp qword ptr [rax]; 
0x00000000000bea79: hlt; clc; jmp qword ptr [rax]; 
0x00000000000e2981: hlt; cld; jmp qword ptr [rcx]; 
0x00000000000e29b5: hlt; cld; jmp rsp; 
0x00000000000d6666: hlt; dec dword ptr [rax + rcx*2]; add byte ptr [rax], al; or bl, dl; hlt; jmp qword ptr [rax]; 
0x00000000000d62fe: hlt; dec dword ptr [rax - 0x17ffffcd]; pop rbp; hlt; jmp rax; 
0x00000000000d6206: hlt; dec dword ptr [rax - 0x47ffffd4]; and al, 0xf4; lcall [rsp + rbp + 0x27480000]; hlt; call rax; 
0x00000000000b8c57: hlt; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000d622e: hlt; dec dword ptr [rbp + 0x28f80000]; hlt; jmp qword ptr [rax]; 
0x00000000000d61ae: hlt; dec dword ptr [rdx + rbp]; add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x00000000000d6286: hlt; inc dword ptr [rax + 0x2f]; add byte ptr [rax], al; mov byte ptr [rsp + rsi*8], bh; jmp qword ptr [rax + 0x2f]; 
0x00000000000bbeea: hlt; inc dword ptr [rax + 0x32fff4f1]; int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000bbed2: hlt; inc dword ptr [rax + rsi*8 - 0xf61000c]; hlt; jmp qword ptr [rbx]; 
0x00000000000bbf46: hlt; inc dword ptr [rsi]; hlt; push rbx; hlt; jmp rax; 
0x00000000000dfddc: hlt; jg 0xdfddf; add byte ptr [rax + 7], dl; cli; jmp qword ptr [rbx]; 
0x00000000000d61b6: hlt; jmp qword ptr [rax + 0x2a]; 
0x00000000000d628e: hlt; jmp qword ptr [rax + 0x2f]; 
0x00000000000d6416: hlt; jmp qword ptr [rax + 0x3b]; 
0x00000000000d64f6: hlt; jmp qword ptr [rax + 0x41]; 
0x00000000000d6586: hlt; jmp qword ptr [rax + 0x44]; 
0x00000000000d661e: hlt; jmp qword ptr [rax + 0x46]; 
0x00000000000bbf36: hlt; jmp qword ptr [rax - 0xd]; 
0x00000000000db2b6: hlt; jmp qword ptr [rax]; 
0x00000000000bbf0e: hlt; jmp qword ptr [rbp - 0xe]; 
0x00000000000bbeda: hlt; jmp qword ptr [rbx]; 
0x00000000000d8fda: hlt; jmp qword ptr [rcx + 1]; 
0x00000000000d8d96: hlt; jmp qword ptr [rcx + 2]; 
0x00000000000da29e: hlt; jmp qword ptr [rdi + 2]; 
0x00000000000d9242: hlt; jmp qword ptr [rdx + 1]; 
0x00000000000bbef2: hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000d9fda: hlt; jmp qword ptr [rsi]; 
0x00000000000bbf4e: hlt; jmp rax; 
0x00000000000d950e: hlt; jmp rdi; 
0x00000000000d9756: hlt; jmp rdx; 
0x00000000000dafa2: hlt; jmp rsi; 
0x00000000000d621e: hlt; jmp rsp; 
0x00000000000bf158: hlt; jno 0xbf154; push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf15c: hlt; jno 0xbf158; jmp rsp; 
0x00000000000bf2b0: hlt; jno 0xbf2ac; push rsp; jno 0xbf2b0; jmp rsp; 
0x00000000000bf2b4: hlt; jno 0xbf2b0; jmp rsp; 
0x00000000000bf338: hlt; jno 0xbf334; call rcx; 
0x00000000000bf344: hlt; jno 0xbf340; push rsp; jno 0xbf344; jmp rsp; 
0x00000000000bf348: hlt; jno 0xbf344; jmp rsp; 
0x00000000000bf3a8: hlt; jno 0xbf3a4; call rcx; 
0x00000000000bf3b0: hlt; jno 0xbf3ac; call rcx; 
0x00000000000bf3b0: hlt; jno 0xbf3ac; call rcx; jno 0xbf3b0; jmp rsp; 
0x00000000000bf404: hlt; jno 0xbf400; call rcx; 
0x00000000000bf4f8: hlt; jno 0xbf4f4; call rcx; 
0x00000000000df6dc: hlt; js 0xdf6df; add byte ptr [rax - 0x11], ah; stc; jmp qword ptr [rdi]; 
0x00000000000d61de: hlt; lcall [rax - 0x27ffffd5]; and ah, dh; jmp rax; 
0x00000000000bbf3e: hlt; lcall [rbx + rsi*8]; hlt; call qword ptr [rcx]; 
0x00000000000d620e: hlt; lcall [rsp + rbp + 0x27480000]; hlt; call rax; 
0x0000000000008fe3: hlt; leave; ret; 
0x000000000009c968: hlt; loope 0x9c98f; add byte ptr [rax - 0x77], cl; add eax, 0x24e1d5; add rsp, 8; ret; 
0x000000000003e65a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003930e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000e39dc: hlt; mov ebx, 0x59800000; std; jmp qword ptr [rax]; 
0x000000000003e653: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000055fde: hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000039467: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039483: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000001da1c: hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000009d2ab: hlt; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x000000000004fa73: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000000e0edc: hlt; nop; add byte ptr [rax], al; adc ah, dl; cli; jmp qword ptr [rsi + 7]; 
0x00000000000d664e: hlt; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000bbeee: hlt; push qword ptr [rdx]; int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000d6376: hlt; push qword ptr [rsi + rsi + 0x6d780000]; hlt; call rsp; 
0x00000000000bbf4a: hlt; push rbx; hlt; jmp rax; 
0x0000000000058d0c: hlt; sub byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004fa77: hlt; sub eax, edx; ret; 
0x00000000000bd806: idiv bh; add ch, bh; idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x000000000009fe4f: idiv bh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bd802: idiv bh; call 0x10bcf05; std; idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x000000000006b2cc: idiv bh; call rax; 
0x00000000000a1b31: idiv bh; dec dword ptr [rax + 0x39]; ret; 
0x0000000000076979: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000006bc5a: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x00000000000a175f: idiv bh; dec dword ptr [rax - 0x77]; sbb cl, ch; idiv dil; jmp qword ptr [rsi + 0xf]; 
0x000000000007696f: idiv bh; dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000006b464: idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000006b2c4: idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000006b45d: idiv bh; inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d06b45e; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000006c514: idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000006c026: idiv bh; jmp qword ptr [rax]; 
0x0000000000074d83: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000010334: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000009ffdc: idiv bh; nop; add rsp, 8; ret; 
0x00000000000bd80a: idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x00000000000d1797: idiv byte ptr [rbx]; jbe 0xd17ce; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000055d47: idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x000000000005ed56: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x0000000000039c46: idiv byte ptr [rsi]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a1766: idiv dil; jmp qword ptr [rsi + 0xf]; 
0x00000000000b68d7: idiv dword ptr [rax + rcx]; jne 0x8718; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x00000000000bea8d: idiv eax; call qword ptr [rax - 9]; 
0x00000000000bea8d: idiv eax; call qword ptr [rax - 9]; clc; jmp qword ptr [rax - 9]; 
0x00000000000beaad: idiv eax; call qword ptr [rax]; 
0x00000000000beaa5: idiv eax; call rax; 
0x00000000000beaa5: idiv eax; call rax; idiv eax; push rax; idiv eax; call qword ptr [rax]; 
0x00000000000b8c55: idiv eax; hlt; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000bea89: idiv eax; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; 
0x00000000000bea89: idiv eax; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; clc; jmp qword ptr [rax - 9]; 
0x00000000000bea91: idiv eax; jmp qword ptr [rax - 9]; 
0x00000000000bea81: idiv eax; jmp qword ptr [rax]; 
0x00000000000bea85: idiv eax; push qword ptr [rax]; idiv eax; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; 
0x00000000000beaa9: idiv eax; push rax; idiv eax; call qword ptr [rax]; 
0x00000000000bde6a: idiv edi; adc al, 0xf7; call rax; 
0x00000000000bde6a: idiv edi; adc al, 0xf7; call rax; sal edi, 1; jmp qword ptr [rax]; 
0x00000000000bdb96: idiv edi; adc byte ptr [rbp - 0x40ef0009], bh; idiv edi; movabs al, byte ptr [0x40fff7b360fff7b1]; mov ch, 0xf7; jmp qword ptr [rax]; 
0x00000000000bd9ae: idiv edi; adc byte ptr [rbx - 9], ah; inc dword ptr [rax - 0xf00089c]; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000bdc46: idiv edi; adc byte ptr [rdi + rsi*8 - 0x84a0f01], dh; jmp rax; 
0x00000000000bd9ba: idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000bddfa: idiv edi; add dh, ah; idiv edi; nop; fdiv st(7); call qword ptr [rax - 0x26]; 
0x00000000000bddb6: idiv edi; and ah, 0xf7; inc dword ptr [rax + 0x10fff7e6]; fincstp; call rax; 
0x00000000000bd9b2: idiv edi; and byte ptr [rdi + rsi*8 - 1], 0xf0; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000bdca6: idiv edi; and byte ptr [rdi - 0x578f0009], ah; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000bddba: idiv edi; and dh, 0xf7; call qword ptr [rax]; 
0x00000000000bddba: idiv edi; and dh, 0xf7; call qword ptr [rax]; fincstp; call rax; 
0x00000000000bddb2: idiv edi; and dl, 0xf7; inc dword ptr [rax - 0x7f00081c]; out 0xf7, al; call qword ptr [rax]; 
0x00000000000bdb3e: idiv edi; call 0xffffffffb10bd2f6; mov bl, 0xf7; call qword ptr [rax + 0x70fff7b5]; mov bh, 0xf7; call qword ptr [rax - 0x47]; 
0x000000000006b5e6: idiv edi; call qword ptr [rax]; 
0x00000000000770b7: idiv edi; call qword ptr [rbx + 0xf]; 
0x00000000000d6b7e: idiv edi; cmp byte ptr [rdi], ah; add byte ptr [rax], cl; ret 0xfff7; 
0x000000000006b504: idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x0000000000076a1e: idiv edi; dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000026d2b: idiv edi; dec dword ptr [rax - 0x77]; bnd jmp 0x26b3e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000077fb1: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000077675: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x000000000007766b: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x00000000000bdd82: idiv edi; fcomi st(7); jmp qword ptr [rax]; 
0x000000000007720d: idiv edi; inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000000bd9e6: idiv edi; jb 0xbd9e2; push qword ptr [rax]; jae 0xbd9e6; jmp qword ptr [rax]; 
0x0000000000077aaf: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000253db: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000bdcaa: idiv edi; jo 0xbdc56; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000bde8a: idiv edi; jo 0xbde54; idiv edi; rol bh, 0xf7; call qword ptr [rax]; 
0x00000000000be3ba: idiv edi; jo 0xbe3ba; idiv edi; sahf; xor edi, eax; jmp qword ptr [rax]; 
0x00000000000bdba6: idiv edi; mov bpl, 0xf7; jmp qword ptr [rax]; 
0x00000000000bdbde: idiv edi; mov cl, 0xf7; inc dword ptr [rax]; mov bl, 0xf7; jmp rax; 
0x00000000000bdb8a: idiv edi; mov dil, 0xf7; jmp qword ptr [rax]; 
0x00000000000bdc42: idiv edi; mov dl, 0xf7; call qword ptr [rax]; 
0x00000000000b9701: idiv edi; mov qword ptr [rip + 0x230762], 0; pop rbx; ret; 
0x00000000000bdc2a: idiv edi; mov sil, 0xf7; jmp qword ptr [rax]; 
0x00000000000bdb9e: idiv edi; movabs al, byte ptr [0x40fff7b360fff7b1]; mov ch, 0xf7; jmp qword ptr [rax]; 
0x000000000008edf9: idiv edi; nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x25c4c1], 0; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000bddfe: idiv edi; nop; fdiv st(7); call qword ptr [rax - 0x26]; 
0x00000000000bdc6e: idiv edi; nop; mov bh, 0xf7; jmp qword ptr [rax - 0x47]; 
0x00000000000bdeb2: idiv edi; nop; sal edi, cl; jmp rax; 
0x00000000000bddda: idiv edi; out 0xf7, al; call rax; 
0x00000000000bdd3a: idiv edi; out 0xf7, eax; call rax; 
0x00000000000d6b86: idiv edi; push rax; add byte ptr [eax], al; pop rax; ret 0xfff7; 
0x00000000000bdd4a: idiv edi; push rax; fcomip st(7); push qword ptr [rax]; loope 0xbdd4a; jmp qword ptr [rax]; 
0x00000000000bdd9e: idiv edi; push rax; fincstp; call qword ptr [rax]; 
0x00000000000bdcc2: idiv edi; rcr byte ptr [rbx - 0x62ef0009], 0xf7; jmp qword ptr [rax - 0x62]; 
0x00000000000bde8e: idiv edi; rol bh, 0xf7; call qword ptr [rax]; 
0x00000000000be3be: idiv edi; sahf; xor edi, eax; jmp qword ptr [rax]; 
0x00000000000bdc1e: idiv edi; sal byte ptr [rax - 0x4d7f0009], 0xf7; jmp qword ptr [rax - 0x4c]; 
0x00000000000bdb7e: idiv edi; sal byte ptr [rcx - 0x4c7f0009], 0xf7; jmp qword ptr [rax - 0x4b]; 
0x00000000000bdd0a: idiv edi; sbb bh, 0xf7; jmp qword ptr [rax - 0x1f]; 
0x00000000000bdd96: idiv edi; shl ah, 0xf7; inc eax; out 0xf7, al; call qword ptr [rax - 0x27]; 
0x00000000000bde16: idiv edi; shl bl, 0xf7; inc eax; in eax, 0xf7; call qword ptr [rax - 0x28]; 
0x00000000000d6afe: idiv edi; shl byte ptr [rax + rax], 0xf8; mov dh, 0xf7; call rsp; 
0x00000000000bde1a: idiv edi; shl ch, 0xf7; call qword ptr [rax - 0x28]; 
0x00000000000bdd9a: idiv edi; shl dh, 0xf7; call qword ptr [rax - 0x27]; 
0x00000000000bdcae: idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000bdcf2: idiv edi; sub byte ptr [rbx - 0x532f0009], 0xf7; jmp qword ptr [rax]; 
0x00000000000b97c1: idiv edi; test rbx, rbx; mov rdx, rbx; jne 0xb97b8; pop rbx; ret; 
0x00000000000bde66: idiv edi; xor bh, cl; idiv edi; adc al, 0xf7; call rax; 
0x00000000000bdc3e: idiv edi; xor byte ptr [rax - 0x4dbf0009], 0xf7; call qword ptr [rax]; 
0x00000000000bdb76: idiv edi; xor byte ptr [rbp - 0x40cf0009], bh; idiv edi; sal byte ptr [rcx - 0x4c7f0009], 0xf7; jmp qword ptr [rax - 0x4b]; 
0x00000000000bd9ea: idiv edi; xor byte ptr [rbx - 9], dh; jmp qword ptr [rax]; 
0x0000000000081e3a: idiv esp; dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000000884f7: imul al; and eax, dword ptr [rax]; clc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000016e4a: imul al; rcr byte ptr [rcx], 1; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000093658: imul al; ret 0xf74e; 
0x0000000000084cdf: imul al; stosd dword ptr [rdi], eax; sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x00000000000559e6: imul bl; ret 0x8b48; 
0x000000000003ae05: imul dword ptr [rsi]; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002e7da: imul eax, dword ptr [rax], 0; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000000de941: imul eax, dword ptr [rax], 0; insb byte ptr [rdi], dx; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rcx]; 
0x00000000000de955: imul eax, dword ptr [rax], 0; js 0xde8fe; clc; call qword ptr [rcx]; 
0x00000000000de915: imul eax, dword ptr [rax], 0; pop rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rdi]; 
0x000000000002e7eb: imul eax, dword ptr [rax], 0x440f4800; ret 0x66c3; 
0x00000000000d6bd9: imul eax, dword ptr [rax], 0xf7cf7800; call rsp; 
0x0000000000053b89: imul eax, dword ptr [rcx + rbp - 6], 0x39; ret 0x257e; 
0x000000000004e5d1: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x00000000000758f2: imul eax, dword ptr [rcx], 0xc7480000; ret 0xffe0; 
0x000000000004224a: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x4229f; adc dword ptr [rcx + 7], edi; ret; 
0x000000000009e9c1: imul eax, eax, -0xa; jmp qword ptr [rsi + 0x2e]; 
0x000000000003b293: imul ebp, dword ptr [rdx], 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006e5b1: imul ebx, dword ptr [rbp + 0x27], 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000b3590: imul ecx, dword ptr [rax], 0x74; jl 0xb3520; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000000de892: imul ecx, dword ptr [rdx], 0xe; or byte ptr [rbx + rcx + 0x2c], cl; add byte ptr [rax], al; add byte ptr [rdx + rbp*2 - 0x60d00000], dh; clc; call qword ptr [rdx]; 
0x00000000000420e3: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ea9: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000000fff3: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000000d864: imul edi, edx, -1; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000384d3: imul edx, dword ptr [rsi + 8], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002245e: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000004da4c: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x00000000000949a8: in al, 0x48; mov ecx, dword ptr [rbp - 0x628]; mov r11, qword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094fc8: in al, 0x4a; movsxd rax, dword ptr [rdx]; add rax, rdx; jmp rax; 
0x0000000000039306: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000bf1b0: in al, 0x71; stc; call qword ptr [rdi + 0x73]; 
0x00000000000bf194: in al, 0x71; stc; call rcx; 
0x00000000000bf24c: in al, 0x71; stc; jmp qword ptr [rdx]; 
0x00000000000bf160: in al, 0x71; stc; jmp rsp; 
0x00000000000bf3a4: in al, 0x71; stc; push rsp; jno 0xbf3a4; call rcx; 
0x00000000000090fa: in al, 0x72; cdq; nop; leave; ret; 
0x00000000000161f9: in al, 0x74; mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000004a75c: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000059833: in al, 0x80; cli; cmp eax, 0x83497174; ret; 
0x0000000000008d9a: in al, 0xc9; ret; 
0x000000000005dbd4: in al, 0xe8; int 0xaa; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000003e63a: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000516ee: in al, 0xf3; ret; 
0x00000000000b89d3: in al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x00000000000bddb9: in al, 0xf7; inc dword ptr [rax + 0x10fff7e6]; fincstp; call rax; 
0x00000000000bdd99: in al, 0xf7; inc eax; out 0xf7, al; call qword ptr [rax - 0x27]; 
0x00000000000bdd79: in al, 0xf7; push rax; out 0xf7, al; inc dword ptr [rax + 0x40fff7d9]; fcomi st(7); jmp qword ptr [rax]; 
0x000000000006bbc0: in al, 0xf; lahf; ret; 
0x0000000000078704: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000be278: in al, 3; clc; call qword ptr [rbx + rax - 8]; jmp rsp; 
0x000000000003ff77: in al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000056bb5: in al, dx; adc al, ch; and eax, 0xdf890000; mov edx, eax; mov eax, 3; syscall; 
0x00000000000d6748: in al, dx; add byte ptr [r8], r8b; or byte ptr [rsi], ah; cmc; call qword ptr [rax + 0x50]; 
0x000000000002cd39: in al, dx; add byte ptr [rax], 0; add al, ch; insd dword ptr [rdi], dx; ret; 
0x0000000000053f14: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x51; 
0x000000000008f4f7: in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000000de3d4: in al, dx; add byte ptr gs:[rax], al; js 0xde442; clc; jmp qword ptr [rsi + 0xa]; 
0x000000000006c064: in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000006bea1: in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x00000000000d9fd4: in al, dx; and dword ptr [rax], eax; add al, bh; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rsi]; 
0x00000000000d744d: in al, dx; cli; call qword ptr [rax - 0x5c]; 
0x00000000000cd6ad: in al, dx; cli; push qword ptr [rax - 0x15]; cli; jmp qword ptr [rax]; 
0x000000000000c090: in al, dx; dec byte ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000a94ad: in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000d670d: in al, dx; hlt; jmp rsp; 
0x000000000006b2c3: in al, dx; idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000003ea30: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000d7760: in al, dx; mov bh, 0; add byte ptr [rax - 0x3f], ch; sti; call qword ptr [rax]; 
0x000000000001ec81: in al, dx; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000059183: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x59190; ret; 
0x0000000000008f5d: in al, dx; mov edi, eax; call 0x574c0; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x00000000000da7e4: in al, dx; mov esi, esp; call qword ptr [rsi]; 
0x000000000003930a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003ea3a: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000002d0a7: in al, dx; or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000008b57c: in al, dx; or bh, bh; adc eax, 0x25cc9c; xor eax, eax; add rsp, 8; ret; 
0x0000000000028f8f: in al, dx; or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000034804: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000254b9: in al, dx; or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x0000000000024bca: in al, dx; or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x00000000000a8fb0: in al, dx; ret; 
0x00000000000e1cd4: in al, dx; sahf; add byte ptr [rax], al; mov cl, 0xfb; jmp rdx; 
0x00000000000b7469: in al, dx; sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x00000000000b3f14: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000003590f: in al, dx; vptest ymm5, ymm0; jae 0x35bb0; xor eax, eax; vzeroupper; ret; 
0x0000000000056286: in eax, 0; add byte ptr [rax], al; syscall; 
0x00000000000d1623: in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000001a65e: in eax, 0x2c; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000d34d3: in eax, 0x2d; cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000000941b2: in eax, 0x48; mov eax, esi; ret; 
0x00000000000569ff: in eax, 0x49; sub dword ptr [rax], eax; test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x0000000000039116: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000d08b9: in eax, 0x6a; mov eax, 0x45155e93; ret 0x591c; 
0x0000000000021ac7: in eax, 0x78; add eax, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x00000000000b5992: in eax, 0x83; call qword ptr [rcx]; 
0x0000000000079f37: in eax, 0xaf; add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000000d34d9: in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000b7ea4: in eax, 0xe8; mov dh, 0xef; cmc; jmp qword ptr [rsi + 0xf]; 
0x0000000000051ba9: in eax, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000003e6ba: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000db2b5: in eax, 0xf4; jmp qword ptr [rax]; 
0x00000000000bde1d: in eax, 0xf7; call qword ptr [rax - 0x28]; 
0x00000000000bdd19: in eax, 0xf7; jmp qword ptr [rax - 0x19]; 
0x00000000000bdd59: in eax, 0xf7; jmp qword ptr [rax]; 
0x0000000000082a13: in eax, 0xf; je 0x82a30; add rax, 2; ret; 
0x00000000000ce945: in eax, 0xfb; jmp rax; 
0x00000000000735db: in eax, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000000d29a1: in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000083cbd: in eax, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x000000000003fdf7: in eax, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000743b8: in eax, dx; add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x0000000000077548: in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x0000000000061ecd: in eax, dx; add eax, 0x358d4800; ret; 
0x0000000000094bf8: in eax, dx; add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000d6fb5: in eax, dx; clc; dec dword ptr [rax + 0x78000084]; idiv eax; jmp qword ptr [rax]; 
0x000000000008377c: in eax, dx; je 0x83792; mov rsi, rbp; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x00000000000b957f: in eax, dx; jne 0xb9558; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b98e2: in eax, dx; jne 0xb98c8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba49c: in eax, dx; jne 0xba480; pop rbx; pop rbp; pop r12; ret; 
0x000000000003eab0: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000050292: in eax, dx; lea rax, [rcx - 1]; ret; 
0x000000000003911a: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003eaba: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000afa60: in eax, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b97ca: in eax, dx; pop rbx; ret; 
0x000000000008e7ff: in eax, dx; ret 0x25; 
0x0000000000050072: in eax, dx; ret; 
0x00000000000d5a9d: in eax, dx; std; push qword ptr [rax - 0x12]; std; call qword ptr [rax - 0xb]; 
0x00000000000503e2: in eax, dx; sub rax, 1; ret; 
0x000000000008d23d: in eax, dx; xor esi, esi; lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x000000000000954f: inc byte ptr [rax + rax]; leave; ret; 
0x00000000000578ec: inc byte ptr [rbp - 0x60f0be13]; ret 0x8545; 
0x0000000000083742: inc byte ptr [rcx - 0x7d]; out 1, al; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x000000000003e097: inc byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000078d12: inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000003e096: inc byte ptr es:[rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000055cf1: inc dword ptr [r12 + 0x28]; mov rax, qword ptr [r12 + 8]; test rax, rax; je 0x55d02; call rax; 
0x000000000008ec68: inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bddbb: inc dword ptr [rax + 0x10fff7e6]; fincstp; call rax; 
0x00000000000bded3: inc dword ptr [rax + 0x12]; clc; call rax; 
0x00000000000bded3: inc dword ptr [rax + 0x12]; clc; call rax; adc eax, edi; jmp qword ptr [rax + 0x11]; 
0x00000000000be0fb: inc dword ptr [rax + 0x20fff80d]; add edi, eax; jmp rax; 
0x00000000000d6287: inc dword ptr [rax + 0x2f]; add byte ptr [rax], al; mov byte ptr [rsp + rsi*8], bh; jmp qword ptr [rax + 0x2f]; 
0x00000000000bbeeb: inc dword ptr [rax + 0x32fff4f1]; int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000be5e3: inc dword ptr [rax + 0x36]; clc; call rax; 
0x00000000000be3cb: inc dword ptr [rax + 0x39]; clc; call rax; 
0x00000000000be3cb: inc dword ptr [rax + 0x39]; clc; call rax; cmp al, bh; jmp qword ptr [rax + 0x38]; 
0x00000000000bdc3f: inc dword ptr [rax + 0x40fff7b0]; mov dl, 0xf7; call qword ptr [rax]; 
0x00000000000bdd7f: inc dword ptr [rax + 0x40fff7d9]; fcomi st(7); jmp qword ptr [rax]; 
0x00000000000be8fb: inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; 
0x00000000000be8fb: inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; clc; jmp qword ptr [rax + 0x49]; 
0x00000000000be26f: inc dword ptr [rax + 0x474fff8]; clc; jmp rsp; 
0x00000000000bd9e7: inc dword ptr [rax + 0x72]; idiv edi; xor byte ptr [rbx - 9], dh; jmp qword ptr [rax]; 
0x00000000000b4693: inc dword ptr [rax + 0x74]; sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x00000000000be0eb: inc dword ptr [rax + 0xf]; clc; call rax; 
0x00000000000be82b: inc dword ptr [rax + 0xfff82b]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000be2fb: inc dword ptr [rax + 3]; clc; call rax; 
0x00000000000943c2: inc dword ptr [rax + rax*8 - 0x74b7ce8c]; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x00000000000093f5: inc dword ptr [rax + rax]; leave; ret; 
0x000000000006b45f: inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d06b45e; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000000bbed3: inc dword ptr [rax + rsi*8 - 0xf61000c]; hlt; jmp qword ptr [rbx]; 
0x0000000000072df0: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x74]; 
0x0000000000073172: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x75]; 
0x00000000000bdd37: inc dword ptr [rax - 0x1b]; idiv edi; out 0xf7, eax; call rax; 
0x00000000000bddd7: inc dword ptr [rax - 0x1c]; idiv edi; out 0xf7, al; call rax; 
0x00000000000bdeaf: inc dword ptr [rax - 0x2e]; idiv edi; nop; sal edi, cl; jmp rax; 
0x00000000000be9d3: inc dword ptr [rax - 0x2f00075d]; movsb byte ptr [rdi], byte ptr [rsi]; clc; jmp qword ptr [rax]; 
0x00000000000bde6b: inc dword ptr [rax - 0x2f000830]; sal edi, 1; jmp qword ptr [rax]; 
0x00000000000d779f: inc dword ptr [rax - 0x47]; add byte ptr [rax], al; test al, 0xcf; sti; jmp qword ptr [rax - 0x47]; 
0x00000000000bdc43: inc dword ptr [rax - 0x4e]; idiv edi; adc byte ptr [rdi + rsi*8 - 0x84a0f01], dh; jmp rax; 
0x00000000000bea67: inc dword ptr [rax - 0x5f00070d]; clc; inc eax; clc; jmp rax; 
0x00000000000bea43: inc dword ptr [rax - 0x5f00070e]; clc; push qword ptr [rax - 0x3f00070e]; clc; jmp rax; 
0x00000000000be9c3: inc dword ptr [rax - 0x62]; clc; call qword ptr [rax - 0x1f000761]; movabs al, byte ptr [0xa380fff8a230fff8]; clc; call rax; 
0x00000000000b5a37: inc dword ptr [rax - 0x7bf0f707]; sbb eax, 0xe9ffffff; scasd eax, dword ptr [rdi]; sub al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x00000000000bddb7: inc dword ptr [rax - 0x7f00081c]; out 0xf7, al; call qword ptr [rax]; 
0x00000000000bddb7: inc dword ptr [rax - 0x7f00081c]; out 0xf7, al; call qword ptr [rax]; fincstp; call rax; 
0x00000000000bddb3: inc dword ptr [rax - 0x7f00081e]; in al, 0xf7; inc dword ptr [rax + 0x10fff7e6]; fincstp; call rax; 
0x00000000000a163c: inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0x49]; 
0x0000000000077c9d: inc dword ptr [rax - 0x91743]; jmp qword ptr [rax]; 
0x000000000006c555: inc dword ptr [rax - 0x93b43]; jmp qword ptr [rax]; 
0x00000000000bea5f: inc dword ptr [rax - 0xd]; clc; jmp qword ptr [rax - 0xd]; 
0x00000000000bea33: inc dword ptr [rax - 0xe]; clc; call qword ptr [rax - 0xe]; 
0x00000000000bea33: inc dword ptr [rax - 0xe]; clc; call qword ptr [rax - 0xe]; clc; jmp qword ptr [rax - 0xe]; 
0x00000000000be7f3: inc dword ptr [rax - 0xf0007d6]; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000bd9b3: inc dword ptr [rax - 0xf00089c]; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000d5ac3: inc dword ptr [rax - 3]; std; push qword ptr [rax]; std; std; jmp qword ptr [rax]; 
0x00000000000d3acf: inc dword ptr [rax - 4]; jmp rcx; 
0x00000000000bea8b: inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; 
0x00000000000bea8b: inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; clc; jmp qword ptr [rax - 9]; 
0x00000000000bd8fb: inc dword ptr [rax]; adc bh, dh; call qword ptr [rax + 0x27]; 
0x00000000000b4256: inc dword ptr [rax]; add byte ptr [rax - 0x75], cl; je 0xb4281; adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000078f67: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x26bbad; jmp rax; 
0x0000000000094551: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ret 0xc748; 
0x000000000008e48a: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000070b31: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x000000000006c516: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000077e57: inc dword ptr [rax]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x0000000000037261: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000051b4f: inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x0000000000037267: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000000bea23: inc dword ptr [rax]; clc; call qword ptr [rax]; 
0x00000000000bea23: inc dword ptr [rax]; clc; call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000000bea57: inc dword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000000bdd8b: inc dword ptr [rax]; fcomip st(7); jmp rax; 
0x00000000000bea77: inc dword ptr [rax]; hlt; clc; jmp qword ptr [rax]; 
0x00000000000bde9f: inc dword ptr [rax]; int 0xf7; call qword ptr [rax - 0x32]; 
0x00000000000bdbe3: inc dword ptr [rax]; mov bl, 0xf7; jmp rax; 
0x00000000000bfa53: inc dword ptr [rax]; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp rax; 
0x00000000000d5efb: inc dword ptr [rax]; sbb dh, bh; jmp qword ptr [rax + 0x17]; 
0x00000000000be9f3: inc dword ptr [rax]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x00000000000be9f3: inc dword ptr [rax]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; clc; jmp rax; 
0x00000000000bd807: inc dword ptr [rax]; std; idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x00000000000be82f: inc dword ptr [rax]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000bbbaa: inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x00000000000beb67: inc dword ptr [rax]; xor cl, bh; dec dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x00000000000a0ae8: inc dword ptr [rbp + 0x31]; dec dword ptr [rax - 0x39]; ret; 
0x0000000000063244: inc dword ptr [rbp + 0x31]; fisttp dword ptr [rcx - 0x7d]; ret; 
0x00000000000559e3: inc dword ptr [rbp + 0x31]; imul bl; ret 0x8b48; 
0x000000000008d23a: inc dword ptr [rbp + 0x31]; in eax, dx; xor esi, esi; lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x000000000009c960: inc dword ptr [rbp + 0x480e74c0]; lea eax, [rip + 0x24e1f4]; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x000000000008b6df: inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x000000000006c6e2: inc dword ptr [rbp + 0x79850fc9]; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000be26b: inc dword ptr [rbp + rax + 0x504fff8]; clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x00000000000be03f: inc dword ptr [rbp + rcx - 8]; push qword ptr [rbx + rdx + 0x1344fff8]; clc; call rsp; 
0x00000000000a95e2: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000000bc147: inc dword ptr [rbp - 0x5a]; cmc; jmp qword ptr [rcx]; 
0x000000000009203c: inc dword ptr [rbp - 0x76b08a40]; ret; 
0x000000000000b680: inc dword ptr [rbp - 0x7aa48740]; ror byte ptr [rdi], 0x84; ret; 
0x000000000001bb9e: inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000008b17: inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x000000000001c3e1: inc dword ptr [rbx + 0x48944c8]; and al, 0xe8; ret; 
0x000000000001f8b6: inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000077fac: inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000be047: inc dword ptr [rbx + rdx - 8]; call rsp; 
0x00000000000163db: inc dword ptr [rbx - 0x2f7cfe08]; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000679a0: inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x00000000000991a3: inc dword ptr [rbx - 0x78f0d006]; and dword ptr [rax], r8d; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000097bc3: inc dword ptr [rbx - 0x78f0d006]; cmp al, 0; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000098ff3: inc dword ptr [rbx - 0x78f0d006]; mov esp, dword ptr [rax + rax]; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000009972b: inc dword ptr [rbx - 0x78f0d006]; sbb qword ptr [r8], r8; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000097b6c: inc dword ptr [rbx - 0x78f0d006]; sub dword ptr [rax + rax], esi; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000009bf22: inc dword ptr [rbx - 0x78f0d008]; sbb eax, 0x89000002; ret 0x348; 
0x000000000006421b: inc dword ptr [rbx - 0x7af0f808]; xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000000288ae: inc dword ptr [rbx - 0x7bf0fe1a]; pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000006c4d4: inc dword ptr [rbx - 0x8f743]; call qword ptr [rax]; 
0x0000000000072e0c: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0x75]; 
0x00000000000d5eab: inc dword ptr [rbx]; add dh, bh; call qword ptr [rsi]; 
0x0000000000051c0d: inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000b7518: inc dword ptr [rbx]; jne 0xb7520; ret; 
0x0000000000051b7b: inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000081e5c: inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffcfa46; cmove rax, rdx; ret; 
0x000000000008ec69: inc dword ptr [rcx + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000006d8a2: inc dword ptr [rcx + 0x29]; ret 0x8545; 
0x000000000006cf3c: inc dword ptr [rcx + 0x39]; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000909a2: inc dword ptr [rcx + rbp - 0x40]; ret; 
0x000000000001c94b: inc dword ptr [rcx + rcx*4 - 0x18]; syscall; 
0x00000000000639e6: inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x0000000000097ff6: inc dword ptr [rcx - 0x77]; ret 0x8141; 
0x0000000000095087: inc dword ptr [rcx - 0x77]; ret 0x8341; 
0x00000000000679a3: inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x00000000000b661e: inc dword ptr [rcx - 0x77]; ret 0xc085; 
0x00000000000606fe: inc dword ptr [rcx - 0x77]; ret; 
0x000000000006be9e: inc dword ptr [rcx - 0x7d]; in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x000000000007720f: inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000076dec: inc dword ptr [rcx - 5]; jg 0x76e03; test byte ptr [rip - 0x7c000003], dl; ret; 
0x0000000000078264: inc dword ptr [rcx - 5]; jg 0x7827b; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x0000000000078361: inc dword ptr [rcx - 5]; jg 0x78378; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000006c2dc: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x0000000000078661: inc dword ptr [rcx]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x00000000000e3ac5: inc dword ptr [rcx]; or ch, byte ptr [rdi + 5]; ret; 
0x00000000000d78c7: inc dword ptr [rdi + rdi*4 + 0x78080000]; cld; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x000000000003df17: inc dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000be4b7: inc dword ptr [rdx + 0x34]; clc; call rdx; 
0x00000000000d3acb: inc dword ptr [rdx + 0x44fffc1c]; and ah, bh; jmp rcx; 
0x00000000000bf1a3: inc dword ptr [rdx + rsi*2]; stc; call rcx; 
0x000000000004948d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x00000000000bdf1b: inc dword ptr [rsi + 0x11]; clc; call rsi; 
0x00000000000bdf1b: inc dword ptr [rsi + 0x11]; clc; call rsi; adc al, bh; jmp qword ptr [rsi + 0x10]; 
0x00000000000be413: inc dword ptr [rsi + 0x38]; clc; call rsi; 
0x00000000000be267: inc dword ptr [rsi + rax]; clc; inc dword ptr [rbp + rax + 0x504fff8]; clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x00000000000d625f: inc dword ptr [rsi + rbp]; add byte ptr [rax + 0x37], bh; hlt; call qword ptr [rax - 0x67ffffd2]; cmp esp, esi; jmp rax; 
0x00000000000b7522: inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000000bbf47: inc dword ptr [rsi]; hlt; push rbx; hlt; jmp rax; 
0x0000000000055cf2: inc dword ptr [rsp + 0x28]; mov rax, qword ptr [r12 + 8]; test rax, rax; je 0x55d02; call rax; 
0x00000000000be0cb: inc eax; adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000be0cb: inc eax; adc bh, al; call qword ptr [rax + 0x12]; clc; jmp rax; 
0x00000000000d6aff: inc eax; add byte ptr fs:[rax], al; clc; mov dh, 0xf7; call rsp; 
0x00000000000be337: inc eax; add edi, eax; push qword ptr [rax]; add edi, eax; call rax; 
0x00000000000504aa: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bea4f: inc eax; clc; jmp rax; 
0x00000000000be5c3: inc eax; cmp eax, edi; call qword ptr [rax + 0x39]; 
0x00000000000be5c3: inc eax; cmp eax, edi; call qword ptr [rax + 0x39]; clc; jmp rax; 
0x00000000000bdd97: inc eax; in al, 0xf7; inc eax; out 0xf7, al; call qword ptr [rax - 0x27]; 
0x00000000000bde1b: inc eax; in eax, 0xf7; call qword ptr [rax - 0x28]; 
0x00000000000504a7: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000504a4: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bea13: inc eax; int1; clc; call rax; 
0x00000000000bdd9b: inc eax; out 0xf7, al; call qword ptr [rax - 0x27]; 
0x00000000000d67ef: inc eax; pop rdx; add byte ptr [rax], al; cwde; je 0xd67ec; jmp qword ptr [rax]; 
0x00000000000be91b: inc eax; push rbp; clc; call rax; 
0x00000000000be9e3: inc eax; test al, 0xf8; call qword ptr [rax]; 
0x00000000000be9e3: inc eax; test al, 0xf8; call qword ptr [rax]; stosb byte ptr [rdi], al; clc; jmp qword ptr [rax - 0x55]; 
0x00000000000be3eb: inc eax; xor eax, 0x3550fff8; clc; jmp rax; 
0x0000000000035bbc: inc ebp; std; xlatb; ret 0xe883; 
0x000000000005698a: inc ebx; nop dword ptr [rax]; mov eax, 8; syscall; 
0x000000000005766f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000058e4f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000084e9f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000005763f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000059032: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x29; syscall; 
0x0000000000058d52: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x000000000009f2b8: inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000072b27: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000000bdf9f: inc edx; adc al, bh; call qword ptr [rdx + 0x10]; 
0x00000000000bdf9f: inc edx; adc al, bh; call qword ptr [rdx + 0x10]; clc; jmp rdx; 
0x00000000000959ae: inc esi; add al, 2; add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000be433: inc esi; xor al, 0xf8; call qword ptr [rsi + 0x34]; 
0x00000000000be433: inc esi; xor al, 0xf8; call qword ptr [rsi + 0x34]; clc; jmp rsi; 
0x00000000000be55f: inc esp; clc; call qword ptr [rsi + rsi - 8]; jmp rsp; 
0x00000000000d797f: inc esp; ret; 
0x00000000000504a9: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000504a6: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000504a3: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000dfba5: insb byte ptr [rdi], dx; add byte ptr [rax], al; sub byte ptr [rdx], al; cli; jmp qword ptr [rcx]; 
0x00000000000dff54: insb byte ptr [rdi], dx; add dword ptr [rax], 0xfa0e8800; jmp qword ptr [rbx]; 
0x0000000000034f84: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000b5741: insb byte ptr [rdi], dx; add eax, 0xb60f0000; ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x00000000000a94af: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000000d783d: insb byte ptr [rdi], dx; cld; call rsp; 
0x00000000000d6375: insb byte ptr [rdi], dx; hlt; push qword ptr [rsi + rsi + 0x6d780000]; hlt; call rsp; 
0x00000000000de954: insb byte ptr [rdi], dx; imul eax, dword ptr [rax], 0; js 0xde8fe; clc; call qword ptr [rcx]; 
0x00000000000d34de: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x0000000000091c40: insb byte ptr [rdi], dx; ja 0x91c3f; jmp qword ptr [rsi - 0x70]; 
0x000000000007f22b: insb byte ptr [rdi], dx; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000000de944: insb byte ptr [rdi], dx; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rcx]; 
0x000000000006ac65: insb byte ptr [rdi], dx; ret 0x4c40; 
0x00000000000af2e0: insd dword ptr [rdi], dx; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000613b6: insd dword ptr [rdi], dx; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000012def: insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000080cf0: insd dword ptr [rdi], dx; add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000000b01e0: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b6c4a: insd dword ptr [rdi], dx; call 0xfffffffff080f79c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dc9: insd dword ptr [rdi], dx; call 0xfffffffff080f91b; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b6f1b: insd dword ptr [rdi], dx; call 0xfffffffff080fa6d; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6f67: insd dword ptr [rdi], dx; call 0xfffffffff080fab9; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b70ee: insd dword ptr [rdi], dx; call 0xfffffffff080fc40; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b7282: insd dword ptr [rdi], dx; call 0xfffffffff080fdd4; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b72a7: insd dword ptr [rdi], dx; call 0xfffffffff080fdf9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000be949: insd dword ptr [rdi], dx; clc; call qword ptr [rax]; 
0x00000000000e284d: insd dword ptr [rdi], dx; cld; jmp qword ptr [rcx]; 
0x00000000000e2815: insd dword ptr [rdi], dx; cld; jmp qword ptr [rdx]; 
0x00000000000b8888: insd dword ptr [rdi], dx; dec dword ptr [rcx + rcx*4 - 6]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x00000000000d637d: insd dword ptr [rdi], dx; hlt; call rsp; 
0x00000000000b9602: insd dword ptr [rdi], dx; js 0xb967c; ret 0x8b48; 
0x00000000000d34df: insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x00000000000d188d: insd dword ptr [rdi], dx; ret 0xb9b9; 
0x000000000002cd3f: insd dword ptr [rdi], dx; ret; 
0x00000000000232b7: insd dword ptr [rdi], dx; sub al, 0; ret; 
0x00000000000d279f: insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000000a42a: int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000002db43: int 0x2b; add bh, dh; ret 0; 
0x00000000000d2c04: int 0x6b; ret; 
0x00000000000758ea: int 0x80; 
0x000000000000b398: int 0x83; ret 0x8901; 
0x000000000009216e: int 0x90; jmp rdx; 
0x000000000005dbd6: int 0xaa; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000d1646: int 0xdd; je 0xd160f; xor al, 0xd8; ret; 
0x00000000000d0ab3: int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x00000000000bdea1: int 0xf7; call qword ptr [rax - 0x32]; 
0x00000000000bde65: int 0xf7; push qword ptr [rax]; iretd; idiv edi; adc al, 0xf7; call rax; 
0x000000000003698f: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000002fe18: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000082436: int1; call rbx; 
0x00000000000bea15: int1; clc; call rax; 
0x00000000000bea15: int1; clc; call rax; int1; clc; jmp rax; 
0x00000000000bea21: int1; clc; inc dword ptr [rax]; clc; call qword ptr [rax]; 
0x00000000000bea11: int1; clc; inc eax; int1; clc; call rax; 
0x00000000000bea19: int1; clc; jmp rax; 
0x00000000000bea0d: int1; clc; push qword ptr [rax - 0x3f00070f]; int1; clc; call rax; 
0x00000000000cda25: int1; cli; call qword ptr [rax - 0x700050e]; cli; call rax; 
0x00000000000cd901: int1; cli; call rsp; 
0x00000000000e12d1: int1; cli; jmp qword ptr [rcx]; 
0x00000000000cd8f5: int1; cli; jmp rsp; 
0x00000000000cd8fd: int1; cli; ljmp [rcx + rsi*8]; cli; call rsp; 
0x00000000000d68dd: int1; cmc; call qword ptr [rax]; 
0x0000000000042501: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000051402: int1; dec byte ptr [rax + 0x7f]; jg 0x5140b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000000515a8: int1; dec byte ptr [rax + 0x7f]; jg 0x515b1; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000005122c: int1; dec byte ptr [rax + 0x7f]; jl 0x51249; cld; vzeroupper; ret; 
0x00000000000bbee9: int1; hlt; inc dword ptr [rax + 0x32fff4f1]; int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000bbef1: int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000bbeed: int1; hlt; push qword ptr [rdx]; int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x0000000000041ee1: int1; jl 0x41f2c; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000005066d: int1; jl 0x506b8; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050674: int1; jl 0x506bf; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005067b: int1; jl 0x506c6; adc dword ptr [rsi - 1], edx; ret; 
0x000000000005068e: int1; jl 0x506d9; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050695: int1; jl 0x506e0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005069c: int1; jl 0x506e7; adc dword ptr [rsi - 1], edx; ret; 
0x00000000000506a9: int1; jl 0x506f4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000506af: int1; jl 0x506fa; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000050776: int1; jl 0x507c1; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005077d: int1; jl 0x507c8; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050784: int1; jl 0x507cf; adc dword ptr [rsi - 1], edx; ret; 
0x00000000000507ce: int1; jl 0x50819; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507d5: int1; jl 0x50820; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507dc: int1; jl 0x50827; adc dword ptr [rsi + 3], edx; ret; 
0x000000000005086b: int1; jl 0x508b6; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000050872: int1; jl 0x508bd; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000050879: int1; jl 0x508c4; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000051b05: int1; jmp rcx; 
0x000000000007f54b: int1; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x0000000000051c29: int1; mov eax, eax; ret; 
0x000000000003e4ab: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000398df: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e4a3: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000039a57: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a73: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000004fa43: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000051c10: int1; pop rbx; mov eax, eax; ret; 
0x00000000000b7534: int1; push rax; call 0x16e60; nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x00000000000d5a11: int1; std; jmp qword ptr [rax - 0xf]; 
0x000000000004fa47: int1; sub eax, edx; ret; 
0x00000000000359a1: int1; sub rax, rcx; je 0x359b0; sbb eax, eax; or eax, 1; ret; 
0x00000000000a034b: int1; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0xa0330; mov eax, 1; ret; 
0x00000000000488bd: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b1c2e: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000008d25d: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d7b61: iretd; add byte ptr [rax], al; pop rax; add edi, esi; call rax; 
0x00000000000bb867: iretd; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x00000000000b8fbf: iretd; add dword ptr [rax], eax; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000008b6da: iretd; call 0x57650; test eax, eax; js 0x8b6f2; pop rbx; ret; 
0x00000000000815c3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000001dd11: iretd; cmp rax, rdi; jbe 0x1de18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000bde69: iretd; idiv edi; adc al, 0xf7; call rax; 
0x00000000000bde69: iretd; idiv edi; adc al, 0xf7; call rax; sal edi, 1; jmp qword ptr [rax]; 
0x000000000003e22d: iretd; inc byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000008b16: iretd; inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x000000000005096a: iretd; jb 0x50ad4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050cc5: iretd; jb 0x50e91; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000051110: iretd; jb 0x5134c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000d1621: iretd; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000009091a: iretd; movsx eax, cl; neg eax; ret; 
0x000000000002fee2: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000002d796: iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x00000000000d2a2d: iretd; ret 0x8b36; 
0x00000000000d77a5: iretd; sti; jmp qword ptr [rax - 0x47]; 
0x00000000000b8fbe: iretq; add dword ptr [rax], eax; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000016171: ja 0x167f5; lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000187a6: ja 0x187b8; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rcx; xor eax, eax; ret; 
0x000000000001b933: ja 0x1b98d; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000002d447: ja 0x2d5c0; lea rdx, [rip + 0x903ac]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000036085: ja 0x36100; or byte ptr [rax], al; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036261: ja 0x3626b; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000038ac5: ja 0x38b17; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a385: ja 0x3a3c0; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000423b3: ja 0x423ae; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000004db97: ja 0x4db9b; ret; 
0x000000000004dbb3: ja 0x4dbb9; mov dword ptr [rdi], ecx; ret; 
0x000000000004dbf4: ja 0x4dbfe; mov qword ptr [rdi], rcx; ret; 
0x000000000004dc79: ja 0x4dc8b; ret; 
0x000000000004dccf: ja 0x4dce5; ret; 
0x000000000004dd51: ja 0x4dd6b; ret; 
0x000000000004e1b7: ja 0x4e1bb; lea rax, [rdi + 2]; ret; 
0x000000000004e1d3: ja 0x4e1d9; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000004e224: ja 0x4e22e; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004e309: ja 0x4e31b; lea rax, [rdi + 0x10]; ret; 
0x000000000004e37f: ja 0x4e395; lea rax, [rdi + 0x14]; ret; 
0x000000000004e401: ja 0x4e41b; lea rax, [rdi + 0x18]; ret; 
0x0000000000050984: ja 0x509ac; jb 0x5098d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000005093d: ja 0x509bd; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000050b50: ja 0x50b72; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050c1e: ja 0x50c40; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050ce4: ja 0x50d21; jb 0x50ced; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000050f28: ja 0x50f6a; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000051044: ja 0x51086; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000051134: ja 0x51189; jb 0x5113d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000513ff: ja 0x51403; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000000515a5: ja 0x515a9; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000051662: ja 0x5166f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000051612: ja 0x51678; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005167c: ja 0x51694; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000051703: ja 0x5171a; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x00000000000517ba: ja 0x517ca; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000005176a: ja 0x517d3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000051871: ja 0x5189f; jb 0x51877; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000051953: ja 0x51967; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000518f3: ja 0x51970; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000051a39: ja 0x51a75; jb 0x51a3f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000055fdc: ja 0x56000; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000056216: ja 0x564d0; lea rdx, [rip + 0x68f19]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000056596: ja 0x565c8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000000565e5: ja 0x56618; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000059584: ja 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000059d10: ja 0x59d34; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005aaac: ja 0x5aa80; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000005aa35: ja 0x5aa80; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000005b95d: ja 0x5c0a9; movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x000000000005ba37: ja 0x5c21a; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x000000000006806a: ja 0x68150; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x0000000000068569: ja 0x686b0; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000006b4fa: ja 0x6b514; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000073632: ja 0x73610; mov eax, r9d; ret; 
0x000000000007c1c5: ja 0x7c1f0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000007c329: ja 0x7c6e0; lea rcx, [rip + 0x514ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000007c960: ja 0x7c9f0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000007ca74: ja 0x7caa8; lea rdi, [rip + 0x50eef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000007cade: ja 0x7ce20; lea rdx, [rip + 0x50f3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000081cb8: ja 0x81d02; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000082e78: ja 0x82ec2; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000084ef6: ja 0x84f28; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000084f48: ja 0x84f80; mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000000b4545: ja 0x86eb; lea r8, [rip + 0x21462]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b4771: ja 0x86f0; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000008bb80: ja 0x8ced3; lea rcx, [rip + 0x42d93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x0000000000091c41: ja 0x91c3f; jmp qword ptr [rsi - 0x70]; 
0x00000000000928de: ja 0x92929; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000009ea48: ja 0x9ea30; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000a960a: ja 0xa9614; mov rdi, qword ptr [rdi]; call 0xb3e60; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000000a96de: ja 0xa96e8; mov rdi, qword ptr [rdi]; call 0xb3b60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000000ae78: ja 0xac18; lea rdx, [rip + 0xb102f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000affc: ja 0xad21; lea rdx, [rip + 0xb0ed7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b0e8: ja 0xad4f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000000b1c9: ja 0xad60; lea rdx, [rip + 0xb0d62]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000b573f: ja 0xb5cb1; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000000b60b5: ja 0xb60ec; mov eax, dword ptr [r15 + 8]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000000b737d: ja 0xb7381; sbb eax, eax; ret; 
0x00000000000be95d: ja 0xbe957; call qword ptr [rax]; 
0x00000000000bfff8: ja 0xbffa6; stc; jmp qword ptr [rcx]; 
0x00000000000d2f24: ja 0xd2ea9; ret 0x48f; 
0x00000000000e0f51: ja 0xe0f45; jmp qword ptr [rcx]; 
0x000000000000ecbd: ja 0xec95; mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020c67: jae 0x20ca1; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000229ad: jae 0x229d0; movzx eax, byte ptr [rax]; ret; 
0x000000000002d449: jae 0x2d44c; add byte ptr [rax], al; lea rdx, [rip + 0x903ac]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002e45f: jae 0x2e461; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x000000000002e5b9: jae 0x2e5ee; add al, byte ptr [rax]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x0000000000035915: jae 0x35bb0; xor eax, eax; vzeroupper; ret; 
0x0000000000035e89: jae 0x35f06; or byte ptr [rax], al; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003662d: jae 0x36637; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000366a7: jae 0x366b1; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000003a189: jae 0x3a1c6; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000516fe: jae 0x51713; cmp dl, 1; ja 0x5171a; jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x000000000005651d: jae 0x56520; ret; 
0x000000000005762d: jae 0x57630; ret; 
0x000000000005765d: jae 0x57660; ret; 
0x000000000005768d: jae 0x57690; ret; 
0x0000000000058d40: jae 0x58d43; ret; 
0x0000000000058d6d: jae 0x58d70; ret; 
0x0000000000058e3d: jae 0x58e40; ret; 
0x0000000000058e6d: jae 0x58e70; ret; 
0x0000000000059020: jae 0x59023; ret; 
0x000000000005904d: jae 0x59050; ret; 
0x000000000006799e: jae 0x6799a; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x0000000000068f0e: jae 0x68f50; xor eax, eax; pop rbx; ret; 
0x000000000007ea16: jae 0x7e96b; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082023: jae 0x82022; jmp qword ptr [rsi + 0x2e]; 
0x0000000000084e8d: jae 0x84e90; ret; 
0x000000000008f3eb: jae 0x8f391; xor eax, eax; ret; 
0x00000000000920a7: jae 0x920a5; jmp qword ptr [rsi + 0xf]; 
0x0000000000094bee: jae 0x948ab; lea rdx, [rip + 0x3ed29]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d2aa: jae 0x9d2a0; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x000000000009d5a1: jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000a0354: jae 0xa0330; mov eax, 1; ret; 
0x00000000000b1d8d: jae 0xb1d90; ret; 
0x00000000000b36d4: jae 0xb36cb; jmp qword ptr [rsi + 0xf]; 
0x00000000000bd9ed: jae 0xbd9e6; jmp qword ptr [rax]; 
0x00000000000be955: jae 0xbe94f; call qword ptr [rax]; 
0x00000000000bf149: jae 0xbf144; push qword ptr [rsi]; jae 0xbf148; lcall [rsi + 0x72]; stc; call rcx; 
0x00000000000bf14d: jae 0xbf148; lcall [rsi + 0x72]; stc; call rcx; 
0x00000000000bf1b5: jae 0xbf1b0; lcall [rax]; jb 0xbf1b4; call rcx; 
0x00000000000bf259: jae 0xbf254; lcall [rax]; jb 0xbf258; push qword ptr [rdx + 0x72]; stc; jmp qword ptr [rdx]; 
0x00000000000bf269: jae 0xbf264; call rcx; 
0x00000000000bf269: jae 0xbf264; call rcx; jno 0xbf268; jmp rsp; 
0x00000000000bf4d5: jae 0xbf4d0; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; jmp rsp; 
0x00000000000bf4dd: jae 0xbf4d8; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; jmp rsp; 
0x00000000000bf4e5: jae 0xbf4e0; jmp rsp; 
0x00000000000bf501: jae 0xbf4fc; call rcx; 
0x00000000000d14e2: jae 0xd14bb; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x00000000000d237e: jae 0xd2353; push rsi; pop rdx; je 0xd2348; ret 0xacfc; 
0x00000000000d9bc2: jae 0xd9bce; ret; 
0x00000000000e11cc: jae 0xe11d2; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x0000000000027f17: jb 0x27ef8; mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x0000000000041f27: jb 0x41f3d; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000041f54: jb 0x41f65; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000041f68: jb 0x41f76; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000041f79: jb 0x41f8b; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000041f8e: jb 0x41f94; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000506a6: jb 0x506b6; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000506b9: jb 0x506c5; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000000506d2: jb 0x506de; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000000506e5: jb 0x506ed; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x00000000000506f0: jb 0x506fa; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000506fd: jb 0x50701; mov byte ptr [rdi], cl; ret; 
0x0000000000050904: jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050986: jb 0x5098d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000005096b: jb 0x50ad4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050ce6: jb 0x50ced; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000050cc6: jb 0x50e91; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000051136: jb 0x5113d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000051111: jb 0x5134c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000051705: jb 0x51709; mov byte ptr [rdi], cl; ret; 
0x0000000000051873: jb 0x51877; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000051a3b: jb 0x51a3f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000054101: jb 0x5412c; add byte ptr [rax + 0x39], cl; ret 0x975; 
0x000000000005957e: jb 0x595c0; cmp rcx, qword ptr [rax + 0x18]; ja 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000090fb: jb 0x9096; nop; leave; ret; 
0x0000000000092113: jb 0x92111; jmp qword ptr [rsi + 0x2e]; 
0x00000000000bd9e9: jb 0xbd9e2; push qword ptr [rax]; jae 0xbd9e6; jmp qword ptr [rax]; 
0x00000000000bf151: jb 0xbf14c; call rcx; 
0x00000000000bf1a1: jb 0xbf19c; inc dword ptr [rdx + rsi*2]; stc; call rcx; 
0x00000000000bf1a5: jb 0xbf1a0; call rcx; 
0x00000000000bf1ad: jb 0xbf1a8; jmp rsp; 
0x00000000000bf1b9: jb 0xbf1b4; call rcx; 
0x00000000000bf1c1: jb 0xbf1bc; call rcx; 
0x00000000000bf1e9: jb 0xbf1e4; ljmp [rdx + rsi*2]; stc; dec dword ptr [rsi]; jb 0xbf1ec; jmp rsp; 
0x00000000000bf1ed: jb 0xbf1e8; dec dword ptr [rsi]; jb 0xbf1ec; jmp rsp; 
0x00000000000bf1f1: jb 0xbf1ec; jmp rsp; 
0x00000000000bf22d: jb 0xbf228; call rcx; 
0x00000000000bf251: jb 0xbf24c; jmp qword ptr [rdx]; 
0x00000000000bf25d: jb 0xbf258; push qword ptr [rdx + 0x72]; stc; jmp qword ptr [rdx]; 
0x00000000000bf261: jb 0xbf25c; jmp qword ptr [rdx]; 
0x00000000000bf265: jb 0xbf260; dec dword ptr [rbp + 0x73]; stc; call rcx; 
0x00000000000bf265: jb 0xbf260; dec dword ptr [rbp + 0x73]; stc; call rcx; jno 0xbf268; jmp rsp; 
0x00000000000bf260: jb 0xbf2d4; stc; jmp qword ptr [rdx]; 
0x00000000000bf30d: jb 0xbf308; call rcx; 
0x00000000000bf331: jb 0xbf32c; push qword ptr [rsi]; jb 0xbf330; push rsp; jno 0xbf334; call rcx; 
0x00000000000bf335: jb 0xbf330; push rsp; jno 0xbf334; call rcx; 
0x00000000000bf3fd: jb 0xbf3f8; push qword ptr [rsi]; jb 0xbf3fc; push rsp; jno 0xbf400; call rcx; 
0x00000000000bf401: jb 0xbf3fc; push rsp; jno 0xbf400; call rcx; 
0x00000000000bf40d: jb 0xbf408; call rcx; 
0x00000000000bf4f1: jb 0xbf4ec; push qword ptr [rsi]; jb 0xbf4f0; push rsp; jno 0xbf4f4; call rcx; 
0x00000000000bf4f5: jb 0xbf4f0; push rsp; jno 0xbf4f4; call rcx; 
0x0000000000018d28: jbe 0x18d40; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000019458: jbe 0x19470; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000001a375: jbe 0x1a3e8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000001a73f: jbe 0x1a789; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000001dd15: jbe 0x1de18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000001e09c: jbe 0x1e280; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000020714: jbe 0x20770; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000002080a: jbe 0x20820; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000002091b: jbe 0x20882; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002096b: jbe 0x20a20; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020b93: jbe 0x20c28; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020d11: jbe 0x20d48; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000020d8a: jbe 0x20db0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000020ef6: jbe 0x20f08; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000021b1a: jbe 0x21b50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000021bb1: jbe 0x21bd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000000329a7: jbe 0x329b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000034107: jbe 0x34114; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000350e7: jbe 0x350f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000036393: jbe 0x3639d; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000064132: jbe 0x6412a; ret; 
0x000000000006b6a7: jbe 0x6ccc5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006c166: jbe 0x6ccdd; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006be22: jbe 0x6cd41; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000006bc4d: jbe 0x6cd59; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000007799a: jbe 0x78710; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007a509: jbe 0x7b8d0; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007e66a: jbe 0x7e6a0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000007e808: jbe 0x7e82e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007e9b8: jbe 0x7e9e2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007f0c1: jbe 0x7f0eb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007f333: jbe 0x7f354; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007f44f: jbe 0x7f480; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f4e9: jbe 0x7f500; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f5d0: jbe 0x7f5f6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000080e5f: jbe 0x81100; add rax, rdi; add rax, rcx; ret; 
0x00000000000810c6: jbe 0x81100; add rax, rdi; ret; 
0x00000000000810d6: jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000810e6: jbe 0x81100; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000810f6: jbe 0x81100; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000081317: jbe 0x81370; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000081337: jbe 0x81370; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000081357: jbe 0x81370; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000081307: jbe 0x81370; add rax, rdi; vzeroupper; ret; 
0x0000000000081cd7: jbe 0x81d30; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000081cf7: jbe 0x81d30; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000081d17: jbe 0x81d30; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000081cb7: jbe 0x81d30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000082e77: jbe 0x82ef0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000090998: jbe 0x90980; cmp r8d, eax; je 0x908e6; sub eax, r8d; ret; 
0x000000000000a6e4: jbe 0xa6f6; syscall; 
0x00000000000b750f: jbe 0xb7530; mov eax, 4; cmp dil, 3; jne 0xb7520; ret; 
0x00000000000b756f: jbe 0xb7590; cmp dil, 0x30; jne 0xb7580; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b75bf: jbe 0xb75e0; cmp dil, 0x30; jne 0xb75d0; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000bdf00: jbe 0xbdf0f; clc; jmp rsi; 
0x00000000000d1799: jbe 0xd17ce; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000000d6e19: jbe 0xd6e1b; add byte ptr [rax + 0x34], bl; clc; jmp rax; 
0x000000000001bbdd: je 0x1bb4e; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000001bb4c: je 0x1bbb8; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000001c28d: je 0x1c2b3; cmp byte ptr [rax + 0x29], cl; ret; 
0x00000000000208db: je 0x20858; mov eax, 0xffffffff; ret; 
0x0000000000020832: je 0x20858; or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000020acb: je 0x20a48; mov eax, 0xffffffff; ret; 
0x0000000000021b25: je 0x21b2a; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000021c07: je 0x21c18; cmp rsi, rcx; jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x0000000000022905: je 0x22933; add byte ptr [rbx + 0x2c74b505], al; add byte ptr [rcx], al; ret; 
0x000000000002290b: je 0x22939; add byte ptr [rcx], al; ret; 
0x00000000000229a4: je 0x229b8; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x229d0; movzx eax, byte ptr [rax]; ret; 
0x00000000000229e5: je 0x229f8; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x00000000000238be: je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x00000000000238b4: je 0x23912; mov eax, dword ptr [rip + 0x2c6564]; test eax, eax; je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x0000000000026c76: je 0x26c9c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000002cb22: je 0x2cb48; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000002d013: je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x000000000002d00e: je 0x2d038; test rax, rax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x000000000002e4a7: je 0x2e4c8; test byte ptr [rip + 0x2bc42d], 2; lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e561: je 0x2e580; test eax, eax; lea rdx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000002e747: je 0x2e768; test byte ptr [rip + 0x2bc18d], 2; lea rdx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002fca9: je 0x2fcc0; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000002fed9: je 0x2fd75; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000350ca: je 0x350cd; xchg eax, edx; sub eax, edx; ret; 
0x0000000000035168: je 0x35180; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000000352aa: je 0x352fb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000035353: je 0x35370; tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000035951: je 0x3596a; vpmovmskb eax, ymm2; sub eax, -1; jne 0x35960; vzeroupper; ret; 
0x00000000000359a5: je 0x359b0; sbb eax, eax; or eax, 1; ret; 
0x0000000000035a49: je 0x35a1c; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x35960; ret; 
0x0000000000035a87: je 0x35aa0; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x35960; ret; 
0x0000000000035b96: je 0x35baf; vpmovmskb eax, ymm2; sub eax, -1; jne 0x35960; vzeroupper; ret; 
0x000000000003659e: je 0x365a8; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000036fc7: je 0x36fcb; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000376c8: je 0x3772e; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000049d71: je 0x49d80; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000004a1e1: je 0x4a200; tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000004a38c: je 0x4a36e; pmovmskb edx, xmm4; test edx, edx; je 0x4a39a; bsf eax, edx; ret; 
0x000000000004a394: je 0x4a39a; bsf eax, edx; ret; 
0x000000000004a43d: je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3dc: je 0x4a460; bsf rax, rdx; ret; 
0x00000000000505a4: je 0x50580; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x00000000000508fb: je 0x50908; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050a13: je 0x50a2c; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000051228: je 0x51241; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000051bbd: je 0x51ae2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000051b6d: je 0x51ae2; mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x00000000000520be: je 0x520c8; xor eax, eax; ret; 
0x00000000000520b9: je 0x520d0; cmp eax, 2; je 0x520c8; xor eax, eax; ret; 
0x0000000000052535: je 0x5253b; add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000534e7: je 0x5350d; sbb byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000055cfe: je 0x55d02; call rax; 
0x0000000000055f07: je 0x55e8f; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rdi + 0x10]; test rax, rax; je 0x55f1a; call rax; 
0x0000000000055f13: je 0x55f1a; call rax; 
0x0000000000055e6a: je 0x55f80; call rax; 
0x000000000005677e: je 0x567b0; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000056b18: je 0x56b40; mov eax, 0x48; syscall; 
0x0000000000056ce3: je 0x56c8d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000056ed7: je 0x56efd; adc byte ptr [rdi], cl; xchg eax, esp; ret 0x2044; 
0x0000000000059129: je 0x5912c; ret; 
0x000000000005918d: je 0x59190; ret; 
0x00000000000595e9: je 0x59610; xor esi, esi; lea rdi, [rip + 0x660fd]; mov eax, 0x15; syscall; 
0x0000000000059c1c: je 0x59c28; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000059c17: je 0x59c28; test rdx, rdx; je 0x59c28; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000005a964: je 0x5a970; mov dword ptr [rip + 0x28be4c], edx; pop rbx; ret; 
0x000000000005c094: je 0x5bace; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000005c0d4: je 0x5be21; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000005ba2d: je 0x5c028; cmp r14, 0x25; ja 0x5c21a; movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x000000000005bac8: je 0x5c08f; add rax, qword ptr [r14 + 0x10]; add r14, 0x18; call rax; 
0x000000000005be1b: je 0x5c0cf; add rax, qword ptr [r15 + 0x10]; call rax; 
0x000000000005ef7c: je 0x5efa2; sub byte ptr [rax - 0x75], cl; jl 0x5efa7; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000005f3a1: je 0x5f3c7; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000005f695: je 0x5f6bb; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000060d2e: je 0x60d54; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000000612e3: je 0x61309; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000062315: je 0x6233b; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000064072: je 0x64098; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000652b2: je 0x652d8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000006695a: je 0x66969; call 0x91790; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000006727a: je 0x6727e; call rsi; 
0x0000000000067376: je 0x6737a; call rax; 
0x000000000006877b: je 0x6877f; call rax; 
0x0000000000073629: je 0x73640; movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x73610; mov eax, r9d; ret; 
0x000000000007647c: je 0x764a2; and byte ptr [rax + 1], cl; ret; 
0x000000000007c79e: je 0x7c318; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000007ce3e: je 0x7cacd; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000007e3c6: je 0x7e410; add esp, 0x20; pop rbx; ret; 
0x000000000007e88d: je 0x7e8a0; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007ea8d: je 0x7eaa0; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007f239: je 0x7f240; pop rbx; pop rbp; pop r12; ret; 
0x000000000007f273: je 0x7f2d0; pop rbp; pop r12; ret; 
0x000000000007f2ff: je 0x7f35c; pop rbp; pop r12; ret; 
0x000000000007f45a: je 0x7f45f; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000007f48a: je 0x7f4b0; or al, 0xeb; ret 0x5590; 
0x000000000007f4b6: je 0x7f4bb; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007f547: je 0x7f558; cmp rcx, rsi; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x000000000007ffa9: je 0x7ffd1; mov rax, rdx; pop rbx; ret; 
0x0000000000080fcc: je 0x8101d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000008106e: je 0x810bf; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000081430: je 0x815f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000816b4: je 0x815f0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000814be: je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000008184f: je 0x81804; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000081874: je 0x81890; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000819a4: je 0x819b3; sar rdx, cl; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x00000000000819ac: je 0x819d0; bsf rax, rdx; ret; 
0x000000000008193c: je 0x819e0; bsf rax, rdx; ret; 
0x000000000008242e: je 0x82454; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000008266c: je 0x82690; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000082600: je 0x826a0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000829f9: je 0x82a10; mov cl, dl; and cl, 0xf; je 0x82a20; ret; 
0x0000000000082a00: je 0x82a20; ret; 
0x0000000000082a15: je 0x82a30; add rax, 2; ret; 
0x000000000008377d: je 0x83792; mov rsi, rbp; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x000000000008388b: je 0x838b1; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000083b41: je 0x83b67; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000083c17: je 0x83c3d; xor byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000083c35: je 0x83c5b; cmp byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000083c6: je 0x83ca; call rax; 
0x00000000000083c6: je 0x83ca; call rax; add rsp, 8; ret; 
0x00000000000845e4: je 0x8460a; sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000084602: je 0x84628; xor byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000084fcd: je 0x85008; mov eax, dword ptr [rip + 0x266413]; test eax, eax; jne 0x85036; mov eax, 0x101; syscall; 
0x000000000008505b: je 0x85081; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000850ed: je 0x85118; mov eax, 0x101; syscall; 
0x000000000008565a: je 0x85728; xor eax, eax; leave; ret; 
0x000000000008b578: je 0x8b590; sub rsp, 8; call qword ptr [rip + 0x25cc9c]; xor eax, eax; add rsp, 8; ret; 
0x0000000000008c6d: je 0x8c78; jmp rax; 
0x0000000000008c61: je 0x8c78; mov rax, 0; test rax, rax; je 0x8c78; jmp rax; 
0x0000000000008cae: je 0x8cb8; jmp rax; 
0x0000000000008ca2: je 0x8cb8; mov rax, 0; test rax, rax; je 0x8cb8; jmp rax; 
0x000000000008e1c6: je 0x8e1cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000008ec65: je 0x8ec68; lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000008ed6: je 0x8edd; call 0x593b0; leave; ret; 
0x000000000008efb2: je 0x8efd8; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x000000000009099d: je 0x908e6; sub eax, r8d; ret; 
0x00000000000921a5: je 0x92190; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000009250: je 0x9257; call 0x593b0; leave; ret; 
0x00000000000093f1: je 0x93f8; call 0x593b0; leave; ret; 
0x000000000009401a: je 0x94004; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000000954b: je 0x9552; call 0x593b0; leave; ret; 
0x0000000000009660: je 0x9667; call 0x593b0; leave; ret; 
0x0000000000009a30: je 0x9a37; call 0x593b0; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000009c963: je 0x9c973; lea rax, [rip + 0x24e1f4]; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x000000000009cdc3: je 0x9cdcf; lea rdx, [rip + 0x24bd94]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009d072: je 0x9d080; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d7a8: je 0x9d7ce; or byte ptr [rax + 1], cl; ret; 
0x000000000009ea93: je 0x9e9ff; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000009ef0c: je 0x9ef18; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000009fa57: je 0x9fa7d; add byte ptr [rax], al; jne 0x9fa5f; pop rbx; ret; 
0x000000000009fe00: je 0x9fe10; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000000a04b: je 0xa071; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000000a428: je 0xa4fb; add rsp, 0x98; ret; 
0x00000000000b41c7: je 0xb41f0; xor eax, eax; test edi, edi; jne 0xb40f3; add rsp, 0x38; ret; 
0x00000000000b425b: je 0xb4281; adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000000b4512: je 0xb452a; movss xmm0, dword ptr [rip + 0x20d2c]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000b46b3: je 0xb46bb; cmp dil, 0x10; jne 0xb46d8; xor eax, eax; ret; 
0x00000000000b469b: je 0xb46bb; cmp dil, 0x30; jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b476d: je 0xb47e0; cmp al, 0x2f; ja 0x86f0; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x00000000000b67b8: je 0xb679c; add rsp, 0x18; ret; 
0x00000000000b67a1: je 0xb680b; add rsp, 0x18; ret; 
0x00000000000b6898: je 0xb6878; add rsp, 8; ret; 
0x00000000000b68f8: je 0xb68d4; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x00000000000b6983: je 0xb698a; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000b72c7: je 0xb72d8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x00000000000b7533: je 0xb7526; push rax; call 0x16e60; nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x00000000000b750d: je 0xb7540; jbe 0xb7530; mov eax, 4; cmp dil, 3; jne 0xb7520; ret; 
0x00000000000b7599: je 0xb7586; push rax; call 0x16e60; nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; ret; 
0x00000000000b756d: je 0xb75a8; jbe 0xb7590; cmp dil, 0x30; jne 0xb7580; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b75e9: je 0xb75d6; push rax; call 0x16e60; nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; ret; 
0x00000000000b75bd: je 0xb75f8; jbe 0xb75e0; cmp dil, 0x30; jne 0xb75d0; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b77fb: je 0xb7810; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000b8757: je 0xb8770; mov rsi, qword ptr [r13 + r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x00000000000b8884: je 0xb88b8; lea rbp, [r13 - 1]; mov rdx, r15; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x00000000000b8f7a: je 0xb8f80; cmp al, 0x10; jne 0xb8f98; xor eax, eax; ret; 
0x00000000000ba413: je 0xba41c; call rax; 
0x00000000000ba40a: je 0xba421; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xba41c; call rax; 
0x00000000000ba667: je 0xba651; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000bd9f1: je 0xbd9ea; call qword ptr [rax]; 
0x00000000000be274: je 0xbe27a; clc; jmp rsp; 
0x00000000000c117d: je 0xc1179; dec dword ptr [rsi*2 + 0x74fcfffa]; cli; jmp rsp; 
0x00000000000c1185: je 0xc1181; jmp rsp; 
0x00000000000c1199: je 0xc1195; jmp rsp; 
0x00000000000d1648: je 0xd160f; xor al, 0xd8; ret; 
0x00000000000d2382: je 0xd2348; ret 0xacfc; 
0x00000000000d6648: je 0xd6691; add byte ptr [rax], al; sal spl, cl; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000d67f5: je 0xd67ec; jmp qword ptr [rax]; 
0x00000000000d6d99: je 0xd6d9b; add byte ptr [rax], bl; clc; call qword ptr [rax + 0x74]; 
0x00000000000dc45c: je 0xdc4a4; add byte ptr [rax], al; and byte ptr [rbx - 9], dl; call qword ptr [rbx]; 
0x00000000000e0e2c: je 0xe0dfe; cli; jmp qword ptr [rdx]; 
0x00000000000e175c: je 0xe16f7; add byte ptr [rax], al; push rax; or ebx, edi; jmp qword ptr [rsi]; 
0x00000000000e185c: je 0xe17f8; add byte ptr [rax], al; adc ebx, edi; jmp qword ptr [rcx]; 
0x00000000000e25dc: je 0xe261e; cld; call qword ptr [rbx]; 
0x000000000000e88e: je 0xe896; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x00000000000187e2: jg 0x18825; mov dword ptr [rax], edx; mov dword ptr [rsi], edx; ret; 
0x0000000000020ca2: jg 0x20cdc; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x00000000000376be: jg 0x3770f; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003785d: jg 0x3785f; add rsi, rdx; lea r11, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000378fe: jg 0x37900; lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379ad: jg 0x379af; add rsi, rdx; lea r11, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a4e: jg 0x37a50; lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037afd: jg 0x37aff; add rsi, rdx; lea r11, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c4d: jg 0x37c4f; add rsi, rdx; lea r11, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037cee: jg 0x37cf0; lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037d9d: jg 0x37d9f; add rsi, rdx; lea r11, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037eed: jg 0x37eef; add rsi, rdx; lea r11, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f8e: jg 0x37f90; lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003803d: jg 0x3803f; add rsi, rdx; lea r11, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038195: jg 0x38197; lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003822e: jg 0x38230; lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382dd: jg 0x382df; add rsi, rdx; lea r11, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003837e: jg 0x38380; lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003842d: jg 0x3842f; add rsi, rdx; lea r11, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384ce: jg 0x384d0; lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003857d: jg 0x3857f; add rsi, rdx; lea r11, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003861e: jg 0x38620; lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386cd: jg 0x386cf; add rsi, rdx; lea r11, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003881d: jg 0x3881f; add rsi, rdx; lea r11, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388be: jg 0x388c0; lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003896d: jg 0x3896f; add rsi, rdx; lea r11, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a0e: jg 0x38a10; lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038abd: jg 0x38abf; add rsi, rdx; lea r11, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b5e: jg 0x38b60; lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000394c9: jg 0x3951a; ret; 
0x000000000003954f: jg 0x39598; ret; 
0x00000000000396c9: jg 0x3971a; ret 0x894c; 
0x000000000003974f: jg 0x39798; ret 0x894c; 
0x000000000003a08e: jg 0x3a0df; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a22d: jg 0x3a22f; add rsi, rdx; lea r11, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2ce: jg 0x3a2d0; lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a37d: jg 0x3a37f; add rsi, rdx; lea r11, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a41e: jg 0x3a420; lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4cd: jg 0x3a4cf; add rsi, rdx; lea r11, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a56e: jg 0x3a570; lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a61d: jg 0x3a61f; add rsi, rdx; lea r11, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6be: jg 0x3a6c0; lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a76d: jg 0x3a76f; add rsi, rdx; lea r11, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a80e: jg 0x3a810; lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8bd: jg 0x3a8bf; add rsi, rdx; lea r11, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa0d: jg 0x3aa0f; add rsi, rdx; lea r11, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaae: jg 0x3aab0; lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acad: jg 0x3acaf; add rsi, rdx; lea r11, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad4e: jg 0x3ad50; lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003adfd: jg 0x3adff; add rsi, rdx; lea r11, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae9e: jg 0x3aea0; lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af4d: jg 0x3af4f; add rsi, rdx; lea r11, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afee: jg 0x3aff0; lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b09d: jg 0x3b09f; add rsi, rdx; lea r11, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b13e: jg 0x3b140; lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1ed: jg 0x3b1ef; add rsi, rdx; lea r11, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b28e: jg 0x3b290; lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b33d: jg 0x3b33f; add rsi, rdx; lea r11, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3de: jg 0x3b3e0; lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b48d: jg 0x3b48f; add rsi, rdx; lea r11, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b52e: jg 0x3b530; lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003be99: jg 0x3beea; ret; 
0x000000000003bf1f: jg 0x3bf68; ret; 
0x000000000003c099: jg 0x3c0ea; ret 0x894c; 
0x000000000003c11f: jg 0x3c168; ret 0x894c; 
0x000000000003c7be: jg 0x3c780; sub rdx, 0x40; lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c83d: jg 0x3c855; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e488: jg 0x3e4d1; loope 0x3e47f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000003e4ff: jg 0x3e548; ret 0xff2; 
0x000000000003e58f: jg 0x3e5d8; ret; 
0x000000000003e638: jg 0x3e681; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000003e6b8: jg 0x3e701; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000003e738: jg 0x3e781; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000003e7b8: jg 0x3e801; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000003ea38: jg 0x3ea81; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eab8: jg 0x3eb01; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eb48: jg 0x3eb91; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ebc8: jg 0x3ec11; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ec3c: jg 0x3ec45; ret; 
0x000000000003ec96: jg 0x3eca7; ret; 
0x000000000003ec91: jg 0x3ecda; psllq mm1, qword ptr [rdi]; jg 0x3eca7; ret; 
0x000000000003ed06: jg 0x3ed17; ret; 
0x000000000003ed76: jg 0x3ed87; ret; 
0x000000000003ed63: jg 0x3edac; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed71: jg 0x3edba; or eax, 0xf7f0ff3; ret; 
0x000000000003ede6: jg 0x3edf7; ret; 
0x000000000003ede1: jg 0x3ee2a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000003ee56: jg 0x3ee67; ret; 
0x000000000003ee51: jg 0x3ee9a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000003eec6: jg 0x3eed7; ret; 
0x000000000003eec1: jg 0x3ef0a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000003ef36: jg 0x3ef47; ret; 
0x000000000003ef31: jg 0x3ef7a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000003efa6: jg 0x3efb7; ret; 
0x000000000003efa1: jg 0x3efea; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000003f016: jg 0x3f027; ret; 
0x000000000003f086: jg 0x3f097; ret; 
0x000000000003f0f6: jg 0x3f107; ret; 
0x000000000003f0e3: jg 0x3f12c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0f1: jg 0x3f13a; add eax, 0xf7f0ff3; ret; 
0x000000000003f166: jg 0x3f177; ret; 
0x000000000003f161: jg 0x3f1aa; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000003f1d6: jg 0x3f1e7; ret; 
0x000000000003f1d1: jg 0x3f21a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000003f246: jg 0x3f257; ret; 
0x000000000003f241: jg 0x3f28a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000003f2b6: jg 0x3f2c7; ret; 
0x000000000003f2b1: jg 0x3f2fa; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000040fa8: jg 0x40ff1; loope 0x40f9f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000004101f: jg 0x41068; ret 0xff2; 
0x00000000000410af: jg 0x410f8; ret; 
0x0000000000041158: jg 0x411a1; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000411d8: jg 0x41221; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000041258: jg 0x412a1; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000412d8: jg 0x41321; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000041558: jg 0x415a1; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000415d8: jg 0x41621; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000041668: jg 0x416b1; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000416e8: jg 0x41731; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000004175c: jg 0x41765; ret; 
0x00000000000417b6: jg 0x417c7; ret; 
0x00000000000417b1: jg 0x417fa; psllq mm1, qword ptr [rdi]; jg 0x417c7; ret; 
0x0000000000041826: jg 0x41837; ret; 
0x0000000000041896: jg 0x418a7; ret; 
0x0000000000041883: jg 0x418cc; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000041891: jg 0x418da; or eax, 0xf7f0ff3; ret; 
0x0000000000041906: jg 0x41917; ret; 
0x0000000000041901: jg 0x4194a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000041976: jg 0x41987; ret; 
0x0000000000041971: jg 0x419ba; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000000419e6: jg 0x419f7; ret; 
0x00000000000419e1: jg 0x41a2a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000041a56: jg 0x41a67; ret; 
0x0000000000041a51: jg 0x41a9a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000041ac6: jg 0x41ad7; ret; 
0x0000000000041ac1: jg 0x41b0a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000041b36: jg 0x41b47; ret; 
0x0000000000041ba6: jg 0x41bb7; ret; 
0x0000000000041c16: jg 0x41c27; ret; 
0x0000000000041c03: jg 0x41c4c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000041c11: jg 0x41c5a; add eax, 0xf7f0ff3; ret; 
0x0000000000041c86: jg 0x41c97; ret; 
0x0000000000041c81: jg 0x41cca; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000041cf6: jg 0x41d07; ret; 
0x0000000000041cf1: jg 0x41d3a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000041d66: jg 0x41d77; ret; 
0x0000000000041d61: jg 0x41daa; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000041dd6: jg 0x41de7; ret; 
0x0000000000041dd1: jg 0x41e1a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000041f10: jg 0x41f19; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000041f34: jg 0x41f3d; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000041f48: jg 0x41f51; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000000423ba: jg 0x423b4; ret; 
0x000000000004dc66: jg 0x4dc6f; ret; 
0x000000000004dc76: jg 0x4dc7f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000004dc8a: jg 0x4dc93; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004dca9: jg 0x4dcb2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004dcb9: jg 0x4dcc2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004dcc9: jg 0x4dcd2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcea: jg 0x4dcf3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004dd0a: jg 0x4dd13; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004dd2a: jg 0x4dd33; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004dd4a: jg 0x4dd53; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd6e: jg 0x4dd77; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000004dd8d: jg 0x4dd96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004ddad: jg 0x4ddb6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004ddcb: jg 0x4ddd4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004ddeb: jg 0x4ddf4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004de0b: jg 0x4de14; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000004de2b: jg 0x4de34; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004e2f6: jg 0x4e2ff; lea rax, [rdi + 0xf]; ret; 
0x000000000004e306: jg 0x4e30f; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004e31a: jg 0x4e323; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004e339: jg 0x4e342; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004e359: jg 0x4e362; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004e379: jg 0x4e382; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004e39a: jg 0x4e3a3; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004e3ba: jg 0x4e3c3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004e3da: jg 0x4e3e3; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3fa: jg 0x4e403; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004e41e: jg 0x4e427; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004e43d: jg 0x4e446; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004e45d: jg 0x4e466; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004e47b: jg 0x4e484; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004e49b: jg 0x4e4a4; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004e4bb: jg 0x4e4c4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000004e47f: jg 0x4e4d8; or eax, 0x1c478d48; ret; 
0x000000000004e4db: jg 0x4e4e4; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000506c7: jg 0x506d0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000000506bd: jg 0x506d6; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000050b54: jg 0x50b86; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050c22: jg 0x50c54; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050c63: jg 0x50c6c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000050c9f: jg 0x50ca8; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000050cfa: jg 0x50d03; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000050dc6: jg 0x50dcf; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000050e8b: jg 0x50eb0; vzeroupper; ret; 
0x0000000000050e85: jg 0x50ec8; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000050e80: jg 0x50efb; rol ch, 0x7e; jg 0x50ec8; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000050f32: jg 0x50f37; vzeroupper; ret; 
0x0000000000050f2d: jg 0x50f8f; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000050fbe: jg 0x50fe3; vzeroupper; ret; 
0x0000000000050fb8: jg 0x50ffb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000050fb3: jg 0x5102e; rol ch, 0x7e; jg 0x50ffb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000005104e: jg 0x51053; vzeroupper; ret; 
0x000000000005109c: jg 0x510a5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000051049: jg 0x510ab; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000000510e8: jg 0x510f1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000005114a: jg 0x51153; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000051162: jg 0x5116b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000051258: jg 0x51261; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000051346: jg 0x5136b; vzeroupper; ret; 
0x000000000005133f: jg 0x51382; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000051331: jg 0x513a4; jmp qword ptr [rdx - 0xf]; 
0x0000000000051406: jg 0x5140b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000005140c: jg 0x51411; vzeroupper; ret; 
0x00000000000513cc: jg 0x51417; jmp qword ptr [rdx - 0x2f]; 
0x00000000000514df: jg 0x51504; vzeroupper; ret; 
0x00000000000514d8: jg 0x5151b; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000000514ca: jg 0x5153d; jmp qword ptr [rdx - 0xf]; 
0x00000000000515ac: jg 0x515b1; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000000515b2: jg 0x515b7; vzeroupper; ret; 
0x000000000005161c: jg 0x51625; ret; 
0x000000000005166c: jg 0x51675; ret; 
0x0000000000051680: jg 0x51689; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000051684: jg 0x516cd; adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000051774: jg 0x5177d; vzeroupper; ret; 
0x00000000000517c4: jg 0x517cd; vzeroupper; ret; 
0x00000000000517de: jg 0x517e7; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000051883: jg 0x5188c; vzeroupper; ret; 
0x0000000000051901: jg 0x5190a; vzeroupper; ret; 
0x0000000000051961: jg 0x5196a; vzeroupper; ret; 
0x000000000005197d: jg 0x51986; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000051a4b: jg 0x51a54; vzeroupper; ret; 
0x0000000000051a59: jg 0x51a62; vzeroupper; ret; 
0x0000000000051ab0: jg 0x51aeb; ret 0x2b77; 
0x0000000000051c27: jg 0x51c20; int1; mov eax, eax; ret; 
0x0000000000052a0d: jg 0x52a25; add byte ptr [rax], al; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x00000000000595b2: jg 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000062248: jg 0x621d3; ret 0xdb76; 
0x000000000006799d: jg 0x67a12; cli; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x000000000006c822: jg 0x6c833; test byte ptr [rip - 0x7c000011], al; ret; 
0x0000000000076df2: jg 0x76e03; test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000007826a: jg 0x7827b; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x0000000000078367: jg 0x78378; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000092165: jg 0x9218f; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000094019: jg 0x9408f; call 0x942e7; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000000a9413: jg 0xa9415; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000a9481: jg 0xa948c; ret 0xf089; 
0x00000000000b60b2: jg 0xb60bc; add eax, 0x8b413577; or byte ptr [r9 + 0x63], r9b; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x00000000000d6f69: jg 0xd6f6b; add al, bl; cwde; clc; call qword ptr [rax]; 
0x00000000000ddb28: jg 0xddad5; bnd jmp qword ptr [rbx]; 
0x00000000000dfddd: jg 0xdfddf; add byte ptr [rax + 7], dl; cli; jmp qword ptr [rbx]; 
0x000000000001715a: jge 0x1715c; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000035912: jge 0x3592b; call 0x298dc28; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000035c4a: jge 0x35c54; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000051569: jge 0x515b3; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000080c2f: jge 0x80bb8; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000000907f8: jge 0x907f1; dec dword ptr [rax - 0x77]; ret; 
0x000000000009fa52: jge 0x9fa9c; cmp dword ptr [rip + 0x2474f5], 0; jne 0x9fa5f; pop rbx; ret; 
0x00000000000b6c52: jge 0xb6c4c; leave; ret; 
0x00000000000b6dd1: jge 0xb6dcb; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b6f23: jge 0xb6f1d; leave; ret; 
0x00000000000b6f6f: jge 0xb6f69; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b70f6: jge 0xb70f0; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b728a: jge 0xb7284; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b72af: jge 0xb72a9; leave; ret; 
0x00000000000b77f8: jge 0xb7803; jp 0xb7870; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000016358: jl 0x1637e; or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x0000000000021172: jl 0x21189; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000028bcb: jl 0x28bc3; ret 0x7508; 
0x0000000000035d59: jl 0x35d63; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000039e80: jl 0x39ec0; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000041e9f: jl 0x41ee9; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000041ea6: jl 0x41ef0; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000041ead: jl 0x41ef7; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000041eb4: jl 0x41efe; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000041edc: jl 0x41f26; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000041ee2: jl 0x41f2c; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000041ee9: jl 0x41f33; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000041ef0: jl 0x41f3a; adc dword ptr [rcx - 1], ebx; ret; 
0x00000000000420d9: jl 0x42123; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000000420e0: jl 0x4212a; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000000420e7: jl 0x42131; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000000420ee: jl 0x42138; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000042247: jl 0x42291; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000004224e: jl 0x42298; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000042255: jl 0x4229f; adc dword ptr [rcx + 7], edi; ret; 
0x00000000000423a2: jl 0x423ec; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423a9: jl 0x423f3; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b0: jl 0x423fa; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b7: jl 0x42401; adc dword ptr [rdi - 8], edi; ret; 
0x0000000000050667: jl 0x506b1; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005066e: jl 0x506b8; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050675: jl 0x506bf; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005067c: jl 0x506c6; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000050689: jl 0x506d3; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005068f: jl 0x506d9; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050696: jl 0x506e0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005069d: jl 0x506e7; adc dword ptr [rsi - 1], edx; ret; 
0x00000000000506aa: jl 0x506f4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000506b0: jl 0x506fa; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000050770: jl 0x507ba; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050777: jl 0x507c1; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005077e: jl 0x507c8; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050785: jl 0x507cf; adc dword ptr [rsi - 1], edx; ret; 
0x00000000000507c9: jl 0x50813; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507cf: jl 0x50819; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507d6: jl 0x50820; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507dd: jl 0x50827; adc dword ptr [rsi + 3], edx; ret; 
0x000000000005086c: jl 0x508b6; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000050873: jl 0x508bd; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000005087a: jl 0x508c4; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000051230: jl 0x51249; cld; vzeroupper; ret; 
0x0000000000057862: jl 0x57888; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x00000000000595ac: jl 0x59596; cmp rcx, qword ptr [rax + 0x18]; jg 0x59596; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000005ef81: jl 0x5efa7; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000005f3a6: jl 0x5f3cc; cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x00000000000612e8: jl 0x6130e; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000006231a: jl 0x62340; cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x000000000006412d: jl 0x64153; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x000000000006485d: jl 0x64883; or al, 0xe9; ret; 
0x000000000006536d: jl 0x65393; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x000000000006848b: jl 0x684b1; cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x0000000000069127: jl 0x6914d; and byte ptr [rax + 1], cl; ret; 
0x000000000006959e: jl 0x695c4; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x00000000000698e6: jl 0x6990c; xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x00000000000709ad: jl 0x709a8; dec dword ptr [rax + 0x29]; ret; 
0x0000000000074abb: jl 0x74ae1; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x00000000000761a5: jl 0x761cb; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000083890: jl 0x838b6; push rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000083b46: jl 0x83b6c; push rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000008505f: jl 0x85085; sbb byte ptr [rax + 0x101], bh; syscall; 
0x000000000008b055: jl 0x8b07b; or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x00000000000916f4: jl 0x916f2; jmp qword ptr [rsi + 0xf]; 
0x0000000000091b15: jl 0x91b3b; sbb al, ch; ret; 
0x0000000000092045: jl 0x9206b; sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x000000000000a04f: jl 0xa075; or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000000a481: jl 0xa4a7; sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000000b3593: jl 0xb3520; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000000d966: jl 0xd98c; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000000da29d: jl 0xda293; jmp qword ptr [rdi + 2]; 
0x00000000000da564: jl 0xda4ea; hlt; call qword ptr [rdi + 1]; 
0x00000000000e1694: jl 0xe169c; sti; call qword ptr [rdi + 1]; 
0x0000000000016173: jle 0x1617b; add byte ptr [rax], al; lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000185ae: jle 0x185b4; jne 0x184a5; mov dword ptr [rsi], 0; xor eax, eax; ret; 
0x0000000000020e2a: jle 0x20e2d; call qword ptr [rbx + 0x18]; 
0x0000000000035a45: jle 0x35a5d; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x35960; ret; 
0x000000000004a3de: jle 0x4a3e0; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000050551: jle 0x50588; movsxd rax, ecx; ret; 
0x00000000000506e0: jle 0x506a3; cmp dl, 4; jb 0x506ed; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000005093e: jle 0x5094f; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000050e84: jle 0x50f05; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000050fb7: jle 0x51038; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000066972: jle 0x6697c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000070830: jle 0x70726; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000856df: jle 0x856f5; jne 0x85712; jne 0x8560d; mov eax, 1; leave; ret; 
0x000000000009c5f4: jle 0x9c5f5; jmp qword ptr [rsi + 0xf]; 
0x00000000000b9c9e: jle 0xb9c79; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000d299a: jle 0xd2935; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000000bdedb: jmp qword ptr [rax + 0x11]; 
0x00000000000bd8cb: jmp qword ptr [rax + 0x14]; 
0x00000000000d5ecf: jmp qword ptr [rax + 0x17]; 
0x00000000000bd8db: jmp qword ptr [rax + 0x19]; 
0x00000000000bd8eb: jmp qword ptr [rax + 0x1e]; 
0x00000000000d6137: jmp qword ptr [rax + 0x27]; 
0x00000000000be7fb: jmp qword ptr [rax + 0x29]; 
0x00000000000d61b7: jmp qword ptr [rax + 0x2a]; 
0x00000000000d628f: jmp qword ptr [rax + 0x2f]; 
0x00000000000d5f3b: jmp qword ptr [rax + 0x31]; 
0x00000000000be5eb: jmp qword ptr [rax + 0x35]; 
0x00000000000be3d3: jmp qword ptr [rax + 0x38]; 
0x00000000000d6417: jmp qword ptr [rax + 0x3b]; 
0x00000000000d64f7: jmp qword ptr [rax + 0x41]; 
0x00000000000d6587: jmp qword ptr [rax + 0x44]; 
0x00000000000d661f: jmp qword ptr [rax + 0x46]; 
0x00000000000be903: jmp qword ptr [rax + 0x49]; 
0x00000000000d67b7: jmp qword ptr [rax + 0x57]; 
0x00000000000d6b3f: jmp qword ptr [rax + 0x65]; 
0x00000000000bd9df: jmp qword ptr [rax + 0x70]; 
0x00000000000d6e47: jmp qword ptr [rax + 0x77]; 
0x00000000000be107: jmp qword ptr [rax + 0xa]; 
0x00000000000be0f3: jmp qword ptr [rax + 0xe]; 
0x00000000000dc8c3: jmp qword ptr [rax + 1]; 
0x00000000000be2f3: jmp qword ptr [rax + 4]; 
0x00000000000be32b: jmp qword ptr [rax + 5]; 
0x00000000000be323: jmp qword ptr [rax + 6]; 
0x00000000000be31b: jmp qword ptr [rax + 7]; 
0x00000000000be313: jmp qword ptr [rax + 8]; 
0x00000000000be30b: jmp qword ptr [rax + 9]; 
0x00000000000bdd1b: jmp qword ptr [rax - 0x19]; 
0x00000000000bdd17: jmp qword ptr [rax - 0x1b]; 
0x00000000000bdd13: jmp qword ptr [rax - 0x1d]; 
0x00000000000bdd0f: jmp qword ptr [rax - 0x1f]; 
0x00000000000d5fdf: jmp qword ptr [rax - 0x2c]; 
0x00000000000d7b0f: jmp qword ptr [rax - 0x34]; 
0x00000000000bde97: jmp qword ptr [rax - 0x36]; 
0x00000000000d7a77: jmp qword ptr [rax - 0x37]; 
0x00000000000d79f7: jmp qword ptr [rax - 0x39]; 
0x00000000000bde43: jmp qword ptr [rax - 0x3d]; 
0x00000000000d7937: jmp qword ptr [rax - 0x3e]; 
0x00000000000bdc7b: jmp qword ptr [rax - 0x43]; 
0x00000000000bdc77: jmp qword ptr [rax - 0x45]; 
0x00000000000bdc73: jmp qword ptr [rax - 0x47]; 
0x00000000000bdc0f: jmp qword ptr [rax - 0x48]; 
0x00000000000bdb6b: jmp qword ptr [rax - 0x49]; 
0x00000000000bdb87: jmp qword ptr [rax - 0x4b]; 
0x00000000000bdc27: jmp qword ptr [rax - 0x4c]; 
0x00000000000bdba3: jmp qword ptr [rax - 0x4d]; 
0x00000000000c0017: jmp qword ptr [rax - 0x51]; 
0x00000000000d757f: jmp qword ptr [rax - 0x53]; 
0x00000000000bdcb7: jmp qword ptr [rax - 0x54]; 
0x00000000000be9eb: jmp qword ptr [rax - 0x55]; 
0x00000000000bdccb: jmp qword ptr [rax - 0x62]; 
0x00000000000d726f: jmp qword ptr [rax - 0x67]; 
0x00000000000bbf37: jmp qword ptr [rax - 0xd]; 
0x00000000000bea3b: jmp qword ptr [rax - 0xe]; 
0x00000000000d5a13: jmp qword ptr [rax - 0xf]; 
0x00000000000bea93: jmp qword ptr [rax - 9]; 
0x00000000000db2b7: jmp qword ptr [rax]; 
0x00000000000bebab: jmp qword ptr [rbp + 0x30]; 
0x0000000000098944: jmp qword ptr [rbp + 0x31]; 
0x00000000000a163f: jmp qword ptr [rbp + 0x49]; 
0x00000000000d7ff3: jmp qword ptr [rbp + 2]; 
0x0000000000097fb4: jmp qword ptr [rbp - 0x47]; 
0x00000000000c0053: jmp qword ptr [rbp - 0x54]; 
0x00000000000bbf0f: jmp qword ptr [rbp - 0xe]; 
0x00000000000e1d3b: jmp qword ptr [rbp]; 
0x00000000000dc1f3: jmp qword ptr [rbx + 0x17]; 
0x00000000000e337b: jmp qword ptr [rbx + 1]; 
0x00000000000dbdeb: jmp qword ptr [rbx + 2]; 
0x00000000000df25b: jmp qword ptr [rbx + 8]; 
0x00000000000d0066: jmp qword ptr [rbx - 0x40]; 
0x00000000000d8b83: jmp qword ptr [rbx]; 
0x00000000000e0b03: jmp qword ptr [rcx + 0xe]; 
0x00000000000d7f2b: jmp qword ptr [rcx + 1]; 
0x00000000000d8d97: jmp qword ptr [rcx + 2]; 
0x00000000000bda7b: jmp qword ptr [rcx - 0x69]; 
0x00000000000bda5f: jmp qword ptr [rcx - 0x6d]; 
0x00000000000bda57: jmp qword ptr [rcx - 0x6e]; 
0x00000000000bda4f: jmp qword ptr [rcx - 0x6f]; 
0x00000000000bda4b: jmp qword ptr [rcx - 0x70]; 
0x00000000000bda47: jmp qword ptr [rcx - 0x71]; 
0x00000000000e284f: jmp qword ptr [rcx]; 
0x00000000000de1f3: jmp qword ptr [rdi + 0x11]; 
0x00000000000dbf3f: jmp qword ptr [rdi + 0x2b]; 
0x000000000008e43b: jmp qword ptr [rdi + 0x6d]; 
0x0000000000072df6: jmp qword ptr [rdi + 0x74]; 
0x0000000000073178: jmp qword ptr [rdi + 0x75]; 
0x00000000000da29f: jmp qword ptr [rdi + 2]; 
0x00000000000dc1c3: jmp qword ptr [rdi + 6]; 
0x0000000000066ff0: jmp qword ptr [rdi]; 
0x00000000000bdf87: jmp qword ptr [rdx + 0x13]; 
0x0000000000053bc5: jmp qword ptr [rdx + 0x29]; 
0x00000000000d864f: jmp qword ptr [rdx + 0x36]; 
0x0000000000042222: jmp qword ptr [rdx + 0x51]; 
0x0000000000042383: jmp qword ptr [rdx + 0x71]; 
0x00000000000bdf7f: jmp qword ptr [rdx + 0xd]; 
0x00000000000d9243: jmp qword ptr [rdx + 1]; 
0x00000000000e18ff: jmp qword ptr [rdx + 5]; 
0x000000000004233b: jmp qword ptr [rdx - 0x2f]; 
0x00000000000d0a10: jmp qword ptr [rdx - 0x71]; 
0x00000000000d2b33: jmp qword ptr [rdx - 0x78]; 
0x0000000000041e81: jmp qword ptr [rdx - 0xf]; 
0x00000000000d5e83: jmp qword ptr [rdx - 1]; 
0x00000000000df9cb: jmp qword ptr [rdx]; 
0x00000000000bdf23: jmp qword ptr [rsi + 0x10]; 
0x000000000000a7b4: jmp qword ptr [rsi + 0x2e]; 
0x00000000000be41b: jmp qword ptr [rsi + 0x37]; 
0x000000000005319b: jmp qword ptr [rsi + 0x41]; 
0x00000000000502e3: jmp qword ptr [rsi + 0x44]; 
0x000000000003cb5f: jmp qword ptr [rsi + 0x45]; 
0x000000000008e62f: jmp qword ptr [rsi + 0x48]; 
0x0000000000072e12: jmp qword ptr [rsi + 0x75]; 
0x00000000000de3db: jmp qword ptr [rsi + 0xa]; 
0x000000000000ae16: jmp qword ptr [rsi + 0xf]; 
0x00000000000e0dc3: jmp qword ptr [rsi + 5]; 
0x00000000000e0ee3: jmp qword ptr [rsi + 7]; 
0x000000000000a48d: jmp qword ptr [rsi - 0x70]; 
0x000000000000927a: jmp qword ptr [rsi - 0x77]; 
0x000000000007594c: jmp qword ptr [rsi - 0x7b]; 
0x00000000000570f1: jmp qword ptr [rsi - 0x7d]; 
0x00000000000719ed: jmp qword ptr [rsi - 0x7f]; 
0x00000000000bbef3: jmp qword ptr [rsi - 0xf]; 
0x00000000000bdf13: jmp qword ptr [rsi]; 
0x0000000000008c6f: jmp rax; 
0x000000000008fb11: jmp rbx; 
0x000000000002c692: jmp rcx; 
0x000000000001646e: jmp rdi; 
0x0000000000016185: jmp rdx; 
0x000000000005b96a: jmp rsi; 
0x000000000007ac3d: jmp rsp; 
0x0000000000016abd: jne 0x16ac7; add rsp, 0x148; ret; 
0x0000000000016adc: jne 0x16af8; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000016bdb: jne 0x16bfc; add rsp, 0x118; ret; 
0x0000000000016db7: jne 0x16e03; add rsp, 0x148; ret; 
0x0000000000017bb6: jne 0x17ae0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000182bb: jne 0x182c2; add rsp, 0x18; ret; 
0x00000000000185b0: jne 0x184a5; mov dword ptr [rsi], 0; xor eax, eax; ret; 
0x0000000000019991: jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019a3d: jne 0x19a47; add rsp, 0xd8; ret; 
0x0000000000019af2: jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019bb2: jne 0x19bbc; add rsp, 0xd8; ret; 
0x0000000000019ea4: jne 0x19eaf; add rsp, 0xd0; pop rbx; ret; 
0x000000000001a033: jne 0x1a03f; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000001a73e: jne 0x1a7b6; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000001b164: jne 0x1b16d; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000001b7ce: jne 0x1b87d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000001d508: jne 0x1d511; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000020317: jne 0x203d6; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000205f8: jne 0x20644; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000021819: jne 0x21ac6; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000021bc1: jne 0x21b7f; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000021c0c: jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x0000000000022563: jne 0x22570; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000024180: jne 0x24188; add rsp, 0x20; pop rbx; ret; 
0x000000000002cd8a: jne 0x2cd0f; ret; 
0x000000000002d097: jne 0x2d080; sub rax, 0x10; ret; 
0x000000000002e78d: jne 0x2e77d; test byte ptr [rip + 0x2bc147], 2; lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002ff0c: jne 0x2fef0; xor eax, eax; sub eax, ecx; ret; 
0x00000000000352b3: jne 0x35300; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000035a54: jne 0x35960; ret; 
0x000000000003595a: jne 0x35960; vzeroupper; ret; 
0x0000000000036e07: jne 0x37233; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000368ad: jne 0x37233; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000036801: jne 0x37233; xor eax, eax; ret; 
0x00000000000368f8: jne 0x3723f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000036829: jne 0x3723f; xor eax, eax; ret; 
0x0000000000036afa: jne 0x3724a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000003698d: jne 0x37260; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000004e680: jne 0x4e570; lea rax, [rdi + 0xb]; ret; 
0x000000000004e63a: jne 0x4e570; lea rax, [rdi + 0xf]; ret; 
0x000000000004e5e5: jne 0x4e570; lea rax, [rdi + 3]; ret; 
0x000000000004e5b7: jne 0x4e570; lea rax, [rdi + 7]; ret; 
0x000000000004e562: jne 0x4e574; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000004e5dc: jne 0x4e750; test dl, 4; jne 0x4e570; lea rax, [rdi + 3]; ret; 
0x000000000004e6be: jne 0x4e780; test al, 0x40; jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x000000000004e6c6: jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x000000000004e5ae: jne 0x4e790; test dl, 0x40; jne 0x4e570; lea rax, [rdi + 7]; ret; 
0x000000000004e677: jne 0x4e7c0; test dh, 4; jne 0x4e570; lea rax, [rdi + 0xb]; ret; 
0x000000000004e710: jne 0x4e7f0; test ah, 0x40; jne 0x4e800; lea rax, [rdi + 0xf]; ret; 
0x000000000004e719: jne 0x4e800; lea rax, [rdi + 0xf]; ret; 
0x000000000004e631: jne 0x4e800; test dh, 0x40; jne 0x4e570; lea rax, [rdi + 0xf]; ret; 
0x000000000004fa15: jne 0x4fa90; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000004fd44: jne 0x4ff50; xor eax, eax; ret; 
0x000000000004fea4: jne 0x4ff65; cmp eax, ecx; jne 0x4ff65; xor eax, eax; ret; 
0x000000000004ff61: jne 0x4ff65; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000004ff40: jne 0x4ff65; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x4ff65; xor eax, eax; ret; 
0x000000000004fdf1: jne 0x4ff65; xor eax, eax; ret; 
0x0000000000050071: jne 0x50060; ret; 
0x0000000000050068: jne 0x50080; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50060; ret; 
0x0000000000050121: jne 0x50110; ret; 
0x0000000000050118: jne 0x50130; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50110; ret; 
0x0000000000050291: jne 0x50280; lea rax, [rcx - 1]; ret; 
0x0000000000050288: jne 0x502a0; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x50280; lea rax, [rcx - 1]; ret; 
0x00000000000503e1: jne 0x503d0; sub rax, 1; ret; 
0x00000000000503d8: jne 0x503f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x503d0; sub rax, 1; ret; 
0x0000000000051854: jne 0x51837; vzeroupper; ret; 
0x0000000000051a17: jne 0x519f2; vzeroupper; ret; 
0x00000000000521ef: jne 0x52214; add rsp, 0x20; pop rbx; ret; 
0x0000000000055bc8: jne 0x55be0; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000005627b: jne 0x56210; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000056577: jne 0x56589; add rsp, 0x28; ret; 
0x0000000000056668: jne 0x566cb; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000056695: jne 0x56749; add rsp, 0x68; ret; 
0x00000000000567a7: jne 0x567eb; add rsp, 0x58; ret; 
0x00000000000567f8: jne 0x56810; xor eax, eax; syscall; 
0x00000000000568c8: jne 0x568e0; mov eax, 1; syscall; 
0x0000000000056a3b: jne 0x56a07; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000000569fb: jne 0x56a38; mov eax, dword ptr [rip + 0x2949e5]; test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x0000000000056a05: jne 0x56a68; mov eax, 0x48; syscall; 
0x0000000000056a28: jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b37: jne 0x56b83; add rsp, 0x68; ret; 
0x0000000000056b98: jne 0x56bb0; mov eax, 3; syscall; 
0x00000000000574a6: jne 0x574b7; add rsp, 0x28; ret; 
0x00000000000574c8: jne 0x574e0; mov eax, 0x4a; syscall; 
0x0000000000058c0a: jne 0x58c16; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000058c9a: jne 0x58ca6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000058d98: jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000058e9b: jne 0x58eb8; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000000058f5b: jne 0x58f78; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000000590d2: jne 0x590c4; pop rdx; pop r10; ret; 
0x00000000000590c2: jne 0x590cc; nop; mov eax, 0xca; syscall; 
0x000000000005911f: jne 0x59108; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5912c; ret; 
0x0000000000059182: jne 0x59170; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x59190; ret; 
0x000000000005b5ec: jne 0x5b59b; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000005d253: jne 0x5d1e5; call 0x5a9a0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000005d25f: jne 0x5d1f1; call rsi; 
0x000000000005d761: jne 0x5d801; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000065d2f: jne 0x65def; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000068e7f: jne 0x68e86; add rsp, 0x18; ret; 
0x00000000000760a2: jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c102: jne 0x7c10c; add rsp, 0xd8; ret; 
0x000000000007f22a: jne 0x7f298; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000007f54c: jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x000000000007f658: jne 0x7f670; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000007f7d9: jne 0x7f7e8; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000007f888: jne 0x7f8da; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000008001c: jne 0x7ffab; mov dword ptr fs:[rax], 5; mov rax, rdx; pop rbx; ret; 
0x00000000000800ae: jne 0x800c0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000080fd5: jne 0x810b0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000081077: jne 0x810d0; xor eax, eax; ret; 
0x0000000000081047: jne 0x810f0; xor eax, eax; ret; 
0x00000000000812f3: jne 0x81310; xor eax, eax; vzeroupper; ret; 
0x00000000000812b6: jne 0x81350; xor eax, eax; vzeroupper; ret; 
0x00000000000818a3: jne 0x818a9; xor rax, rax; ret; 
0x0000000000081ca3: jne 0x81cd0; mov rax, r8; vzeroupper; ret; 
0x0000000000081c6a: jne 0x81d10; mov rax, r8; vzeroupper; ret; 
0x0000000000081f0d: jne 0x82021; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000082563: jne 0x82569; xor rax, rax; ret; 
0x0000000000082e63: jne 0x82e90; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000082e2d: jne 0x82ed0; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000084e40: jne 0x84e7a; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000084fd7: jne 0x85036; mov eax, 0x101; syscall; 
0x0000000000084ffa: jne 0x850b9; add rsp, 0x78; ret; 
0x000000000008510c: jne 0x85153; add rsp, 0x58; ret; 
0x000000000008518f: jne 0x85199; movzx eax, al; add rsp, 0x58; ret; 
0x000000000008523e: jne 0x8525b; add rsp, 0x38; ret; 
0x00000000000856d7: jne 0x8560d; cmp word ptr [rsi + 0x14], 0x2f75; jne 0x8560d; mov eax, 1; leave; ret; 
0x00000000000856e3: jne 0x8560d; mov eax, 1; leave; ret; 
0x00000000000856e1: jne 0x85712; jne 0x8560d; mov eax, 1; leave; ret; 
0x00000000000b687b: jne 0x8713; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x00000000000b68da: jne 0x8718; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x0000000000008765: jne 0x8768; ret; 
0x000000000008bd67: jne 0x8bff6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000008c27c: jne 0x8c290; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000008c68f: jne 0x8cc66; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000008d983: jne 0x8d8c0; lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000008e17a: jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000008eb9f: jne 0x8eb60; and eax, 0x6f058b00; mov edi, 0x8b410025; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000008ed0e: jne 0x8ed20; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x000000000008edc7: jne 0x8eddc; mov byte ptr [rip + 0x25c4f8], 0; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x000000000008ee07: jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x0000000000090919: jne 0x908ea; movsx eax, cl; neg eax; ret; 
0x00000000000916ea: jne 0x916f2; add rsp, 0x20; pop rbx; ret; 
0x00000000000917e5: jne 0x91813; add rsp, 0x38; ret; 
0x00000000000918a5: jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091a06: jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091cd5: jne 0x91cfe; add rsp, 0x68; ret; 
0x0000000000091e64: jne 0x91e62; jmp qword ptr [rsi + 0xf]; 
0x000000000009203f: jne 0x92090; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000092085: jne 0x920a5; add rsp, 0x110; pop rbx; ret; 
0x0000000000092106: jne 0x92111; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000093d11: jne 0x93d4e; leave; ret; 
0x0000000000093f40: jne 0x93f58; test rsi, rsi; jne 0x93f70; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000093f45: jne 0x93f70; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000094013: jne 0x94004; cmp cx, 0x7fff; je 0x94004; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000941b1: jne 0x94198; mov rax, rsi; ret; 
0x0000000000094235: jne 0x94210; mov rax, rsi; ret; 
0x00000000000942d8: jne 0x94394; add rsp, 0x30; pop rbx; ret; 
0x000000000009ca39: jne 0x9cbc5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009ce52: jne 0x9cef8; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000009cf5d: jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d040: jne 0x9d054; add rsp, 0x38; ret; 
0x000000000009d870: jne 0x9d875; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000009de45: jne 0x9de51; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000009fa5b: jne 0x9fa5f; pop rbx; ret; 
0x000000000009fa51: jne 0x9fad0; cmp qword ptr [rip + 0x2474f5], 0; jne 0x9fa5f; pop rbx; ret; 
0x0000000000009f38: jne 0xa150; call qword ptr [rbx + 0x10]; 
0x00000000000a9062: jne 0xa909d; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a9112: jne 0xa9182; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a91f0: jne 0xa924c; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000a959b: jne 0xa95ac; add rsp, 0x38; ret; 
0x00000000000a96a9: jne 0xa96bc; add rsp, 0x40; pop rbx; ret; 
0x00000000000a9790: jne 0xa97a4; add rsp, 0x50; pop rbx; ret; 
0x00000000000b41cd: jne 0xb40f3; add rsp, 0x38; ret; 
0x00000000000b436e: jne 0xb439d; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000000b46a1: jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b46b9: jne 0xb46d8; xor eax, eax; ret; 
0x00000000000b679a: jne 0xb67b0; cmp qword ptr [r9 + 0x38], 0; je 0xb680b; add rsp, 0x18; ret; 
0x00000000000b6876: jne 0xb6890; cmp dl, 8; jne 0x8713; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x00000000000b6c4e: jne 0xb6c40; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dcd: jne 0xb6dbf; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b6f1f: jne 0xb6f11; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6f6b: jne 0xb6f5d; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b70f2: jne 0xb70e4; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b7286: jne 0xb7278; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000000b72ab: jne 0xb729d; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b751a: jne 0xb7520; ret; 
0x00000000000b7524: jne 0xb7535; mov eax, 8; ret; 
0x00000000000b7575: jne 0xb7580; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b7584: jne 0xb759b; xor eax, eax; ret; 
0x00000000000b75c5: jne 0xb75d0; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b75d4: jne 0xb75eb; xor eax, eax; ret; 
0x00000000000b78bc: jne 0xb7899; movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000b8ab4: jne 0xb8ac0; ret; 
0x00000000000b8cd4: jne 0xb8ce0; ret; 
0x00000000000b8f7e: jne 0xb8f98; xor eax, eax; ret; 
0x00000000000b9535: jne 0xb9520; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b9580: jne 0xb9558; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b96c5: jne 0xb96a8; pop rbx; ret; 
0x00000000000b97c9: jne 0xb97b8; pop rbx; ret; 
0x00000000000b98e3: jne 0xb98c8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba49d: jne 0xba480; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba621: jne 0xba630; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000be959: jne 0xbe953; call qword ptr [rax]; 
0x00000000000c1179: jne 0xc1175; lcall [rsp + rsi*2]; cli; dec dword ptr [rsi*2 + 0x74fcfffa]; cli; jmp rsp; 
0x00000000000d6de1: jne 0xd6de3; add byte ptr [rax + 0x31], ch; clc; call rax; 
0x00000000000e1200: jne 0xe1206; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x000000000000ecdc: jne 0xece8; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000001a376: jno 0x1a3c0; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000036abe: jno 0x36ac7; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000041eb0: jno 0x41eb0; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420ea: jno 0x420ea; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000042251: jno 0x42259; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000000423a1: jno 0x4241f; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423a8: jno 0x42426; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423af: jno 0x4242d; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b6: jno 0x42434; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000050ac4: jno 0x50ab6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050bb2: jno 0x50ba4; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050e7c: jno 0x50e5e; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000050faf: jno 0x50f91; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000005133c: jno 0x5133c; jg 0x51382; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000000514d5: jno 0x514d5; jg 0x5151b; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000065be3: jno 0x65c32; sub byte ptr [rax], al; ret; 
0x000000000006c168: jno 0x6c175; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000000927d4: jno 0x9281f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000bd9e5: jno 0xbd9de; inc dword ptr [rax + 0x72]; idiv edi; xor byte ptr [rbx - 9], dh; jmp qword ptr [rax]; 
0x00000000000be951: jno 0xbe94b; call qword ptr [rax]; 
0x00000000000bf155: jno 0xbf150; push rsp; jno 0xbf154; push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf159: jno 0xbf154; push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf15d: jno 0xbf158; jmp rsp; 
0x00000000000bf161: jno 0xbf15c; jmp rsp; 
0x00000000000bf165: jno 0xbf160; jmp rsp; 
0x00000000000bf169: jno 0xbf164; jmp rsp; 
0x00000000000bf16d: jno 0xbf168; jmp rsp; 
0x00000000000bf171: jno 0xbf16c; jmp rsp; 
0x00000000000bf175: jno 0xbf170; jmp rsp; 
0x00000000000bf179: jno 0xbf174; jmp rsp; 
0x00000000000bf17d: jno 0xbf178; jmp rsp; 
0x00000000000bf181: jno 0xbf17c; jmp rsp; 
0x00000000000bf185: jno 0xbf180; jmp rsp; 
0x00000000000bf189: jno 0xbf184; jmp rsp; 
0x00000000000bf18d: jno 0xbf188; jmp rsp; 
0x00000000000bf191: jno 0xbf18c; jmp rsp; 
0x00000000000bf195: jno 0xbf190; call rcx; 
0x00000000000bf199: jno 0xbf194; call rcx; 
0x00000000000bf19d: jno 0xbf198; call qword ptr [rdx + 0x4fff972]; jb 0xbf1a0; call rcx; 
0x00000000000bf1b1: jno 0xbf1ac; call qword ptr [rdi + 0x73]; 
0x00000000000bf1b1: jno 0xbf1ac; call qword ptr [rdi + 0x73]; stc; lcall [rax]; jb 0xbf1b4; call rcx; 
0x00000000000bf1bd: jno 0xbf1b8; inc dword ptr [rdx + rsi*2]; stc; call rcx; 
0x00000000000bf1c5: jno 0xbf1c0; call rcx; 
0x00000000000bf1f5: jno 0xbf1f0; jmp rsp; 
0x00000000000bf1f9: jno 0xbf1f4; jmp rsp; 
0x00000000000bf1fd: jno 0xbf1f8; call rcx; 
0x00000000000bf1fd: jno 0xbf1f8; call rcx; jno 0xbf1fc; call rcx; jno 0xbf200; jmp rsp; 
0x00000000000bf201: jno 0xbf1fc; call rcx; 
0x00000000000bf201: jno 0xbf1fc; call rcx; jno 0xbf200; jmp rsp; 
0x00000000000bf205: jno 0xbf200; jmp rsp; 
0x00000000000bf209: jno 0xbf204; jmp rsp; 
0x00000000000bf20d: jno 0xbf208; call rcx; 
0x00000000000bf211: jno 0xbf20c; call rcx; 
0x00000000000bf215: jno 0xbf210; call rcx; 
0x00000000000bf219: jno 0xbf214; call rcx; 
0x00000000000bf21d: jno 0xbf218; call rcx; 
0x00000000000bf221: jno 0xbf21c; call rcx; 
0x00000000000bf221: jno 0xbf21c; call rcx; jno 0xbf220; call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf225: jno 0xbf220; call rcx; 
0x00000000000bf225: jno 0xbf220; call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf229: jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf231: jno 0xbf22c; call rcx; 
0x00000000000bf235: jno 0xbf230; call rcx; 
0x00000000000bf239: jno 0xbf234; call rcx; 
0x00000000000bf23d: jno 0xbf238; call rcx; 
0x00000000000bf23d: jno 0xbf238; call rcx; jno 0xbf23c; call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf241: jno 0xbf23c; call rcx; 
0x00000000000bf241: jno 0xbf23c; call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf245: jno 0xbf240; jmp rsp; 
0x00000000000bf249: jno 0xbf244; jmp rsp; 
0x00000000000bf24d: jno 0xbf248; jmp qword ptr [rdx]; 
0x00000000000bf26d: jno 0xbf268; jmp rsp; 
0x00000000000bf271: jno 0xbf26c; jmp rsp; 
0x00000000000bf275: jno 0xbf270; jmp rsp; 
0x00000000000bf279: jno 0xbf274; jmp rsp; 
0x00000000000bf27d: jno 0xbf278; jmp rsp; 
0x00000000000bf281: jno 0xbf27c; jmp rsp; 
0x00000000000bf2ad: jno 0xbf2a8; push rsp; jno 0xbf2ac; push rsp; jno 0xbf2b0; jmp rsp; 
0x00000000000bf2b1: jno 0xbf2ac; push rsp; jno 0xbf2b0; jmp rsp; 
0x00000000000bf2b5: jno 0xbf2b0; jmp rsp; 
0x00000000000bf2b9: jno 0xbf2b4; jmp rsp; 
0x00000000000bf2bd: jno 0xbf2b8; call rcx; 
0x00000000000bf339: jno 0xbf334; call rcx; 
0x00000000000bf341: jno 0xbf33c; push rsp; jno 0xbf340; push rsp; jno 0xbf344; jmp rsp; 
0x00000000000bf345: jno 0xbf340; push rsp; jno 0xbf344; jmp rsp; 
0x00000000000bf349: jno 0xbf344; jmp rsp; 
0x00000000000bf34d: jno 0xbf348; jmp rsp; 
0x00000000000bf351: jno 0xbf34c; call rcx; 
0x00000000000bf355: jno 0xbf350; call rcx; 
0x00000000000bf355: jno 0xbf350; call rcx; jno 0xbf354; call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf359: jno 0xbf354; call rcx; 
0x00000000000bf359: jno 0xbf354; call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf35d: jno 0xbf358; jmp rsp; 
0x00000000000bf361: jno 0xbf35c; call rcx; 
0x00000000000bf365: jno 0xbf360; call rcx; 
0x00000000000bf369: jno 0xbf364; call rcx; 
0x00000000000bf36d: jno 0xbf368; call rcx; 
0x00000000000bf371: jno 0xbf36c; call rcx; 
0x00000000000bf375: jno 0xbf370; call rcx; 
0x00000000000bf379: jno 0xbf374; call rcx; 
0x00000000000bf37d: jno 0xbf378; call rcx; 
0x00000000000bf381: jno 0xbf37c; call rcx; 
0x00000000000bf385: jno 0xbf380; call rcx; 
0x00000000000bf389: jno 0xbf384; call rcx; 
0x00000000000bf38d: jno 0xbf388; call rcx; 
0x00000000000bf391: jno 0xbf38c; call rcx; 
0x00000000000bf395: jno 0xbf390; call rcx; 
0x00000000000bf395: jno 0xbf390; call rcx; jno 0xbf394; call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf399: jno 0xbf394; call rcx; 
0x00000000000bf399: jno 0xbf394; call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf39d: jno 0xbf398; jmp rsp; 
0x00000000000bf3a1: jno 0xbf39c; jmp rsp; 
0x00000000000bf3a5: jno 0xbf3a0; push rsp; jno 0xbf3a4; call rcx; 
0x00000000000bf3a9: jno 0xbf3a4; call rcx; 
0x00000000000bf3ad: jno 0xbf3a8; push rsp; jno 0xbf3ac; call rcx; 
0x00000000000bf3ad: jno 0xbf3a8; push rsp; jno 0xbf3ac; call rcx; jno 0xbf3b0; jmp rsp; 
0x00000000000bf3b1: jno 0xbf3ac; call rcx; 
0x00000000000bf3b1: jno 0xbf3ac; call rcx; jno 0xbf3b0; jmp rsp; 
0x00000000000bf3b5: jno 0xbf3b0; jmp rsp; 
0x00000000000bf3b9: jno 0xbf3b4; call rcx; 
0x00000000000bf3bd: jno 0xbf3b8; call rcx; 
0x00000000000bf3c1: jno 0xbf3bc; call rcx; 
0x00000000000bf3c1: jno 0xbf3bc; call rcx; jno 0xbf3c0; call rcx; jno 0xbf3c4; jmp rsp; 
0x00000000000bf3c5: jno 0xbf3c0; call rcx; 
0x00000000000bf3c5: jno 0xbf3c0; call rcx; jno 0xbf3c4; jmp rsp; 
0x00000000000bf3c9: jno 0xbf3c4; jmp rsp; 
0x00000000000bf3cd: jno 0xbf3c8; call rcx; 
0x00000000000bf3d1: jno 0xbf3cc; call rcx; 
0x00000000000bf3d5: jno 0xbf3d0; call rcx; 
0x00000000000bf3d9: jno 0xbf3d4; call rcx; 
0x00000000000bf3dd: jno 0xbf3d8; call rcx; 
0x00000000000bf3e1: jno 0xbf3dc; call rcx; 
0x00000000000bf3e5: jno 0xbf3e0; call rcx; 
0x00000000000bf3e9: jno 0xbf3e4; call rcx; 
0x00000000000bf3ed: jno 0xbf3e8; call rcx; 
0x00000000000bf3f1: jno 0xbf3ec; call rcx; 
0x00000000000bf3f5: jno 0xbf3f0; call rcx; 
0x00000000000bf405: jno 0xbf400; call rcx; 
0x00000000000bf411: jno 0xbf40c; call rcx; 
0x00000000000bf415: jno 0xbf410; call rcx; 
0x00000000000bf419: jno 0xbf414; call rcx; 
0x00000000000bf4e9: jno 0xbf4e4; jmp rsp; 
0x00000000000bf4f9: jno 0xbf4f4; call rcx; 
0x00000000000bf505: jno 0xbf500; call rcx; 
0x00000000000bf509: jno 0xbf504; call rcx; 
0x00000000000bf50d: jno 0xbf508; call rcx; 
0x00000000000bf511: jno 0xbf50c; call rcx; 
0x00000000000d14d9: jno 0xd146f; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x00000000000d6d39: jno 0xd6d3b; add byte ptr [rax - 0x170007e4], bl; jno 0xd6d43; add al, bh; sbb al, 0xf8; jmp qword ptr [rax]; 
0x00000000000d6d41: jno 0xd6d43; add al, bh; sbb al, 0xf8; jmp qword ptr [rax]; 
0x000000000002e401: jnp 0x2e41e; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x000000000002e7c1: jnp 0x2e7e7; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000035e8a: jnp 0x35e94; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000005dbd0: jnp 0x5dc12; add byte ptr [rsp - 0x18], dh; int 0xaa; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000083368: jnp 0x83376; pop rbp; pop r12; pop r14; ret; 
0x00000000000be965: jnp 0xbe95f; call qword ptr [rax]; 
0x00000000000d1365: jnp 0xd1320; ret; 
0x00000000000d2bfe: jnp 0xd2c16; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000000df9c5: jnp 0xdf9c7; add al, cl; cld; stc; jmp qword ptr [rdx]; 
0x00000000000183b0: jns 0x18374; xor eax, eax; ret; 
0x000000000002e4b3: jns 0x2e4d9; add al, byte ptr [rax]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000036086: jns 0x36090; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000388c3: jns 0x38917; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000041eb7: jns 0x41eb8; ret; 
0x00000000000420f1: jns 0x420f2; ret; 
0x0000000000042258: jns 0x42261; ret; 
0x0000000000048767: jns 0x487cc; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000487b8: jns 0x4881d; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000488b7: jns 0x4891c; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048a56: jns 0x48abb; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000048ca7: jns 0x48d0c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000048e48: jns 0x48ead; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000048f47: jns 0x48fac; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048f98: jns 0x48ffd; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000049097: jns 0x490fc; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000049487: jns 0x494ec; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000049778: jns 0x497dd; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000049877: jns 0x498dc; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000050ac8: jns 0x50aaa; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050bb6: jns 0x50b98; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050e81: jns 0x50e43; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000050fb4: jns 0x50f76; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000051339: jns 0x51339; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000000514d2: jns 0x514d2; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000008f363: jns 0x8f314; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000009a33: jns 0x9a2e; add al, 0; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000009ce39: jns 0x9ce3e; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000000b4773: jns 0xb47b4; cmc; dec dword ptr [rcx + 0x63]; add al, 0x87; add rax, r15; jmp rax; 
0x00000000000b679e: jns 0xb67d8; add byte ptr [rax + rbp*2 + 0x48], dh; add esp, 0x18; ret; 
0x00000000000be961: jns 0xbe95b; call qword ptr [rax]; 
0x00000000000d046e: jns 0xd0402; ret 0xf869; 
0x00000000000d78dd: jns 0xd78db; call qword ptr [rax]; 
0x0000000000017af6: jo 0x17b18; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000001a77a: jo 0x1a7b4; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001b795: jo 0x1b7cf; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001e7f4: jo 0x1e83e; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000001e824: jo 0x1e86e; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000595a2: jo 0x595c4; ret; 
0x00000000000639e4: jo 0x639e0; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x0000000000063a0b: jo 0x63a07; jmp qword ptr [rsi - 0x70]; 
0x000000000007799c: jo 0x779ab; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007e37a: jo 0x7e38c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007e3bf: jo 0x7e3f1; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000007e806: jo 0x7e820; jbe 0x7e82e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007e9b6: jo 0x7e9d0; jbe 0x7e9e2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007fdaa: jo 0x7fd31; sar byte ptr [rax + 9], 0xf3; ret; 
0x0000000000081f16: jo 0x81f73; pop rbp; pop r12; ret; 
0x000000000008212d: jo 0x8218a; pop rbp; pop r12; ret; 
0x000000000008b6dc: jo 0x8b69d; cld; inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x0000000000091bc4: jo 0x91c21; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000009b4ca: jo 0x9b455; ret 0x348; 
0x000000000009d3ba: jo 0x9d417; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000bd9e1: jo 0xbd9da; call qword ptr [rax + 0x71]; 
0x00000000000bdcac: jo 0xbdc56; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000bde8c: jo 0xbde54; idiv edi; rol bh, 0xf7; call qword ptr [rax]; 
0x00000000000be2ec: jo 0xbe2f3; clc; push rax; add al, 0xf8; jmp qword ptr [rax + 4]; 
0x00000000000be304: jo 0xbe310; clc; push rax; or eax, edi; jmp qword ptr [rax + 9]; 
0x00000000000be3bc: jo 0xbe3ba; idiv edi; sahf; xor edi, eax; jmp qword ptr [rax]; 
0x00000000000be630: jo 0xbe65d; clc; jmp rax; 
0x00000000000be834: jo 0xbe860; clc; jmp rax; 
0x00000000000be98c: jo 0xbe91b; clc; call qword ptr [rax]; 
0x00000000000be9e0: jo 0xbe989; clc; inc eax; test al, 0xf8; call qword ptr [rax]; 
0x00000000000beae0: jo 0xbeadb; clc; call qword ptr [rax - 0x4f000707]; stc; clc; call rax; 
0x00000000000bfa48: jo 0xbf9ef; stc; call qword ptr [rax - 0x5b]; 
0x00000000000cd684: jo 0xcd671; cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax - 0x14]; 
0x00000000000cd688: jo 0xcd675; cli; call qword ptr [rax - 0x14]; 
0x00000000000cd6b0: jo 0xcd69d; cli; jmp qword ptr [rax]; 
0x00000000000cd6b8: jo 0xcd6a5; cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax]; 
0x00000000000cd6bc: jo 0xcd6a9; cli; call qword ptr [rax]; 
0x00000000000d14e4: jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x00000000000d5aa0: jo 0xd5a90; std; call qword ptr [rax - 0xb]; 
0x00000000000d62e0: jo 0xd6314; add byte ptr [rax], al; cwde; push rdi; hlt; call rax; 
0x00000000000d787d: jo 0xd787b; call qword ptr [rax]; 
0x00000000000db4ec: jo 0xdb4f1; ret 0xa01; 
0x00000000000dc828: jo 0xdc82a; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 9], ah; jmp rsi; 
0x00000000000ddee4: jo 0xddee6; add byte ptr [rax], al; add byte ptr [rcx], ah; add byte ptr [rbx + rdx], al; clc; jmp qword ptr [rdx]; 
0x0000000000065372: jp 0x6536a; ret; 
0x00000000000b77fa: jp 0xb7870; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000d11a5: jp 0xd1200; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000d6815: jp 0xd680c; call qword ptr [rax]; 
0x00000000000e0f50: jp 0xe0fc9; bnd jmp qword ptr [rcx]; 
0x0000000000017bf5: js 0x17c17; call rdx; 
0x000000000001cbb8: js 0x1cbf0; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000002e497: js 0x2e48f; add eax, 0x2bc432; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000002e737: js 0x2e72f; add eax, 0x2bc192; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000003611d: js 0x36127; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000003619b: js 0x361a5; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000057413: js 0x573f4; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000007f0bf: js 0x7f0d9; jbe 0x7f0eb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007f219: js 0x7f24b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000008b6e2: js 0x8b6f2; pop rbx; ret; 
0x000000000008c084: js 0x8c0a5; add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x00000000000a96e4: js 0xa968a; add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000b0344: js 0xb0364; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b457e: js 0xb45a8; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b6aa6: js 0xb6aaa; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000b6ab3: js 0xb6ab7; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000b764e: js 0xb7678; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b8fee: js 0xb9018; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b9603: js 0xb967c; ret 0x8b48; 
0x00000000000d6264: js 0xd629d; hlt; call qword ptr [rax - 0x67ffffd2]; cmp esp, esi; jmp rax; 
0x00000000000d62d4: js 0xd631e; hlt; call rax; 
0x00000000000d637c: js 0xd63eb; hlt; call rsp; 
0x00000000000d688c: js 0xd6815; cmc; jmp qword ptr [rax]; 
0x00000000000d6cb4: js 0xd6cc0; clc; jmp qword ptr [rax]; 
0x00000000000d6e91: js 0xd6e93; add byte ptr [rax + 0x4a], cl; clc; call qword ptr [rax]; 
0x00000000000d6fbc: js 0xd6fb5; clc; jmp qword ptr [rax]; 
0x00000000000d78cd: js 0xd78cb; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x00000000000d78d5: js 0xd78d3; jmp rax; 
0x00000000000da560: js 0xda589; add byte ptr [rax], al; jl 0xda4ea; hlt; call qword ptr [rdi + 1]; 
0x00000000000de3d8: js 0xde442; clc; jmp qword ptr [rsi + 0xa]; 
0x00000000000de958: js 0xde8fe; clc; call qword ptr [rcx]; 
0x00000000000df6dd: js 0xdf6df; add byte ptr [rax - 0x11], ah; stc; jmp qword ptr [rdi]; 
0x000000000003ca1d: lahf; adc al, 8; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000789f3: lahf; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000606f6: lahf; add dword ptr [rax], eax; add al, ch; xor dword ptr [rbx - 0x76be0006], esp; ret; 
0x00000000000645c5: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000002925f: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000000de8a1: lahf; clc; call qword ptr [rdx]; 
0x00000000000be9c9: lahf; clc; jmp rax; 
0x00000000000d29a3: lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000008e17b: lahf; mov eax, dword ptr [rdx + 4]; ret; 
0x00000000000491ed: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000006c2bf: lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000022ebf: lahf; ret 0x3949; 
0x0000000000022f72: lahf; ret 0x48e9; 
0x00000000000578f1: lahf; ret 0x8545; 
0x00000000000d01fd: lahf; ret 0x871e; 
0x0000000000095303: lahf; ret 0xd629; 
0x0000000000095b51: lahf; ret 0xd729; 
0x0000000000051aa9: lahf; ret 0xea81; 
0x00000000000b5e5c: lahf; ret 0xf45; 
0x0000000000057a3b: lahf; ret; 
0x000000000007c10d: lahf; sar ch, cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d2c01: lahf; sub edi, esi; int 0x6b; ret; 
0x000000000004987d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000594b5: lcall [rax + 0x48]; mov eax, ebx; pop rdx; pop rbx; ret; 
0x00000000000d5a9b: lcall [rax + 0x70fffded]; out dx, al; std; call qword ptr [rax - 0xb]; 
0x00000000000d61df: lcall [rax - 0x27ffffd5]; and ah, dh; jmp rax; 
0x00000000000bf1b7: lcall [rax]; jb 0xbf1b4; call rcx; 
0x00000000000bf25b: lcall [rax]; jb 0xbf258; push qword ptr [rdx + 0x72]; stc; jmp qword ptr [rdx]; 
0x0000000000024d72: lcall [rbx + 0x48]; mov eax, edi; pop rbp; pop r12; ret; 
0x00000000000235d0: lcall [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000001be65: lcall [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000006a7b2: lcall [rbx + 0x5d]; pop r12; ret; 
0x000000000001bbeb: lcall [rbx + 0x5d]; ret; 
0x000000000008f7a6: lcall [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x00000000000bbf3f: lcall [rbx + rsi*8]; hlt; call qword ptr [rcx]; 
0x00000000000be67b: lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000c004f: lcall [rcx]; stosd dword ptr [rdi], eax; stc; jmp qword ptr [rbp - 0x54]; 
0x00000000000beb97: lcall [rdi + rbp - 7]; call qword ptr [rax + 0x30]; 
0x00000000000beb9f: lcall [rdi + rbp - 7]; call qword ptr [rdi + 0x30]; 
0x00000000000beb9f: lcall [rdi + rbp - 7]; call qword ptr [rdi + 0x30]; stc; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000beba7: lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000beb8f: lcall [rdi + rbp - 7]; lcall [rsi + 0x2f]; stc; lcall [rdi + rbp - 7]; call qword ptr [rax + 0x30]; 
0x00000000000bebd7: lcall [rdi + rbp]; stc; call qword ptr [rax]; 
0x00000000000bebcf: lcall [rdi + rbp]; stc; call qword ptr [rcx + 0x30]; 
0x00000000000bebdf: lcall [rdi + rbp]; stc; call qword ptr [rdi]; 
0x00000000000d6f67: lcall [rdi + rdi*2 - 0x67280000]; clc; call qword ptr [rax]; 
0x00000000000be3bf: lcall [rsi + 0x20fff833]; cmp bh, al; push qword ptr [rax + 0x40fff839]; cmp eax, edi; call rax; 
0x00000000000beb93: lcall [rsi + 0x2f]; stc; lcall [rdi + rbp - 7]; call qword ptr [rax + 0x30]; 
0x00000000000be03b: lcall [rsi + 0x44fff80d]; or eax, 0x13b4fff8; clc; inc dword ptr [rbx + rdx - 8]; call rsp; 
0x00000000000bf14f: lcall [rsi + 0x72]; stc; call rcx; 
0x00000000000d620f: lcall [rsp + rbp + 0x27480000]; hlt; call rax; 
0x00000000000c117b: lcall [rsp + rsi*2]; cli; dec dword ptr [rsi*2 + 0x74fcfffa]; cli; jmp rsp; 
0x000000000003ec2c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000003eeb6: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ee46: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003edd6: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed66: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ecf6: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ec86: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f2a6: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f236: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f1c6: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f156: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0e6: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f076: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f006: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef96: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef26: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003e416: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000003ebbc: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eb3c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eaac: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ea2c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e9ac: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e92c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e8ac: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e82c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e7ac: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e72c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e6ac: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e62c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e59c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e50c: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e47c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e40c: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000003ec36: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000003ebc1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eb41: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eab1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ea31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e9b1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e931: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e8b1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e831: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e7b1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e731: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e6b1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e631: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e5a1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e511: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e481: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eebb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ee4b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003eddb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed6b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ecfb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ec8b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f2ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f23b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f1cb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f15b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0eb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f07b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f00b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef9b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef2b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000021c1b: lea eax, [r8 - 1]; ret; 
0x00000000000b459c: lea eax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x00000000000352f4: lea eax, [rax + rdi + 0x10]; ret; 
0x0000000000035304: lea eax, [rax + rdi + 0x20]; ret; 
0x00000000000352d4: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000008b0bd: lea eax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000021c1c: lea eax, [rax - 1]; ret; 
0x00000000000e0afd: lea eax, [rax]; add byte ptr [rax - 0x74], al; cli; jmp qword ptr [rcx + 0xe]; 
0x00000000000815cd: lea eax, [rcx + rsi]; ret; 
0x0000000000050294: lea eax, [rcx - 1]; ret; 
0x000000000004e30c: lea eax, [rdi + 0x10]; ret; 
0x000000000004e321: lea eax, [rdi + 0x11]; ret; 
0x000000000004e33f: lea eax, [rdi + 0x12]; ret; 
0x000000000004e35f: lea eax, [rdi + 0x13]; ret; 
0x000000000004e382: lea eax, [rdi + 0x14]; ret; 
0x000000000004e3a1: lea eax, [rdi + 0x15]; ret; 
0x000000000004e3c1: lea eax, [rdi + 0x16]; ret; 
0x000000000004e3e1: lea eax, [rdi + 0x17]; ret; 
0x000000000004e404: lea eax, [rdi + 0x18]; ret; 
0x000000000004e429: lea eax, [rdi + 0x19]; ret; 
0x000000000004e447: lea eax, [rdi + 0x1a]; ret; 
0x000000000004e467: lea eax, [rdi + 0x1b]; ret; 
0x000000000004e483: lea eax, [rdi + 0x1c]; ret; 
0x000000000004e4a3: lea eax, [rdi + 0x1d]; ret; 
0x000000000004e4c3: lea eax, [rdi + 0x1e]; ret; 
0x000000000004e4e3: lea eax, [rdi + 0x1f]; ret; 
0x000000000004e25d: lea eax, [rdi + 0xa]; ret; 
0x000000000004e27d: lea eax, [rdi + 0xb]; ret; 
0x000000000004e29f: lea eax, [rdi + 0xc]; ret; 
0x000000000004e2bf: lea eax, [rdi + 0xd]; ret; 
0x000000000004e2df: lea eax, [rdi + 0xe]; ret; 
0x000000000004e2f9: lea eax, [rdi + 0xf]; ret; 
0x000000000004e1a7: lea eax, [rdi + 1]; ret; 
0x000000000004e1ba: lea eax, [rdi + 2]; ret; 
0x000000000004e1c5: lea eax, [rdi + 3]; ret; 
0x000000000004e1d8: lea eax, [rdi + 4]; ret; 
0x000000000004e1ed: lea eax, [rdi + 5]; ret; 
0x000000000004e20b: lea eax, [rdi + 6]; ret; 
0x000000000004e217: lea eax, [rdi + 7]; ret; 
0x000000000004e22a: lea eax, [rdi + 8]; ret; 
0x000000000004e23f: lea eax, [rdi + 9]; ret; 
0x00000000000810d9: lea eax, [rdi + rax + 0x10]; ret; 
0x000000000004a0f7: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000810e9: lea eax, [rdi + rax + 0x20]; ret; 
0x00000000000352bd: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000004a117: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a155: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000081815: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000049b5c: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000049fbd: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000049d77: lea eax, [rdi + rax]; ret; 
0x00000000000505ea: lea eax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000000814c9: lea eax, [rdi + rsi]; ret; 
0x0000000000073640: lea eax, [rdi - 1]; xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x000000000004e193: lea eax, [rdi]; ret; 
0x000000000004d77d: lea eax, [rdx + 0xa]; ret; 
0x000000000004d79d: lea eax, [rdx + 0xb]; ret; 
0x000000000004d7bf: lea eax, [rdx + 0xc]; ret; 
0x000000000004d7df: lea eax, [rdx + 0xd]; ret; 
0x000000000004d7ff: lea eax, [rdx + 0xe]; ret; 
0x000000000004d68f: lea eax, [rdx + 0xf]; ret; 
0x000000000004d6b7: lea eax, [rdx + 1]; ret; 
0x000000000004d6cd: lea eax, [rdx + 2]; ret; 
0x000000000004d6e5: lea eax, [rdx + 3]; ret; 
0x000000000004d6fb: lea eax, [rdx + 4]; ret; 
0x000000000004d70d: lea eax, [rdx + 5]; ret; 
0x000000000004d72b: lea eax, [rdx + 6]; ret; 
0x00000000000b4591: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x000000000004d637: lea eax, [rdx + 7]; ret; 
0x000000000004d73d: lea eax, [rdx + 8]; ret; 
0x000000000004d75d: lea eax, [rdx + 9]; ret; 
0x0000000000018729: lea eax, [rdx + rax*4]; mov qword ptr [rsi + 0x10], r10; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x0000000000021c0e: lea eax, [rdx + rdi]; ret; 
0x0000000000051bc3: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000002d016: lea eax, [rdx - 0x10]; ret; 
0x000000000004d6a5: lea eax, [rdx]; ret; 
0x0000000000080478: lea eax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e818: lea eax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db28: lea eax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x00000000000b8fbc: lea eax, [rip + 0x1cf4e]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b761c: lea eax, [rip + 0x1e8ae]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b454c: lea eax, [rip + 0x21462]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000002e3ff: lea eax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x000000000002e758: lea eax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e618: lea eax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4b8: lea eax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7bf: lea eax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e67f: lea eax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e51f: lea eax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e79e: lea eax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002daaf: lea eax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e65e: lea eax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e4fe: lea eax, [rip + 0x22b6c]; cmovne rax, rdx; ret; 
0x000000000002e56d: lea eax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000002e5be: lea eax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000009c981: lea eax, [rip + 0x24e1d9]; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000009c966: lea eax, [rip + 0x24e1f4]; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x000000000007a116: lea eax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0c3: lea eax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b96: lea eax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f35: lea eax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079ef0: lea eax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079eab: lea eax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e5c: lea eax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000794c0: lea eax, [rip + 0x26b75a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000006e5af: lea eax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e95e: lea eax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e910: lea eax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e861: lea eax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e805: lea eax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e565: lea eax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e517: lea eax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0b6: lea eax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000067369: lea eax, [rip + 0x27f5d1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x000000000005a931: lea eax, [rip + 0x28d9c9]; ret; 
0x00000000000591da: lea eax, [rip + 0x292208]; add rsp, 8; ret; 
0x000000000009d0ff: lea eax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000002e7e8: lea eax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000080548: lea eax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081df8: lea eax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000000804a8: lea eax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000000299f1: lea eax, [rip - 0x14a7]; mov qword ptr [rip + 0x2bde4a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x00000000000299ff: lea eax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x000000000008ed11: lea eax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x000000000001b79c: lea eax, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000056b0f: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x00000000000b8887: lea ebp, [rbp - 1]; mov rdx, r15; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x000000000006cf41: lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000017281: lea ebx, [rdi + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000071ccd: lea ebx, [rdi + rdi*8 - 1]; jmp qword ptr [rsi + 0xf]; 
0x000000000004e176: lea ebx, [rip + 0x70904]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e141: lea ebx, [rip + 0x70939]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e115: lea ebx, [rip + 0x70965]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0ff: lea ebx, [rip + 0x7097b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0dd: lea ebx, [rip + 0x7099d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0b8: lea ebx, [rip + 0x709c2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e09b: lea ebx, [rip + 0x709df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e043: lea ebx, [rip + 0x70a37]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db56: lea ebx, [rip + 0x70ea4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db21: lea ebx, [rip + 0x70ed9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004daf5: lea ebx, [rip + 0x70f05]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dadf: lea ebx, [rip + 0x70f1b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dabd: lea ebx, [rip + 0x70f3d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da98: lea ebx, [rip + 0x70f62]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da7b: lea ebx, [rip + 0x70f7f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da23: lea ebx, [rip + 0x70fd7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000040ed2: lea ebx, [rip + 0x7d4e8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040b74: lea ebx, [rip + 0x7d846]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040d1f: lea ebx, [rip + 0x7d8db]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409f4: lea ebx, [rip + 0x7d9c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040ab7: lea ebx, [rip + 0x7db43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040874: lea ebx, [rip + 0x7db46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040937: lea ebx, [rip + 0x7dcc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406f4: lea ebx, [rip + 0x7dcc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b7: lea ebx, [rip + 0x7de43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040574: lea ebx, [rip + 0x7de46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040638: lea ebx, [rip + 0x7dfc2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403f4: lea ebx, [rip + 0x7dfc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b7: lea ebx, [rip + 0x7e143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040274: lea ebx, [rip + 0x7e146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040337: lea ebx, [rip + 0x7e2c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400f4: lea ebx, [rip + 0x7e2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b7: lea ebx, [rip + 0x7e443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff74: lea ebx, [rip + 0x7e446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040037: lea ebx, [rip + 0x7e5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fdf4: lea ebx, [rip + 0x7e5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb7: lea ebx, [rip + 0x7e743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc74: lea ebx, [rip + 0x7e746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd37: lea ebx, [rip + 0x7e8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faf4: lea ebx, [rip + 0x7e8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb7: lea ebx, [rip + 0x7ea43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f974: lea ebx, [rip + 0x7ea46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa37: lea ebx, [rip + 0x7ebc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7f4: lea ebx, [rip + 0x7ebc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b7: lea ebx, [rip + 0x7ed43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f674: lea ebx, [rip + 0x7ed46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4fb: lea ebx, [rip + 0x7eebf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f737: lea ebx, [rip + 0x7eec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b7: lea ebx, [rip + 0x7f043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f2fc: lea ebx, [rip + 0x7f0be]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f47a: lea ebx, [rip + 0x7f180]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f31e: lea ebx, [rip + 0x7f2dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3be: lea ebx, [rip + 0x7fafc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e094: lea ebx, [rip + 0x7fe26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e22b: lea ebx, [rip + 0x7fecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df14: lea ebx, [rip + 0x7ffa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd7: lea ebx, [rip + 0x80123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd94: lea ebx, [rip + 0x80126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de57: lea ebx, [rip + 0x802a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc14: lea ebx, [rip + 0x802a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd7: lea ebx, [rip + 0x80423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da94: lea ebx, [rip + 0x80426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db58: lea ebx, [rip + 0x805a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d914: lea ebx, [rip + 0x805a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d7: lea ebx, [rip + 0x80723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d794: lea ebx, [rip + 0x80726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d857: lea ebx, [rip + 0x808a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d614: lea ebx, [rip + 0x808a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d7: lea ebx, [rip + 0x80a23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d494: lea ebx, [rip + 0x80a26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d557: lea ebx, [rip + 0x80ba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d314: lea ebx, [rip + 0x80ba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d7: lea ebx, [rip + 0x80d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d194: lea ebx, [rip + 0x80d26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d257: lea ebx, [rip + 0x80ea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d014: lea ebx, [rip + 0x80ea6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d7: lea ebx, [rip + 0x81023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce94: lea ebx, [rip + 0x81026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf57: lea ebx, [rip + 0x811a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd14: lea ebx, [rip + 0x811a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd7: lea ebx, [rip + 0x81323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb94: lea ebx, [rip + 0x81326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca1b: lea ebx, [rip + 0x8149f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc57: lea ebx, [rip + 0x814a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c7c5: lea ebx, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c708: lea ebx, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad7: lea ebx, [rip + 0x81623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c83b: lea ebx, [rip + 0x8167f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c61d: lea ebx, [rip + 0x816dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c99a: lea ebx, [rip + 0x81760]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c552: lea ebx, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c828: lea ebx, [rip + 0x818d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b531: lea ebx, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b493: lea ebx, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3e1: lea ebx, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b343: lea ebx, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b291: lea ebx, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1f3: lea ebx, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b141: lea ebx, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b0a3: lea ebx, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aff1: lea ebx, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af53: lea ebx, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aea1: lea ebx, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae03: lea ebx, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad51: lea ebx, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acb3: lea ebx, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ac01: lea ebx, [rip + 0x830f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ab68: lea ebx, [rip + 0x83192]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aab1: lea ebx, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa13: lea ebx, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a961: lea ebx, [rip + 0x83399]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8c3: lea ebx, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a811: lea ebx, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a773: lea ebx, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6c1: lea ebx, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a623: lea ebx, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a571: lea ebx, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4d3: lea ebx, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a421: lea ebx, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a383: lea ebx, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2d1: lea ebx, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a233: lea ebx, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a187: lea ebx, [rip + 0x83b73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a096: lea ebx, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039fd7: lea ebx, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f6d: lea ebx, [rip + 0x83d8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e7e: lea ebx, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c44: lea ebx, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db9: lea ebx, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b6a: lea ebx, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b61: lea ebx, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038ac3: lea ebx, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a11: lea ebx, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038973: lea ebx, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388c1: lea ebx, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038823: lea ebx, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038771: lea ebx, [rip + 0x853c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386d3: lea ebx, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038621: lea ebx, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038583: lea ebx, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384d1: lea ebx, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038433: lea ebx, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038381: lea ebx, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382e3: lea ebx, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038231: lea ebx, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038198: lea ebx, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000380e1: lea ebx, [rip + 0x85a59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038043: lea ebx, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f91: lea ebx, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ef3: lea ebx, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037e41: lea ebx, [rip + 0x85cf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037da3: lea ebx, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037cf1: lea ebx, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c53: lea ebx, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ba1: lea ebx, [rip + 0x85f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037b03: lea ebx, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a51: lea ebx, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379b3: lea ebx, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037901: lea ebx, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037863: lea ebx, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000377b7: lea ebx, [rip + 0x86383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c6: lea ebx, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037607: lea ebx, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003759d: lea ebx, [rip + 0x8659d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374ae: lea ebx, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e9: lea ebx, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000366a4: lea ebx, [rip + 0x87356]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003662a: lea ebx, [rip + 0x873d0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003659b: lea ebx, [rip + 0x8745f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036390: lea ebx, [rip + 0x8766a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003625e: lea ebx, [rip + 0x8779c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036198: lea ebx, [rip + 0x87862]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003611a: lea ebx, [rip + 0x878e0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036083: lea ebx, [rip + 0x87977]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e87: lea ebx, [rip + 0x87b73]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d56: lea ebx, [rip + 0x87ca4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c47: lea ebx, [rip + 0x87db3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000d0ab1: lea ebx, [rsi - 0x3271f33]; test al, 0x97; xchg eax, esp; ret; 
0x0000000000081fcb: lea ecx, [rax + 1]; call rbx; 
0x0000000000082166: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000007c7a5: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000004da2e: lea ecx, [rbx + rcx]; jmp rcx; 
0x00000000000249c9: lea ecx, [rcx]; add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x0000000000028ef8: lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000008e174: lea ecx, [rdx + 4]; cmp rcx, r8; jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000034290: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000002d026: lea ecx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000000b1cbe: lea ecx, [rip + 0x104fc]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000b05dd: lea ecx, [rip + 0x11bdd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000b030e: lea ecx, [rip + 0x11eac]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000ae67d: lea ecx, [rip + 0x13b3d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000008bb87: lea ecx, [rip + 0x42d93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000007c330: lea ecx, [rip + 0x514ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000049aa9: lea ecx, [rip + 0x78711]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000048694: lea ecx, [rip + 0x79b26]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000048439: lea ecx, [rip + 0x79d81]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000046b64: lea ecx, [rip + 0x7b656]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000005951a: lea ecx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000050965: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x50ad4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050cc0: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x50e91; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005110b: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x5134c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000007f970: lea ecx, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000007f88b: lea ecx, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000000820ee: lea ecx, [rsp + 0x20]; call rbx; 
0x00000000000822dc: lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000081fc6: lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000076977: lea edi, [rax + 0x48fffff6]; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000059c1f: lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000005090a: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000003c7bd: lea edi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006e600: lea edi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000090a98: lea edi, [rip + 0x3e062]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000008d241: lea edi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x000000000008c4af: lea edi, [rip + 0x42503]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000007ca77: lea edi, [rip + 0x50eef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000039f6f: lea edi, [rip + 0x63490008]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000595ee: lea edi, [rip + 0x660fd]; mov eax, 0x15; syscall; 
0x0000000000017e0d: lea edi, [rip + 0xa46ba]; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x0000000000016178: lea edi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000020e29: lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000083998: lea edi, [rsp + 0xb0]; mov rsi, rbp; call rbx; 
0x0000000000022531: lea edx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000007c7a9: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000000373f4: lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003b528: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3d8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b288: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b138: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afe8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae98: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad48: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaa8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a808: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a568: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a418: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2c8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b58: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a08: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038618: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384c8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038378: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038228: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ce8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a48: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000378f8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009d0f8: lea edx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000000b1d17: lea edx, [rip + 0x104a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1cf2: lea edx, [rip + 0x104c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0367: lea edx, [rip + 0x11e53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0342: lea edx, [rip + 0x11e78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae397: lea edx, [rip + 0x13e23]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae372: lea edx, [rip + 0x13e48]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe37: lea edx, [rip + 0x16383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe12: lea edx, [rip + 0x163a8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000080467: lea edx, [rip + 0x1653]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e807: lea edx, [rip + 0x1b963]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002e751: lea edx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e611: lea edx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4b1: lea edx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7b8: lea edx, [rip + 0x224c2]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e678: lea edx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e518: lea edx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e797: lea edx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002daa8: lea edx, [rip + 0x22a12]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e657: lea edx, [rip + 0x22a53]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e566: lea edx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000002e5b7: lea edx, [rip + 0x23373]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000009cdc6: lea edx, [rip + 0x24bd94]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009ce36: lea edx, [rip + 0x379f0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000094fbf: lea edx, [rip + 0x3ea0f]; movzx r12d, r12b; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094bf5: lea edx, [rip + 0x3ed29]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000094702: lea edx, [rip + 0x3f010]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007cae5: lea edx, [rip + 0x50f3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005621d: lea edx, [rip + 0x68f19]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000002e7d7: lea edx, [rip + 0x6b33]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000049add: lea edx, [rip + 0x786dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048487: lea edx, [rip + 0x79d33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004846d: lea edx, [rip + 0x79d4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468d7: lea edx, [rip + 0x7b8e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468bd: lea edx, [rip + 0x7b8fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000044787: lea edx, [rip + 0x7da33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004476d: lea edx, [rip + 0x7da4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000002d44e: lea edx, [rip + 0x903ac]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b1d0: lea edx, [rip + 0xb0d62]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b003: lea edx, [rip + 0xb0ed7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000ae7f: lea edx, [rip + 0xb102f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000081de7: lea edx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000081e64: lea edx, [rip - 0x305ba]; cmove rax, rdx; ret; 
0x000000000002e3f8: lea edx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000000508fe: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000056a3e: lea edx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000056b41: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000007f887: lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007f969: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000007fa63: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000008d98a: lea esi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000000a6d3: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000001b932: lea esi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000078f6d: lea esi, [rip + 0x26bbad]; jmp rax; 
0x000000000006eca2: lea esi, [rip + 0x275778]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e64a: lea esi, [rip + 0x275dd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000051ad1: lea esi, [rip + 0x6d089]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000051af3: lea esi, [rip + 0x6d08b]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000005090f: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000005aaa5: lea esp, [rbp + 1]; cmp rax, 0x17; ja 0x5aa80; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000017cb3: lea esp, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000008dc96: lea esp, [rbx + rdi*8 - 0x76b30001]; ret 0x2948; 
0x000000000008001d: lea esp, [rdi + rax*8]; add eax, 0x48000000; mov eax, edx; pop rbx; ret; 
0x000000000004e175: lea r11, [rip + 0x70904]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e140: lea r11, [rip + 0x70939]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e114: lea r11, [rip + 0x70965]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0fe: lea r11, [rip + 0x7097b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0dc: lea r11, [rip + 0x7099d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0b7: lea r11, [rip + 0x709c2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e09a: lea r11, [rip + 0x709df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e042: lea r11, [rip + 0x70a37]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db55: lea r11, [rip + 0x70ea4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db20: lea r11, [rip + 0x70ed9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004daf4: lea r11, [rip + 0x70f05]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dade: lea r11, [rip + 0x70f1b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dabc: lea r11, [rip + 0x70f3d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da97: lea r11, [rip + 0x70f62]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da7a: lea r11, [rip + 0x70f7f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da22: lea r11, [rip + 0x70fd7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000040ed1: lea r11, [rip + 0x7d4e8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040b73: lea r11, [rip + 0x7d846]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040d1e: lea r11, [rip + 0x7d8db]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409f3: lea r11, [rip + 0x7d9c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040ab6: lea r11, [rip + 0x7db43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040873: lea r11, [rip + 0x7db46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040936: lea r11, [rip + 0x7dcc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406f3: lea r11, [rip + 0x7dcc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b6: lea r11, [rip + 0x7de43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040573: lea r11, [rip + 0x7de46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040637: lea r11, [rip + 0x7dfc2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403f3: lea r11, [rip + 0x7dfc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b6: lea r11, [rip + 0x7e143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040273: lea r11, [rip + 0x7e146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040336: lea r11, [rip + 0x7e2c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400f3: lea r11, [rip + 0x7e2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b6: lea r11, [rip + 0x7e443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff73: lea r11, [rip + 0x7e446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040036: lea r11, [rip + 0x7e5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fdf3: lea r11, [rip + 0x7e5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb6: lea r11, [rip + 0x7e743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc73: lea r11, [rip + 0x7e746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd36: lea r11, [rip + 0x7e8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faf3: lea r11, [rip + 0x7e8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb6: lea r11, [rip + 0x7ea43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f973: lea r11, [rip + 0x7ea46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa36: lea r11, [rip + 0x7ebc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7f3: lea r11, [rip + 0x7ebc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b6: lea r11, [rip + 0x7ed43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f673: lea r11, [rip + 0x7ed46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4fa: lea r11, [rip + 0x7eebf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f736: lea r11, [rip + 0x7eec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b6: lea r11, [rip + 0x7f043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f2fb: lea r11, [rip + 0x7f0be]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f479: lea r11, [rip + 0x7f180]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f31d: lea r11, [rip + 0x7f2dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3bd: lea r11, [rip + 0x7fafc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e093: lea r11, [rip + 0x7fe26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e22a: lea r11, [rip + 0x7fecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df13: lea r11, [rip + 0x7ffa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd6: lea r11, [rip + 0x80123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd93: lea r11, [rip + 0x80126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de56: lea r11, [rip + 0x802a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc13: lea r11, [rip + 0x802a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd6: lea r11, [rip + 0x80423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da93: lea r11, [rip + 0x80426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db57: lea r11, [rip + 0x805a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d913: lea r11, [rip + 0x805a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d6: lea r11, [rip + 0x80723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d793: lea r11, [rip + 0x80726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d856: lea r11, [rip + 0x808a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d613: lea r11, [rip + 0x808a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d6: lea r11, [rip + 0x80a23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d493: lea r11, [rip + 0x80a26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d556: lea r11, [rip + 0x80ba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d313: lea r11, [rip + 0x80ba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d6: lea r11, [rip + 0x80d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d193: lea r11, [rip + 0x80d26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d256: lea r11, [rip + 0x80ea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d013: lea r11, [rip + 0x80ea6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d6: lea r11, [rip + 0x81023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce93: lea r11, [rip + 0x81026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf56: lea r11, [rip + 0x811a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd13: lea r11, [rip + 0x811a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd6: lea r11, [rip + 0x81323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb93: lea r11, [rip + 0x81326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca1a: lea r11, [rip + 0x8149f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc56: lea r11, [rip + 0x814a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c7c4: lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c707: lea r11, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad6: lea r11, [rip + 0x81623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c83a: lea r11, [rip + 0x8167f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c61c: lea r11, [rip + 0x816dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c999: lea r11, [rip + 0x81760]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c551: lea r11, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c827: lea r11, [rip + 0x818d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b530: lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b492: lea r11, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3e0: lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b342: lea r11, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b290: lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1f2: lea r11, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b140: lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b0a2: lea r11, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aff0: lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af52: lea r11, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aea0: lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae02: lea r11, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad50: lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acb2: lea r11, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ac00: lea r11, [rip + 0x830f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ab67: lea r11, [rip + 0x83192]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aab0: lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa12: lea r11, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a960: lea r11, [rip + 0x83399]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8c2: lea r11, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a810: lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a772: lea r11, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6c0: lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a622: lea r11, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a570: lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4d2: lea r11, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a420: lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a382: lea r11, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2d0: lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a232: lea r11, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a186: lea r11, [rip + 0x83b73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a095: lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039fd6: lea r11, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f6c: lea r11, [rip + 0x83d8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e7d: lea r11, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c43: lea r11, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db8: lea r11, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b69: lea r11, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b60: lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038ac2: lea r11, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a10: lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038972: lea r11, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388c0: lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038822: lea r11, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038770: lea r11, [rip + 0x853c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386d2: lea r11, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038620: lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038582: lea r11, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384d0: lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038432: lea r11, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038380: lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382e2: lea r11, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038230: lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038197: lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000380e0: lea r11, [rip + 0x85a59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038042: lea r11, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f90: lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ef2: lea r11, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037e40: lea r11, [rip + 0x85cf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037da2: lea r11, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037cf0: lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c52: lea r11, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ba0: lea r11, [rip + 0x85f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037b02: lea r11, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a50: lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379b2: lea r11, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037900: lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037862: lea r11, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000377b6: lea r11, [rip + 0x86383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c5: lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037606: lea r11, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003759c: lea r11, [rip + 0x8659d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374ad: lea r11, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e8: lea r11, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000366a3: lea r11, [rip + 0x87356]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036629: lea r11, [rip + 0x873d0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003659a: lea r11, [rip + 0x8745f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003638f: lea r11, [rip + 0x8766a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003625d: lea r11, [rip + 0x8779c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036197: lea r11, [rip + 0x87862]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036119: lea r11, [rip + 0x878e0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036082: lea r11, [rip + 0x87977]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e86: lea r11, [rip + 0x87b73]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d55: lea r11, [rip + 0x87ca4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c46: lea r11, [rip + 0x87db3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000005aaa4: lea r12, [r13 + 1]; cmp rax, 0x17; ja 0x5aa80; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000017cb2: lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000020e28: lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000000b8fbb: lea r8, [rip + 0x1cf4e]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b761b: lea r8, [rip + 0x1e8ae]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b454b: lea r8, [rip + 0x21462]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000001b79b: lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000050964: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x50ad4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050cbf: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x50e91; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005110a: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x5134c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000007f96f: lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000007f88a: lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000000820ed: lea r9, [rsp + 0x20]; call rbx; 
0x00000000000822db: lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000081fc5: lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000018728: lea rax, [r10 + r8*4]; mov qword ptr [rsi + 0x10], r10; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000b459b: lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x00000000000352f3: lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000035303: lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000352d3: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000008b0bc: lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000000815cc: lea rax, [rcx + rsi]; ret; 
0x0000000000050293: lea rax, [rcx - 1]; ret; 
0x000000000004e30b: lea rax, [rdi + 0x10]; ret; 
0x000000000004e320: lea rax, [rdi + 0x11]; ret; 
0x000000000004e33e: lea rax, [rdi + 0x12]; ret; 
0x000000000004e35e: lea rax, [rdi + 0x13]; ret; 
0x000000000004e381: lea rax, [rdi + 0x14]; ret; 
0x000000000004e3a0: lea rax, [rdi + 0x15]; ret; 
0x000000000004e3c0: lea rax, [rdi + 0x16]; ret; 
0x000000000004e3e0: lea rax, [rdi + 0x17]; ret; 
0x000000000004e403: lea rax, [rdi + 0x18]; ret; 
0x000000000004e428: lea rax, [rdi + 0x19]; ret; 
0x000000000004e446: lea rax, [rdi + 0x1a]; ret; 
0x000000000004e466: lea rax, [rdi + 0x1b]; ret; 
0x000000000004e482: lea rax, [rdi + 0x1c]; ret; 
0x000000000004e4a2: lea rax, [rdi + 0x1d]; ret; 
0x000000000004e4c2: lea rax, [rdi + 0x1e]; ret; 
0x000000000004e4e2: lea rax, [rdi + 0x1f]; ret; 
0x000000000004e25c: lea rax, [rdi + 0xa]; ret; 
0x000000000004e27c: lea rax, [rdi + 0xb]; ret; 
0x000000000004e29e: lea rax, [rdi + 0xc]; ret; 
0x000000000004e2be: lea rax, [rdi + 0xd]; ret; 
0x000000000004e2de: lea rax, [rdi + 0xe]; ret; 
0x000000000004e2f8: lea rax, [rdi + 0xf]; ret; 
0x000000000004e1a6: lea rax, [rdi + 1]; ret; 
0x000000000004e1b9: lea rax, [rdi + 2]; ret; 
0x000000000004e1c4: lea rax, [rdi + 3]; ret; 
0x000000000004e1d7: lea rax, [rdi + 4]; ret; 
0x000000000004e1ec: lea rax, [rdi + 5]; ret; 
0x000000000004e20a: lea rax, [rdi + 6]; ret; 
0x000000000004e216: lea rax, [rdi + 7]; ret; 
0x000000000004e229: lea rax, [rdi + 8]; ret; 
0x000000000004e23e: lea rax, [rdi + 9]; ret; 
0x00000000000810d8: lea rax, [rdi + rax + 0x10]; ret; 
0x000000000004a0f6: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000810e8: lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000352bc: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000004a116: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a154: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000081814: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000049b5b: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000049fbc: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000049d76: lea rax, [rdi + rax]; ret; 
0x00000000000505e9: lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000000814c8: lea rax, [rdi + rsi]; ret; 
0x000000000004e192: lea rax, [rdi]; ret; 
0x000000000004d77c: lea rax, [rdx + 0xa]; ret; 
0x000000000004d79c: lea rax, [rdx + 0xb]; ret; 
0x000000000004d7be: lea rax, [rdx + 0xc]; ret; 
0x000000000004d7de: lea rax, [rdx + 0xd]; ret; 
0x000000000004d7fe: lea rax, [rdx + 0xe]; ret; 
0x000000000004d68e: lea rax, [rdx + 0xf]; ret; 
0x000000000004d6b6: lea rax, [rdx + 1]; ret; 
0x000000000004d6cc: lea rax, [rdx + 2]; ret; 
0x000000000004d6e4: lea rax, [rdx + 3]; ret; 
0x000000000004d6fa: lea rax, [rdx + 4]; ret; 
0x000000000004d70c: lea rax, [rdx + 5]; ret; 
0x000000000004d72a: lea rax, [rdx + 6]; ret; 
0x00000000000b4590: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x000000000004d636: lea rax, [rdx + 7]; ret; 
0x000000000004d73c: lea rax, [rdx + 8]; ret; 
0x000000000004d75c: lea rax, [rdx + 9]; ret; 
0x000000000002d015: lea rax, [rdx - 0x10]; ret; 
0x000000000004d6a4: lea rax, [rdx]; ret; 
0x0000000000080477: lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e817: lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db27: lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e3fe: lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x000000000002e757: lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e617: lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4b7: lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7be: lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e67e: lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e51e: lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e79d: lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002daae: lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e65d: lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e4fd: lea rax, [rip + 0x22b6c]; cmovne rax, rdx; ret; 
0x000000000002e56c: lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000002e5bd: lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000009c980: lea rax, [rip + 0x24e1d9]; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000009c965: lea rax, [rip + 0x24e1f4]; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x000000000007a115: lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0c2: lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b95: lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f34: lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079eef: lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079eaa: lea rax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e5b: lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000794bf: lea rax, [rip + 0x26b75a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000006e5ae: lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e95d: lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e90f: lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e860: lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e804: lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e564: lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e516: lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0b5: lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000067368: lea rax, [rip + 0x27f5d1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x000000000005a930: lea rax, [rip + 0x28d9c9]; ret; 
0x00000000000591d9: lea rax, [rip + 0x292208]; add rsp, 8; ret; 
0x000000000009d0fe: lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000002e7e7: lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000080547: lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081df7: lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000000804a7: lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000000299f0: lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x2bde4a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x00000000000299fe: lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x000000000008ed10: lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x0000000000056b0e: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x00000000000b8886: lea rbp, [r13 - 1]; mov rdx, r15; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x0000000000017280: lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000004da2d: lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000081fca: lea rcx, [rax + 1]; call rbx; 
0x0000000000082165: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000007c7a4: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000008e173: lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000003428f: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000002d025: lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000000b1cbd: lea rcx, [rip + 0x104fc]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000b05dc: lea rcx, [rip + 0x11bdd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000b030d: lea rcx, [rip + 0x11eac]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000ae67c: lea rcx, [rip + 0x13b3d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000008bb86: lea rcx, [rip + 0x42d93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000007c32f: lea rcx, [rip + 0x514ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000049aa8: lea rcx, [rip + 0x78711]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000048693: lea rcx, [rip + 0x79b26]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000048438: lea rcx, [rip + 0x79d81]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000046b63: lea rcx, [rip + 0x7b656]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000059519: lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000059c1e: lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000050909: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000003c7bc: lea rdi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006e5ff: lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000090a97: lea rdi, [rip + 0x3e062]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000008d240: lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x000000000008c4ae: lea rdi, [rip + 0x42503]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000007ca76: lea rdi, [rip + 0x50eef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000595ed: lea rdi, [rip + 0x660fd]; mov eax, 0x15; syscall; 
0x0000000000017e0c: lea rdi, [rip + 0xa46ba]; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x0000000000016177: lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000083997: lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx; 
0x00000000000373f3: lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000022530: lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000007c7a8: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000003b527: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3d7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b287: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b137: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afe7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae97: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad47: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaa7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a807: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a567: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a417: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2c7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b57: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a07: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038617: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384c7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038377: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038227: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ce7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a47: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000378f7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009d0f7: lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000000b1d16: lea rdx, [rip + 0x104a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1cf1: lea rdx, [rip + 0x104c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0366: lea rdx, [rip + 0x11e53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0341: lea rdx, [rip + 0x11e78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae396: lea rdx, [rip + 0x13e23]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae371: lea rdx, [rip + 0x13e48]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe36: lea rdx, [rip + 0x16383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe11: lea rdx, [rip + 0x163a8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000080466: lea rdx, [rip + 0x1653]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e806: lea rdx, [rip + 0x1b963]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002e750: lea rdx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e610: lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4b0: lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7b7: lea rdx, [rip + 0x224c2]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e677: lea rdx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e517: lea rdx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e796: lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002daa7: lea rdx, [rip + 0x22a12]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e656: lea rdx, [rip + 0x22a53]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e565: lea rdx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000002e5b6: lea rdx, [rip + 0x23373]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000009cdc5: lea rdx, [rip + 0x24bd94]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009ce35: lea rdx, [rip + 0x379f0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000094fbe: lea rdx, [rip + 0x3ea0f]; movzx r12d, r12b; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094bf4: lea rdx, [rip + 0x3ed29]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000094701: lea rdx, [rip + 0x3f010]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007cae4: lea rdx, [rip + 0x50f3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005621c: lea rdx, [rip + 0x68f19]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000002e7d6: lea rdx, [rip + 0x6b33]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000049adc: lea rdx, [rip + 0x786dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048486: lea rdx, [rip + 0x79d33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004846c: lea rdx, [rip + 0x79d4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468d6: lea rdx, [rip + 0x7b8e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468bc: lea rdx, [rip + 0x7b8fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000044786: lea rdx, [rip + 0x7da33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004476c: lea rdx, [rip + 0x7da4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000002d44d: lea rdx, [rip + 0x903ac]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b1cf: lea rdx, [rip + 0xb0d62]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000b002: lea rdx, [rip + 0xb0ed7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000ae7e: lea rdx, [rip + 0xb102f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000081de6: lea rdx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000081e63: lea rdx, [rip - 0x305ba]; cmove rax, rdx; ret; 
0x000000000002e3f7: lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000000508fd: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000056a3d: lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000056b40: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000007f886: lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007f968: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000007fa62: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000008d989: lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000000a6d2: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000001b931: lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000078f6c: lea rsi, [rip + 0x26bbad]; jmp rax; 
0x000000000006eca1: lea rsi, [rip + 0x275778]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e649: lea rsi, [rip + 0x275dd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000051ad0: lea rsi, [rip + 0x6d089]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000051af2: lea rsi, [rip + 0x6d08b]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000005090e: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000070c01: leave; add eax, 0x6f0f6600; ret 0x23e8; 
0x0000000000070bd8: leave; add eax, 0x6f0f6600; ret 0x290f; 
0x0000000000068763: leave; and bh, dl; jmp qword ptr [rsi + 0xf]; 
0x000000000001f8b8: leave; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000505e4: leave; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000000d65fd: leave; hlt; call rsp; 
0x0000000000050070: leave; jne 0x50060; ret; 
0x0000000000050120: leave; jne 0x50110; ret; 
0x00000000000503e0: leave; jne 0x503d0; sub rax, 1; ret; 
0x000000000008001b: leave; jne 0x7ffab; mov dword ptr fs:[rax], 5; mov rax, rdx; pop rbx; ret; 
0x000000000008bd66: leave; jne 0x8bff6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000008c68e: leave; jne 0x8cc66; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000000505e8: leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000000359cf: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000000b4554: leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000005c9df: leave; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000002fe1c: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000079486: leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000038773: leave; push rbx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000008d9b: leave; ret; 
0x00000000000d0c61: leave; retf 0x6ee8; sahf; ret 0x38ae; 
0x000000000008e1c2: leave; test rsi, rsi; je 0x8e1cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000000820ea: leave; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000058f5f: leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000000058e9f: leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000002b48d: ljmp [rax + 0x158d4804]; leave; ret; 
0x00000000000d7137: ljmp [rax - 0x71]; add byte ptr [rax], al; pop rax; cld; stc; jmp rsp; 
0x00000000000d7837: ljmp [rax - 0x77ffff44]; insb byte ptr [rdi], dx; cld; call rsp; 
0x00000000000d700f: ljmp [rax - 0x79]; add byte ptr [rax], al; sbb byte ptr [rdi], cl; stc; call rax; 
0x00000000000d5a0f: ljmp [rax]; int1; std; jmp qword ptr [rax - 0xf]; 
0x00000000000d7927: ljmp [rax]; ret 0; 
0x00000000000bc0e7: ljmp [rbx]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000000be67f: ljmp [rcx + rbp]; clc; call rdx; 
0x00000000000be67f: ljmp [rcx + rbp]; clc; call rdx; xor al, bh; call qword ptr [rdx + 0x30]; 
0x00000000000cd8ff: ljmp [rcx + rsi*8]; cli; call rsp; 
0x00000000000cd8f3: ljmp [rcx + rsi*8]; cli; jmp rsp; 
0x00000000000cd8fb: ljmp [rcx + rsi*8]; cli; ljmp [rcx + rsi*8]; cli; call rsp; 
0x0000000000079974: ljmp [rcx]; ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x00000000000be677: ljmp [rdx + rbp]; clc; lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000bf1eb: ljmp [rdx + rsi*2]; stc; dec dword ptr [rsi]; jb 0xbf1ec; jmp rsp; 
0x00000000000d766f: ljmp [rdx + rsi*4 - 0x5e980000]; sti; jmp rax; 
0x000000000000a046: ljmp [rip + 0x748b4800]; and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000003600e: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000055cf0: lock inc dword ptr [r12 + 0x28]; mov rax, qword ptr [r12 + 8]; test rax, rax; je 0x55d02; call rax; 
0x000000000008ec67: lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000001a4c0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004f9f0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000000d7571: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; cwde; push rdx; sti; call qword ptr [rax]; 
0x0000000000088fbd: lodsb al, byte ptr [rsi]; add dword ptr [rax], eax; add al, ch; push 0x1a; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000002d450: lodsb al, byte ptr [rsi]; add ecx, dword ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000083784: lodsb al, byte ptr [rsi]; and al, 0xa8; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x00000000000e1794: lodsb al, byte ptr [rsi]; cdq; add byte ptr [rax], al; mov byte ptr [rcx], cl; sti; call qword ptr [rdx]; 
0x00000000000be9f1: lodsb al, byte ptr [rsi]; clc; inc dword ptr [rax]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x000000000007fd8f: lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d34d0: lodsb al, byte ptr [rsi]; fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000d7670: lodsb al, byte ptr [rsi]; mov dl, 0; add byte ptr [rax - 0x5f], ch; sti; jmp rax; 
0x0000000000034444: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000d313d: lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000007835e: lodsb al, byte ptr [rsi]; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x78378; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000008ac9f: lodsb al, byte ptr [rsi]; ret 0x25; 
0x000000000000c258: lodsb al, byte ptr [rsi]; ret; 
0x00000000000e1c24: lodsb al, byte ptr [rsi]; scasd eax, dword ptr [rdi]; sti; jmp qword ptr [rdx]; 
0x00000000000bfff9: lodsb al, byte ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000000bfff5: lodsb al, byte ptr [rsi]; stc; push qword ptr [rdi - 0x54]; stc; jmp qword ptr [rcx]; 
0x00000000000a045c: lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d7579: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; test al, 0x55; sti; jmp qword ptr [rax - 0x53]; 
0x000000000005b5ed: lodsd eax, dword ptr [rsi]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d005b: lodsd eax, dword ptr [rsi]; and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000000da9a4: lodsd eax, dword ptr [rsi]; fdivr st(2), st(0); call qword ptr [rsi]; 
0x000000000007deff: lodsd eax, dword ptr [rsi]; mov ah, 0xfd; jmp qword ptr [rsi + 0x2e]; 
0x00000000000af6a0: lodsd eax, dword ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000092942: lodsd eax, dword ptr [rsi]; ret; 
0x00000000000d15f8: lodsd eax, dword ptr [rsi]; xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000a045b: lodsq rax, qword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000398d7: loope 0x39925; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003991f: loope 0x3996d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003995d: loope 0x399ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039995: loope 0x399e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000399d3: loope 0x39a21; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a0b: loope 0x39a59; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a33: loope 0x39a81; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c2a7: loope 0x3c2f5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c2ef: loope 0x3c33d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c32d: loope 0x3c37b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c365: loope 0x3c3b3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c3a3: loope 0x3c3f1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c3db: loope 0x3c429; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c403: loope 0x3c451; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e48a: loope 0x3e47f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000040277: loope 0x40280; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404ba: loope 0x404c3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040faa: loope 0x40f9f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000004a4ec: loope 0x4a50e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000004daee: loope 0x4da80; bsf rdx, rdx; lea r11, [rip + 0x70f05]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db65: loope 0x4dbcd; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000004e10e: loope 0x4e0a0; bsf rdx, rdx; lea r11, [rip + 0x70965]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e185: loope 0x4e1ed; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004e71b: loope 0x4e71d; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000005210e: loope 0x52103; ret; 
0x000000000005b60e: loope 0x5b613; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x000000000005bac3: loope 0x5bad4; cmp cl, 0xa; je 0x5c08f; add rax, qword ptr [r14 + 0x10]; add r14, 0x18; call rax; 
0x000000000005be16: loope 0x5be27; cmp cl, 0xa; je 0x5c0cf; add rax, qword ptr [r15 + 0x10]; call rax; 
0x000000000006a414: loope 0x6a40f; dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000078d05: loope 0x78d50; mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000081aa8: loope 0x81aca; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000081e40: loope 0x81e42; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000000829fe: loope 0x82a0f; je 0x82a20; ret; 
0x000000000008c47b: loope 0x8c47c; dec dword ptr [rcx - 0x77]; ret; 
0x00000000000927d7: loope 0x92825; mov dword ptr [rdi], ecx; ret; 
0x0000000000092808: loope 0x92856; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000009287d: loope 0x928cb; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000009c969: loope 0x9c98f; add byte ptr [rax - 0x77], cl; add eax, 0x24e1d5; add rsp, 8; ret; 
0x000000000009c984: loope 0x9c9aa; add byte ptr [rax - 0x77], cl; add eax, 0x24e1ba; ret; 
0x00000000000b64ec: loope 0xb6537; mov edx, dword ptr [rsp]; or esi, 2; mov edi, 1; call rax; 
0x00000000000b8c93: loope 0xb8c8a; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b96c6: loope 0xb9723; ret; 
0x00000000000ba49e: loope 0xba4fb; pop rbp; pop r12; ret; 
0x00000000000bdd11: loope 0xbdd0a; jmp qword ptr [rax - 0x1d]; 
0x00000000000bdd51: loope 0xbdd4a; jmp qword ptr [rax]; 
0x00000000000d3a54: loope 0xd3a7e; cld; jmp rcx; 
0x00000000000d3a58: loope 0xd3a82; cld; jmp rcx; 
0x00000000000d3ad4: loope 0xd3afe; cld; jmp rcx; 
0x00000000000d3ad8: loope 0xd3b02; cld; jmp rcx; 
0x00000000000d76d9: mov ah, 0; add dh, dh; mov ch, 0xfb; call qword ptr [rax]; 
0x00000000000be044: mov ah, 0x13; clc; inc dword ptr [rbx + rdx - 8]; call rsp; 
0x00000000000d04ca: mov ah, 0x13; ret; 
0x00000000000e18fc: mov ah, 0x17; sti; jmp qword ptr [rdx + 5]; 
0x00000000000bb77a: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000000bae8a: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000008374c: mov ah, 0x24; test al, 0; add byte ptr [rax], al; call rbx; 
0x0000000000083cf6: mov ah, 0x24; test al, 0; add byte ptr [rax], al; mov rsi, rbp; mov rdi, r12; call rbx; 
0x00000000000daf9c: mov ah, 0x31; add byte ptr [rax], al; mov al, 0xd5; hlt; jmp rsi; 
0x00000000000d6378: mov ah, 0x36; add byte ptr [rax], al; js 0xd63eb; hlt; call rsp; 
0x00000000000dbd9c: mov ah, 0x3f; add byte ptr [rax], al; xor byte ptr [rdx], ch; cmc; jmp qword ptr [rbx]; 
0x00000000000d14db: mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x00000000000c1198: mov ah, 0x74; cli; jmp rsp; 
0x00000000000d0970: mov ah, 0xa5; ret; 
0x00000000000cfd74: mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000000daddc: mov ah, 0xbf; hlt; call qword ptr [rdx]; 
0x00000000000d7cb8: mov ah, 0xd8; add byte ptr [rax], al; cwde; sub edi, esi; call rax; 
0x0000000000078cd8: mov ah, 0xe2; add byte ptr es:[rax - 0x77], cl; ret 0x2b48; 
0x00000000000d64f5: mov ah, 0xf4; jmp qword ptr [rax + 0x41]; 
0x00000000000bdc49: mov ah, 0xf7; push rax; mov ch, 0xf7; jmp rax; 
0x000000000007df00: mov ah, 0xfd; jmp qword ptr [rsi + 0x2e]; 
0x0000000000056218: mov ah, 2; add byte ptr [rax], al; lea rdx, [rip + 0x68f19]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000b89d2: mov ah, ah; cmc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d02c4: mov ah, bl; push rsi; ret; 
0x0000000000083993: mov al, 0; add byte ptr [rax], al; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx; 
0x000000000008399b: mov al, 0; add byte ptr [rax], al; mov rsi, rbp; call rbx; 
0x00000000000b46a6: mov al, 0; add byte ptr [rax], al; ret; 
0x00000000000bded0: mov al, 0x12; clc; inc dword ptr [rax + 0x12]; clc; call rax; 
0x00000000000da298: mov al, 0x24; add byte ptr [rax], al; push rsp; jl 0xda293; jmp qword ptr [rdi + 2]; 
0x0000000000079e5f: mov al, 0x26; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000000be5e0: mov al, 0x36; clc; inc dword ptr [rax + 0x36]; clc; call rax; 
0x00000000000be3c8: mov al, 0x39; clc; inc dword ptr [rax + 0x39]; clc; call rax; 
0x00000000000be918: mov al, 0x53; clc; inc eax; push rbp; clc; call rax; 
0x00000000000d9b70: mov al, 0x5a; hlt; call qword ptr [rdi]; 
0x00000000000bf30c: mov al, 0x72; stc; call rcx; 
0x00000000000be974: mov al, 0x83; clc; call qword ptr [rax - 0x7b]; 
0x00000000000be994: mov al, 0x90; clc; call qword ptr [rax - 0x6e]; 
0x00000000000bfa40: mov al, 0xa5; stc; call qword ptr [rax + 0x70fff9a5]; movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000be9f0: mov al, 0xac; clc; inc dword ptr [rax]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x00000000000be840: mov al, 0xb; clc; call rax; 
0x00000000000be840: mov al, 0xb; clc; call rax; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000bdbdc: mov al, 0xbe; idiv edi; mov cl, 0xf7; inc dword ptr [rax]; mov bl, 0xf7; jmp rax; 
0x000000000004a13f: mov al, 0xc5; std; xlatb; ret; 
0x00000000000dafa0: mov al, 0xd5; hlt; jmp rsi; 
0x00000000000bddb0: mov al, 0xe0; idiv edi; and dl, 0xf7; inc dword ptr [rax - 0x7f00081c]; out 0xf7, al; call qword ptr [rax]; 
0x0000000000008fdd: mov al, 0xeb; add dword ptr [rax - 0x360bba75], edx; ret; 
0x00000000000bea10: mov al, 0xf1; clc; inc eax; int1; clc; call rax; 
0x00000000000bea4c: mov al, 0xf2; clc; inc eax; clc; jmp rax; 
0x00000000000d5a28: mov al, 0xf2; std; jmp qword ptr [rax]; 
0x000000000009f963: mov al, 0xf6; jmp qword ptr [rsi + 0x2e]; 
0x00000000000beaa4: mov al, 0xf7; clc; call rax; 
0x00000000000beac8: mov al, 0xf8; clc; call rax; 
0x00000000000beae8: mov al, 0xf9; clc; call rax; 
0x00000000000be0e8: mov al, 0xf; clc; inc dword ptr [rax + 0xf]; clc; call rax; 
0x00000000000d5ad8: mov al, 0xfc; std; call rax; 
0x000000000000c767: mov al, 4; add byte ptr [rax - 0x7d], cl; cmp eax, 0x2da7c6; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000be981: mov al, bh; push qword ptr [rax]; mov bh, al; call rax; 
0x0000000000028ef9: mov al, byte ptr [rax + 2]; add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000000d7081: mov al, byte ptr [rax]; add byte ptr [rax + 0x2f], cl; stc; call qword ptr [rax - 0x76]; 
0x000000000007c962: mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000070e1b: mov al, byte ptr [rbx - 0x76ffffe6]; ret 0xc389; 
0x000000000004d6c6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000004bf16: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000004d6f4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000004bf34: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000004d6a0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000004bef0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000359d0: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000004d704: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000004bf44: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000004d6b0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000004d6c0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000004bf10: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000004bf00: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000d7761: mov bh, 0; add byte ptr [rax - 0x3f], ch; sti; call qword ptr [rax]; 
0x0000000000053b87: mov bh, 0x14; imul eax, dword ptr [rcx + rbp - 6], 0x39; ret 0x257e; 
0x000000000003f251: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x00000000000794c3: mov bh, 0x26; add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000003b345: mov bh, 0x29; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000509b2: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000065cdf: mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x000000000004e5b8: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x0000000000038585: mov bh, 0x55; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000052be1: mov bh, 0x57; adc byte ptr [rcx], ch; ret 0x428d; 
0x00000000000d17a4: mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000000cfd77: mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000000d651d: mov bh, 0xf4; jmp rax; 
0x00000000000bdb4d: mov bh, 0xf7; call qword ptr [rax - 0x47]; 
0x00000000000bdc71: mov bh, 0xf7; jmp qword ptr [rax - 0x47]; 
0x00000000000bdb8d: mov bh, 0xf7; jmp qword ptr [rax]; 
0x00000000000d7395: mov bh, 0xfa; call qword ptr [rax - 0x60]; 
0x000000000002b69b: mov bh, 0xfe; jmp qword ptr [rsi - 0x70]; 
0x00000000000be985: mov bh, al; call rax; 
0x00000000000be985: mov bh, al; call rax; mov edi, eax; push qword ptr [rax - 0x73]; clc; call qword ptr [rax]; 
0x00000000000a9534: mov bh, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000d76a9: mov bl, 0; add byte ptr [rax - 0x57], ch; sti; jmp qword ptr [rax - 0x4c]; 
0x00000000000d76a1: mov bl, 0; add byte ptr [rax - 0x700045a], cl; mov bl, 0; add byte ptr [rax - 0x57], ch; sti; jmp qword ptr [rax - 0x4c]; 
0x000000000004feae: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000e3161: mov bl, 0; add byte ptr [rdi + rsi - 3], cl; call qword ptr [rbx]; 
0x000000000001e08d: mov bl, 0x2c; add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x0000000000068572: mov bl, 0x4c; add edi, ebx; jmp rdi; 
0x0000000000035c49: mov bl, 0x7d; or byte ptr [rax], al; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000cfd73: mov bl, 0xb4; mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000000ce944: mov bl, 0xe5; sti; jmp rax; 
0x00000000000bdb45: mov bl, 0xf7; call qword ptr [rax + 0x70fff7b5]; mov bh, 0xf7; call qword ptr [rax - 0x47]; 
0x00000000000bdbc5: mov bl, 0xf7; call qword ptr [rax]; 
0x00000000000bdbc5: mov bl, 0xf7; call qword ptr [rax]; mov ch, 0xf7; push rax; mov dh, 0xf7; call rax; 
0x00000000000bdb85: mov bl, 0xf7; jmp qword ptr [rax - 0x4b]; 
0x000000000008f66f: mov bl, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x00000000000bdbe5: mov bl, 0xf7; jmp rax; 
0x000000000008ef3f: mov bl, 0xf9; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000e1e19: mov bl, 0xfb; call qword ptr [rdi]; 
0x00000000000bdba8: mov bpl, 0xf7; jmp qword ptr [rax]; 
0x000000000005c50a: mov byte ptr [r8 - 0x7d], r9b; ret 0x4830; 
0x000000000000b394: mov byte ptr [r9 - 0x77], r8b; int 0x83; ret 0x8901; 
0x000000000005958a: mov byte ptr [rax + 0x28], 1; ret; 
0x000000000004fac7: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000000d6fb8: mov byte ptr [rax + rax - 0x7088800], al; jmp qword ptr [rax]; 
0x00000000000d6208: mov byte ptr [rax + rax], ch; add byte ptr [rax - 0x63000bdc], bh; sub al, 0; add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x00000000000d6e2c: mov byte ptr [rax + rdi*8], dh; call qword ptr [rax]; 
0x000000000005ed53: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000005c50b: mov byte ptr [rax - 0x7d], cl; ret 0x4830; 
0x00000000000d79e1: mov byte ptr [rax], 0; sub byte ptr [rdi*8 + 0xc6d8ff], cl; add byte ptr [rax + 0x4cfffd30], ch; mov dword ptr [rax], 0xfd30b800; jmp qword ptr [rax - 0x39]; 
0x0000000000058c0f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000009ca4: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000943e0: mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000943e1: mov byte ptr [rax], ch; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d7044: mov byte ptr [rax], ch; stc; call qword ptr [rax - 0x77]; 
0x000000000006d6f3: mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000000bc144: mov byte ptr [rbp - 0x59ba000b], ah; cmc; jmp qword ptr [rcx]; 
0x000000000006b461: mov byte ptr [rbp - 0x918], al; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000006b460: mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000076976: mov byte ptr [rbp - 0x948], cl; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000076975: mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000007696c: mov byte ptr [rbp - 0x94c], al; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000007696b: mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000053d1c: mov byte ptr [rcx + 0x29], ah; add byte ptr [rbp + 1], cl; ret 0xf983; 
0x000000000007c437: mov byte ptr [rcx + 0xf], 0x4f; ret; 
0x0000000000068073: mov byte ptr [rcx + rax - 0x3a], cl; jmp rsi; 
0x00000000000b4558: mov byte ptr [rcx + rax - 0x40], cl; jmp rax; 
0x000000000000b395: mov byte ptr [rcx - 0x77], al; int 0x83; ret 0x8901; 
0x000000000000ecbf: mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000008f3e1: mov byte ptr [rcx], 0x48; shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x0000000000090915: mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x000000000000a304: mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000006c1d3: mov byte ptr [rcx], cl; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000e1798: mov byte ptr [rcx], cl; sti; call qword ptr [rdx]; 
0x000000000004e308: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004dc78: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000004e37e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004dcce: mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004e400: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd50: mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004e1b6: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000004db96: mov byte ptr [rdi + 2], dh; ret; 
0x000000000004e1d2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000004dbb2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000004e223: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004dbf3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000d62cc: mov byte ptr [rdi - 0xc], al; call qword ptr [rax + 0x78000031]; hlt; call rax; 
0x0000000000038e6b: mov byte ptr [rdi - 1], dl; ret; 
0x000000000001cb60: mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000041f92: mov byte ptr [rdi], cl; ret; 
0x0000000000051875: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000004e190: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004db70: mov byte ptr [rdi], dh; ret; 
0x00000000000d7a64: mov byte ptr [rdi], dh; std; jmp qword ptr [rax]; 
0x000000000003f2c3: mov byte ptr [rdi], dl; ret; 
0x000000000004d6c9: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000004bf19: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000004d6f7: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000004bf37: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000004f9eb: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x000000000004d6a2: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000004bef2: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000b50a0: mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000b5099: mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000b5092: mov byte ptr [rip + 0x235c15], 8; mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000b508b: mov byte ptr [rip + 0x235c1b], 8; mov byte ptr [rip + 0x235c15], 8; mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x00000000000b5084: mov byte ptr [rip + 0x235c21], 8; mov byte ptr [rip + 0x235c1b], 8; mov byte ptr [rip + 0x235c15], 8; mov byte ptr [rip + 0x235c0f], 8; mov byte ptr [rip + 0x235c09], 8; ret; 
0x000000000008edc9: mov byte ptr [rip + 0x25c4f8], 0; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x0000000000008ce8: mov byte ptr [rip + 0x2e06d1], 1; pop rbp; ret; 
0x0000000000027f19: mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x00000000000941af: mov byte ptr [rsi], al; jne 0x94198; mov rax, rsi; ret; 
0x0000000000094233: mov byte ptr [rsi], al; jne 0x94210; mov rax, rsi; ret; 
0x00000000000dbde8: mov byte ptr [rsi], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000000dff58: mov byte ptr [rsi], cl; cli; jmp qword ptr [rbx]; 
0x0000000000026c70: mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000000b1d69: mov byte ptr [rsp + rbx*8 - 0xd], dh; ret; 
0x00000000000d628c: mov byte ptr [rsp + rsi*8], bh; jmp qword ptr [rax + 0x2f]; 
0x000000000000e354: mov ch, 0x2d; add byte ptr [rcx + rcx*4 + 0x2d], cl; ret 0x2db5; 
0x00000000000d02c2: mov ch, 0x31; mov ah, bl; push rsi; ret; 
0x00000000000d1603: mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000007f96a: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x000000000007fa64: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000000d299f: mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000000d334a: mov ch, 0xab; ret; 
0x000000000006bc58: mov ch, 0xb0; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x00000000000cfd75: mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000000bdb69: mov ch, 0xf7; jmp qword ptr [rax - 0x49]; 
0x00000000000bdba9: mov ch, 0xf7; jmp qword ptr [rax]; 
0x00000000000bdc4d: mov ch, 0xf7; jmp rax; 
0x00000000000bdbc9: mov ch, 0xf7; push rax; mov dh, 0xf7; call rax; 
0x00000000000d76dd: mov ch, 0xfb; call qword ptr [rax]; 
0x0000000000036b86: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000082a10: mov ch, dh; and ch, 0xf; je 0x82a30; add rax, 2; ret; 
0x00000000000d689d: mov ch, dh; call qword ptr [rax + 0x5e]; 
0x00000000000592b4: mov cl, 0x35; and dword ptr ss:[rcx], ebp; add byte ptr [rax + 0x39], cl; ret 0xd975; 
0x000000000002473b: mov cl, 0x35; call qword ptr [rsi + 0x2c]; 
0x0000000000028598: mov cl, 0x35; ret 0x2bf2; 
0x000000000005938b: mov cl, 0x3d; pop rdi; and byte ptr [rcx], ch; add byte ptr [rax + 0x39], cl; ret 0xda75; 
0x000000000005ba40: mov cl, 0x4c; add esi, ecx; jmp rsi; 
0x00000000000bdbe1: mov cl, 0xf7; inc dword ptr [rax]; mov bl, 0xf7; jmp rax; 
0x00000000000bdba1: mov cl, 0xf7; jmp qword ptr [rax - 0x4d]; 
0x00000000000d6abd: mov cl, 0xf7; jmp qword ptr [rax]; 
0x00000000000bdbc1: mov cl, 0xf7; push qword ptr [rax]; mov bl, 0xf7; call qword ptr [rax]; 
0x00000000000d7385: mov cl, 0xfa; jmp qword ptr [rax]; 
0x00000000000e1cc1: mov cl, 0xfb; jmp qword ptr [rdx]; 
0x00000000000e1cd9: mov cl, 0xfb; jmp rdx; 
0x000000000007c32b: mov cl, 3; add byte ptr [rax], al; lea rcx, [rip + 0x514ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000044775: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000359d4: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000041f90: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000829fb: mov cl, dl; and cl, 0xf; je 0x82a20; ret; 
0x00000000000d2a2c: mov cs, edi; ret 0x8b36; 
0x00000000000a051d: mov cs, esi; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x00000000000758a2: mov cs, word ptr [rdx - 0x77000000]; ror byte ptr [rcx - 0x77], cl; ret; 
0x0000000000048cfe: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x0000000000041f7e: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000004e314: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc84: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004e418: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd68: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000392b4: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000003f1e4: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000004e1b0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000004db90: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000041f7d: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000e3405: mov dh, 0; add byte ptr [rax + 0x3f], ch; std; call qword ptr [rdx]; 
0x00000000000e34a9: mov dh, 0; add byte ptr [rax + rax*2 - 3], dl; call qword ptr [rbx]; 
0x00000000000942da: mov dh, 0; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x00000000000b78bf: mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000020922: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ce0f: mov dh, 0; pop r12; pop r13; pop r14; ret; 
0x00000000000229b0: mov dh, 0; ret; 
0x00000000000bdf18: mov dh, 0x11; clc; inc dword ptr [rsi + 0x11]; clc; call rsi; 
0x000000000002d091: mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x2d080; sub rax, 0x10; ret; 
0x000000000003f2c1: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000035524: mov dh, 0x16; sub eax, edx; ret; 
0x0000000000020e23: mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000000be410: mov dh, 0x38; clc; inc dword ptr [rsi + 0x38]; clc; call rsi; 
0x000000000002116d: mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x21189; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000007c44c: mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x0000000000016929: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000064aa2: mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000002e280: mov dh, 0x44; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000076ccb: mov dh, 0x46; or al, 0x83; ret; 
0x0000000000080bad: mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000004fa81: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000004fa71: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000004fa41: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000004fa61: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000004fa51: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000006b8c9: mov dh, 0x47; or al, 0x83; ret; 
0x00000000000d1762: mov dh, 0x4e; ret 0x474c; 
0x000000000002e27a: mov dh, 0x54; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x000000000004fa85: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x000000000004fa75: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x000000000004fa45: mov dh, 0x56; int1; sub eax, edx; ret; 
0x000000000004fa55: mov dh, 0x56; sub eax, edx; ret; 
0x00000000000a2a14: mov dh, 0x5d; add byte ptr [rbp - 0x57f2fad], cl; or dword ptr [rdi], ecx; xchg eax, esi; ret 0x8348; 
0x00000000000228f6: mov dh, 0x67; add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000070b38: mov dh, 0x67; or al, 0x89; ret 0xc689; 
0x000000000000ee5a: mov dh, 0x73; add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000018914: mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000556cc: mov dh, 0x7b; or dword ptr [rbx + rcx*4 + 0x34], ecx; ret 0x348; 
0x000000000008873f: mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x00000000000654d7: mov dh, 0x94; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000000654f5: mov dh, 0x94; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000065513: mov dh, 0x94; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000000cfd76: mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000085192: mov dh, 0xc0; add rsp, 0x58; ret; 
0x00000000000b5746: mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000094709: mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007c1c8: mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000a95ed: mov dh, 0xc0; neg eax; ret; 
0x000000000009ccba: mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000035544: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000005c9e1: mov dh, 0xc0; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000051b61: mov dh, 0xc1; pop rbx; ret; 
0x0000000000051b11: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x000000000001f722: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000051635: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000005ed52: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000d29a4: mov dh, 0xc7; ret 0xe71f; 
0x00000000000b4553: mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000051ba1: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000003554a: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000000c8c30: mov dh, 0xd; add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000000b5b1f: mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000000d34d7: mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000949a7: mov dh, 0xe4; mov rcx, qword ptr [rbp - 0x628]; mov r11, qword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094fc7: mov dh, 0xe4; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000093d4d: mov dh, 0xe8; pop rbp; push rsi; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000050989: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x000000000002fc61: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000000359e4: mov dh, 0xe; sub eax, ecx; ret; 
0x00000000000b7ea6: mov dh, 0xef; cmc; jmp qword ptr [rsi + 0xf]; 
0x00000000000bdbcd: mov dh, 0xf7; call rax; 
0x00000000000d6b05: mov dh, 0xf7; call rsp; 
0x00000000000d6afd: mov dh, 0xf7; inc eax; add byte ptr fs:[rax], al; clc; mov dh, 0xf7; call rsp; 
0x00000000000bdc0d: mov dh, 0xf7; jmp qword ptr [rax - 0x48]; 
0x00000000000bdc2d: mov dh, 0xf7; jmp qword ptr [rax]; 
0x0000000000016465: mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000000e1ec1: mov dh, 0xfb; call qword ptr [rax]; 
0x00000000000de611: mov dh, 0xfd; jmp qword ptr [rdi]; 
0x000000000002a024: mov dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000020931: mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ce21: mov dh, 2; ret; 
0x00000000000941a9: mov dh, 4; adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x0000000000046b67: mov dh, 7; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000000b1d14: mov dh, 7; lea rdx, [rip + 0x104a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0364: mov dh, 7; lea rdx, [rip + 0x11e53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae394: mov dh, 7; lea rdx, [rip + 0x13e23]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe34: mov dh, 7; lea rdx, [rip + 0x16383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048484: mov dh, 7; lea rdx, [rip + 0x79d33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468d4: mov dh, 7; lea rdx, [rip + 0x7b8e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000044784: mov dh, 7; lea rdx, [rip + 0x7da33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000359e1: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000035521: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000002fc64: mov dh, 7; sub eax, ecx; ret; 
0x00000000000da731: mov dh, ah; call qword ptr [rdx]; 
0x00000000000d6415: mov dh, ah; jmp qword ptr [rax + 0x3b]; 
0x0000000000082022: mov dh, byte ptr [rbx - 3]; jmp qword ptr [rsi + 0x2e]; 
0x000000000005210c: mov dh, byte ptr [rcx - 0xd]; ret; 
0x00000000000bdb8c: mov dil, 0xf7; jmp qword ptr [rax]; 
0x00000000000d7671: mov dl, 0; add byte ptr [rax - 0x5f], ch; sti; jmp rax; 
0x00000000000be6b4: mov dl, 0x2a; clc; jmp qword ptr [rdx]; 
0x00000000000be4b4: mov dl, 0x34; clc; inc dword ptr [rdx + 0x34]; clc; call rdx; 
0x00000000000d2c00: mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000000cfd72: mov dl, 0xb3; mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000000bdc45: mov dl, 0xf7; call qword ptr [rax]; 
0x00000000000bdc45: mov dl, 0xf7; call qword ptr [rax]; mov ah, 0xf7; push rax; mov ch, 0xf7; jmp rax; 
0x00000000000bdc25: mov dl, 0xf7; jmp qword ptr [rax - 0x4c]; 
0x00000000000e1d39: mov dl, 0xfb; jmp qword ptr [rbp]; 
0x000000000005e0bb: mov dl, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000038ef0: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000d68cc: mov dl, cl; cmc; jmp rax; 
0x000000000006fd15: mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x000000000001cffe: mov ds, word ptr [rcx - 0x74b7fffd]; push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000083366: mov dword ptr [r11 + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x00000000000187e3: mov dword ptr [r8], edx; mov dword ptr [rsi], edx; ret; 
0x0000000000041f86: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000041f71: mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000059521: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000007e339: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007e379: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007f378: mov dword ptr [rax + 0x18], edx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000059587: mov dword ptr [rax + 0x20], ecx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000595a1: mov dword ptr [rax + 0x20], esi; ret; 
0x000000000007f374: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000007e3be: mov dword ptr [rax + 0x30], esi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000007f26e: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000007e33d: mov dword ptr [rax + 0x40], ecx; ret; 
0x000000000007f3fa: mov dword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000039e75: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db0: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374a5: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e0: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000005ec84: mov dword ptr [rax + 0x4c], ecx; movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000007f3f2: mov dword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000005ec8f: mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000005ec92: mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000023ef0: mov dword ptr [rax + 8], ebx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000007e32e: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007e372: mov dword ptr [rax + 8], edx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000059525: mov dword ptr [rax + 8], edx; ret; 
0x00000000000badc5: mov dword ptr [rax + rax], 0x348d4800; ret 0xc183; 
0x000000000009cecd: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000016e28: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000007374d: mov dword ptr [rax], 0x16; mov eax, edx; ret; 
0x0000000000016ae6: mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x0000000000018d32: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x00000000000852b0: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000027f4a: mov dword ptr [rax], 0xc; mov rax, rsi; ret; 
0x00000000000d79f1: mov dword ptr [rax], 0xfd30b800; jmp qword ptr [rax - 0x39]; 
0x000000000008001f: mov dword ptr [rax], 5; mov rax, rdx; pop rbx; ret; 
0x000000000001bba5: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000d7059: mov dword ptr [rax], eax; add byte ptr [rax + 0x2e], cl; stc; jmp rax; 
0x000000000009403b: mov dword ptr [rax], eax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x0000000000093ff9: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009ce7d: mov dword ptr [rax], edi; pop rbx; ret; 
0x000000000009cdcd: mov dword ptr [rax], edx; add rsp, 8; ret; 
0x00000000000187e4: mov dword ptr [rax], edx; mov dword ptr [rsi], edx; ret; 
0x000000000007e86d: mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007e336: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007e376: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000024972: mov dword ptr [rax], edx; mov rax, rdx; add rsp, 8; ret; 
0x000000000009ce71: mov dword ptr [rax], edx; pop rbx; ret; 
0x000000000008529d: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x00000000000b6aa0: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000664fa: mov dword ptr [rbp - 0x48], eax; call 0x5a9a0; mov rdi, r14; call rbx; 
0x00000000000664f9: mov dword ptr [rbp - 0x48], r8d; call 0x5a9a0; mov rdi, r14; call rbx; 
0x000000000007a0b4: mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0ae: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b81: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079edb: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f20: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e47: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a101: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000794b5: mov dword ptr [rbp - 0x4b8], edx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x26b75a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000079b87: mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000078d0a: mov dword ptr [rbp - 0x4c8], ecx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000078f62: mov dword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x000000000006d707: mov dword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000006d9d6: mov dword ptr [rbp - 0x4d8], ecx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007a393: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000007a510: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007a392: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000007a50f: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000006df92: mov dword ptr [rbp - 0x4e8], ecx; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000078f5b: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x000000000006d700: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000006df91: mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000079ee1: mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e9c: mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006d8f2: mov dword ptr [rbp - 0x4f8], ecx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000079f26: mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000793d2: mov dword ptr [rbp - 0x500], eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000079e4d: mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000793c5: mov dword ptr [rbp - 0x508], ecx; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000006d8f9: mov dword ptr [rbp - 0x508], ecx; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000000793c4: mov dword ptr [rbp - 0x508], r9d; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000006d8f8: mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000007a107: mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000090a9f: mov dword ptr [rbp - 0x70], eax; mov eax, 0x15; syscall; 
0x000000000005d252: mov dword ptr [rbp - 0x70], esi; call 0x5a9a0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x0000000000084f4b: mov dword ptr [rbp - 0x77], 0xca8948c2; mov eax, 0x106; syscall; 
0x000000000006b45a: mov dword ptr [rbp - 0x93c], ecx; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000006b459: mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000076965: mov dword ptr [rbp - 0x950], ebx; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000076964: mov dword ptr [rbp - 0x950], r11d; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000000667ce: mov dword ptr [rbp - 0x98], edx; call 0x5a9a0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000009d150: mov dword ptr [rbp], eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000007f5a6: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000022459: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000080505: mov dword ptr [rbp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000066962: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000001cc37: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret; 
0x000000000009172e: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000001d01f: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x000000000008f43e: mov dword ptr [rbx + 0x10], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000001cc2f: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000091663: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000000a9615: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x000000000008f43a: mov dword ptr [rbx + 0x18], esp; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a96e9: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x0000000000066a8f: mov dword ptr [rbx + 0x20], edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020c66: mov dword ptr [rbx + 0x38], esi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000068f0d: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000020cdd: mov dword ptr [rbx + 0x40], esp; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000207c1: mov dword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x000000000007f5aa: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002245d: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000001e7f2: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007e3c4: mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000007f271: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000001cbbb: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000001df40: mov dword ptr [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b649a: mov dword ptr [rbx + 0x98], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000083367: mov dword ptr [rbx + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x000000000001ccae: mov dword ptr [rbx + 0xd8], ecx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x00000000000908c5: mov dword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000008025c: mov dword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000001c6e0: mov dword ptr [rbx + 8], eax; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000001cc33: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x000000000001d01b: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000008ef29: mov dword ptr [rbx + 8], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020b55: mov dword ptr [rbx + 8], eax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000066977: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000067365: mov dword ptr [rbx + rbp*8], eax; lea rax, [rip + 0x27f5d1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x0000000000067270: mov dword ptr [rbx + rsi*8], esi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x6727e; call rsi; 
0x000000000005d6e3: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000908be: mov dword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000008f780: mov dword ptr [rbx], 0; or dword ptr [rip + 0x258a5b], 1; pop rbx; ret; 
0x000000000006fd10: mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000009d873: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000020c6c: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000b3b59: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000020ce0: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000001cb35: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000007f37b: mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x00000000000943de: mov dword ptr [rbx], edx; mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000213a0: mov dword ptr [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020752: mov dword ptr [rbx], edx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000080259: mov dword ptr [rbx], esp; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000021765: mov dword ptr [rcx + 0x130], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000002175d: mov dword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000000941a6: mov dword ptr [rcx + 0xf], 0x481004b6; test edi, edi; mov byte ptr [rsi], al; jne 0x94198; mov rax, rsi; ret; 
0x0000000000009c5e: mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x00000000000707e8: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000005efe5: mov dword ptr [rcx - 0x7d], 0x940f07fc; ret 0x1f0f; 
0x00000000000667d5: mov dword ptr [rcx - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x0000000000041f87: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000041f72: mov dword ptr [rcx - 4], ecx; ret; 
0x0000000000041f61: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000090911: mov dword ptr [rcx], 0x1c68348; test dl, dl; jne 0x908ea; movsx eax, cl; neg eax; ret; 
0x0000000000083363: mov dword ptr [rcx], 0x7b89415b; or al, 0x5d; pop r12; pop r14; ret; 
0x000000000005652a: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b45a0: mov dword ptr [rcx], eax; ret; 
0x00000000000b68e1: mov dword ptr [rcx], edx; add rsp, 8; ret; 
0x0000000000068d5c: mov dword ptr [rcx], edx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000206cb: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000233a4: mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x000000000004e31d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x000000000004e35b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004e3dd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e37b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004dccb: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004e3fd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd4d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dc8d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e440: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004dd90: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004e460: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004ddb0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e421: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd71: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000004e443: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004dd93: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000206a3: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000004e425: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x000000000004e463: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000206cf: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000004dd75: mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000052c55: mov dword ptr [rdi + 0x20], ecx; pop r13; pop r14; pop r15; ret; 
0x00000000000233a1: mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x000000000008b0c0: mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000008b0c7: mov dword ptr [rdi + 0x308], eax; ret; 
0x000000000002069f: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000206d3: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000b6941: mov dword ptr [rdi + 0x98], esi; ret; 
0x0000000000021477: mov dword ptr [rdi + 0xa0], 0xffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000021482: mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000004e39d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dced: mov dword ptr [rdi + 0xe], ecx; ret; 
0x000000000004e33b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004e3bd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dcab: mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000003f105: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003ef48: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000003f1e8: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x000000000003f095: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003eed8: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e207: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000003f025: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003ee68: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dbd7: mov dword ptr [rdi + 3], edx; ret; 
0x000000000004e1e9: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x000000000003edf8: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dbc9: mov dword ptr [rdi + 4], edx; ret; 
0x000000000004e29b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000003ed88: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dc3b: mov dword ptr [rdi + 5], edx; ret; 
0x000000000004e2bb: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x000000000003ed18: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dc4b: mov dword ptr [rdi + 6], edx; ret; 
0x000000000004e259: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000004e2db: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x000000000003eca8: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dc19: mov dword ptr [rdi + 7], edx; ret; 
0x00000000000940fe: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x00000000000206a7: mov dword ptr [rdi + 8], eax; ret; 
0x0000000000092988: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000094143: mov dword ptr [rdi + 8], ecx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000092914: mov dword ptr [rdi + 8], ecx; ret; 
0x00000000000940df: mov dword ptr [rdi + 8], ecx; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000187c4: mov dword ptr [rdi + 8], ecx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x00000000000187ac: mov dword ptr [rdi + 8], ecx; xor eax, eax; ret; 
0x000000000004e279: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000004e23b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x0000000000093ef0: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000093db4: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000004dc0b: mov dword ptr [rdi + 8], edx; ret; 
0x0000000000092edd: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000005171b: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x00000000000518a0: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000509b5: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x0000000000051713: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000051895: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000000509a5: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000005170b: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x000000000005188a: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000050997: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x00000000000b68fb: mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x0000000000038bb5: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bf3: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000009287f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000038d68: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e64: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038db0: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038f38: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039118: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039308: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000394d9: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000396d9: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000398d9: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038bb1: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bef: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d64: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e60: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038dac: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038f34: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039114: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039304: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000394d5: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000396d5: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000398d5: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038bad: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038beb: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d60: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e5c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038da8: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038f30: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039110: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039300: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000394d1: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000396d1: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000398d1: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ba9: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038be7: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000009fe4d: mov dword ptr [rdi - 0x7cb7000a], 0x5d5b20c4; pop r12; ret; 
0x0000000000038f3c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e758: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003911c: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e6d8: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003930c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e658: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000394dd: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e5c9: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000396dd: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e539: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000398dd: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e4a9: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000392bd: mov dword ptr [rdi - 2], ecx; ret; 
0x00000000000390d5: mov dword ptr [rdi - 2], edx; ret; 
0x00000000000392b9: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000039699: mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000038d6f: mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039696: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039896: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039a96: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000092878: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038bb9: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000038bf7: mov dword ptr [rdi - 8], edx; ret; 
0x0000000000038d6c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e68: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038db4: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e7d8: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000590e2: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000000187a9: mov dword ptr [rdi], eax; mov qword ptr [rdi + 8], rcx; xor eax, eax; ret; 
0x000000000001cf13: mov dword ptr [rdi], eax; mov rax, -0x58; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008ee78: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x00000000000187ca: mov dword ptr [rdi], eax; ret; 
0x0000000000092804: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000009290e: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000009413e: mov dword ptr [rdi], eax; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000075eca: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000092871: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000092981: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000004e1d5: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000004e227: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x000000000004e1b4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000004db94: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000004e205: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000004dbd5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000004e257: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000004dc17: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000004e277: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000004dc27: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000506e7: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000001f8ba: mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000004e298: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc38: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000004e2b8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000004dc48: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000004e2d8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000004dc58: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000004e1e6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000004dbc6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000004e238: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000004dc08: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000506f3: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000003ecac: mov dword ptr [rdi], ecx; ret; 
0x000000000005188f: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000004e1a4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x000000000004e1c2: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000004e214: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x000000000001bba2: mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000003efb4: mov dword ptr [rdi], edx; ret; 
0x0000000000041f6f: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000093f86: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000041f5e: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000041f83: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000003a573: mov dword ptr [rdi], esi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000005099c: mov dword ptr [rdi], esi; ret; 
0x000000000001ccb5: mov dword ptr [rdx + 0x130], edi; pop rbx; ret; 
0x000000000004d727: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000004bf57: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000004d709: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000004bf49: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000004d7bb: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x000000000004d739: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000004bf69: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000004d7db: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x000000000004d759: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000004bf79: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000004d779: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000004d7fb: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bf89: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000004d799: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000004d68b: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x000000000004bedb: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000093f47: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000094150: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000009403d: mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000008bd69: mov dword ptr [rdx], eax; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x00000000000b4581: mov dword ptr [rdx], eax; add rsp, 8; ret; 
0x000000000004d6b4: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x000000000004d6e2: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000004d634: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x000000000004d6c4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000004bf14: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000004d6f2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000004bf32: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000004d702: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000004bf42: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000055c3a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000093f88: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000940e5: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000004d722: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000004bf52: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000004d734: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000004bf64: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000004d754: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000004bf74: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000004d774: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000004bf84: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000004d794: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000004bf94: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000005686a: mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x000000000004d7b4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000004d7d4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000004bfc4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000004d7f4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bfe4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000004d684: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000004bed4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000004be84: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000009ce5d: mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000022538: mov dword ptr [rdx], eax; ret; 
0x00000000000ba57d: mov dword ptr [rip + 0x230511], 0; add rsp, 8; ret; 
0x00000000000b96bf: mov dword ptr [rip + 0x2306db], ebx; jne 0xb96a8; pop rbx; ret; 
0x00000000000b9704: mov dword ptr [rip + 0x230762], 0; pop rbx; ret; 
0x00000000000b9cf8: mov dword ptr [rip + 0x230c66], 0; add rsp, 8; ret; 
0x000000000009c988: mov dword ptr [rip + 0x24e1ba], eax; ret; 
0x000000000009c96d: mov dword ptr [rip + 0x24e1d5], eax; add rsp, 8; ret; 
0x0000000000091509: mov dword ptr [rip + 0x259625], 0; add rsp, 8; ret; 
0x000000000008edd1: mov dword ptr [rip + 0x25c0d9], eax; add rsp, 8; ret; 
0x000000000008ed15: mov dword ptr [rip + 0x25c195], eax; ret; 
0x000000000005a966: mov dword ptr [rip + 0x28be4c], edx; pop rbx; ret; 
0x0000000000029a06: mov dword ptr [rip + 0x2bde34], eax; ret; 
0x00000000000299f8: mov dword ptr [rip + 0x2bde4a], eax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x0000000000029a10: mov dword ptr [rip + 0x2c0406], 0; ret; 
0x000000000002341e: mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x0000000000023414: mov dword ptr [rip + 0x2c43d6], 1; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000233df: mov dword ptr [rip + 0x2c43e3], eax; ret; 
0x00000000000233bf: mov dword ptr [rip + 0x2c43fb], eax; ret; 
0x00000000000233d4: mov dword ptr [rip + 0x2c4416], 1; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233b4: mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x00000000000232b5: mov dword ptr [rip + 0x2c456d], eax; ret; 
0x0000000000023245: mov dword ptr [rip + 0x2c458d], eax; ret; 
0x0000000000023235: mov dword ptr [rip + 0x2c45a5], eax; ret; 
0x00000000000238c0: mov dword ptr [rip + 0x2c6556], 0; ret; 
0x0000000000023434: mov dword ptr [rip + 0x2c6a0a], eax; ret; 
0x000000000002296c: mov dword ptr [rip + 0x2c7452], 0; ret; 
0x0000000000022902: mov dword ptr [rip + 0x2c74c0], edx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000009c9b: mov dword ptr [rip + 0x2e0c5f], eax; add rsp, 0x88; pop rbx; ret; 
0x0000000000008775: mov dword ptr [rip + 0x2e23f9], 0; pop rax; ret; 
0x000000000001872d: mov dword ptr [rsi + 0x10], edx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000000a6e3: mov dword ptr [rsi + 0x10], esi; syscall; 
0x0000000000018731: mov dword ptr [rsi + 0x28], eax; xor eax, eax; ret; 
0x00000000000185ad: mov dword ptr [rsi + 4], edi; jne 0x184a5; mov dword ptr [rsi], 0; xor eax, eax; ret; 
0x000000000000a6d7: mov dword ptr [rsi + 8], eax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000000183ad: mov dword ptr [rsi + 8], edx; jns 0x18374; xor eax, eax; ret; 
0x00000000000506f6: mov dword ptr [rsi - 2], ecx; ret; 
0x00000000000506e9: mov dword ptr [rsi - 4], ecx; ret; 
0x00000000000185b6: mov dword ptr [rsi], 0; xor eax, eax; ret; 
0x00000000000882e1: mov dword ptr [rsi], 0xffffffff; xor eax, eax; ret; 
0x000000000001b033: mov dword ptr [rsi], eax; call qword ptr [rbp + 0x30]; 
0x00000000000187a4: mov dword ptr [rsi], eax; ja 0x187b8; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rcx; xor eax, eax; ret; 
0x0000000000018726: mov dword ptr [rsi], eax; lea rax, [r10 + r8*4]; mov qword ptr [rsi + 0x10], r10; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000b692e: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000008ee82: mov dword ptr [rsi], eax; ret; 
0x0000000000068d51: mov dword ptr [rsi], ecx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000183aa: mov dword ptr [rsi], edi; mov qword ptr [rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x000000000008e1c9: mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x000000000001856b: mov dword ptr [rsi], edx; pop rbp; ret; 
0x00000000000187e6: mov dword ptr [rsi], edx; ret; 
0x000000000000a6db: mov dword ptr [rsi], esi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000001856a: mov dword ptr [rsi], r10d; pop rbp; ret; 
0x000000000005bc7d: mov dword ptr [rsp + 0x10], eax; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x0000000000026c7a: mov dword ptr [rsp + 0x10], ebx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000005bd5b: mov dword ptr [rsp + 0x10], ecx; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x0000000000026d37: mov dword ptr [rsp + 0x10], edx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000008df31: mov dword ptr [rsp + 0x18], eax; call 0x8d860; add rsp, 0xd8; ret; 
0x0000000000056b0a: mov dword ptr [rsp + 0x18], eax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x000000000005bd56: mov dword ptr [rsp + 0x18], eax; mov qword ptr [rsp + 0x10], r9; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x000000000005bc78: mov dword ptr [rsp + 0x18], edx; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x0000000000056b14: mov dword ptr [rsp + 0x20], eax; je 0x56b40; mov eax, 0x48; syscall; 
0x0000000000026c75: mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000000851b6: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000000835cb: mov dword ptr [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx; 
0x0000000000083cc3: mov dword ptr [rsp + 0xa8], ebp; call rbx; 
0x0000000000083783: mov dword ptr [rsp + 0xa8], ebp; mov rdi, r12; call rbx; 
0x000000000008374b: mov dword ptr [rsp + 0xa8], esi; call rbx; 
0x0000000000083cf5: mov dword ptr [rsp + 0xa8], esi; mov rsi, rbp; mov rdi, r12; call rbx; 
0x0000000000056bd1: mov dword ptr [rsp + 0xc], eax; call 0x59160; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000026c7f: mov dword ptr [rsp + 8], eax; call rcx; 
0x000000000001a6ef: mov dword ptr [rsp + 8], eax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000005bc82: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp], rcx; call rax; 
0x000000000001b16e: mov dword ptr [rsp + 8], ecx; mov rdi, r15; call rax; 
0x000000000005bd60: mov dword ptr [rsp + 8], edx; mov qword ptr [rsp], rcx; call rax; 
0x00000000000a949e: mov dword ptr [rsp - 0x10], esi; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000a94aa: mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000a94a2: mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000a9419: mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000a945f: mov dword ptr [rsp - 8], edx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000b3355: mov dword ptr [rsp], eax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3303: mov dword ptr [rsp], eax; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000001e1e3: mov dword ptr [rsp], eax; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000005bc87: mov dword ptr [rsp], ecx; call rax; 
0x000000000001d512: mov dword ptr [rsp], ecx; mov rdi, rbx; call rax; 
0x0000000000016e27: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000007374c: mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000016ae5: mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000018d31: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000852af: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000027f49: mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000008001e: mov dword ptr fs:[rax], 5; mov rax, rdx; pop rbx; ret; 
0x000000000001bba4: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008529c: mov dword ptr fs:[rax], edx; xor eax, eax; ret; 
0x0000000000056529: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055c39: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000056869: mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000509a4: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000003f1e0: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000004e1e2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000004dbc2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000004e233: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000004dc03: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000390d0: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000392b0: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000004e1a0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000004db80: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000051ba3: mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000009ad4: mov eax, 0; leave; ret; 
0x00000000000083bd: mov eax, 0; test rax, rax; je 0x83ca; call rax; 
0x0000000000008c64: mov eax, 0; test rax, rax; je 0x8c78; jmp rax; 
0x0000000000008ca5: mov eax, 0; test rax, rax; je 0x8cb8; jmp rax; 
0x00000000000566ed: mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000005666c: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000084fd9: mov eax, 0x101; syscall; 
0x0000000000084f52: mov eax, 0x106; syscall; 
0x0000000000051bdb: mov eax, 0x10; pop rbx; ret; 
0x0000000000057367: mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000008d999: mov eax, 0x14; syscall; 
0x00000000000595f4: mov eax, 0x15; syscall; 
0x000000000002d740: mov eax, 0x16; ret; 
0x0000000000056510: mov eax, 0x18; syscall; 
0x0000000000056510: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x56520; ret; 
0x0000000000058d33: mov eax, 0x19; syscall; 
0x0000000000058d33: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x58d43; ret; 
0x0000000000057680: mov eax, 0x1c; syscall; 
0x0000000000057680: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x0000000000051be9: mov eax, 0x20; pop rbx; ret; 
0x00000000000b1d80: mov eax, 0x26; syscall; 
0x00000000000b1d80: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xb1d90; ret; 
0x0000000000056010: mov eax, 0x27; syscall; 
0x0000000000056010: mov eax, 0x27; syscall; ret; 
0x00000000000d5a0c: mov eax, 0x28fffdf0; int1; std; jmp qword ptr [rax - 0xf]; 
0x0000000000059040: mov eax, 0x29; syscall; 
0x0000000000059040: mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x59050; ret; 
0x0000000000058d9a: mov eax, 0x2b; syscall; 
0x0000000000058f63: mov eax, 0x2c; syscall; 
0x0000000000058ea3: mov eax, 0x2d; syscall; 
0x0000000000051be2: mov eax, 0x30; pop rbx; ret; 
0x0000000000058e30: mov eax, 0x31; syscall; 
0x0000000000058e30: mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000058e60: mov eax, 0x32; syscall; 
0x0000000000058e60: mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x0000000000059013: mov eax, 0x36; syscall; 
0x0000000000059013: mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x59023; ret; 
0x0000000000055d4d: mov eax, 0x38; syscall; 
0x0000000000055bcd: mov eax, 0x3d; syscall; 
0x0000000000084e80: mov eax, 0x3f; syscall; 
0x0000000000084e80: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x84e90; ret; 
0x0000000000051bf7: mov eax, 0x40; pop rbx; ret; 
0x00000000000d08bb: mov eax, 0x45155e93; ret 0x591c; 
0x0000000000083885: mov eax, 0x48000000; mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000009cfb4: mov eax, 0x4800000e; mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000056a07: mov eax, 0x48; syscall; 
0x00000000000e3685: mov eax, 0x48d80000; std; call qword ptr [rcx]; 
0x0000000000076978: mov eax, 0x48fffff6; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x00000000000574ca: mov eax, 0x4a; syscall; 
0x0000000000056ceb: mov eax, 0x4f; syscall; 
0x0000000000065d38: mov eax, 0x5b000000; pop r12; ret; 
0x000000000001e567: mov eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x0000000000051bf0: mov eax, 0x60; pop rbx; ret; 
0x0000000000091061: mov eax, 0x62696c67; movsxd rbp, dword ptr [rip + 0x3349646c]; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x0000000000058d60: mov eax, 0x63; syscall; 
0x0000000000058d60: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x58d70; ret; 
0x0000000000084eb0: mov eax, 0x66; syscall; 
0x0000000000084eb0: mov eax, 0x66; syscall; ret; 
0x00000000000d6de0: mov eax, 0x68000075; xor eax, edi; call rax; 
0x0000000000084ed0: mov eax, 0x68; syscall; 
0x0000000000084ed0: mov eax, 0x68; syscall; ret; 
0x0000000000084ec0: mov eax, 0x6b; syscall; 
0x0000000000084ec0: mov eax, 0x6b; syscall; ret; 
0x0000000000084ee0: mov eax, 0x6c; syscall; 
0x0000000000084ee0: mov eax, 0x6c; syscall; ret; 
0x0000000000051bcd: mov eax, 0x80; pop rbx; ret; 
0x00000000000b310f: mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x0000000000079f71: mov eax, 0x8900001d; ret 0x349; 
0x000000000009ee64: mov eax, 0x89fd8945; ret 0xe283; 
0x00000000000d97a0: mov eax, 0x9c000019; hlt; call qword ptr [rax]; 
0x00000000000d620c: mov eax, 0x9cfff424; sub al, 0; add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x000000000000a6dd: mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000000d616c: mov eax, 0xa0fff40b; sub byte ptr [rax], al; add bh, dl; or al, 0xf4; call rsp; 
0x0000000000057650: mov eax, 0xa; syscall; 
0x0000000000057650: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x00000000000da9a0: mov eax, 0xad00002b; fdivr st(2), st(0); call qword ptr [rsi]; 
0x0000000000057620: mov eax, 0xb; syscall; 
0x0000000000057620: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x57630; ret; 
0x00000000000cc6d0: mov eax, 0xba000004; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000016b92: mov eax, 0xba; syscall; 
0x00000000000cfd78: mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000000d65f8: mov eax, 0xc8000045; leave; hlt; call rsp; 
0x00000000000d6708: mov eax, 0xc800004b; in al, dx; hlt; jmp rsp; 
0x00000000000d77d0: mov eax, 0xc80000ba; fdivp st(3); call rax; 
0x00000000000d7781: mov eax, 0xc8380000; sti; jmp rax; 
0x00000000000468c0: mov eax, 0xc8b0007; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000093f4: mov eax, 0xc90004ff; ret; 
0x0000000000052a20: mov eax, 0xc9; syscall; 
0x0000000000052a20: mov eax, 0xc9; syscall; ret; 
0x00000000000d7791: mov eax, 0xca580000; sti; call qword ptr [rax]; 
0x00000000000590c5: mov eax, 0xca; syscall; 
0x00000000000590f2: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x0000000000059199: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000056285: mov eax, 0xe5; syscall; 
0x0000000000067998: mov eax, 0xe8c78948; jg 0x67a12; cli; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x0000000000016bc0: mov eax, 0xe; syscall; 
0x0000000000016b9e: mov eax, 0xea; syscall; 
0x0000000000036d19: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000016c21: mov eax, 0xf; syscall; 
0x00000000000850b8: mov eax, 0xfd42f2e8; jmp qword ptr [rsi - 0x70]; 
0x00000000000664fc: mov eax, 0xff449ee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000000940d9: mov eax, 0xffffbfd1; mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000093ffb: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000068d71: mov eax, 0xffffff90; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000000a8b1: mov eax, 0xffffffa8; add rax, qword ptr fs:[0]; ret; 
0x0000000000016e21: mov eax, 0xffffffa8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000016adf: mov eax, 0xffffffa8; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000018d2b: mov eax, 0xffffffa8; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000852a9: mov eax, 0xffffffa8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000001cf16: mov eax, 0xffffffa8; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000073741: mov eax, 0xffffffa8; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000001f8b1: mov eax, 0xffffffa8; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000001bb99: mov eax, 0xffffffa8; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008f7a1: mov eax, 0xffffffa8; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000027f41: mov eax, 0xffffffa8; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000068dd1: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000068db1: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000068d91: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000007e88f: mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001be61: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000006a7ae: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x000000000001bbe7: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000001d033: mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000016aed: mov eax, 0xffffffff; ret; 
0x000000000007d4e7: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000856e9: mov eax, 1; leave; ret; 
0x0000000000093f65: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000079b4e: mov eax, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000000213a2: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000009ea9d: mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000008f790: mov eax, 1; pop rbx; ret; 
0x0000000000075e2f: mov eax, 1; ret; 
0x00000000000568ca: mov eax, 1; syscall; 
0x0000000000082813: mov eax, 2; ret; 
0x0000000000082a71: mov eax, 3; ret; 
0x0000000000056b9a: mov eax, 3; syscall; 
0x00000000000b7511: mov eax, 4; cmp dil, 3; jne 0xb7520; ret; 
0x0000000000082a81: mov eax, 4; ret; 
0x000000000005659e: mov eax, 4; syscall; 
0x0000000000082a91: mov eax, 5; ret; 
0x00000000000565ec: mov eax, 5; syscall; 
0x0000000000082aa1: mov eax, 6; ret; 
0x0000000000084efe: mov eax, 6; syscall; 
0x0000000000082ab1: mov eax, 7; ret; 
0x0000000000051bd4: mov eax, 8; pop rbx; ret; 
0x000000000005ca30: mov eax, 8; ret; 
0x0000000000056990: mov eax, 8; syscall; 
0x000000000005757c: mov eax, 9; syscall; 
0x00000000000b60b7: mov eax, dword ptr [r15 + 8]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000007f22d: mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000007f336: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007e80b: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000001b6fa: mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000017bbd: mov eax, dword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000001b701: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000072847: mov eax, dword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000007f804: mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000000b315c: mov eax, dword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000091521: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000091531: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000067370: mov eax, dword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x000000000006b456: mov eax, dword ptr [rax + rbx*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000000794c7: mov eax, dword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000068d7f: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000006e0bd: mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x00000000000b6882: mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000000b4599: mov eax, dword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x00000000000b45a9: mov eax, dword ptr [rax]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x0000000000068d7c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000008f7a9: mov eax, dword ptr [rax]; ret; 
0x00000000000208c5: mov eax, dword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000020ab5: mov eax, dword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000009c684: mov eax, dword ptr [rbp + 0x48]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000000aadc: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000008f66: mov eax, dword ptr [rbp - 0x10]; leave; ret; 
0x0000000000008f5b: mov eax, dword ptr [rbp - 0x14]; mov edi, eax; call 0x574c0; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000008d98: mov eax, dword ptr [rbp - 0x1c]; leave; ret; 
0x0000000000090a92: mov eax, dword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x3e062]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000008ccf5: mov eax, dword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000008c090: mov eax, dword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000008fe1: mov eax, dword ptr [rbp - 0xc]; leave; ret; 
0x00000000000090f5: mov eax, dword ptr [rbp - 4]; cmp eax, dword ptr [rbp - 0x1c]; jb 0x9096; nop; leave; ret; 
0x0000000000009ac9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x97c0; mov eax, 0; leave; ret; 
0x0000000000093d05: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x93d4e; leave; ret; 
0x000000000008beb1: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000008bd6e: mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000009ce32: mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x379f0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002080d: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000002082e: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000009cec9: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000009ce79: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000001d017: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000009ce69: mov eax, dword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000020ef9: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000021319: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000001b6ef: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000001616e: mov eax, dword ptr [rbx + rax*8]; ja 0x167f5; lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000004d724: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000004bf54: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000004d705: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000004bf45: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000004d736: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000004bf66: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000004d7b7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000004d756: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000004bf76: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000004d7d7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000004bfc7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000004d776: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000004bf86: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000004d7f7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bfe7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000004d796: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000004bf96: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000004d687: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000004bed7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000046b6a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000048442: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000004d6e0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000004d6f0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000004bf30: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000004d700: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000004bf40: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000004d720: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000004bf50: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000004bf20: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000004d631: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000004d731: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000004bf61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000004d751: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000004bf71: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000004d771: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000004bf81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000004d791: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000004bf91: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000004d7b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000004d7d1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000004bfc1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000004d7f1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bfe1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000004d681: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000004bed1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000004be81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000004d6b1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000004d6c1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000004bf11: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000004bf01: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000008c696: mov eax, dword ptr [rdi + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000007f65e: mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000022540: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000022568: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000055f0d: mov eax, dword ptr [rdi + 0x10]; test rax, rax; je 0x55f1a; call rax; 
0x0000000000068772: mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x6877f; call rax; 
0x00000000000ba40d: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xba41c; call rax; 
0x0000000000023211: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007f801: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000002069b: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000022891: mov eax, dword ptr [rdi + 0x68]; ret; 
0x00000000000b68a1: mov eax, dword ptr [rdi + 0x90]; ret; 
0x00000000000b6911: mov eax, dword ptr [rdi + 0x98]; ret; 
0x00000000000b6951: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x00000000000b69a1: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x00000000000b6991: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x00000000000b6961: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x00000000000b6921: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000229a7: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x229d0; movzx eax, byte ptr [rax]; ret; 
0x00000000000b60b8: mov eax, dword ptr [rdi + 8]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000000b72c1: mov eax, dword ptr [rdi + 8]; test rax, rax; je 0xb72d8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000006e607: mov eax, dword ptr [rdi + rax*8]; jmp rax; 
0x0000000000036824: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x000000000004fd3c: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x4ff50; xor eax, eax; ret; 
0x0000000000036a83: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x0000000000036d81: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x00000000000367f7: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x0000000000022535: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000023411: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2c43d6], 1; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000233d1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4416], 1; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233b1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x0000000000023431: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2c6a0a], eax; ret; 
0x00000000000232b1: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2c456d], rax; ret; 
0x0000000000023241: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2c458d], rax; ret; 
0x0000000000023231: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2c45a5], rax; ret; 
0x00000000000b8ab0: mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ac0; ret; 
0x00000000000b8cd0: mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ce0; ret; 
0x000000000007f5d3: mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000055e64: mov eax, dword ptr [rdx + 0x18]; test rax, rax; je 0x55f80; call rax; 
0x000000000008e17c: mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000044776: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008f396: mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000009d750: mov eax, dword ptr [rip + 0x24dd4a]; ret; 
0x000000000008ee71: mov eax, dword ptr [rip + 0x2581a1]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x000000000008ee7b: mov eax, dword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x000000000008ee0a: mov eax, dword ptr [rip + 0x25c0a0]; ret; 
0x0000000000084fcf: mov eax, dword ptr [rip + 0x266413]; test eax, eax; jne 0x85036; mov eax, 0x101; syscall; 
0x0000000000065be1: mov eax, dword ptr [rip + 0x284d71]; ret; 
0x000000000005d681: mov eax, dword ptr [rip + 0x28de81]; ret; 
0x0000000000058d90: mov eax, dword ptr [rip + 0x292652]; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000058cb0: mov eax, dword ptr [rip + 0x2927ea]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x00000000000574c0: mov eax, dword ptr [rip + 0x293f22]; test eax, eax; jne 0x574e0; mov eax, 0x4a; syscall; 
0x0000000000056b90: mov eax, dword ptr [rip + 0x294852]; test eax, eax; jne 0x56bb0; mov eax, 3; syscall; 
0x00000000000569fd: mov eax, dword ptr [rip + 0x2949e5]; test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x00000000000568c0: mov eax, dword ptr [rip + 0x294b22]; test eax, eax; jne 0x568e0; mov eax, 1; syscall; 
0x00000000000567f0: mov eax, dword ptr [rip + 0x294bf2]; test eax, eax; jne 0x56810; xor eax, eax; syscall; 
0x0000000000022871: mov eax, dword ptr [rip + 0x2c4889]; ret; 
0x00000000000238b6: mov eax, dword ptr [rip + 0x2c6564]; test eax, eax; je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x00000000000b7578: mov eax, dword ptr [rsi + 0x10]; ret; 
0x00000000000b46d1: mov eax, dword ptr [rsi + 0xa8]; ret; 
0x00000000000b46a4: mov eax, dword ptr [rsi + 0xb0]; ret; 
0x00000000000b46c1: mov eax, dword ptr [rsi + 0xb8]; ret; 
0x00000000000b75a9: mov eax, dword ptr [rsi + 8]; ret; 
0x000000000001b02b: mov eax, dword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000007948c: mov eax, dword ptr [rsi + rax*8]; jmp rax; 
0x000000000006e651: mov eax, dword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000006eca9: mov eax, dword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000007e86f: mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b6986: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000057866: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x000000000001b928: mov eax, dword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000000a053: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000001b92d: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000000612ec: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x0000000000055c1e: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056bda: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000005684a: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000001715d: mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000055cf7: mov eax, dword ptr [rsp + 8]; test rax, rax; je 0x55d02; call rax; 
0x000000000009ef0f: mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000000b40fd: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000008f7a8: mov eax, dword ptr fs:[rax]; ret; 
0x0000000000024ae0: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000016bd9: mov eax, eax; jne 0x16bfc; add rsp, 0x118; ret; 
0x0000000000085053: mov eax, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000055bf9: mov eax, eax; mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x0000000000056a7a: mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000058dc9: mov eax, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x2b; syscall; 
0x00000000000568f9: mov eax, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000056829: mov eax, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000002c93f: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000051c12: mov eax, eax; ret; 
0x0000000000082e34: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000055fe2: mov eax, eax; syscall; 
0x0000000000081c71: mov eax, eax; vzeroupper; ret; 
0x0000000000057709: mov eax, ebp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x00000000000b65e4: mov eax, ebp; mov rcx, rbx; mov rdx, qword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000002cdf2: mov eax, ebp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000001a52b: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000009da8d: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x0000000000058244: mov eax, ebp; pop rbx; pop rbp; jmp rax; 
0x00000000000576f2: mov eax, ebp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000001a643: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001a0fe: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000001bb52: mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000001c94d: mov eax, ebp; syscall; 
0x0000000000093ef3: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000059185: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x59190; ret; 
0x0000000000092083: mov eax, ebx; jne 0x920a5; add rsp, 0x110; pop rbx; ret; 
0x00000000000a96a7: mov eax, ebx; jne 0xa96bc; add rsp, 0x40; pop rbx; ret; 
0x00000000000a978e: mov eax, ebx; jne 0xa97a4; add rsp, 0x50; pop rbx; ret; 
0x00000000000b64e8: mov eax, ebx; mov rcx, r12; mov rdx, qword ptr [r12]; or esi, 2; mov edi, 1; call rax; 
0x00000000000b6c06: mov eax, ebx; mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000001e992: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001e8c5: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057400: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000018158: mov eax, ebx; pop rbx; ret; 
0x00000000000594b8: mov eax, ebx; pop rdx; pop rbx; ret; 
0x0000000000093db7: mov eax, ecx; adc eax, eax; ret; 
0x000000000008e21f: mov eax, ecx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000073635: mov eax, ecx; ret; 
0x0000000000051b28: mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000051b73: mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000016b8b: mov eax, ecx; syscall; 
0x000000000001cb33: mov eax, edi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000024d75: mov eax, edi; pop rbp; pop r12; ret; 
0x000000000001cb64: mov eax, edi; ret; 
0x0000000000059460: mov eax, edi; ror ax, 8; ret; 
0x0000000000024975: mov eax, edx; add rsp, 8; ret; 
0x0000000000016abb: mov eax, edx; jne 0x16ac7; add rsp, 0x148; ret; 
0x00000000000187c1: mov eax, edx; mov qword ptr [rdi + 8], rcx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x000000000008180c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000736fe: mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000075cda: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001a3d1: mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000051c16: mov eax, edx; pop rbx; ret; 
0x0000000000024981: mov eax, edx; ret; 
0x000000000000a14a: mov eax, edx; syscall; 
0x00000000000835c6: mov eax, esi; add eax, r9d; mov dword ptr [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx; 
0x0000000000056594: mov eax, esi; ja 0x565c8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000000565e3: mov eax, esi; ja 0x56618; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000084ef4: mov eax, esi; ja 0x84f28; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000019ea2: mov eax, esi; jne 0x19eaf; add rsp, 0xd0; pop rbx; ret; 
0x000000000001a031: mov eax, esi; jne 0x1a03f; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000008e171: mov eax, esi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000092167: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000001de0a: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000007d414: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000027f1d: mov eax, esi; pop rbx; ret; 
0x0000000000027f51: mov eax, esi; ret; 
0x0000000000055fd2: mov eax, esi; syscall; 
0x000000000001c526: mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x000000000007c548: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000059184: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x59190; ret; 
0x000000000001c525: mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000002cdf1: mov eax, r13d; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000001c94c: mov eax, r13d; syscall; 
0x0000000000016bd8: mov eax, r8d; jne 0x16bfc; add rsp, 0x118; ret; 
0x0000000000055fe1: mov eax, r8d; syscall; 
0x0000000000073634: mov eax, r9d; ret; 
0x000000000001c6ee: mov eax, r9d; syscall; 
0x000000000005d67a: mov ebp, 0x1f0fffff; add byte ptr [rax - 0x75], cl; add eax, 0x28de81; ret; 
0x0000000000036a14: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d7879: mov ebp, 0x70980000; cld; call qword ptr [rax]; 
0x000000000005ab4b: mov ebp, 0x890028fd; ret 0xe083; 
0x00000000000bdc3d: mov ebp, 0xb080fff7; idiv edi; mov dl, 0xf7; call qword ptr [rax]; 
0x00000000000bdb99: mov ebp, 0xbf10fff7; idiv edi; movabs al, byte ptr [0x40fff7b360fff7b1]; mov ch, 0xf7; jmp qword ptr [rax]; 
0x00000000000bdb79: mov ebp, 0xbf30fff7; idiv edi; sal byte ptr [rcx - 0x4c7f0009], 0xf7; jmp qword ptr [rax - 0x4b]; 
0x00000000000c8ee4: mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000000cfd7d: mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000020d4a: mov ebp, 0xc4ebffff; nop; mov eax, 0xffffffff; ret; 
0x0000000000036a19: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000081438: mov ebp, 0xf80148c0; ret; 
0x00000000000816bc: mov ebp, 0xf80148c6; ret; 
0x00000000000d14e6: mov ebp, 0xfb67d10d; ret; 
0x00000000000779a8: mov ebp, 0xfffff730; call qword ptr [rbx + 0x38]; 
0x000000000007697e: mov ebp, 0xfffff730; call rax; 
0x0000000000077673: mov ebp, 0xfffff730; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000076a1c: mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000006b6b5: mov ebp, 0xfffff758; call qword ptr [rbx + 0x38]; 
0x000000000006bc5f: mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000006b46c: mov ebp, 0xfffff758; call rax; 
0x000000000006b502: mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000079979: mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x0000000000078f5c: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x000000000006d701: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000006d495: mov ebp, 0xfffffb48; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000008d994: mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x0000000000072855: mov ebp, 0xffffff40; call rax; 
0x000000000001c947: mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x00000000000b6c49: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dc8: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000077668: mov ebp, dword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x00000000000b6dd4: mov ebp, dword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000001bd90: mov ebp, dword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000001aff9: mov ebp, dword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000009216d: mov ebp, ecx; nop; jmp rdx; 
0x0000000000083cb6: mov ebp, esi; and r13, r15; and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x00000000000e39dd: mov ebx, 0x59800000; std; jmp qword ptr [rax]; 
0x00000000000d7811: mov ebx, 0x66a80000; cld; jmp rax; 
0x0000000000079623: mov ebx, 0x89000025; ret 0x349; 
0x00000000000533fe: mov ebx, 0x89480006; ret 0x894d; 
0x0000000000059124: mov ebx, 0xafb8341; je 0x5912c; ret; 
0x00000000000bdc39: mov ebx, 0xbdf0fff7; idiv edi; xor byte ptr [rax - 0x4dbf0009], 0xf7; call qword ptr [rax]; 
0x00000000000cfd7b: mov ebx, 0xbfbebdbc; rol cl, 0xc2; ret; 
0x0000000000036b99: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000017464: mov ebx, 0xfffd29e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000078f55: mov ebx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x00000000000949b1: mov ebx, dword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000008c089: mov ebx, dword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000038d01: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ce5: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000009160d: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x000000000009159b: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000001ccaf: mov ebx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x0000000000092041: mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000007f228: mov ebx, edi; jne 0x7f298; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000068776: mov ebx, edi; test rax, rax; je 0x6877f; call rax; 
0x0000000000084d40: mov ebx, esi; sub rsp, 8; syscall; 
0x00000000000800f1: mov ebx, esp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008f4fd: mov ebx, esp; mov rsi, rbx; syscall; 
0x000000000002e80a: mov ecx, 0x250001; or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x0000000000016b86: mov ecx, 0x27; mov eax, ecx; syscall; 
0x0000000000020319: mov ecx, 0x48000000; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000084ffc: mov ecx, 0x48000000; add esp, 0x78; ret; 
0x000000000006e863: mov ecx, 0x4800275f; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x000000000003b143: mov ecx, 0x4900082b; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038383: mov ecx, 0x49000857; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e37d9: mov ecx, 0x52940000; std; call qword ptr [rcx]; 
0x000000000009fa4d: mov ecx, 0x75400024; jge 0x9fa9c; cmp dword ptr [rip + 0x2474f5], 0; jne 0x9fa5f; pop rbx; ret; 
0x00000000000606f1: mov ecx, 0xba000602; lahf; add dword ptr [rax], eax; add al, ch; xor dword ptr [rbx - 0x76be0006], esp; ret; 
0x00000000000bdb71: mov ecx, 0xbb30fff7; idiv edi; xor byte ptr [rbp - 0x40cf0009], bh; idiv edi; sal byte ptr [rcx - 0x4c7f0009], 0xf7; jmp qword ptr [rax - 0x4b]; 
0x00000000000c8c34: mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000000cfd79: mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000085260: mov ecx, 0xc; mov eax, ecx; syscall; 
0x00000000000d77a1: mov ecx, 0xcfa80000; sti; jmp qword ptr [rax - 0x47]; 
0x0000000000016cde: mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x00000000000b67b2: mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x0000000000036c99: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000002ce54: mov ecx, 0xffff31e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000056521: mov ecx, 0xffffffa8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000068d54: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000006d6fa: mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000000794ca: mov ecx, 1; jmp rax; 
0x00000000000575d1: mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000001a781: mov ecx, dword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000007e332: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000949aa: mov ecx, dword ptr [rbp - 0x628]; mov r11, qword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000001b798: mov ecx, dword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001a77d: mov ecx, dword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000041f7f: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000041f6c: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000041f5a: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000b68d5: mov ecx, dword ptr [rdi + rsi*8]; cmp al, 8; jne 0x8718; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000007f7db: mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x00000000000b7376: mov ecx, dword ptr [rdx + 8]; cmp qword ptr [rsi + 8], rcx; ja 0xb7381; sbb eax, eax; ret; 
0x0000000000044773: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004e354: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004e374: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004dcc4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcb4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e3d5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd45: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd25: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e315: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc85: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004e438: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004dd88: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004e458: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004dda8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e419: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd69: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000004e395: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dce5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004e334: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004dca4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004e3b5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dd05: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000005099f: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000005098f: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000000390a5: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390c1: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039285: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000392a1: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039465: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039481: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039655: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039671: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039855: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039871: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a55: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a71: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000392b5: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000004fd3f: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x4ff50; xor eax, eax; ret; 
0x0000000000036a86: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x0000000000039693: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039893: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039a93: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000036821: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x3723f; xor eax, eax; ret; 
0x000000000003e754: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e6d4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e654: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e7d4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000367fb: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x000000000003e5c5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e535: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e4a5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000036d7d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x0000000000038ec5: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038ee1: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004e1d0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000004dbb0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000004e221: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004dbf1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000003f103: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f093: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003f023: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000004e1e0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000004dbc0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000004e231: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000004dc01: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000004e200: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000004dbd0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000004e251: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000004dc11: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000004e271: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000004dc21: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000003ef45: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003eed5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ee65: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003edf5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ed85: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ed15: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003eca5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e291: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc31: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000004e2b1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000004dc41: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000004e2d1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000004dc51: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000003f1e5: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000004e1b1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000004db91: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000060d28: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005f68f: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000006406c: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000612dd: mov ecx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000091617: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000000915a5: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000005fb5f: mov ecx, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000091898: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091cc8: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000919f9: mov ecx, dword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000041f6b: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000187be: mov ecx, eax; mov r8, rdx; mov qword ptr [rdi + 8], rcx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x000000000005c96b: mov ecx, ebp; call rbx; 
0x00000000000b6c09: mov ecx, ebp; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x00000000000822d3: mov ecx, ebp; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x00000000000b65e7: mov ecx, ebx; mov rdx, qword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000007f884: mov ecx, edi; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007fa60: mov ecx, edi; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000082425: mov ecx, edi; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000051631: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000021320: mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000050972: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000002135a: mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000082435: mov ecx, esi; call rbx; 
0x00000000000a034a: mov ecx, esi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0xa0330; mov eax, 1; ret; 
0x00000000000b64eb: mov ecx, esp; mov rdx, qword ptr [r12]; or esi, 2; mov edi, 1; call rax; 
0x000000000005c95e: mov ecx, esp; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000055d48: mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x00000000000b5ae0: mov edi, 0x148015b; ret; 
0x00000000000d3131: mov edi, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000d655d: mov edi, 0x434cfff4; add byte ptr [rax], al; pop rax; ret 0xfff4; 
0x000000000006ccba: mov edi, 0x440f48c0; ret 0xae9; 
0x000000000003f4fd: mov edi, 0x490007ee; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008eba0: mov edi, 0x58b0025; outsd dx, dword ptr [rsi]; mov edi, 0x8b410025; adc edi, dword ptr [rcx]; ret 0xc74; 
0x00000000000d78c9: mov edi, 0x78080000; cld; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x00000000000d78d1: mov edi, 0x78180000; cld; jmp rax; 
0x00000000000d78d9: mov edi, 0x79b80000; cld; call qword ptr [rax]; 
0x000000000000b67d: mov edi, 0x85ffffce; sar byte ptr [rax + 0x5b], 0x85; ror byte ptr [rdi], 0x84; ret; 
0x00000000000940db: mov edi, 0x894cffff; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000008eba6: mov edi, 0x8b410025; adc edi, dword ptr [rcx]; ret 0xc74; 
0x00000000000d299c: mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000008b6dd: mov edi, 0xc085fffc; js 0x8b6f2; pop rbx; ret; 
0x00000000000d39cc: mov edi, 0xdafffc26; sbb al, 0xfc; call qword ptr [rsi + 0x28]; 
0x00000000000b5cad: mov edi, 0xe8000000; stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b8c8d: mov edi, 0xe8fff4f8; retf 0xf5e1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000036849: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000056674: mov edi, 0xffffff9c; syscall; 
0x00000000000b64f4: mov edi, 1; call rax; 
0x00000000000b72cc: mov edi, 1; jmp rax; 
0x0000000000056280: mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000016bbb: mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000017bf4: mov edi, dword ptr [rax + 0x20]; call rdx; 
0x000000000008d993: mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000006d494: mov edi, dword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000001c946: mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000006b6b4: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006bc5e: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000006b46b: mov edi, dword ptr [rbp - 0x8a8]; call rax; 
0x000000000006b501: mov edi, dword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000000779a7: mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007697d: mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000077672: mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000076a1b: mov edi, dword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000072854: mov edi, dword ptr [rbp - 0xc0]; call rax; 
0x00000000000b6c51: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dd0: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000017159: mov edi, dword ptr [rbp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000008c27f: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000055f0a: mov edi, dword ptr [rbx]; mov rax, qword ptr [rdi + 0x10]; test rax, rax; je 0x55f1a; call rax; 
0x0000000000092164: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000000a96e1: mov edi, dword ptr [rdi]; call 0xb3b60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000a960d: mov edi, dword ptr [rdi]; call 0xb3e60; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000000d17a6: mov edi, dword ptr [rdx]; ret; 
0x0000000000008cd8: mov edi, dword ptr [rip + 0x2de32a]; call 0x8600; call 0x8c50; mov byte ptr [rip + 0x2e06d1], 1; pop rbp; ret; 
0x000000000008505e: mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000092044: mov edi, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000005ef80: mov edi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000005fb69: mov edi, dword ptr [rsp + 0x30]; call rbx; 
0x000000000005f699: mov edi, dword ptr [rsp + 0x38]; call rbx; 
0x000000000005f3a5: mov edi, dword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000064076: mov edi, dword ptr [rsp + 0x40]; call rbx; 
0x00000000000612e7: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000008388f: mov edi, dword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000056a81: mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000000a04e: mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000020f2b: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000021351: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000057861: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000b888e: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x0000000000020836: mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000081fc2: mov edi, dword ptr [rsp]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000008f5e: mov edi, eax; call 0x574c0; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000009acd: mov edi, eax; call 0x97c0; mov eax, 0; leave; ret; 
0x000000000001b936: mov edi, eax; call qword ptr [rax + 8]; 
0x000000000002d7a4: mov edi, eax; call rcx; 
0x0000000000016b90: mov edi, eax; mov eax, 0xba; syscall; 
0x0000000000084f4a: mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000056599: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000000565e7: mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000084ef9: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000000be989: mov edi, eax; push qword ptr [rax - 0x73]; clc; call qword ptr [rax]; 
0x000000000007ddb1: mov edi, ebp; call qword ptr [rax + 0x38]; 
0x00000000000b3282: mov edi, ebp; call qword ptr [rax]; 
0x000000000001a6f6: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x00000000000b335e: mov edi, ebp; call qword ptr [rcx]; 
0x000000000002cb26: mov edi, ebp; call rax; 
0x00000000000822e1: mov edi, ebp; call rbx; 
0x000000000001727e: mov edi, ebp; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000005757a: mov edi, ebp; mov eax, 9; syscall; 
0x000000000001c6ec: mov edi, ebp; mov eax, r9d; syscall; 
0x0000000000082432: mov edi, ebp; mov r9, r14; call rbx; 
0x00000000000171e9: mov edi, ebp; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000001b792: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001a777: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000017af8: mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000005823d: mov edi, ebx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000001e0a8: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x000000000001da24: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x000000000001e1ea: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x000000000002071c: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x0000000000020d8d: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000021b1d: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x000000000001a378: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000020d14: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x000000000001dd1f: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x000000000001d516: mov edi, ebx; call rax; 
0x00000000000b9533: mov edi, ebx; jne 0xb9520; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000664f7: mov edi, ebx; mov dword ptr [rbp - 0x48], r8d; call 0x5a9a0; mov rdi, r14; call rbx; 
0x0000000000058dce: mov edi, ebx; mov eax, 0x2b; syscall; 
0x0000000000058fa5: mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058ee5: mov edi, ebx; mov eax, 0x2d; syscall; 
0x0000000000055c01: mov edi, ebx; mov eax, 0x3d; syscall; 
0x00000000000568fe: mov edi, ebx; mov eax, 1; syscall; 
0x00000000000574ec: mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x0000000000056bbc: mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x000000000001b6f6: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000000208cd: mov edi, ebx; pop rbx; pop rbp; jmp rax; 
0x000000000007e6ef: mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000005682e: mov edi, ebx; xor eax, eax; syscall; 
0x000000000008b6d9: mov edi, ecx; call 0x57650; test eax, eax; js 0x8b6f2; pop rbx; ret; 
0x000000000007a3a4: mov edi, edi; call qword ptr [rax + 0x38]; 
0x00000000000793d9: mov edi, edi; call qword ptr [rcx + 0x38]; 
0x000000000001b173: mov edi, edi; call rax; 
0x000000000005d25b: mov edi, edi; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000000791cb: mov edi, edi; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000061f04: mov edi, edx; jmp qword ptr [rsi + 0xf]; 
0x0000000000094231: mov edi, edx; mov byte ptr [rsi], al; jne 0x94210; mov rax, rsi; ret; 
0x0000000000055fd0: mov edi, edx; mov eax, esi; syscall; 
0x0000000000055fdf: mov edi, edx; mov eax, r8d; syscall; 
0x00000000000667cb: mov edi, edx; mov qword ptr [rbp - 0x98], rdx; call 0x5a9a0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000008180f: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000006d907: mov edi, esi; call qword ptr [rax + 0x38]; 
0x0000000000066503: mov edi, esi; call rbx; 
0x00000000000667e1: mov edi, esi; call rdx; 
0x00000000000dcba9: mov edi, esi; jmp rdi; 
0x000000000006df8f: mov edi, esi; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000005d24f: mov edi, esi; mov qword ptr [rbp - 0x70], rsi; call 0x5a9a0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000006d9e3: mov edi, esi; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000006d49e: mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007f890: mov edi, esp; call rbx; 
0x0000000000020e26: mov edi, esp; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000056ce9: mov edi, esp; mov eax, 0x4f; syscall; 
0x000000000001c6eb: mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000051b16: mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x000000000002d9e9: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008f399: mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000049b56: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000007dda8: mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000001ccb6: mov edx, 0x130; pop rbx; ret; 
0x000000000000a13f: mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000065d31: mov edx, 0x48000000; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000081432: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x0000000000058cb6: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000017e13: mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x000000000001d962: mov edx, 0x8948002c; ret 0x294c; 
0x000000000005cb1b: mov edx, 0x9066fffa; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d77d1: mov edx, 0xdec80000; sti; call rax; 
0x000000000009e9bc: mov edx, 0xe8000000; imul eax, eax, -0xa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000057706: mov edx, 0xe889485b; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000016b93: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000036c19: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b54d5: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x0000000000055c31: mov edx, 0xffffffa8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000056861: mov edx, 0xffffffa8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000068d5f: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000005ed57: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000073747: mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000005a95f: mov edx, 1; je 0x5a970; mov dword ptr [rip + 0x28be4c], edx; pop rbx; ret; 
0x00000000000590ed: mov edx, 1; mov eax, 0xca; syscall; 
0x000000000008e0fc: mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000008b010: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000055f33: mov edx, 1; mov esi, 0x81; mov eax, r13d; syscall; 
0x000000000001c6e3: mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000068f21: mov edx, 8; mov eax, 0xe; syscall; 
0x0000000000016ce4: mov edx, 8; mov eax, ecx; syscall; 
0x0000000000022560: mov edx, dword ptr [rax + 8]; jne 0x22570; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000007e68c: mov edx, dword ptr [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000006df99: mov edx, dword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000000667da: mov edx, dword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x00000000000b6c0c: mov edx, dword ptr [rbp]; mov esi, 1; mov edi, 1; call rax; 
0x000000000009ce59: mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000001d50b: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000000b65ea: mov edx, dword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000055e61: mov edx, dword ptr [rbx]; mov rax, qword ptr [rdx + 0x18]; test rax, rax; je 0x55f80; call rax; 
0x000000000004843f: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000046b6d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000059516: mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000020697: mov edx, dword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000006b4fd: mov edx, dword ptr [rdi + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000009ce6d: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000001b167: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000009ced4: mov edx, dword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000000b875f: mov edx, dword ptr [rdi]; mov rdi, rbp; call rbx; 
0x00000000000b6497: mov edx, dword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009d5a4: mov edx, dword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000000a043: mov edx, dword ptr [rip + 0x2dff07]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000004dd85: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004dda5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000076a17: mov edx, dword ptr [rsi + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000003f1e1: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000003f100: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003ef41: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003f090: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003eed1: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e202: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000004dbd2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000003f020: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000003ee61: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e1e3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000004dbc3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000003edf1: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e294: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc34: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000003ed81: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e2b4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000004dc44: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000003ed11: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e253: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000004dc13: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000004e2d4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000004dc54: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000003eca1: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e273: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000004dc23: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000004e234: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000004dc04: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000003e751: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e6d1: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e651: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e5c1: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e531: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e4a1: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000390d1: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000392b1: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000039490: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038ec8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390a8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039288: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039468: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390c4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000392a4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039484: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038ee4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039690: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039890: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039a90: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000038d05: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039659: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039859: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a59: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ce9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039675: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039875: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a75: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d21: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e7d1: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000004e1c0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000003f170: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000004e211: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000003efb1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000004e1a1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000004db81: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000092049: mov edx, dword ptr [rsp + 0x10]; call rdx; 
0x0000000000017151: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000082428: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000000171e1: mov edx, dword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000085055: mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000091612: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000000915a0: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000005f39b: mov edx, dword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000001de23: mov edx, dword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000056a76: mov edx, dword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000b64ee: mov edx, dword ptr [rsp]; or esi, 2; mov edi, 1; call rax; 
0x0000000000051b8c: mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000000574ee: mov edx, eax; mov eax, 0x4a; syscall; 
0x0000000000016b9c: mov edx, eax; mov eax, 0xea; syscall; 
0x0000000000056bbe: mov edx, eax; mov eax, 3; syscall; 
0x000000000001e1e0: mov edx, eax; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000084f4d: mov edx, eax; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000077679: mov edx, ebp; call qword ptr [rbx + 0x38]; 
0x00000000000b3300: mov edx, ebp; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000006bc54: mov edx, ebp; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000005c963: mov edx, ebp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000000b327d: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000000b3359: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3163: mov edx, ebp; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000058fa0: mov edx, ebp; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058ee0: mov edx, ebp; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x00000000000779a1: mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007284e: mov edx, ebp; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000006b6ae: mov edx, ebp; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000000b97c7: mov edx, ebx; jne 0xb97b8; pop rbx; ret; 
0x000000000006be29: mov edx, ebx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000084f50: mov edx, ecx; mov eax, 0x106; syscall; 
0x0000000000058d31: mov edx, ecx; mov eax, 0x19; syscall; 
0x0000000000058d31: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x58d43; ret; 
0x0000000000059011: mov edx, ecx; mov eax, 0x36; syscall; 
0x0000000000059011: mov edx, ecx; mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x59023; ret; 
0x00000000000575cf: mov edx, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000006d8ef: mov edx, ecx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000001c941: mov edx, ecx; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000006d4a4: mov edx, edi; call qword ptr [rax + 0x38]; 
0x0000000000062104: mov edx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000b888b: mov edx, edi; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x000000000001da1e: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000051638: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000078d15: mov edx, esi; call qword ptr [rax + 0x38]; 
0x00000000000822d9: mov edx, esi; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000005666a: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000057571: mov edx, esi; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000058f9d: mov edx, esi; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058edd: mov edx, esi; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x000000000007a39a: mov edx, esi; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000000793cc: mov edx, esi; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007a517: mov edx, esi; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000000566f2: mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000057361: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000000851bd: mov edx, esp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000058dc6: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x2b; syscall; 
0x00000000000568f6: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000056826: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000001b925: mov edx, esp; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000057574: mov edx, esp; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000055bfc: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x0000000000057573: mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000055bfb: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x0000000000016b9b: mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000000613c2: mov es, word ptr [rax + rax]; add bh, dh; ret 0; 
0x00000000000d7121: mov es, word ptr [rax]; add byte ptr [rax], cl; xlatb; stc; jmp rax; 
0x0000000000024372: mov es, word ptr [rcx + rcx + 0x358d4800]; ret; 
0x0000000000056a42: mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000079e5e: mov esi, 0x480026b0; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x000000000005ec81: mov esi, 0x4889194a; movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000005ec8c: mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000084d1e: mov esi, 0x48fffd43; add esp, 0x80; pop rbx; ret; 
0x000000000003f2fe: mov esi, 0x490007f0; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a0457: mov esi, 0x4c8d4803; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000851bf: mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000000d279a: mov esi, 0x5fd2fe07; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000000be53c: mov esi, 0x64fff833; xor edi, eax; call rsp; 
0x00000000000bfff4: mov esi, 0x77fff9ac; lodsb al, byte ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000000590bb: mov esi, 0x80; cmp eax, edx; jne 0x590cc; nop; mov eax, 0xca; syscall; 
0x00000000000591a8: mov esi, 0x80; syscall; 
0x000000000008b015: mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000055f38: mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000000590e8: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000005dde2: mov esi, 0x83480147; ret; 
0x000000000006f7d1: mov esi, 0x8900000b; ret 0x349; 
0x00000000000790d5: mov esi, 0x8900002b; ret 0x349; 
0x0000000000056234: mov esi, 0x8948ffff; ret 0x8b48; 
0x00000000000b65ec: mov esi, 0xa; mov edi, 1; call rax; 
0x000000000005ec88: mov esi, 0xbe0f1a4a; push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000000cfd7e: mov esi, 0xc2c1c0bf; ret; 
0x000000000007362d: mov esi, 0xc7394406; ja 0x73610; mov eax, r9d; ret; 
0x0000000000051aa4: mov esi, 0xf000000; lahf; ret 0xea81; 
0x0000000000036919: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d0606: mov esi, 0xfa1fb992; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x000000000007f33c: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000001e0a2: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000020716: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000021bb3: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000006e654: mov esi, 1; jmp rax; 
0x00000000000b6c0f: mov esi, 1; mov edi, 1; call rax; 
0x000000000007c7ac: mov esi, 1; mov rdi, rbx; call rax; 
0x00000000000576f8: mov esi, 2; jmp rax; 
0x000000000005770b: mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000056a7c: mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000017af5: mov esi, dword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000067274: mov esi, dword ptr [rax + rsi*8]; test rsi, rsi; je 0x6727e; call rsi; 
0x00000000000b875a: mov esi, dword ptr [rbp + rsi + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x00000000000b6c4d: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dcc: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000006d900: mov esi, dword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000007a39d: mov esi, dword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000006dfa0: mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000005d25e: mov esi, dword ptr [rbp - 0x70]; call rsi; 
0x000000000006bc57: mov esi, dword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000009f36: mov esi, dword ptr [rbx]; jne 0xa150; call qword ptr [rbx + 0x10]; 
0x000000000005785e: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000006b4f9: mov esi, dword ptr [rdi + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000000a96dd: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0xb3b60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000a9609: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0xb3e60; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000017156: mov esi, dword ptr [rdi]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000008ed08: mov esi, dword ptr [rip + 0x25c1a2]; jne 0x8ed20; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x00000000000b8893: mov esi, dword ptr [rsi + rbp*8 + 0x10]; call rbx; 
0x0000000000041f7c: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000509a3: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000041f6a: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000050994: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000041f57: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000008505a: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000000a04a: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000020f26: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000005c966: mov esi, dword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000008242d: mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000000295ee: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000029c19: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000005ef7b: mov esi, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000002cb21: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000005fb64: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000005f694: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005f3a0: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000008388a: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000064071: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000612e2: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002a4e1: mov esi, dword ptr [rsp + 0x68]; call rax; 
0x00000000000bb779: mov esi, dword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x00000000000bae89: mov esi, dword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x0000000000020831: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000016b99: mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000000793cf: mov esi, eax; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007a51a: mov esi, eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000008373e: mov esi, ebp; and r14, r15; and r14d, 1; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x00000000000839a0: mov esi, ebp; call rbx; 
0x0000000000058dcc: mov esi, ebp; mov edi, ebx; mov eax, 0x2b; syscall; 
0x0000000000055bff: mov esi, ebp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x00000000000568fc: mov esi, ebp; mov edi, ebx; mov eax, 1; syscall; 
0x000000000005682c: mov esi, ebp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000083780: mov esi, ebp; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x0000000000081fbf: mov esi, ebp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000006be2c: mov esi, ebp; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000000835d0: mov esi, ebp; mov rdi, r12; call rbx; 
0x000000000001727b: mov esi, ebp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000002d7a1: mov esi, ebp; mov rdi, rax; call rcx; 
0x0000000000057577: mov esi, ebp; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000001e1e7: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000001dd1c: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000002c152: mov esi, ebp; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000017be4: mov esi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000008cceb: mov esi, ebp; xor eax, eax; call 0x8e000; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000001c6e9: mov esi, ebx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000006d9e0: mov esi, ebx; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000008f500: mov esi, ebx; syscall; 
0x0000000000016cdc: mov esi, ecx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x0000000000016bb9: mov esi, ecx; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000078d07: mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000006b6b1: mov esi, ecx; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000000791c8: mov esi, ecx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000057365: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000056672: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x00000000000b72ca: mov esi, edi; mov edi, 1; jmp rax; 
0x000000000006b468: mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000000171e6: mov esi, edi; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000007284b: mov esi, edi; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000005659c: mov esi, edx; mov eax, 4; syscall; 
0x00000000000565ea: mov esi, edx; mov eax, 5; syscall; 
0x0000000000084efc: mov esi, edx; mov eax, 6; syscall; 
0x00000000000d79e0: mov esi, es; add byte ptr [rax], al; sub byte ptr [rdi*8 + 0xc6d8ff], cl; add byte ptr [rax + 0x4cfffd30], ch; mov dword ptr [rax], 0xfd30b800; jmp qword ptr [rax - 0x39]; 
0x0000000000076973: mov esi, esi; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000072851: mov esi, esi; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000007ddae: mov esi, esi; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000001da21: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000000da785: mov esi, esp; call qword ptr [rbx]; 
0x00000000000da7d1: mov esi, esp; call qword ptr [rsi]; 
0x000000000005627e: mov esi, esp; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000001c944: mov esi, esp; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x00000000000b3280: mov esi, esp; mov edi, ebp; call qword ptr [rax]; 
0x00000000000b335c: mov esi, esp; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3166: mov esi, esp; mov edi, ebp; call rax; 
0x0000000000058fa3: mov esi, esp; mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058ee3: mov esi, esp; mov edi, ebx; mov eax, 0x2d; syscall; 
0x00000000000779a4: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007766f: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000006d49b: mov esi, esp; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007e6ec: mov esi, esp; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000007e6eb: mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000004daf2: mov esp, 0x1d8d4cd2; add eax, 0x4900070f; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004daba: mov esp, 0x1d8d4cd2; cmp eax, 0x4900070f; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e112: mov esp, 0x1d8d4cd2; or dword ptr gs:[rdi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0b5: mov esp, 0x1d8d4cd2; ret 0x709; 
0x000000000008edf8: mov esp, 0x1f0ffff7; add byte ptr [rax], r8b; cmp byte ptr [rip + 0x25c4c1], 0; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000161fb: mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000000dcba4: mov esp, 0x2800004d; mov edi, esi; jmp rdi; 
0x00000000000be674: mov esp, 0x2cfff82a; sub bh, al; lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000352d1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000000035301: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000352f1: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000006e960: mov esp, 0x4800275e; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x000000000004a0f2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a112: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a150: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a0d2: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000036b14: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000dd5a4: mov esp, 0x68000057; sar ebp, 0xff; ret 0; 
0x00000000000d7831: mov esp, 0x6a480000; cld; ljmp [rax - 0x77ffff44]; insb byte ptr [rdi], dx; cld; call rsp; 
0x00000000000d7839: mov esp, 0x6c880000; cld; call rsp; 
0x000000000000b83b: mov esp, 0x8024; add al, ch; ret 0xffcd; 
0x0000000000021bc2: mov esp, 0x8c48348; pop rbx; pop rbp; ret; 
0x000000000004e6c0: mov esp, 0xa8000000; jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x00000000000dbea4: mov esp, 0xa8000040; cdq; cmc; call rsp; 
0x0000000000083999: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; out dx, al; call rbx; 
0x00000000000d72c8: mov esp, 0xb800009a; cwde; cli; call rax; 
0x0000000000049b54: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cc8d8: mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000000bdc19: mov esp, 0xbe30fff7; idiv edi; sal byte ptr [rax - 0x4d7f0009], 0xf7; jmp qword ptr [rax - 0x4c]; 
0x0000000000082c02: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a632: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035412: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x000000000004a612: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000035402: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000080e5a: mov esp, 0xc22948c0; jbe 0x81100; add rax, rdi; add rax, rcx; ret; 
0x00000000000810c1: mov esp, 0xc22948c0; jbe 0x81100; add rax, rdi; ret; 
0x00000000000810d1: mov esp, 0xc22948c0; jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000810e1: mov esp, 0xc22948c0; jbe 0x81100; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000810f1: mov esp, 0xc22948c0; jbe 0x81100; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000081312: mov esp, 0xc23948c0; jbe 0x81370; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000081332: mov esp, 0xc23948c0; jbe 0x81370; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000081352: mov esp, 0xc23948c0; jbe 0x81370; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000081302: mov esp, 0xc23948c0; jbe 0x81370; add rax, rdi; vzeroupper; ret; 
0x0000000000081cb2: mov esp, 0xc63948c0; jbe 0x81d30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000004a1e5: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x000000000004a4f3: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000082718: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000000329a2: mov esp, 0xd32949d2; jbe 0x329b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000034102: mov esp, 0xd32949d2; jbe 0x34114; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000350e2: mov esp, 0xd32949d2; jbe 0x350f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000b6891: mov esp, 0xd837; add byte ptr [rax], al; je 0xb6878; add rsp, 8; ret; 
0x00000000000b68f1: mov esp, 0xd837; add byte ptr [rax], al; je 0xb68d4; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000036b19: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003516b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x0000000000082b07: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a547: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000035357: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x00000000000352e1: mov esp, 0xf80148c0; ret; 
0x0000000000082bc2: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a602: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x00000000000353f2: mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000098ff9: mov esp, dword ptr [rax + rax]; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000b6c45: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000009216a: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x00000000000b6dd8: mov esp, ecx; ret; 
0x0000000000056ce6: mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000000da689: mov esp, esi; call qword ptr [rsi]; 
0x000000000005c29e: mov fs, edi; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000060b3d: mov fs, word ptr [rbx]; add eax, 0x29480000; ret 0x349; 
0x00000000000650bd: mov gs, esi; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x00000000000b4580: mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000007e3bd: mov qword ptr [r8 + 0x30], rsi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000009403a: mov qword ptr [r8], rax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x0000000000093ff8: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000024971: mov qword ptr [r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000041f60: mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000059520: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000007e338: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007e378: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007f377: mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000059586: mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000595a0: mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000007f373: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000007f26d: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000007e33c: mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007f3f9: mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000007f3f1: mov qword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000023eef: mov qword ptr [rax + 8], rbx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000007e32d: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007e371: mov qword ptr [rax + 8], rdx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000059524: mov qword ptr [rax + 8], rdx; ret; 
0x00000000000d79f0: mov qword ptr [rax], -0x2cf4800; jmp qword ptr [rax - 0x39]; 
0x000000000009cecc: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000009ce7c: mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000009cdcc: mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000007e86c: mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007e335: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000007e375: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000009ce70: mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000000b6a9f: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000007a0ad: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b80: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079eda: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f1f: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e46: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a100: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000794b4: mov qword ptr [rbp - 0x4b8], rdx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x26b75a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000078d09: mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000078f61: mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x000000000006d706: mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000006d9d5: mov qword ptr [rbp - 0x4d8], rcx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000078f5a: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x000000000006d6ff: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000006d8f1: mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000000793d1: mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000090a9e: mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000005d251: mov qword ptr [rbp - 0x70], rsi; call 0x5a9a0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000000667cd: mov qword ptr [rbp - 0x98], rdx; call 0x5a9a0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000009d14f: mov qword ptr [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000007f5a5: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000022458: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000080504: mov qword ptr [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000066961: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000001cc36: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x000000000009172d: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000001d01e: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000008f43d: mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008f439: mov qword ptr [rbx + 0x18], r12; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000001cc2e: mov qword ptr [rbx + 0x18], rax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000091662: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000000a9614: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000000a96e8: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000066a8e: mov qword ptr [rbx + 0x20], rdx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020c65: mov qword ptr [rbx + 0x38], rsi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000020cdc: mov qword ptr [rbx + 0x40], r12; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000207c0: mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x000000000007f5a9: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002245c: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000001cbba: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000001df3f: mov qword ptr [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6499: mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ccad: mov qword ptr [rbx + 0xd8], rcx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x00000000000908c4: mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000008025b: mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000001c6df: mov qword ptr [rbx + 8], r8; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000001cc32: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x000000000001d01a: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000008ef28: mov qword ptr [rbx + 8], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020b54: mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006726f: mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x6727e; call rsi; 
0x0000000000067364: mov qword ptr [rbx + rbp*8], rax; lea rax, [rip + 0x27f5d1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x000000000005d6e2: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000908bd: mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000008f77f: mov qword ptr [rbx], 0; or dword ptr [rip + 0x258a5b], 1; pop rbx; ret; 
0x0000000000080258: mov qword ptr [rbx], r12; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d872: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000000b3b58: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000000943dd: mov qword ptr [rbx], rdx; mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000021764: mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000002175c: mov qword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000000707e7: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000b459f: mov qword ptr [rcx], r8; ret; 
0x00000000000b68e0: mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x0000000000068d5b: mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000009298e: mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000206ca: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000004e3dc: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3fc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd4c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd2c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e43f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004dd8f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004e45f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004ddaf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e420: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd70: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000206a2: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000206ce: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000052c54: mov qword ptr [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret; 
0x000000000008b0c6: mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000002069e: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000206d2: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000b6940: mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000021476: mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000021481: mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000004e39c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dcec: mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004e3bc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dd0c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000003ef47: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003eed7: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ee67: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003edf7: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e29a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000003ed87: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dc3a: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000004e2ba: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000003ed17: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dc4a: mov qword ptr [rdi + 6], rdx; ret; 
0x000000000004e2da: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000003eca7: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004dc5a: mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000093eef: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000093db3: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000092987: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000094142: mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000092913: mov qword ptr [rdi + 8], r9; ret; 
0x00000000000940de: mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000940fd: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000206a6: mov qword ptr [rdi + 8], rax; ret; 
0x00000000000187c3: mov qword ptr [rdi + 8], rcx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x00000000000187ab: mov qword ptr [rdi + 8], rcx; xor eax, eax; ret; 
0x0000000000092edc: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000005170a: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x0000000000051889: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000050996: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000000b68fa: mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000038bb4: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bf2: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000009287e: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038d67: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e63: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038daf: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038f37: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039117: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039307: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000394d8: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000396d8: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000398d8: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038bb0: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bee: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d63: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e5f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038dab: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038f33: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039113: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039303: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000394d4: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000396d4: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000398d4: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038bac: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bea: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d5f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e5b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038da7: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038f2f: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003910f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000392ff: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000394d0: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000396d0: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000398d0: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ba8: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038be6: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038f3b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e757: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003911b: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e6d7: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003930b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e657: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000394dc: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e5c8: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000396dc: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e538: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000398dc: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e4a8: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000092877: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000092809: mov qword ptr [rdi - 8], r9; ret; 
0x0000000000038bb8: mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bf6: mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d6b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e67: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038db3: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e7d7: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000092870: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000092980: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000075ec9: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000187a8: mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rcx; xor eax, eax; ret; 
0x00000000000187c9: mov qword ptr [rdi], r8; ret; 
0x0000000000092803: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000009290d: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000009413d: mov qword ptr [rdi], r8; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000927d8: mov qword ptr [rdi], r9; ret; 
0x000000000008ee77: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x000000000004e226: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004e256: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000004dc16: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000004e276: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000004dc26: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000004e297: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc37: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000004e2b7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000004dc47: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000004e2d7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000004dc57: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000004e237: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000004dc07: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000003ecab: mov qword ptr [rdi], rcx; ret; 
0x000000000005188e: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000004e213: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000003efb3: mov qword ptr [rdi], rdx; ret; 
0x0000000000093f85: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000041f5d: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000005099b: mov qword ptr [rdi], rsi; ret; 
0x000000000001ccb4: mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000004d7ba: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfaa: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000004d7da: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000004bfca: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000004d7fa: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bfea: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000004d68a: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000004beda: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000004d633: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000004d733: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000004bf63: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000004d753: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000004bf73: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000004d773: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000004bf83: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000004d793: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000004bf93: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000004d7b3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000004d7d3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000004bfc3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000004d7f3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bfe3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000004d683: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000004bed3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000004be83: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000009ce5c: mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000022537: mov qword ptr [rdx], rax; ret; 
0x00000000000ba57c: mov qword ptr [rip + 0x230511], 0; add rsp, 8; ret; 
0x00000000000b96be: mov qword ptr [rip + 0x2306db], rbx; jne 0xb96a8; pop rbx; ret; 
0x00000000000b9703: mov qword ptr [rip + 0x230762], 0; pop rbx; ret; 
0x00000000000b9cf7: mov qword ptr [rip + 0x230c66], 0; add rsp, 8; ret; 
0x000000000009c987: mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000009c96c: mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x0000000000091508: mov qword ptr [rip + 0x259625], 0; add rsp, 8; ret; 
0x000000000008edd0: mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x000000000008ed14: mov qword ptr [rip + 0x25c195], rax; ret; 
0x0000000000029a05: mov qword ptr [rip + 0x2bde34], rax; ret; 
0x00000000000299f7: mov qword ptr [rip + 0x2bde4a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x00000000000233de: mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233be: mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x00000000000232b4: mov qword ptr [rip + 0x2c456d], rax; ret; 
0x0000000000023244: mov qword ptr [rip + 0x2c458d], rax; ret; 
0x0000000000023234: mov qword ptr [rip + 0x2c45a5], rax; ret; 
0x000000000002296b: mov qword ptr [rip + 0x2c7452], 0; ret; 
0x0000000000022901: mov qword ptr [rip + 0x2c74c0], rdx; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000009c9a: mov qword ptr [rip + 0x2e0c5f], rax; add rsp, 0x88; pop rbx; ret; 
0x0000000000008774: mov qword ptr [rip + 0x2e23f9], 0; pop rax; ret; 
0x000000000001872c: mov qword ptr [rsi + 0x10], r10; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000000a6e2: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000018730: mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000000a6d6: mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000000183ac: mov qword ptr [rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x00000000000882e0: mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000001b032: mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000018725: mov qword ptr [rsi], rax; lea rax, [r10 + r8*4]; mov qword ptr [rsi + 0x10], r10; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000008ee81: mov qword ptr [rsi], rax; ret; 
0x0000000000068d50: mov qword ptr [rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000183a9: mov qword ptr [rsi], rdi; mov qword ptr [rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x000000000008e1c8: mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000000a6da: mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000026c79: mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000005bc7c: mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x000000000005bd5a: mov qword ptr [rsp + 0x10], r9; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x0000000000026d36: mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000005bc77: mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x000000000005bd55: mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r9; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x000000000008df30: mov qword ptr [rsp + 0x18], rax; call 0x8d860; add rsp, 0xd8; ret; 
0x0000000000056b09: mov qword ptr [rsp + 0x18], rax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x0000000000056b13: mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x0000000000026c74: mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000000851b5: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000083cc2: mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x0000000000083782: mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x000000000008374a: mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x0000000000083cf4: mov qword ptr [rsp + 0xa8], r14; mov rsi, rbp; mov rdi, r12; call rbx; 
0x000000000005bc81: mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x0000000000026c7e: mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000001a6ee: mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000001b16d: mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000005bd5f: mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x00000000000a945e: mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000b3354: mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3302: mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000001e1e2: mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000005bc86: mov qword ptr [rsp], rcx; call rax; 
0x000000000001d511: mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000000183ab: mov qword ptr ds:[rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x0000000000024970: mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000068d5a: mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000068d65: mov qword ptr fs:[rdx], rax; ret; 
0x0000000000068d4f: mov qword ptr fs:[rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000001cbb9: mov qword ptr ss:[rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000050995: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000058d30: mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000058d30: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x58d43; ret; 
0x0000000000059010: mov r10, rcx; mov eax, 0x36; syscall; 
0x0000000000059010: mov r10, rcx; mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x59023; ret; 
0x0000000000057360: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000001d961: mov r10d, 0x8948002c; ret 0x294c; 
0x0000000000068f20: mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000016ce3: mov r10d, 8; mov eax, ecx; syscall; 
0x00000000000575ce: mov r10d, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000057570: mov r10d, r14d; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000058f9c: mov r10d, r14d; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058edc: mov r10d, r14d; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x0000000000084f4c: mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000000949b0: mov r11, qword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000008c088: mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000038d00: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ce4: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000009160c: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x000000000009159a: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000092040: mov r11, r8; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000078f54: mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x26bbad]; jmp rax; 
0x00000000000b6c44: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000056ce5: mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000000b6c48: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dc7: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000077667: mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000083cb5: mov r13, r14; and r13, r15; and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x00000000000b6c4c: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dcb: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000009f35: mov r14, qword ptr [rbx]; jne 0xa150; call qword ptr [rbx + 0x10]; 
0x000000000008373d: mov r14, r13; and r14, r15; and r14d, 1; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x000000000007284a: mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000078d06: mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000006d493: mov r15, qword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000000b6c50: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000000b6dcf: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000008c27e: mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000092163: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000000d3130: mov r15d, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000b45a8: mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b4598: mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x000000000001b92c: mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000000b65e3: mov r8, rbp; mov rcx, rbx; mov rdx, qword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000000b64e7: mov r8, rbx; mov rcx, r12; mov rdx, qword ptr [r12]; or esi, 2; mov edi, 1; call rax; 
0x00000000000b6c05: mov r8, rbx; mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x00000000000187c0: mov r8, rdx; mov qword ptr [rdi + 8], rcx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x000000000008e170: mov r8, rsi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x8e11b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000067997: mov r8d, 0xe8c78948; jg 0x67a12; cli; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x00000000000664fb: mov r8d, 0xff449ee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000079b4d: mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000085052: mov r8d, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000055bf8: mov r8d, eax; mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x0000000000056a79: mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000058dc8: mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x2b; syscall; 
0x00000000000568f8: mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000056828: mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000001a780: mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000060d27: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005f68e: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000006406b: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000612dc: mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000005fb5e: mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000005c96a: mov r9, r13; call rbx; 
0x0000000000082434: mov r9, r14; call rbx; 
0x0000000000068d90: mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000068db0: mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dd0: mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000000a8b0: mov rax, -0x58; add rax, qword ptr fs:[0]; ret; 
0x0000000000016e20: mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000016ade: mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000018d2a: mov rax, -0x58; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000852a8: mov rax, -0x58; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000001cf15: mov rax, -0x58; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000073740: mov rax, -0x58; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000001f8b0: mov rax, -0x58; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000001bb98: mov rax, -0x58; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008f7a0: mov rax, -0x58; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000027f40: mov rax, -0x58; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000068d70: mov rax, -0x70; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000016aec: mov rax, -1; ret; 
0x00000000000083bc: mov rax, 0; test rax, rax; je 0x83ca; call rax; 
0x0000000000008c63: mov rax, 0; test rax, rax; je 0x8c78; jmp rax; 
0x0000000000008ca4: mov rax, 0; test rax, rax; je 0x8cb8; jmp rax; 
0x0000000000016c20: mov rax, 0xf; syscall; 
0x0000000000082a50: mov rax, 1; ret; 
0x0000000000082a60: mov rax, 2; ret; 
0x0000000000082a70: mov rax, 3; ret; 
0x0000000000082a80: mov rax, 4; ret; 
0x0000000000082a90: mov rax, 5; ret; 
0x0000000000082aa0: mov rax, 6; ret; 
0x0000000000082ab0: mov rax, 7; ret; 
0x0000000000055cf6: mov rax, qword ptr [r12 + 8]; test rax, rax; je 0x55d02; call rax; 
0x000000000009ef0e: mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000008c695: mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000007f22c: mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000007f335: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007e80a: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000001b6f9: mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000017bbc: mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000001b700: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000072846: mov rax, qword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000007f803: mov rax, qword ptr [rax + 0x4c]; ret; 
0x00000000000b315b: mov rax, qword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000091520: mov rax, qword ptr [rax + 8]; ret; 
0x0000000000091530: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000006b455: mov rax, qword ptr [rax + r11*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000006736f: mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6737a; call rax; 
0x00000000000794c6: mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000068d7e: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000006e0bc: mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000000b6881: mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000068d7b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000208c4: mov rax, qword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000020ab4: mov rax, qword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000009c683: mov rax, qword ptr [rbp + 0x48]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000008f65: mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000090a91: mov rax, qword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x3e062]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000008ccf4: mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000008c08f: mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000009ac8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x97c0; mov eax, 0; leave; ret; 
0x0000000000093d04: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x93d4e; leave; ret; 
0x000000000008beb0: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000008bd6d: mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000002080c: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000002082d: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000009cec8: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000009ce78: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000001d016: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000009ce68: mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000020ef8: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000021318: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000001b6ee: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000001616d: mov rax, qword ptr [rbx + rax*8]; ja 0x167f5; lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000004d7b6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000004d7d6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000004bfc6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000004d7f6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bfe6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000004d686: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000004bed6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000004d630: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000004d730: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000004bf60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000004d750: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000004bf70: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000004d770: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000004bf80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000004d790: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000004bf90: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000004d7b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000004bfa0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000004d7d0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000004bfc0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000004d7f0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000004bfe0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000004d680: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000004bed0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000004be80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000055f0c: mov rax, qword ptr [rdi + 0x10]; test rax, rax; je 0x55f1a; call rax; 
0x0000000000068771: mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x6877f; call rax; 
0x00000000000ba40c: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xba41c; call rax; 
0x0000000000023210: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007f800: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000002069a: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000022890: mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b68a0: mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000000b6910: mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000b6950: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000000b69a0: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000000b6990: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000000b6960: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000000b6920: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000229a6: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x229d0; movzx eax, byte ptr [rax]; ret; 
0x00000000000b72c0: mov rax, qword ptr [rdi + 8]; test rax, rax; je 0xb72d8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000006e606: mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000036d80: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x00000000000367f6: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x0000000000022534: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000023410: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c43d6], 1; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000233d0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4416], 1; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233b0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x0000000000023430: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c6a0a], eax; ret; 
0x00000000000232b0: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c456d], rax; ret; 
0x0000000000023240: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c458d], rax; ret; 
0x0000000000023230: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c45a5], rax; ret; 
0x000000000007f5d2: mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000055e63: mov rax, qword ptr [rdx + 0x18]; test rax, rax; je 0x55f80; call rax; 
0x000000000008f395: mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000008ee70: mov rax, qword ptr [rip + 0x2581a1]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x000000000008ee7a: mov rax, qword ptr [rip + 0x25c027]; mov qword ptr [rsi], rax; ret; 
0x000000000008ee09: mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x0000000000065be0: mov rax, qword ptr [rip + 0x284d71]; ret; 
0x000000000005d680: mov rax, qword ptr [rip + 0x28de81]; ret; 
0x0000000000022870: mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x00000000000b7577: mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b46d0: mov rax, qword ptr [rsi + 0xa8]; ret; 
0x00000000000b46a3: mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b46c0: mov rax, qword ptr [rsi + 0xb8]; ret; 
0x00000000000b75a8: mov rax, qword ptr [rsi + 8]; ret; 
0x000000000001b02a: mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000007948b: mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000006e650: mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000006eca8: mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000000b6985: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000057865: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000001b927: mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000000a052: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000612eb: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000056849: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000001715c: mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000b40fc: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000068d7a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000007c547: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009da8c: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x0000000000057c2d: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001de09: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000024adf: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002c93e: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000082e33: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000081c70: mov rax, r8; vzeroupper; ret; 
0x0000000000057708: mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000001a52a: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000058243: mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x00000000000576f1: mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000001a642: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001df46: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6aaa: mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000a96a6: mov rax, rbx; jne 0xa96bc; add rsp, 0x40; pop rbx; ret; 
0x00000000000a978d: mov rax, rbx; jne 0xa97a4; add rsp, 0x50; pop rbx; ret; 
0x000000000001e991: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001e8c4: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000573ff: mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000018157: mov rax, rbx; pop rbx; ret; 
0x00000000000594b7: mov rax, rbx; pop rdx; pop rbx; ret; 
0x000000000008e21e: mov rax, rcx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000008e1cb: mov rax, rcx; ret; 
0x000000000001cb32: mov rax, rdi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000024d74: mov rax, rdi; pop rbp; pop r12; ret; 
0x000000000001cb63: mov rax, rdi; ret; 
0x0000000000024974: mov rax, rdx; add rsp, 8; ret; 
0x0000000000016aba: mov rax, rdx; jne 0x16ac7; add rsp, 0x148; ret; 
0x0000000000084c8a: mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002432c: mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000051c15: mov rax, rdx; pop rbx; ret; 
0x0000000000024980: mov rax, rdx; ret; 
0x0000000000056593: mov rax, rsi; ja 0x565c8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000084ef3: mov rax, rsi; ja 0x84f28; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000009c835: mov rax, rsi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000027f1c: mov rax, rsi; pop rbx; ret; 
0x0000000000027f50: mov rax, rsi; ret; 
0x000000000001aff8: mov rbp, qword ptr [r15 + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000000b6dd3: mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000001bd8f: mov rbp, qword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000009216c: mov rbp, r9; nop; jmp rdx; 
0x00000000000800f0: mov rbx, r12; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000007f227: mov rbx, rdi; jne 0x7f298; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000068775: mov rbx, rdi; test rax, rax; je 0x6877f; call rax; 
0x0000000000084d3f: mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000008f4fc: mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000068d53: mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000056520: mov rcx, -0x58; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007e331: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000949a9: mov rcx, qword ptr [rbp - 0x628]; mov r11, qword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000001b797: mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001a77c: mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000041f59: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000b68d4: mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x8718; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x00000000000b7375: mov rcx, qword ptr [rdx + 8]; cmp qword ptr [rsi + 8], rcx; ja 0xb7381; sbb eax, eax; ret; 
0x000000000004e3d4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3f4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd44: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd24: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e394: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dce4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004e3b4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dd04: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000005098e: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000000390a4: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390c0: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039284: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000392a0: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039464: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039480: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039654: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039670: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039854: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039870: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a54: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a70: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000367fa: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x000000000003e5c4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e534: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e4a4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000036d7c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x37233; xor eax, eax; ret; 
0x0000000000038ec4: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038ee0: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004e220: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004dbf0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000004e230: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000004dc00: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000004e250: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000004dc10: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000004e270: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000004dc20: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000003ef44: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003eed4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ee64: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003edf4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ed84: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ed14: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003eca4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e290: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc30: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000004e2b0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000004dc40: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000004e2d0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000004dc50: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000091616: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000000915a4: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000091897: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091cc7: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000919f8: mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000041f58: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000b64ea: mov rcx, r12; mov rdx, qword ptr [r12]; or esi, 2; mov edi, 1; call rax; 
0x000000000005c95d: mov rcx, r12; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000000b6c08: mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x00000000000822d2: mov rcx, r13; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000007f883: mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007fa5f: mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000082424: mov rcx, r15; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000000187bd: mov rcx, r8; mov r8, rdx; mov qword ptr [rdi + 8], rcx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x00000000000b65e6: mov rcx, rbx; mov rdx, qword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000051630: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000050971: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000a0349: mov rcx, rsi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0xa0330; mov eax, 1; ret; 
0x0000000000081fc1: mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000017158: mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000017bf3: mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000006b6b3: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000006bc5d: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000006b46a: mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000006b500: mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000000779a6: mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007697c: mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000077671: mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000076a1a: mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000072853: mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000055f09: mov rdi, qword ptr [rbx]; mov rax, qword ptr [rdi + 0x10]; test rax, rax; je 0x55f1a; call rax; 
0x00000000000a96e0: mov rdi, qword ptr [rdi]; call 0xb3b60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000a960c: mov rdi, qword ptr [rdi]; call 0xb3e60; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000008cd7: mov rdi, qword ptr [rip + 0x2de32a]; call 0x8600; call 0x8c50; mov byte ptr [rip + 0x2e06d1], 1; pop rbp; ret; 
0x0000000000092043: mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000005ef7f: mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000005fb68: mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000005f698: mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005f3a4: mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000064075: mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000612e6: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000008388e: mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000020f2a: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000021350: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000057860: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000b888d: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x0000000000020835: mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000007f88f: mov rdi, r12; call rbx; 
0x0000000000020e25: mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000056ce8: mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000000bb780: mov rdi, r13; call rax; 
0x000000000001727d: mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000171e8: mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000006d906: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000066502: mov rdi, r14; call rbx; 
0x00000000000667e0: mov rdi, r14; call rdx; 
0x000000000006df8e: mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000006d9e2: mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000006d49d: mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007a3a3: mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000000793d8: mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000001b172: mov rdi, r15; call rax; 
0x000000000005d25a: mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000000791ca: mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000009acc: mov rdi, rax; call 0x97c0; mov eax, 0; leave; ret; 
0x000000000001b935: mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000002d7a3: mov rdi, rax; call rcx; 
0x0000000000016b8f: mov rdi, rax; mov eax, 0xba; syscall; 
0x0000000000056598: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000084ef8: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000007ddb0: mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000001a6f5: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000002cb25: mov rdi, rbp; call rax; 
0x00000000000822e0: mov rdi, rbp; call rbx; 
0x0000000000057579: mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000082431: mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000001b791: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001a776: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000005823c: mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000001e0a7: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000001da23: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000001e1e9: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000002071b: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020d8c: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000021b1c: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000001a377: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000020d13: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000001dd1e: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000001d515: mov rdi, rbx; call rax; 
0x00000000000b9532: mov rdi, rbx; jne 0xb9520; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000664f6: mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x5a9a0; mov rdi, r14; call rbx; 
0x000000000001b6f5: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000000208cc: mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000007e6ee: mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000008b6d8: mov rdi, rcx; call 0x57650; test eax, eax; js 0x8b6f2; pop rbx; ret; 
0x0000000000094230: mov rdi, rdx; mov byte ptr [rsi], al; jne 0x94210; mov rax, rsi; ret; 
0x00000000000667ca: mov rdi, rdx; mov qword ptr [rbp - 0x98], rdx; call 0x5a9a0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000008180e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000005d24e: mov rdi, rsi; mov qword ptr [rbp - 0x70], rsi; call 0x5a9a0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x0000000000068d5e: mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000055c30: mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000056860: mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000b64ed: mov rdx, qword ptr [r12]; or esi, 2; mov edi, 1; call rax; 
0x00000000000b6c0b: mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000076a16: mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000006b4fc: mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000001b166: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000000b875e: mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000002255f: mov rdx, qword ptr [rax + 8]; jne 0x22570; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000006df98: mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000000667d9: mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000009ce58: mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000001d50a: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000000b65e9: mov rdx, qword ptr [rbx]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000055e60: mov rdx, qword ptr [rbx]; mov rax, qword ptr [rdx + 0x18]; test rax, rax; je 0x55f80; call rax; 
0x0000000000059515: mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000020696: mov rdx, qword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009ce6c: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000009ced3: mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000000b6496: mov rdx, qword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009d5a3: mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000000a042: mov rdx, qword ptr [rip + 0x2dff07]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000004dd84: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004dda4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000003ef40: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003eed0: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003ee60: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003edf0: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e293: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc33: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000003ed80: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e2b3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000004dc43: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000003ed10: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e2d3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000004dc53: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000003eca0: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000003e750: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e6d0: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e650: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e5c0: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e530: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e4a0: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038d04: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039658: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039858: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a58: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038ce8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039674: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039874: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a74: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d20: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003e7d0: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000004e210: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000003efb0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000092048: mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000017150: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000082427: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000000171e0: mov rdx, qword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000091611: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x000000000009159f: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000005f39a: mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000001de22: mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000056a75: mov rdx, qword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000058dc5: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x2b; syscall; 
0x00000000000568f5: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000056825: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000001b924: mov rdx, r12; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000077678: mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x00000000000b32ff: mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000006bc53: mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000000b327c: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000000b3358: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3162: mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000058f9f: mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058edf: mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x00000000000779a0: mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007284d: mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000006b6ad: mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000078d14: mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000000822d8: mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000007a399: mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000000793cb: mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007a516: mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000006d4a3: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000000b888a: mov rdx, r15; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x000000000001da1d: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000001e1df: mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000001c940: mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000005c962: mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000000b97c6: mov rdx, rbx; jne 0xb97b8; pop rbx; ret; 
0x000000000006be28: mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000084f4f: mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000006d8ee: mov rdx, rcx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000051637: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000851bc: mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000000b8759: mov rsi, qword ptr [r13 + r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x00000000000b8892: mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x000000000006b4f8: mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000017155: mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000017af4: mov rsi, qword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000067273: mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x6727e; call rsi; 
0x000000000006d8ff: mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000007a39c: mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000006df9f: mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000005d25d: mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000006bc56: mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000005785d: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000a96dc: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0xb3b60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000a9608: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0xb3e60; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000008ed07: mov rsi, qword ptr [rip + 0x25c1a2]; jne 0x8ed20; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x0000000000050993: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000041f56: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000085059: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000000a049: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000020f25: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000005c965: mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000008242c: mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000000295ed: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000029c18: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000005ef7a: mov rsi, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000002cb20: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000005fb63: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000005f693: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005f39f: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000083889: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000064070: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000612e1: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002a4e0: mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x00000000000bb778: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x00000000000bae88: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x000000000006d9df: mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000001c943: mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x00000000000b327f: mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000000b335b: mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000000b3165: mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000058fa2: mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058ee2: mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x00000000000779a3: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000007766e: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000006d49a: mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000006be2b: mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000057576: mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000001e1e6: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000001dd1b: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000002c151: mov rsi, r13; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000008ccea: mov rsi, r13; xor eax, eax; call 0x8e000; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000076972: mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000072850: mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000007ddad: mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000001da20: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000006b467: mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000000171e5: mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000793ce: mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000007a519: mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000016bb8: mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000006b6b0: mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000008399f: mov rsi, rbp; call rbx; 
0x0000000000058dcb: mov rsi, rbp; mov edi, ebx; mov eax, 0x2b; syscall; 
0x0000000000055bfe: mov rsi, rbp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x00000000000568fb: mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x000000000005682b: mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000008377f: mov rsi, rbp; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x0000000000081fbe: mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x00000000000835cf: mov rsi, rbp; mov rdi, r12; call rbx; 
0x000000000001727a: mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000002d7a0: mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000001c6e8: mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000008f4ff: mov rsi, rbx; syscall; 
0x0000000000016cdb: mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x00000000000791c7: mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000056671: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000000b72c9: mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000005659b: mov rsi, rdx; mov eax, 4; syscall; 
0x00000000000565e9: mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000084efb: mov rsi, rdx; mov eax, 6; syscall; 
0x000000000005627d: mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000092169: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000000b6dd7: mov rsp, rcx; ret; 
0x0000000000041f7b: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000bdc2c: mov sil, 0xf7; jmp qword ptr [rax]; 
0x00000000000a6455: mov ss, esi; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x0000000000079fb6: mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x0000000000041f85: mov word ptr [r9 - 2], cx; ret; 
0x0000000000085c60: mov word ptr [rbx], cs; std; dec dword ptr [rax + 0x39]; ret; 
0x0000000000024a31: mov word ptr [rcx], cs; add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x000000000004e31c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc8c: mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004e424: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd74: mov word ptr [rdi + 0x18], cx; ret; 
0x000000000003f1e7: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000004e1e8: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000004dbc8: mov word ptr [rdi + 4], dx; ret; 
0x000000000004e23a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000004dc0a: mov word ptr [rdi + 8], dx; ret; 
0x000000000005171a: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x000000000005189f: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000509b4: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000392bc: mov word ptr [rdi - 2], cx; ret; 
0x00000000000390d4: mov word ptr [rdi - 2], dx; ret; 
0x00000000000392b8: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000004e1b3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000004db93: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000506f2: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000003f1eb: mov word ptr [rdi], cx; ret; 
0x00000000000518a4: mov word ptr [rdi], cx; vzeroupper; ret; 
0x000000000004e1a3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000003f253: mov word ptr [rdi], dx; ret; 
0x0000000000041f82: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000509b9: mov word ptr [rdi], si; ret; 
0x000000000004d708: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000004bf48: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000000b4520: mov word ptr [rdx + rax], ss; add bl, dh; movups xmmword ptr [rsp - 0x28], xmm0; ret; 
0x000000000004d6b3: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000004d6c3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000004bf13: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000004bf03: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000747db: mov word ptr [rip + 0x358d4c00], es; ret 0x58c; 
0x00000000000374b0: mov word ptr [rsi + 8], fs; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000506f5: mov word ptr [rsi - 2], cx; ret; 
0x00000000000d82d4: mov word ptr [rsi], es; add dword ptr [rdi], 3; ret; 
0x000000000000d6fb: mov word ptr [rsp + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000000a949d: mov word ptr [rsp - 0x10], si; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000509b3: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000b4547: movabs al, byte ptr [0x1462058d4cfff541]; add al, byte ptr [rax]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000bdba0: movabs al, byte ptr [0x40fff7b360fff7b1]; mov ch, 0xf7; jmp qword ptr [rax]; 
0x000000000005951c: movabs al, byte ptr [0x4810488948ffffff]; mov dword ptr [rax + 8], edx; ret; 
0x000000000009ce54: movabs al, byte ptr [0x4818538b48000000]; mov dword ptr [rdx], eax; pop rbx; ret; 
0x000000000001b6f1: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000021479: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rdi + 0xa8], 0; ret; 
0x00000000000de0aa: movabs al, byte ptr [0x62c80000009001]; add byte ptr [rsi - 8], bl; call rcx; 
0x0000000000050e87: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000007aa5a: movabs al, byte ptr [0x840fc08548000000]; ret; 
0x00000000000954c9: movabs al, byte ptr [0x840fc33948fffffb]; cmc; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000000762cf: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000d7945: movabs al, byte ptr [0xa0a80000c2e8fffc]; cld; dec dword ptr [rax]; ret; 
0x00000000000be9cd: movabs al, byte ptr [0xa380fff8a230fff8]; clc; call rax; 
0x00000000000be9cd: movabs al, byte ptr [0xa380fff8a230fff8]; clc; call rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; jmp qword ptr [rax]; 
0x00000000000d6dd8: movabs al, byte ptr [0xb8fff83128000075]; jne 0xd6de3; add byte ptr [rax + 0x31], ch; clc; call rax; 
0x00000000000be0c4: movabs al, byte ptr [0xc0fff81330fff813]; adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000be914: movabs al, byte ptr [0xc0fff853b0fff851]; push rbp; clc; call rax; 
0x00000000000bea0c: movabs al, byte ptr [0xc0fff8f1b0fff8f1]; int1; clc; call rax; 
0x00000000000bea48: movabs al, byte ptr [0xc0fff8f2b0fff8f2]; clc; jmp rax; 
0x00000000000d3134: movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000003440c: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000009f2b6: movabs byte ptr [0x21840c7fffb], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000d179b: movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000008ed0a: movabs byte ptr [0x468d4810750025c1], al; add dword ptr [rax - 0x77], ecx; add eax, 0x25c195; ret; 
0x000000000001617a: movabs byte ptr [0x4897146348000a5e], al; add edx, edi; jmp rdx; 
0x000000000003db5a: movabs byte ptr [0x4993146349000805], al; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003819a: movabs byte ptr [0x4993146349000859], al; lea edx, [rbx + rdx]; jmp rdx; 
0x00000000000d73f1: movabs byte ptr [0xa238fffac6180000], al; add byte ptr [rax], al; cmp al, cl; cli; call qword ptr [rax - 0x5e]; 
0x00000000000be9d1: movabs byte ptr [0xa4d0fff8a380fff8], al; clc; jmp qword ptr [rax]; 
0x00000000000bdf98: movabs byte ptr [0xc2fff81132fff811], al; adc al, bh; call qword ptr [rdx + 0x10]; 
0x000000000000ffea: movabs byte ptr [0xe90824448b480001], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000003470a: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000094bec: movabs dword ptr [0x48fffffcb7830fc2], eax; lea edx, [rip + 0x3ed29]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000003de59: movabs dword ptr [0x4993146349000802], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003d859: movabs dword ptr [0x4993146349000808], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003d559: movabs dword ptr [0x499314634900080b], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003d259: movabs dword ptr [0x499314634900080e], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003cf59: movabs dword ptr [0x4993146349000811], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000003cc59: movabs dword ptr [0x4993146349000814], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000027259: movabs dword ptr [0x8b4c001f0ffffffe], eax; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000008e481: movabs dword ptr [0xfffda085c70025cf], eax; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000008ee73: movabs eax, dword ptr [0x8b48078948002581]; add eax, 0x25c027; mov qword ptr [rsi], rax; ret; 
0x00000000000d14df: movabs eax, dword ptr [0xdbd7170d7733db8]; shl dword ptr [rdi - 5], 1; ret; 
0x0000000000036a18: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036b18: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000016b6c: movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b74: movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b7c: movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x00000000000377ad: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, [rip + 0x86383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a08c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376bc: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004e310: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc80: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004e350: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004dcc0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcb0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e330: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004dca0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004e3d0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004dd40: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd20: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e390: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dce0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004e3b0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dd00: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004de20: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004e470: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004e490: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004dde0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004de00: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000004e2f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004e300: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004dc70: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000004dc60: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000004de24: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004e474: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004e494: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004dde4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004de04: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000003b48a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b33a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1ea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b09a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003adfa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acaa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa0a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a76a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a61a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a37a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a22a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038aba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003896a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003881a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003857a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003842a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382da: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003803a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037eea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037d9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037afa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379aa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003785a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b52b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3db: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b28b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b13b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afeb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae9b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad4b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a80b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a56b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a41b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2cb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b5b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a0b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003861b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384cb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003837b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003822b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038192: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ceb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a4b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000378fb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ec31: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000051682: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000004e4dd: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000004de2d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000003f2a1: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f231: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f1c1: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f151: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0e1: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f071: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f001: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef91: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef21: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003eeb1: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ee41: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003edd1: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed61: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ecf1: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ec81: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ec27: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000003eebf: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ee4f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003eddf: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed6f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000004e47d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddcd: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000003ecff: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000004e49d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004dded: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000003ec8f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000004e4bd: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000004de0d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000003f2af: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f23f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f1cf: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f15f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0ef: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f07f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f00f: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef9f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef2f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000051687: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000051614: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005168d: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000003e41b: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000003e48b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ebc6: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eb46: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eab6: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ea36: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e9b6: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e936: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e8b6: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e836: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e7b6: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e736: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e6b6: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e636: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e5a6: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e516: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e486: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e411: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000003ebb7: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eb37: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eaa7: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ea27: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e9a7: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e927: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e8a7: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e827: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e727: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e6a7: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e627: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e597: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e507: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e477: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e407: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000004e2f4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004e304: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004dc74: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000004e357: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004e377: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004dcc7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcb7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e337: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004dca7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004e3d8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3f8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd48: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd28: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e43b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004dd8b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004e45b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004ddab: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e41c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd6c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000004e398: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dce8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004e3b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dd08: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004e318: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc88: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000005167e: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000004e4d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000004de29: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004e479: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004e499: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004dde9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004e4b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000004de09: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000003ec3a: movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000003ec94: movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000051613: movdqu xmmword ptr fs:[rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000004e311: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc81: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004e351: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004dcc1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcb1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e331: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004dca1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004e3d1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004dd41: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd21: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e391: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dce1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004e3b1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dd01: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004de21: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004e471: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004e491: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004dde1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004de01: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000004e2f1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004e301: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004dc71: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000004dc61: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000004de25: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004e475: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004e495: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004dde5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004de05: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000003b48b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b33b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1eb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b09b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003adfb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa0b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a76b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a61b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a37b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a22b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038abb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003896b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003881b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003857b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003842b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382db: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003803b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037eeb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037d9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037afb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379ab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003785b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b52c: movq qword ptr [r8], mm0; lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3dc: movq qword ptr [r8], mm0; lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b28c: movq qword ptr [r8], mm0; lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b13c: movq qword ptr [r8], mm0; lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afec: movq qword ptr [r8], mm0; lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae9c: movq qword ptr [r8], mm0; lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad4c: movq qword ptr [r8], mm0; lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaac: movq qword ptr [r8], mm0; lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a80c: movq qword ptr [r8], mm0; lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a56c: movq qword ptr [r8], mm0; lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a41c: movq qword ptr [r8], mm0; lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2cc: movq qword ptr [r8], mm0; lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b5c: movq qword ptr [r8], mm0; lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a0c: movq qword ptr [r8], mm0; lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003861c: movq qword ptr [r8], mm0; lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384cc: movq qword ptr [r8], mm0; lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003837c: movq qword ptr [r8], mm0; lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003822c: movq qword ptr [r8], mm0; lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038193: movq qword ptr [r8], mm0; lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037cec: movq qword ptr [r8], mm0; lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a4c: movq qword ptr [r8], mm0; lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000378fc: movq qword ptr [r8], mm0; lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b48c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x82867]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b33c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x829b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1ec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x82b07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b09c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x82c57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x82da7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003adfc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x82ef7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x83047]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa0c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x832e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x83437]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a76c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x83587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a61c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x836d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x83827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a37c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x83977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a22c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x83ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038abc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003896c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x851c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003881c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003857c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x855b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003842c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382dc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003803c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85af7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037eec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85c47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037d9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x85ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037afc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x86037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379ac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x86187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003785c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x862d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b52d: movq qword ptr [rax], mm0; lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3dd: movq qword ptr [rax], mm0; lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b28d: movq qword ptr [rax], mm0; lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b13d: movq qword ptr [rax], mm0; lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afed: movq qword ptr [rax], mm0; lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae9d: movq qword ptr [rax], mm0; lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad4d: movq qword ptr [rax], mm0; lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaad: movq qword ptr [rax], mm0; lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a80d: movq qword ptr [rax], mm0; lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a56d: movq qword ptr [rax], mm0; lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a41d: movq qword ptr [rax], mm0; lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2cd: movq qword ptr [rax], mm0; lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b5d: movq qword ptr [rax], mm0; lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a0d: movq qword ptr [rax], mm0; lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003861d: movq qword ptr [rax], mm0; lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384cd: movq qword ptr [rax], mm0; lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003837d: movq qword ptr [rax], mm0; lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003822d: movq qword ptr [rax], mm0; lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038194: movq qword ptr [rax], mm0; lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ced: movq qword ptr [rax], mm0; lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a4d: movq qword ptr [rax], mm0; lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000378fd: movq qword ptr [rax], mm0; lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ec32: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000051683: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000004e4de: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000004de2e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x000000000003f2a2: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f232: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f1c2: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f152: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0e2: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f072: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f002: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef92: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef22: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003eeb2: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ee42: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003edd2: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed62: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ecf2: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ec82: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ec28: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000003eec0: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ee50: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ede0: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed70: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000004e47e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddce: movq qword ptr [rdi + 0xd], mm2; ret; 
0x000000000003ed00: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000004e49e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004ddee: movq qword ptr [rdi + 0xe], mm2; ret; 
0x000000000003ec90: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000004e4be: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000004de0e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x000000000003f2b0: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f240: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f1d0: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f160: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f0f0: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f080: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003f010: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003efa0: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ef30: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000051688: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000051615: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000005168e: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000003e41c: movq qword ptr [rdi - 0x10], mm0; ret; 
0x000000000003e48c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000003ebc7: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eb47: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eab7: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ea37: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e9b7: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e937: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e8b7: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e837: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e7b7: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e737: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e6b7: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e637: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e5a7: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e517: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e487: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e412: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000000377ae: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, [rip + 0x86383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ebb8: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eb38: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003eaa8: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003ea28: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e9a8: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e928: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e8a8: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e828: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e728: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e6a8: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e628: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e598: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e508: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e478: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003e408: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000003a08d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376bd: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004e2f5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004e305: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004dc75: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000004e358: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000004e378: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000004dcc8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000004dcb8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004e338: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004dca8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004e3d9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000004e3f9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000004dd49: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000004dd29: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004e43c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000004dd8c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004e45c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004ddac: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e41d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd6d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000004e399: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000004dce9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000004e3b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004dd09: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004e319: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000004dc89: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000005167f: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000004e4da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000004de2a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004e47a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004e49a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000004ddea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000004e4ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000004de0a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000003ec3b: movq qword ptr [rdi], mm0; ret; 
0x000000000003ec95: movq qword ptr [rdi], mm1; ret; 
0x00000000000a96e5: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000000d7449: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; sub ah, ch; cli; call qword ptr [rax - 0x5c]; 
0x00000000000b40f8: movsb byte ptr [rdi], byte ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000065a2c: movsb byte ptr [rdi], byte ptr [rsi]; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000de96d: movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax]; 
0x00000000000de931: movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rcx]; 
0x00000000000de919: movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rdi]; 
0x00000000000be9d9: movsb byte ptr [rdi], byte ptr [rsi]; clc; jmp qword ptr [rax]; 
0x00000000000d797d: movsb byte ptr [rdi], byte ptr [rsi]; cld; inc esp; ret; 
0x0000000000050915: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000d1622: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000035d58: movsb byte ptr [rdi], byte ptr [rsi]; jl 0x35d63; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000e0d8c: movsb byte ptr [rdi], byte ptr [rsi]; pop qword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000050907: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000001cab4: movsb byte ptr [rdi], byte ptr [rsi]; sub al, 0; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000008f3ec: movsb byte ptr [rdi], byte ptr [rsi]; xor eax, eax; ret; 
0x00000000000e2325: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; test al, 0xe0; sti; call qword ptr [rax]; 
0x00000000000d7499: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; test al, 0xef; cli; jmp rax; 
0x00000000000bc145: movsd dword ptr [rdi], dword ptr [rsi]; cmc; inc dword ptr [rbp - 0x5a]; cmc; jmp qword ptr [rcx]; 
0x00000000000bdca5: movsd dword ptr [rdi], dword ptr [rsi]; idiv edi; and byte ptr [rdi - 0x578f0009], ah; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x0000000000092832: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000bfa41: movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rax + 0x70fff9a5]; movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000bfa49: movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000bfa21: movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rbx]; stc; call rax; 
0x00000000000bfa51: movsd dword ptr [rdi], dword ptr [rsi]; stc; inc dword ptr [rax]; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp rax; 
0x00000000000bfa55: movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp rax; 
0x00000000000bfa45: movsd dword ptr [rdi], dword ptr [rsi]; stc; push qword ptr [rax - 0x5b]; stc; call qword ptr [rax - 0x5b]; 
0x0000000000023237: movsd dword ptr [rdi], dword ptr [rsi]; sub al, 0; ret; 
0x00000000000a9463: movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000b4524: movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000b4514: movss xmm0, dword ptr [rip + 0x20d2c]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000a941d: movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000007362c: movsx eax, byte ptr [rsi]; cmp edi, r8d; ja 0x73610; mov eax, r9d; ret; 
0x000000000009091b: movsx eax, cl; neg eax; ret; 
0x00000000000909c0: movsx eax, dl; sub eax, ecx; ret; 
0x000000000005ec87: movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000005ec8b: movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000007362b: movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x73610; mov eax, r9d; ret; 
0x000000000005ec86: movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000000b5748: movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000000b0ee: movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000000b4777: movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x00000000000b4555: movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000b5b21: movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000000b4556: movsxd rax, dword ptr [rax + rcx*4]; add rax, r8; jmp rax; 
0x000000000002139e: movsxd rax, dword ptr [rax - 0x77]; adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020cde: movsxd rax, dword ptr [rax - 0x77]; add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000058d61: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000058d61: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58d70; ret; 
0x000000000000b0ef: movsxd rax, dword ptr [rbp + rax*4]; add rax, r13; jmp rax; 
0x000000000005aaaf: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000005aa38: movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000006ea85: movsxd rax, dword ptr [rbx - 0x52743]; call qword ptr [rax]; 
0x000000000008bb8d: movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000007c337: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000b5b22: movsxd rax, dword ptr [rcx + rbx*4]; add rax, r9; jmp rax; 
0x000000000005096d: movsxd rax, dword ptr [rcx]; add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000008bb8e: movsxd rax, dword ptr [rcx]; add rax, rcx; jmp rax; 
0x000000000008c4b5: movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x00000000000b4778: movsxd rax, dword ptr [rdi + rax*4]; add rax, r15; jmp rax; 
0x000000000007c967: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000008c4b6: movsxd rax, dword ptr [rdi]; add rax, rdi; jmp rax; 
0x00000000000949b7: movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000000ae86: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000056224: movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000949b8: movsxd rax, dword ptr [rdx]; add rax, rdx; jmp rax; 
0x000000000007c1cb: movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000051ad8: movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000051b92: movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000000182b7: movsxd rax, dword ptr [rsp + 4]; jne 0x182c2; add rsp, 0x18; ret; 
0x00000000000b5749: movsxd rax, dword ptr [rsp + rax*4]; add rax, r12; jmp rax; 
0x000000000009d2ad: movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x00000000000505a7: movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000050554: movsxd rax, ecx; ret; 
0x000000000004783b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000049488: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000048ca8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000049098: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000488b8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004839b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047b7b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004735b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000048a57: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047ebb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004769b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000046e7b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004805b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000048f48: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048768: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000049878: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000471bb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000472f1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047ff1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047b11: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048e49: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000049779: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000048331: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047631: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000047151: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047e51: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000048f99: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000487b9: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000091066: movsxd rbp, dword ptr [rip + 0x3349646c]; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000008f43b: movsxd rbx, dword ptr [rax]; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d2a7: movsxd rbx, dword ptr [rdi]; adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000050599: movsxd rbx, ecx; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000035c4d: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000004da29: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000377ba: movsxd rcx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000035c4e: movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000004da2a: movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000002744d: movsxd rcx, dword ptr [rcx]; add byte ptr [rax - 0x17], dl; ret; 
0x0000000000051b00: movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000505e3: movsxd rcx, ecx; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000000505e7: movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000016467: movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000006856f: movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000020d49: movsxd rdi, dword ptr [rbp - 0x3b140001]; nop; mov eax, 0xffffffff; ret; 
0x0000000000068570: movsxd rdi, dword ptr [rbx + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000002e809: movsxd rdi, dword ptr [rcx + 0x250001]; or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x0000000000016468: movsxd rdi, dword ptr [rdx + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000000be935: movsxd rdi, eax; call qword ptr [rax]; 
0x000000000002d0ab: movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000068d78: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000373ef: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373f0: movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001617f: movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000008d991: movsxd rdx, esp; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000008d990: movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000068070: movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x000000000005ba3d: movsxd rsi, dword ptr [r9 + r14*4]; add rsi, r9; jmp rsi; 
0x000000000005b963: movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x0000000000068071: movsxd rsi, dword ptr [rax + rcx*4]; add rsi, r8; jmp rsi; 
0x000000000005b964: movsxd rsi, dword ptr [rcx + rbp*4]; add rsi, r9; jmp rsi; 
0x000000000005ba3e: movsxd rsi, dword ptr [rcx + rsi*4]; add rsi, r9; jmp rsi; 
0x00000000000bd9b1: movsxd rsi, edi; inc dword ptr [rax - 0xf00089c]; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x000000000004fa0c: movsxd rsi, esi; ret 0x7520; 
0x000000000006e51a: movsxd rsp, dword ptr [rdi]; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000000b4515: movups xmm0, xmmword ptr [rip + 0x20d2c]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000508a7: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000a941e: movups xmm0, xmmword ptr [rsp - 4]; ret; 
0x00000000000a9464: movups xmm0, xmmword ptr [rsp - 8]; ret; 
0x00000000000508aa: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000050a28: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000050acf: movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050b56: movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050b57: movups xmmword ptr [rbx], xmm0; ret; 
0x0000000000050ad0: movups xmmword ptr [rbx], xmm4; ret; 
0x0000000000050ac2: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050ac6: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050acb: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050aca: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050abf: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000050a30: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000050b4a: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050b4e: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000050b52: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000508b2: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000050a34: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000050a07: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000050a39: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000050a0c: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000050a11: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000050a16: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000050a2d: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000508af: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000050b47: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000b4525: movups xmmword ptr [rsp - 0x28], xmm0; ret; 
0x0000000000085191: movzx eax, al; add rsp, 0x58; ret; 
0x00000000000b5745: movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000094708: movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007c1c7: movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000a95ec: movzx eax, al; neg eax; ret; 
0x000000000009ccb9: movzx eax, al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000035543: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000005c9e0: movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000001f720: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000941a7: movzx eax, byte ptr [r8 + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x94198; mov rax, rsi; ret; 
0x000000000002fe1d: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000941a8: movzx eax, byte ptr [rax + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x94198; mov rax, rsi; ret; 
0x0000000000021b7b: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b78be: movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000020921: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ce0e: movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x00000000000229af: movzx eax, byte ptr [rax]; ret; 
0x000000000006e5fb: movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x275e1a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000079487: movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000035bf4: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000035c14: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000035bda: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000034294: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000035964: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000b1ced: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x104c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b033d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x11e78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae36d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x13e48]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe0d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x163a8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000049ad8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x786dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048468: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x79d4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468b8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x7b8fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000044768: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x7da4d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000002fcaf: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000002fc48: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000004fa30: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000004fa90: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000004fa80: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000004fa70: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000004fa60: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000004fa50: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000004fa40: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000004fdea: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x4ff65; xor eax, eax; ret; 
0x0000000000036b00: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000368b3: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000004fa17: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000000b1d13: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x104a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b0363: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x11e53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ae393: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x13e23]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000abe33: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x16383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048483: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x79d33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000468d3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x7b8e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000044783: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x7da33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000359e0: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000035520: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000002fc63: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000020930: movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ce20: movzx eax, byte ptr [rdx]; ret; 
0x000000000006ec9d: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275778]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e645: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x275dd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000001f721: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x0000000000051b60: movzx eax, cl; pop rbx; ret; 
0x0000000000051634: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000005ed51: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000051b10: movzx eax, dl; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000051633: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000005ed50: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000b5b1e: movzx ebx, bl; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000000794bb: movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x26b75a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000005006a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50060; ret; 
0x000000000005011a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x50110; ret; 
0x00000000000503da: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x503d0; sub rax, 1; ret; 
0x000000000002fc44: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000002ff06: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x2fef0; xor eax, eax; sub eax, ecx; ret; 
0x0000000000036b04: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000050988: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000002fc60: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000000359e3: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000b4552: movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000509ac: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000007a111: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae04]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000007a0be: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae57]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079b91: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26ae84]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079f30: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26afe5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079eeb: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b02a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079ea6: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b06f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000079e57: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26b0be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e5aa: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275d6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e959: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275ebc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e90b: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275f0a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e85c: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x275fb9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e800: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276015]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e560: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2762b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e512: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276303]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000006e0b1: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x276464]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000016464: movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000002d090: movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x2d080; sub rax, 0x10; ret; 
0x000000000002fe21: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000005028a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x50280; lea rax, [rcx - 1]; ret; 
0x0000000000035bf9: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000035c19: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000035bdf: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000b05d8: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x11bdd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000ae678: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x13b3d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000004868f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x79b26]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000046b5f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x7b656]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000034298: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000035968: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000002fcb3: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000350c3: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x350cd; xchg eax, edx; sub eax, edx; ret; 
0x000000000004fa34: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000004fa94: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000004fa84: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000004fa74: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000004fa64: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000004fa54: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000004fa44: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000003ebe0: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000368b7: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000004fa1b: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000003f2c0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000035523: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000051ba0: movzx edx, cl; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000035549: movzx edx, dl; sub eax, edx; ret; 
0x000000000003eb60: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000003f250: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000020e21: movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000020e22: movzx esi, byte ptr [rsi]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000000509b1: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000949a6: movzx esp, ah; mov rcx, qword ptr [rbp - 0x628]; mov r11, qword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094fc6: movzx esp, ah; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x00000000000b5b1d: movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000000949a5: movzx r12d, r12b; mov rcx, qword ptr [rbp - 0x628]; mov r11, qword ptr [rbp - 0x630]; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000094fc5: movzx r12d, r12b; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000027f48: mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000081507: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000038045: neg dword ptr [rdx + 8]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000056527: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055c37: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000056867: neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000229ef: neg eax; ret; 
0x000000000008e222: neg eax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000008e221: neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000082a28: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x000000000005824b: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002daf3: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000352e8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000352c8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000017cb8: nop dword ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000023f08: nop dword ptr [rax + rax]; call rax; 
0x000000000008edfb: nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x25c4c1], 0; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x00000000000208d3: nop dword ptr [rax + rax]; cmp eax, -1; je 0x20858; mov eax, 0xffffffff; ret; 
0x0000000000020ac3: nop dword ptr [rax + rax]; cmp eax, -1; je 0x20a48; mov eax, 0xffffffff; ret; 
0x000000000004e7b8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000004e7c8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000004e7d8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000004e7e8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000004e7f8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000004e738: nop dword ptr [rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000004e748: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000004e758: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000004e768: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000004e778: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000004e788: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000004e798: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000004e7a8: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000004e728: nop dword ptr [rax + rax]; lea rax, [rdi]; ret; 
0x000000000009c978: nop dword ptr [rax + rax]; lea rax, [rip + 0x24e1d9]; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000005a928: nop dword ptr [rax + rax]; lea rax, [rip + 0x28d9c9]; ret; 
0x000000000002252b: nop dword ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000001cb58: nop dword ptr [rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000004e188: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004db68: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000004e1ab: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000004db78: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000002d9bb: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000005767b: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000005767b: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x0000000000056008: nop dword ptr [rax + rax]; mov eax, 0x27; syscall; 
0x0000000000056008: nop dword ptr [rax + rax]; mov eax, 0x27; syscall; ret; 
0x0000000000058e5b: nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000058e5b: nop dword ptr [rax + rax]; mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x0000000000084eab: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000084eab: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x0000000000084ec8: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x0000000000084ec8: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x0000000000084eb8: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x0000000000084eb8: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x0000000000084ed8: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x0000000000084ed8: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x000000000005764b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000005764b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x0000000000057618: nop dword ptr [rax + rax]; mov eax, 0xb; syscall; 
0x0000000000052a1b: nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x0000000000052a1b: nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; ret; 
0x0000000000022818: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000000b753b: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x000000000002253b: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000058d8b: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x292652]; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000058cab: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x2927ea]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000005945b: nop dword ptr [rax + rax]; mov eax, edi; ror ax, 8; ret; 
0x0000000000055fc8: nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000007df93: nop dword ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000003ea48: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004db9b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000059598: nop dword ptr [rax + rax]; mov qword ptr [rax + 0x20], rsi; ret; 
0x00000000000b6938: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000021778: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000000882db: nop dword ptr [rax + rax]; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000005900b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000000b45a3: nop dword ptr [rax + rax]; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x0000000000068d88: nop dword ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000068da8: nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dc8: nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000000a8ab: nop dword ptr [rax + rax]; mov rax, -0x58; add rax, qword ptr fs:[0]; ret; 
0x00000000000565c3: nop dword ptr [rax + rax]; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000852a3: nop dword ptr [rax + rax]; mov rax, -0x58; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000068d6b: nop dword ptr [rax + rax]; mov rax, -0x70; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000021acb: nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000016c18: nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x0000000000082a48: nop dword ptr [rax + rax]; mov rax, 1; ret; 
0x0000000000082a58: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x0000000000082a68: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x0000000000082a78: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x0000000000082a88: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x0000000000082a98: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x0000000000082aa8: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x0000000000091518: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 8]; ret; 
0x000000000008bea8: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000002320b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007f7f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000022888: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b6908: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000b6948: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000000b6998: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000000b6958: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000000233ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x000000000005d688: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x28de81]; ret; 
0x0000000000022868: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x00000000000b46c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000082eeb: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000081d28: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x0000000000022898: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000004e21b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000004dbfb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000055c2b: nop dword ptr [rax + rax]; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005692b: nop dword ptr [rax + rax]; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000004dbdb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000002a4db: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x000000000002d798: nop dword ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x00000000000909b8: nop dword ptr [rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x000000000004fa8b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000004fa7b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000004fa6b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000004fa5b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000004fa4b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000004fa3b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000000359db: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000002092b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001ce18: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x000000000005ed4b: nop dword ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000003ebd8: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb58: nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000057673: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000058e53: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000084ea3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000057643: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000052a13: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x000000000003ea41: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000068da1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dc1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000016c11: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000003ebd1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb51: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000b1d76: nop dword ptr [rax + rax]; nop; mov eax, 0x26; syscall; 
0x0000000000059036: nop dword ptr [rax + rax]; nop; mov eax, 0x29; syscall; 
0x0000000000058e27: nop dword ptr [rax + rax]; nop; mov eax, 0x31; syscall; 
0x0000000000058d56: nop dword ptr [rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000016c0b: nop dword ptr [rax + rax]; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000008b58b: nop dword ptr [rax + rax]; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000001b708: nop dword ptr [rax + rax]; pop rbx; ret; 
0x0000000000008cb3: nop dword ptr [rax + rax]; ret; 
0x0000000000021c13: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000007f553: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000002d01b: nop dword ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000000353fb: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000081368: nop dword ptr [rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000021798: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000081888: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000055c58: nop dword ptr [rax + rax]; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000004e568: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000082a1c: nop dword ptr [rax]; add rax, 1; ret; 
0x000000000003725c: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000000352d9: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x00000000000352f9: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000008107c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000810cc: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000b6889: nop dword ptr [rax]; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0xb6878; add rsp, 8; ret; 
0x00000000000b757c: nop dword ptr [rax]; cmp dil, 0x50; jne 0xb759b; xor eax, eax; ret; 
0x00000000000b75cc: nop dword ptr [rax]; cmp dil, 0x50; jne 0xb75eb; xor eax, eax; ret; 
0x00000000000b751d: nop dword ptr [rax]; cmp dil, 4; jne 0xb7535; mov eax, 8; ret; 
0x0000000000029a0d: nop dword ptr [rax]; mov dword ptr [rip + 0x2c0406], 0; ret; 
0x000000000002d73d: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000005650c: nop dword ptr [rax]; mov eax, 0x18; syscall; 
0x000000000005650c: nop dword ptr [rax]; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x56520; ret; 
0x000000000007f7e5: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000056959: nop dword ptr [rax]; mov eax, 1; syscall; 
0x0000000000056c0d: nop dword ptr [rax]; mov eax, 3; syscall; 
0x000000000005698c: nop dword ptr [rax]; mov eax, 8; syscall; 
0x00000000000b8aa9: nop dword ptr [rax]; mov eax, dword ptr [rdi]; test eax, eax; jne 0xb8ac0; ret; 
0x000000000009d74c: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x24dd4a]; ret; 
0x00000000000574bc: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x293f22]; test eax, eax; jne 0x574e0; mov eax, 0x4a; syscall; 
0x000000000004dbcd: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000007dda5: nop dword ptr [rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000003f169: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000058d2c: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000016e1d: nop dword ptr [rax]; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009ce75: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000002323c: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c458d], rax; ret; 
0x000000000002322c: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2c45a5], rax; ret; 
0x0000000000065bd9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x284d71]; ret; 
0x000000000005d67d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28de81]; ret; 
0x00000000000b75a1: nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; ret; 
0x000000000002497c: nop dword ptr [rax]; mov rax, rdx; ret; 
0x000000000004dc1d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000004dc2d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000055c74: nop dword ptr [rax]; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000058f14: nop dword ptr [rax]; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000003efa9: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000029c14: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000002cb1c: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000004dc7c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000004e2fd: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000004dc69: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000003551d: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000051b59: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x000000000003f2b9: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000003f249: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000352c2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000004db73: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000022843: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000007f7f3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000022883: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b6903: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000022862: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x0000000000050402: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000081882: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000008b63c: nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000005218c: nop dword ptr [rax]; pop rbx; ret; 
0x0000000000023efd: nop dword ptr [rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000008c71: nop dword ptr [rax]; ret; 
0x0000000000020e85: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000056889: nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000000a144: nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000082a27: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x00000000000352c7: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000004e7b7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000004e7c7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000004e7d7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000004e7e7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000004e7f7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000004e737: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000004e747: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000004e757: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000004e767: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000004e777: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000004e787: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000004e797: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000004e7a7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000004e727: nop dword ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000005a927: nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x28d9c9]; ret; 
0x000000000001cb57: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000004e187: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004db67: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000004db77: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000022847: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000055fc7: nop dword ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000003ea47: nop dword ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000068da7: nop dword ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dc7: nop dword ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000022827: nop dword ptr cs:[rax + rax]; mov rax, -1; ret; 
0x0000000000016c17: nop dword ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000082a47: nop dword ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000007f7f7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000022887: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b6907: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000022867: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x0000000000022897: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x00000000000909b7: nop dword ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x000000000003ebd7: nop dword ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb57: nop dword ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000057672: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000058e52: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000084ea2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000057642: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000052a12: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x00000000000b1d75: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x26; syscall; 
0x0000000000059035: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x29; syscall; 
0x0000000000058e26: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x31; syscall; 
0x0000000000058d55: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x000000000001b707: nop dword ptr cs:[rax + rax]; pop rbx; ret; 
0x0000000000081367: nop dword ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000050407: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000081887: nop dword ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000055c57: nop dword ptr cs:[rax + rax]; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000004e567: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000005824a: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000352e7: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000017cb7: nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000023f07: nop word ptr [rax + rax]; call rax; 
0x000000000002252a: nop word ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000002d9ba: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000008b59a: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000007df92: nop word ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000004db9a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000021777: nop word ptr [rax + rax]; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000068d87: nop word ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000000565c2: nop word ptr [rax + rax]; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000852a2: nop word ptr [rax + rax]; mov rax, -0x58; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000068d6a: nop word ptr [rax + rax]; mov rax, -0x70; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000022807: nop word ptr [rax + rax]; mov rax, -1; ret; 
0x000000000008bea7: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000000233aa: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x0000000000081d27: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x000000000004dbfa: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000005737a: nop word ptr [rax + rax]; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005692a: nop word ptr [rax + rax]; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000002a4da: nop word ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x000000000002d797: nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000005ed4a: nop word ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000009cc2a: nop word ptr [rax + rax]; pop rbx; ret; 
0x0000000000008cb2: nop word ptr [rax + rax]; ret; 
0x0000000000021c12: nop word ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000007f552: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000002d01a: nop word ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x0000000000021797: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000082a26: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x00000000000352c6: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000004e7b6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000004e7c6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000004e7d6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000004e7e6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000004e7f6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000004e736: nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000004e746: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000004e756: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000004e766: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000004e776: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000004e786: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000004e796: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000004e7a6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000004e726: nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000005a926: nop word ptr cs:[rax + rax]; lea rax, [rip + 0x28d9c9]; ret; 
0x000000000001cb56: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000004e186: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004db66: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000004db76: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000022846: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000055fc6: nop word ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000003ea46: nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000068da6: nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dc6: nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000022826: nop word ptr cs:[rax + rax]; mov rax, -1; ret; 
0x0000000000016c16: nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000082a46: nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000007f7f6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000022886: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b6906: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000022866: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x0000000000022896: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x00000000000909b6: nop word ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x000000000003ebd6: nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb56: nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000057671: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000058e51: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000084ea1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000057641: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000052a11: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x00000000000b1d74: nop word ptr cs:[rax + rax]; nop; mov eax, 0x26; syscall; 
0x0000000000059034: nop word ptr cs:[rax + rax]; nop; mov eax, 0x29; syscall; 
0x0000000000058e25: nop word ptr cs:[rax + rax]; nop; mov eax, 0x31; syscall; 
0x0000000000058d54: nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x000000000001b706: nop word ptr cs:[rax + rax]; pop rbx; ret; 
0x0000000000081366: nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000050406: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000081886: nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000055c56: nop word ptr cs:[rax + rax]; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000004e566: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000007df91: nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000000be0e0: nop; adc al, bh; jmp qword ptr [rax]; 
0x00000000000bdec8: nop; adc edi, eax; jmp qword ptr [rax]; 
0x00000000000e0edd: nop; add byte ptr [rax], al; adc ah, dl; cli; jmp qword ptr [rsi + 7]; 
0x000000000006875e: nop; add byte ptr [rax], al; add al, ch; leave; and bh, dl; jmp qword ptr [rsi + 0xf]; 
0x000000000001df42: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c433ca8; ret; 
0x000000000003e317: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000008647: nop; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000007f96b: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x000000000007fa65: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x0000000000035f6c: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000e0e7d: nop; add byte ptr [rax], al; and dl, dl; cli; jmp qword ptr [rsi]; 
0x00000000000e0e29: nop; add byte ptr [rax], al; je 0xe0dfe; cli; jmp qword ptr [rdx]; 
0x00000000000e0e45: nop; add byte ptr [rax], al; or cl, dl; cli; jmp qword ptr [rdx]; 
0x00000000000d6268: nop; add byte ptr cs:[rax], al; cwde; cmp esp, esi; jmp rax; 
0x00000000000853cc: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000052ae8: nop; add dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x000000000005cb1f: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009ffdf: nop; add rsp, 8; ret; 
0x00000000000810df: nop; bsf eax, eax; sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000810ef: nop; bsf eax, eax; sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000004e10f: nop; bsf rdx, rdx; lea r11, [rip + 0x70965]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004daef: nop; bsf rdx, rdx; lea r11, [rip + 0x70f05]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000005d254: nop; call 0x5a9a0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000009d8cf: nop; call rax; 
0x000000000005d260: nop; call rsi; 
0x00000000000be995: nop; clc; call qword ptr [rax - 0x6e]; 
0x00000000000be7d4: nop; clc; call qword ptr [rax]; 
0x00000000000bde00: nop; fdiv st(7); call qword ptr [rax - 0x26]; 
0x00000000000bbf34: nop; hlt; jmp qword ptr [rax - 0xd]; 
0x000000000009216f: nop; jmp rdx; 
0x00000000000be9c8: nop; lahf; clc; jmp rax; 
0x0000000000056b3f: nop; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000000090fd: nop; leave; ret; 
0x00000000000be980: nop; mov al, bh; push qword ptr [rax]; mov bh, al; call rax; 
0x00000000000bdc70: nop; mov bh, 0xf7; jmp qword ptr [rax - 0x47]; 
0x0000000000038eef: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000008b0bf: nop; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000009414f: nop; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000023413: nop; mov dword ptr [rip + 0x2c43d6], 1; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000233d3: nop; mov dword ptr [rip + 0x2c4416], 1; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233b3: nop; mov dword ptr [rip + 0x2c4436], 1; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x0000000000023433: nop; mov dword ptr [rip + 0x2c6a0a], eax; ret; 
0x00000000000390cf: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000392af: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000090aa1: nop; mov eax, 0x15; syscall; 
0x00000000000b1d7f: nop; mov eax, 0x26; syscall; 
0x00000000000b1d7f: nop; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xb1d90; ret; 
0x000000000005903f: nop; mov eax, 0x29; syscall; 
0x000000000005903f: nop; mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x59050; ret; 
0x0000000000058e2f: nop; mov eax, 0x31; syscall; 
0x0000000000058e2f: nop; mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000084e7f: nop; mov eax, 0x3f; syscall; 
0x0000000000084e7f: nop; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x84e90; ret; 
0x0000000000058d5f: nop; mov eax, 0x63; syscall; 
0x0000000000058d5f: nop; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x58d70; ret; 
0x00000000000d7780: nop; mov eax, 0xc8380000; sti; jmp rax; 
0x00000000000590c4: nop; mov eax, 0xca; syscall; 
0x0000000000020d4f: nop; mov eax, 0xffffffff; ret; 
0x000000000008f78f: nop; mov eax, 1; pop rbx; ret; 
0x0000000000008d97: nop; mov eax, dword ptr [rbp - 0x1c]; leave; ret; 
0x0000000000008fe0: nop; mov eax, dword ptr [rbp - 0xc]; leave; ret; 
0x00000000000568bf: nop; mov eax, dword ptr [rip + 0x294b22]; test eax, eax; jne 0x568e0; mov eax, 1; syscall; 
0x000000000003948f: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004e1bf: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000000232b3: nop; mov qword ptr [rip + 0x2c456d], rax; ret; 
0x0000000000023243: nop; mov qword ptr [rip + 0x2c458d], rax; ret; 
0x0000000000023233: nop; mov qword ptr [rip + 0x2c45a5], rax; ret; 
0x0000000000068f1f: nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000009c6ff: nop; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000b689f: nop; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000000b698f: nop; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000002340f: nop; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2c43d6], 1; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000b46bf: nop; mov rax, qword ptr [rsi + 0xb8]; ret; 
0x000000000004dc0f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000004dc3f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000004dc4f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000565af: nop; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005689f: nop; mov rdx, -0x58; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000004e20f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000004dcaf: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000004dc5f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bfa44: nop; movsd dword ptr [rdi], dword ptr [rsi]; stc; push qword ptr [rax - 0x5b]; stc; call qword ptr [rax - 0x5b]; 
0x000000000002744c: nop; movsxd rcx, dword ptr [rcx]; add byte ptr [rax - 0x17], dl; ret; 
0x0000000000016c10: nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000082a25: nop; nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000004e7b5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000004e7c5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000004e7d5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000004e7e5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000004e7f5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000004e735: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000004e745: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000004e755: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000004e765: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000004e775: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000004e785: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000004e795: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000004e7a5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000004e725: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000005a925: nop; nop word ptr cs:[rax + rax]; lea rax, [rip + 0x28d9c9]; ret; 
0x0000000000082a45: nop; nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x0000000000022895: nop; nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000081365: nop; nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000055c55: nop; nop word ptr cs:[rax + rax]; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000004e565: nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000000be96c: nop; pop rdi; clc; call qword ptr [rax]; 
0x00000000000bdeb4: nop; sal edi, cl; jmp rax; 
0x00000000000be7e4: nop; sub al, 0xf8; call qword ptr [rax]; 
0x00000000000be7ec: nop; sub edi, eax; call qword ptr [rax]; 
0x000000000002256f: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000003540f: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000000be804: nop; xor al, bh; call qword ptr [rax]; 
0x00000000000d62d0: nop; xor dword ptr [rax], eax; add byte ptr [rax + 0x48], bh; hlt; call rax; 
0x000000000001e9bf: nop; xor eax, eax; ret; 
0x0000000000017ca9: not edx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000017ca8: not rdx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000080474: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1422; cmove rax, rdx; ret; 
0x000000000002e814: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1b512; cmove rax, rdx; ret; 
0x000000000002db24: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1c832; cmove rax, rdx; ret; 
0x000000000002e7e4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x6922; cmove rax, rdx; ret; 
0x0000000000080544: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x892; cmove rax, rdx; ret; 
0x0000000000081df4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x00000000000804a4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xf32; cmove rax, rdx; ret; 
0x0000000000034417: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048e4f: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034445: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000852b2: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000085261: or al, 0; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000027f4c: or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000081e48: or al, 0; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000007957c: or al, 0; add byte ptr [rcx + 1], al; ret 0x8b48; 
0x0000000000081dea: or al, 0; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000008ccf0: or al, 0x13; add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000050966: or al, 0x16; cmp rdi, r9; jb 0x50ad4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000050cc1: or al, 0x16; cmp rdi, r9; jb 0x50e91; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005110c: or al, 0x16; cmp rdi, r9; jb 0x5134c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000002fc46: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000002ff08: or al, 0x16; test al, al; jne 0x2fef0; xor eax, eax; sub eax, ecx; ret; 
0x0000000000027f1a: or al, 0x1e; mov rax, rsi; pop rbx; ret; 
0x00000000000b9c9a: or al, 0x23; add cl, ch; jle 0xb9c79; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000005bc88: or al, 0x24; call rax; 
0x000000000001d513: or al, 0x24; mov rdi, rbx; call rax; 
0x0000000000016db1: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x16e03; add rsp, 0x148; ret; 
0x000000000001998b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019aec: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019bac: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19bbc; add rsp, 0xd8; ret; 
0x000000000005668f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56749; add rsp, 0x68; ret; 
0x00000000000567a1: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x567eb; add rsp, 0x58; ret; 
0x0000000000056a22: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b31: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56b83; add rsp, 0x68; ret; 
0x000000000007609c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c0fc: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7c10c; add rsp, 0xd8; ret; 
0x0000000000084ff4: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x850b9; add rsp, 0x78; ret; 
0x0000000000085106: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85153; add rsp, 0x58; ret; 
0x0000000000085238: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8525b; add rsp, 0x38; ret; 
0x00000000000917df: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x91813; add rsp, 0x38; ret; 
0x000000000009189f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091a00: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091ccf: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000a9595: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xa95ac; add rsp, 0x38; ret; 
0x00000000000d6230: or al, 0x2d; add byte ptr [rax], al; clc; sub ah, dh; jmp qword ptr [rax]; 
0x000000000002e5c0: or al, 0x33; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000008f3e9: or al, 0x37; jae 0x8f391; xor eax, eax; ret; 
0x00000000000dbbf4: or al, 0x3e; add byte ptr [rax], al; sbb byte ptr [rdi], bl; cmc; jmp qword ptr [rbx]; 
0x00000000000dbcf4: or al, 0x3f; add byte ptr [rax], al; sbb byte ptr [rdi], ah; cmc; call qword ptr [rsi]; 
0x00000000000d9844: or al, 0x44; hlt; call qword ptr [rdi + 2]; 
0x00000000000d6668: or al, 0x48; add byte ptr [rax], al; or bl, dl; hlt; jmp qword ptr [rax]; 
0x0000000000055c21: or al, 0x48; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056bdd: or al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000000a051: or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000020834: or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000009d5a2: or al, 0x48; mov edx, dword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000009d073: or al, 0x5b; pop rbp; pop r12; ret; 
0x0000000000083369: or al, 0x5d; pop r12; pop r14; ret; 
0x0000000000059302: or al, 0x5d; pop r12; ret; 
0x000000000007c463: or al, 0x7e; ret 0x8944; 
0x000000000006b8cb: or al, 0x83; ret; 
0x0000000000051b01: or al, 0x86; add rcx, rsi; jmp rcx; 
0x0000000000070b3a: or al, 0x89; ret 0xc689; 
0x0000000000051b8b: or al, 0x89; ret 0xe283; 
0x0000000000044774: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000da784: or al, 0x8b; hlt; call qword ptr [rbx]; 
0x0000000000041f69: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000035c4f: or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000004da2b: or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da2f: or al, 0xb; jmp rcx; 
0x00000000000d79b0: or al, 0xc5; add byte ptr [rax], al; or dh, dl; cld; jmp qword ptr [rax]; 
0x0000000000056bd4: or al, 0xe8; xchg byte ptr [rip + 0x448b0000], ah; and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x000000000006485f: or al, 0xe9; ret; 
0x000000000007f48c: or al, 0xeb; ret 0x5590; 
0x00000000000e12e4: or al, 0xf2; cli; call rdx; 
0x000000000003ede3: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000000d617d: or al, 0xf4; call qword ptr [rax + 0x29]; 
0x00000000000d6175: or al, 0xf4; call rsp; 
0x00000000000d6175: or al, 0xf4; call rsp; sub byte ptr [rax], al; add al, ch; or al, 0xf4; call qword ptr [rax + 0x29]; 
0x000000000007429d: or al, 0xf6; ret 0xf01; 
0x00000000000b68d6: or al, 0xf7; cmp al, 8; jne 0x8718; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x00000000000be881: or al, 0xf8; call qword ptr [rax + 0xd]; 
0x00000000000be881: or al, 0xf8; call qword ptr [rax + 0xd]; clc; call rax; 
0x00000000000be845: or al, 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000be845: or al, 0xf8; call qword ptr [rax + 0xe]; clc; call rax; 
0x00000000000d7005: or al, 0xf9; call qword ptr [rax - 0x79]; 
0x00000000000d700d: or al, 0xf9; ljmp [rax - 0x79]; add byte ptr [rax], al; sbb byte ptr [rdi], cl; stc; call rax; 
0x0000000000068568: or al, 0xf; xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000081e42: or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000008046f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x000000000002e80f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000002db1f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x000000000002e7df: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000008053f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000081def: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000008049f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000000794bd: or al, 7; lea rax, [rip + 0x26b75a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000002cfe1: or al, 9; ret 0xbae9; 
0x000000000008eb02: or al, al; and eax, 0xc058b00; shl byte ptr [rip + 0x138b4100], 0x39; ret 0x840f; 
0x00000000000be115: or al, bh; call qword ptr [rax + 8]; 
0x00000000000be115: or al, bh; call qword ptr [rax + 8]; clc; call rax; 
0x00000000000be119: or al, bh; call rax; 
0x00000000000be311: or al, bh; jmp qword ptr [rax + 8]; 
0x00000000000be195: or al, bh; jmp qword ptr [rdx]; 
0x00000000000be315: or al, bh; jmp rax; 
0x00000000000345f7: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000479e1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034625: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000b65ed: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000057651: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000057651: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x00000000000a1637: or al, byte ptr [rax]; add byte ptr [rbp + 0x31], al; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0x49]; 
0x00000000000c8835: or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x00000000000c882d: or al, byte ptr [rax]; add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x0000000000017e0a: or al, byte ptr [rax]; lea rdi, [rip + 0xa46ba]; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x0000000000017e11: or al, byte ptr [rax]; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x000000000001617c: or al, byte ptr [rax]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000016462: or al, byte ptr [rax]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000000139bc: or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x000000000001052d: or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000059b46: or al, byte ptr [rcx + rcx*8 - 0x7cb7ed8c]; ret 0x4801; 
0x00000000000e11eb: or al, byte ptr [rcx]; ret; 
0x000000000004e046: or al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b12d7: or al, byte ptr es:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000903b4: or al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; rol dword ptr [rax], cl; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000000ffe7: or al, ch; movabs byte ptr [0xe90824448b480001], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000009f518: or al, ch; ret 0xf8ad; 
0x0000000000013c98: or al, ch; ret 0xffb2; 
0x0000000000014b97: or al, ch; ret; 
0x00000000000b6b08: or al, ch; xchg eax, edx; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000002d0a8: or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000be109: or bh, al; call rax; 
0x00000000000be109: or bh, al; call rax; or eax, edi; call qword ptr [rax + 9]; 
0x00000000000be105: or bh, al; jmp qword ptr [rax + 0xa]; 
0x00000000000d6cb5: or bh, al; jmp qword ptr [rax]; 
0x00000000000be305: or bh, al; push rax; or eax, edi; jmp qword ptr [rax + 9]; 
0x000000000008b57d: or bh, bh; adc eax, 0x25cc9c; xor eax, eax; add rsp, 8; ret; 
0x000000000008b635: or bh, bh; and eax, 0x25cbe4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000002e4a0: or bh, dh; ret 0; 
0x00000000000d7124: or bh, dl; stc; jmp rax; 
0x000000000000ecdd: or bl, byte ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000006e912: or bl, byte ptr [rdi + 0x27]; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x000000000003efa3: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000057377: or bl, dh; ret; 
0x00000000000d666c: or bl, dl; hlt; jmp qword ptr [rax]; 
0x00000000000373ec: or byte ptr [eax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001c6e1: or byte ptr [r10 + 1], dil; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000005ded6: or byte ptr [r15], 0x8e; ret 1; 
0x0000000000020b56: or byte ptr [r15], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001b501: or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000001735d: or byte ptr [r8 + 0x39], cl; ret; 
0x00000000000229a8: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000000940ff: or byte ptr [r8 + 2], r15b; ret; 
0x00000000000baedc: or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000001b5cf: or byte ptr [r8 - 0x3f], r9b; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000028012: or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000008ef2a: or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000004bed8: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000008f415: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x00000000000887a2: or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x000000000008025d: or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000b14b2: or byte ptr [r8], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000038b64: or byte ptr [r8], r8b; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000094144: or byte ptr [r9 + 0x2b802], r9b; add byte ptr [rax], al; ret; 
0x00000000000b60b9: or byte ptr [r9 + 0x63], r9b; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x00000000000940e0: or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000004bf97: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000000566ec: or byte ptr [rax + 0x101], bh; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000001b502: or byte ptr [rax + 0x29], cl; ret; 
0x000000000001b4ec: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000001d005: or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x00000000000b7378: or byte ptr [rax + 0x39], cl; or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x0000000000060b38: or byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x000000000001735e: or byte ptr [rax + 0x39], cl; ret; 
0x00000000000229a9: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000000d9bbe: or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x00000000000e2011: or byte ptr [rax + 0xb], cl; xor al, 0; add byte ptr [rax], al; xor byte ptr [rdx - 0x423c0000], ah; sti; call qword ptr [rax]; 
0x0000000000023a56: or byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000023ef2: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000009ea9c: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000008d211: or byte ptr [rax + 1], cl; ret; 
0x0000000000094100: or byte ptr [rax + 2], bh; ret; 
0x00000000000b32fb: or byte ptr [rax + 3], cl; add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000000b3727: or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x00000000000e34a3: or byte ptr [rax + rax], dl; add byte ptr [rax], al; sal byte ptr [rsi + 0x40540000], 0xfd; call qword ptr [rbx]; 
0x0000000000091533: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000091532: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000baedd: or byte ptr [rax - 0x397bf0ff], ch; add eax, 0x89490000; ret 0x8349; 
0x00000000000083bb: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x83ca; call rax; 
0x000000000001b5d0: or byte ptr [rax - 0x3f], cl; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x00000000000d7380: or byte ptr [rax - 0x4e380000], ah; cli; jmp qword ptr [rax]; 
0x00000000000232f3: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000057864: or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000091896: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091cc6: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000919f7: or byte ptr [rax - 0x75], cl; and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000028013: or byte ptr [rax - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000000139b1: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000010522: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x00000000000862cf: or byte ptr [rax - 0x75], cl; xor al, ch; cwde; and bh, al; dec dword ptr [rax + 0x39]; ret; 
0x000000000007e374: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7e38c; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000057fce: or byte ptr [rax - 0x77], cl; adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000001a641: or byte ptr [rax - 0x77], cl; call 0x5c4303a4; pop r13; ret; 
0x000000000001a67c: or byte ptr [rax - 0x77], cl; call 0x5c4303df; pop r13; ret; 
0x000000000004bedd: or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000001e990: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000008ef2b: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000573fe: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000000208cb: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x000000000000a6d9: or byte ptr [rax - 0x77], cl; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000005bc85: or byte ptr [rax - 0x77], cl; or al, 0x24; call rax; 
0x000000000004bed9: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000084c89: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000008f2d0: or byte ptr [rax - 0x77], cl; ret; 
0x000000000000a6d8: or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000000887a3: or byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000008f416: or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x0000000000028f90: or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000000695a0: or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000008b057: or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x00000000000a05cd: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008d6c2: or byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000059a00: or byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000057c12: or byte ptr [rax - 0x7d], cl; ret; 
0x000000000001bbe6: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000d78cc: or byte ptr [rax - 4], bh; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x000000000008025e: or byte ptr [rax], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000002461b: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000a127e: or byte ptr [rax], al; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000000348c7: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047b81: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034805: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000021647: or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000000c80: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 6; 
0x0000000000000c20: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret 6; 
0x0000000000000ce0: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 6; 
0x0000000000001958: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x6e0; 
0x0000000000001e08: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000005f22a: or byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x0000000000068f22: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000016ce5: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000051bd5: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000005ca31: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000056991: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000001afe4: or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000002a86c: or byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebx; ret 0x3d83; 
0x000000000000a13c: or byte ptr [rax], al; add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000036990: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000035c4b: or byte ptr [rax], al; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000373ed: or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000dd59e: or byte ptr [rax], al; sub byte ptr [rax], al; add byte ptr [rax], al; mov esp, 0x68000057; sar ebp, 0xff; ret 0; 
0x000000000003d617: or byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000beb6c: or byte ptr [rax], dh; stc; jmp qword ptr [rax]; 
0x000000000004923e: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000009dcbb: or byte ptr [rbp + 0x39481e04], cl; ret 0x830f; 
0x0000000000092581: or byte ptr [rbp + 0x39], cl; ret 0x8b48; 
0x000000000009d9b9: or byte ptr [rbp + 0x440f4cf6], al; ret 0x8b64; 
0x000000000006b39c: or byte ptr [rbp + 0x63840fc0], al; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000080019: or byte ptr [rbp + 0x648d75c9], al; mov dword ptr [rax], 5; mov rax, rdx; pop rbx; ret; 
0x0000000000071680: or byte ptr [rbp + 0x6a840fc0], al; sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e0af2: or byte ptr [rbp + 0xb], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x0000000000022562: or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000092203: or byte ptr [rbp + rcx*4 + 0x24], cl; ret 0x8d4a; 
0x0000000000019c3f: or byte ptr [rbp - 0x627bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000270c2: or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000000bb86e: or byte ptr [rbp - 0x77], cl; ret; 
0x00000000000571fc: or byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0xc221; 
0x0000000000056d13: or byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0xca21; 
0x000000000001c523: or byte ptr [rbx + 0x44], bl; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x000000000001d8d6: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000000aae5: or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000580ce: or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x0000000000028017: or byte ptr [rbx + 0x94807e0], al; ret; 
0x0000000000028016: or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000000de895: or byte ptr [rbx + rcx + 0x2c], cl; add byte ptr [rax], al; add byte ptr [rdx + rbp*2 - 0x60d00000], dh; clc; call qword ptr [rdx]; 
0x0000000000070817: or byte ptr [rbx - 0x1776cf3b], al; pop rbx; pop rbp; ret; 
0x000000000001a169: or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x00000000000591a4: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000008b0c9: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x00000000000d627c: or byte ptr [rbx], bh; hlt; jmp qword ptr [rax]; 
0x00000000000d8fd8: or byte ptr [rbx], dl; hlt; jmp qword ptr [rcx + 1]; 
0x0000000000093eeb: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000094145: or byte ptr [rcx + 0x2b802], cl; add byte ptr [rax], al; ret; 
0x000000000009106d: or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x0000000000088bf2: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x0000000000088bc4: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000075cd9: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x00000000000b3af5: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000007d413: or byte ptr [rcx + 0x415d5bf0], cl; pop rsp; pop r13; ret; 
0x00000000000b60ba: or byte ptr [rcx + 0x63], cl; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x00000000000d9b64: or byte ptr [rcx + 0xb], al; add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rbp + rbx + 0x5ab00000], al; hlt; call qword ptr [rdi]; 
0x000000000007c449: or byte ptr [rcx + 0xf], al; mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x00000000000a93eb: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000092ee0: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x00000000000940e1: or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000b459e: or byte ptr [rcx + rcx*4 + 1], cl; ret; 
0x00000000000b3353: or byte ptr [rcx + rcx*4 + 4], cl; and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x000000000001de26: or byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000b327b: or byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000057c2c: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002c93d: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001b171: or byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000000229e4: or byte ptr [rcx + rdx + 0x31], dh; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x0000000000093ef2: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x00000000000183af: or byte ptr [rcx - 0x3e], bh; xor eax, eax; ret; 
0x000000000005813b: or byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000001b42a: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000004bf98: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000094039: or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x00000000000b1f51: or byte ptr [rcx - 0x77], cl; adc byte ptr [rax + 0x31487], cl; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x00000000000580c6: or byte ptr [rcx - 0x77], cl; push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000001635a: or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x000000000002ab48: or byte ptr [rcx - 0x77], cl; ret; 
0x00000000000270c6: or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000000578d6: or byte ptr [rcx - 0xa], al; ret; 
0x00000000000254ba: or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x0000000000024bcb: or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x000000000001e9aa: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000001a6f2: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x00000000000d313e: or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000008b640: or byte ptr [rdi + 0x315], 4; ret; 
0x000000000008b590: or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000007ca73: or byte ptr [rdi + 0x32], dh; lea rdi, [rip + 0x50eef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000b737c: or byte ptr [rdi + 2], dh; sbb eax, eax; ret; 
0x00000000000b737b: or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x000000000009548e: or byte ptr [rdi + r9 - 0x4a], r8b; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000009548f: or byte ptr [rdi + rcx - 0x4a], al; sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000627cb: or byte ptr [rdi], 0x85; retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000062b57: or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000005ded7: or byte ptr [rdi], 0x8e; ret 1; 
0x00000000000d6cb0: or byte ptr [rdi], ch; add byte ptr [rax + 0xa], bh; clc; jmp qword ptr [rax]; 
0x0000000000020bff: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000018912: or byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000085190: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x00000000000a95eb: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000020b57: or byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b5a3a: or byte ptr [rdi], cl; test byte ptr [rip - 0x16000001], bl; scasd eax, dword ptr [rdi]; sub al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b687a: or byte ptr [rdi], cl; test dword ptr [rdx + 0x48fff51e], edx; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000001aad2: or byte ptr [rdi], cl; test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000092b43: or byte ptr [rdi], cl; xchg eax, edx; ret 0x8949; 
0x000000000000a111: or byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x00000000000506d1: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000041f53: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000008e0fb: or byte ptr [rdx + 1], bh; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000001c6e2: or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000000d73e8: or byte ptr [rdx - 0x3a080000], ah; cli; jmp qword ptr [rax]; 
0x00000000000591dc: or byte ptr [rdx], ah; sub dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000d5a94: or byte ptr [rip + 0x2d08fff3], ch; lcall [rax + 0x70fffded]; out dx, al; std; call qword ptr [rax - 0xb]; 
0x00000000000be0fc: or byte ptr [rip + 0x320fff8], 0xf8; jmp rax; 
0x00000000000d5a98: or byte ptr [rip - 0x1267000d], ch; std; push qword ptr [rax - 0x12]; std; call qword ptr [rax - 0xb]; 
0x00000000000d750c: or byte ptr [rip - 0x57df0005], al; add byte ptr [rax], al; cmp byte ptr [rsi], dl; sti; call qword ptr [rax - 0x58]; 
0x00000000000b60b3: or byte ptr [rip - 0x74beca89], al; or byte ptr [r9 + 0x63], r9b; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000056b44: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x00000000000e11e2: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000000e1216: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000000e124a: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000d674c: or byte ptr [rsi], ah; cmc; call qword ptr [rax + 0x50]; 
0x00000000000d6888: or byte ptr [rsi], bl; add byte ptr [rax - 0x79], bh; cmc; jmp qword ptr [rax]; 
0x00000000000b3591: or byte ptr [rsp + rdi*2 - 0x75], dh; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000003ae06: or byte ptr cs:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c47: or byte ptr ds:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c9: or byte ptr fs:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000375a0: or byte ptr gs:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a626: or byte ptr ss:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e3ac7: or ch, byte ptr [rdi + 5]; ret; 
0x00000000000d6fb4: or ch, ch; clc; dec dword ptr [rax + 0x78000084]; idiv eax; jmp qword ptr [rax]; 
0x0000000000065ce1: or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x000000000001aa64: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x000000000009cdc4: or cl, byte ptr [rax - 0x73]; adc eax, 0x24bd94; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000080672: or cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000006acbe: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000054e2d: or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000003d497: or cl, byte ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009ef0d: or cl, byte ptr [rcx - 0x75]; add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000005be1a: or cl, byte ptr [rdi]; test byte ptr [rsi + 0x49000002], ch; add eax, dword ptr [rdi + 0x10]; call rax; 
0x000000000000b1c8: or cl, byte ptr [rdi]; xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0xb0d62]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000ae77: or cl, byte ptr [rdi]; xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0xb102f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000de893: or cl, byte ptr [rsi]; or byte ptr [rbx + rcx + 0x2c], cl; add byte ptr [rax], al; add byte ptr [rdx + rbp*2 - 0x60d00000], dh; clc; call qword ptr [rdx]; 
0x00000000000d9bb6: or cl, byte ptr [rsi]; sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x000000000003d496: or cl, byte ptr es:[rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d66f4: or cl, ch; hlt; jmp qword ptr [rax]; 
0x000000000000fff1: or cl, ch; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000007ac3b: or cl, ch; jmp rsp; 
0x000000000002afc6: or cl, ch; ret; 
0x00000000000e0e48: or cl, dl; cli; jmp qword ptr [rdx]; 
0x00000000000d6584: or dh, al; hlt; jmp qword ptr [rax + 0x44]; 
0x0000000000034292: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000003eec3: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000007f546: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; jne 0x7f540; lea eax, [rdx + rdi]; ret; 
0x0000000000021c06: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jne 0x21c00; lea eax, [rdx + rdi]; ret; 
0x000000000001bb4b: or dh, byte ptr [rdx + rbp*2 + 0x48]; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000005a3fc: or dh, dh; ret 0x8902; 
0x0000000000024c17: or dh, dh; ret 0xf02; 
0x00000000000d79b4: or dh, dl; cld; jmp qword ptr [rax]; 
0x000000000002a86a: or dword ptr [rax + 0xf000008], 0xffffff93; ret 0x3d83; 
0x000000000005aa3a: or dword ptr [rax + 1], 0xffffffd8; jmp rax; 
0x000000000001692b: or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x00000000000688de: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000004a75e: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x00000000000347d7: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000490ef: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034715: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000001bba7: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000005757d: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000575d2: or dword ptr [rax], eax; add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000000a6c3a: or dword ptr [rax], eax; add byte ptr [rax], bh; ret; 
0x00000000000a4787: or dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0x49]; 
0x000000000006c1d5: or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000002d452: or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000056a3a: or dword ptr [rbp - 0x36], esi; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000037086: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x00000000000556ce: or dword ptr [rbx + rcx*4 + 0x34], ecx; ret 0x348; 
0x000000000001d030: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000002e613: or dword ptr [rbx], esp; add al, byte ptr [rax]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000038233: or dword ptr [rcx + 8], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000076163: or dword ptr [rcx + rdi*8], esp; dec dword ptr [rax - 0x39]; ret 0xff88; 
0x000000000007ea17: or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000004e09e: or dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000016927: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x000000000007cb52: or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x00000000000a2a1c: or dword ptr [rdi], ecx; xchg eax, esi; ret 0x8348; 
0x00000000000b77f9: or dword ptr [rdx + 0x74], edi; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008f786: or dword ptr [rip + 0x258a5b], 1; pop rbx; ret; 
0x000000000003aff3: or dword ptr [rip + 0x63490008], ebp; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000090997: or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x908e6; sub eax, r8d; ret; 
0x0000000000091729: or dword ptr [rsi - 0x76b70001], 0x43; adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000000a2fe: or dword ptr [rsi], eax; add byte ptr cs:[rbx + rbp*8], al; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000004e117: or dword ptr gs:[rdi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b1cbf: or eax, 0x104fc; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000e11e8: or eax, 0x10a0303; ret; 
0x00000000000b05de: or eax, 0x11bdd; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000b030f: or eax, 0x11eac; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000e1240: or eax, 0x1370303; ret; 
0x00000000000ae67e: or eax, 0x13b3d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000be041: or eax, 0x13b4fff8; clc; inc dword ptr [rbx + rdx - 8]; call rsp; 
0x00000000000bdf81: or eax, 0x13d2fff8; clc; jmp qword ptr [rdx + 0x13]; 
0x000000000004e481: or eax, 0x1c478d48; ret; 
0x000000000001cf10: or eax, 0x20; mov dword ptr [rdi], eax; mov rax, -0x58; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000091b12: or eax, 0x247c8b48; sbb al, ch; ret; 
0x000000000000a32b: or eax, 0x2e05db; adc ch, cl; ret; 
0x000000000000a2fd: or eax, 0x2e0609; add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x00000000000be0fd: or eax, 0x320fff8; clc; jmp rax; 
0x00000000000e11d8: or eax, 0x34b0303; ret; 
0x00000000000e120c: or eax, 0x35b0303; ret; 
0x00000000000800d1: or eax, 0x3948fffa; ret; 
0x000000000007f7da: or eax, 0x3b484a8b; cmove r8, rcx; ret; 
0x000000000007c972: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000007c1da: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000016cdf: or eax, 0x41000000; mov edx, 8; mov eax, ecx; syscall; 
0x000000000008bb88: or eax, 0x42d93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000000689ea: or eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000049d72: or eax, 0x48c0bc0f; lea eax, [rdi + rax]; ret; 
0x00000000000819a5: or eax, 0x48fad348; test edx, edx; je 0x819d0; bsf rax, rdx; ret; 
0x000000000007c331: or eax, 0x514ae; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000b1d3: or eax, 0x6348000b; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000003d197: or eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004e478: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000049aaa: or eax, 0x78711; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000048695: or eax, 0x79b26; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000004843a: or eax, 0x79d81; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000046b65: or eax, 0x7b656; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000001c5bd: or eax, 0x81480005; ret; 
0x0000000000034327: or eax, 0x83480000; ret 0x4910; 
0x00000000000476a1: or eax, 0x83480000; ret 0xe910; 
0x0000000000034355: or eax, 0x83480000; ret 0xeb10; 
0x00000000000ba622: or eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000000053a56: or eax, 0x940fc085; ret; 
0x0000000000082682: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x00000000000be03d: or eax, 0xd44fff8; clc; push qword ptr [rbx + rdx + 0x1344fff8]; clc; call rsp; 
0x00000000000bdf7d: or eax, 0xd62fff8; clc; call rdx; 
0x00000000000bdefd: or eax, 0xd76fff8; clc; jmp rsi; 
0x00000000000be0f9: or eax, 0xd80fff8; clc; jmp qword ptr [rax]; 
0x00000000000c8c39: or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x0000000000062415: or eax, 0xea810000; ret 0; 
0x00000000000be885: or eax, 0xed0fff8; clc; call qword ptr [rax + 0x10]; 
0x000000000003ed6a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed73: or eax, 0xf7f0ff3; ret; 
0x0000000000077121: or eax, 0xfb8148; adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b4519: or eax, 0xff30002; pop rsi; add eax, 0x2148c; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000005951b: or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000005652d: or eax, 0xffffffff; ret; 
0x00000000000359a9: or eax, 1; ret; 
0x00000000000d9b65: or eax, dword ptr [r8]; sub byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rip + 0x5ab00000], bl; hlt; call qword ptr [rdi]; 
0x000000000008c4ab: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; cmp eax, 0x42503; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x0000000000034507: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047841: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034535: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000e0af4: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x0000000000057621: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000057621: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x57630; ret; 
0x000000000006f7c9: or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000006c169: or eax, dword ptr [rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000008053a: or eax, dword ptr [rax]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x000000000000ae83: or eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000daf96: or eax, dword ptr [rax]; pushfq; add byte ptr [rax], al; add byte ptr [rcx + rsi - 0x2a500000], dh; hlt; jmp rsi; 
0x00000000000d9b66: or eax, dword ptr [rax]; sub byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rip + 0x5ab00000], bl; hlt; call qword ptr [rdi]; 
0x00000000000d9bc0: or eax, dword ptr [rdx]; jae 0xd9bce; ret; 
0x0000000000049e87: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000be10d: or eax, edi; call qword ptr [rax + 9]; 
0x00000000000be10d: or eax, edi; call qword ptr [rax + 9]; clc; call rax; 
0x00000000000be111: or eax, edi; call rax; 
0x00000000000be111: or eax, edi; call rax; or al, bh; call qword ptr [rax + 8]; 
0x00000000000be309: or eax, edi; jmp qword ptr [rax + 9]; 
0x00000000000be18d: or eax, edi; jmp qword ptr [rdx]; 
0x00000000000be30d: or eax, edi; jmp rax; 
0x0000000000049e8e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000940fb: or eax, edx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000022564: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000005a943: or ebp, dword ptr [rcx]; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000009d08: or ebp, dword ptr [rsi]; add bh, dh; ret 0; 
0x000000000001cb4d: or ebp, edx; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e1799: or ebx, edi; call qword ptr [rdx]; 
0x00000000000e1761: or ebx, edi; jmp qword ptr [rsi]; 
0x000000000003ef33: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000001e9d6: or ebx, esi; ret; 
0x000000000001f8b7: or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000d974a: or ecx, dword ptr [r8 + rax]; add byte ptr [rax + 0x19], ch; add byte ptr [rax], al; cld; cmp dh, ah; jmp rdx; 
0x000000000002d52f: or ecx, dword ptr [rax + 0x63]; ret; 
0x000000000001d8c7: or ecx, dword ptr [rax + 1]; ret 0x8949; 
0x00000000000d974b: or ecx, dword ptr [rax + rax]; add byte ptr [rax + 0x19], ch; add byte ptr [rax], al; cld; cmp dh, ah; jmp rdx; 
0x00000000000508fc: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000ba69f: or ecx, dword ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000054fdc: or ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000003d317: or ecx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000923e3: or ecx, dword ptr [rbp + 0x39]; ret 0x860f; 
0x000000000003c839: or ecx, dword ptr [rbp + rcx*4 + 0x1d]; jg 0x3c855; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007ea15: or ecx, dword ptr [rdi]; or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000002fe17: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000359a0: or ecx, esi; sub rax, rcx; je 0x359b0; sbb eax, eax; or eax, 1; ret; 
0x00000000000be841: or edi, eax; call rax; 
0x00000000000be841: or edi, eax; call rax; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x0000000000085c61: or edi, ebp; dec dword ptr [rax + 0x39]; ret; 
0x000000000004db63: or edi, edi; loope 0x4dbcd; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000004e183: or edi, edi; loope 0x4e1ed; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000001bb9f: or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000575d9: or edx, 0x40; mov eax, ecx; syscall; 
0x00000000000a9417: or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000a945c: or edx, eax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000004a4ef: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000008276b: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000081a50: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000a9459: or edx, ecx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000a9415: or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000b64f1: or esi, 2; mov edi, 1; call rax; 
0x00000000000e2013: or esi, dword ptr [rax + rax]; add byte ptr [rax], al; xor byte ptr [rdx - 0x423c0000], ah; sti; call qword ptr [rax]; 
0x00000000000508fa: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000093f63: or esi, eax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000051663: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000003ee53: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000068f34: or esi, ebx; ret; 
0x00000000000b97c0: or esi, edi; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rax - 0x77]; fidiv dword ptr [rbp - 0x13]; pop rbx; ret; 
0x000000000001d031: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000575d8: or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000003efa2: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x000000000003ef32: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000034291: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000003eec2: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000003ee52: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x0000000000017e09: or r8b, byte ptr [rax]; lea rdi, [rip + 0xa46ba]; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x0000000000017e10: or r8b, byte ptr [rax]; mov edx, 0x6c; call 0xaa30; xor eax, eax; ret; 
0x00000000000e0af3: or r8d, dword ptr [r8]; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx*4 - 0x73c00000], dl; cli; jmp qword ptr [rcx + 0xe]; 
0x0000000000065ce0: or r9b, byte ptr [r8 + 0x39]; ret 0x1176; 
0x00000000000e123f: or rax, 0x1370303; ret; 
0x00000000000e11d7: or rax, 0x34b0303; ret; 
0x00000000000e120b: or rax, 0x35b0303; ret; 
0x000000000007c971: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000007c1d9: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000005652c: or rax, 0xffffffffffffffff; ret; 
0x00000000000b11b2: or rax, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000daf95: or rax, qword ptr [rax]; pushfq; add byte ptr [rax], al; add byte ptr [rcx + rsi - 0x2a500000], dh; hlt; jmp rsi; 
0x00000000000d9bbf: or rax, qword ptr [rdx]; jae 0xd9bce; ret; 
0x0000000000049e86: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000049e8d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000940fa: or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000002fe16: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000003599f: or rcx, rsi; sub rax, rcx; je 0x359b0; sbb eax, eax; or eax, 1; ret; 
0x00000000000a945b: or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000004a4ee: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000008276a: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000081a4f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000a9458: or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000e2012: or rsi, qword ptr [rax + rax]; add byte ptr [rax], al; xor byte ptr [rdx - 0x423c0000], ah; sti; call qword ptr [rax]; 
0x0000000000093f62: or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000000b4510: out 0x20, eax; je 0xb452a; movss xmm0, dword ptr [rip + 0x20d2c]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000007ce31: out 0x26, eax; add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x000000000001a546: out 0x2c, al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000003aa15: out 0x32, eax; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000090999: out 0x41, al; cmp eax, eax; je 0x908e6; sub eax, r8d; ret; 
0x0000000000059120: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x5912c; ret; 
0x000000000007d5e2: out 0x41, eax; call qword ptr [rdi + 0x38]; 
0x00000000000b7325: out 0x41, eax; call rdi; 
0x000000000009ea49: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000093f84: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000779a5: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000077670: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000007e6ed: out 0x48, al; mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000002d098: out 0x48, eax; sub eax, 0x10; ret; 
0x000000000005156b: out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000038f36: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000006d49c: out 0x4c, al; mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000038d66: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e62: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038dae: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000006d4a2: out 0x4c, eax; mov edx, edi; call qword ptr [rax + 0x38]; 
0x0000000000020e27: out 0x4d, eax; lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000037c55: out 0x5e, eax; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007dfb5: out 0x74, eax; xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000058fa4: out 0x89, al; fistp qword ptr [rax + 0x2c]; syscall; 
0x0000000000058ee4: out 0x89, al; fistp qword ptr [rax + 0x2d]; syscall; 
0x00000000000b3281: out 0x89, al; out dx, eax; call qword ptr [rax]; 
0x00000000000b335d: out 0x89, al; out dx, eax; call qword ptr [rcx]; 
0x00000000000b3167: out 0x89, al; out dx, eax; call rax; 
0x000000000001c945: out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x000000000005627f: out 0xbf, al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000005dcf6: out 0xc5, al; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000009cbc6: out 0xc7, al; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000000d1620: out 0xcf, eax; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000006f8a6: out 0xd1, al; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000b7342: out 0xe8, eax; push -0x76000023; ret; 
0x000000000005ac87: out 0xe8, eax; ret; 
0x0000000000051b14: out 0xf0, al; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x000000000003e73a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000003e7ba: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000d3348: out 0xf5, eax; mov ch, 0xab; ret; 
0x00000000000bdd9d: out 0xf7, al; call qword ptr [rax - 0x27]; 
0x00000000000bddbd: out 0xf7, al; call qword ptr [rax]; 
0x00000000000bddbd: out 0xf7, al; call qword ptr [rax]; fincstp; call rax; 
0x00000000000bdddd: out 0xf7, al; call rax; 
0x00000000000bdddd: out 0xf7, al; call rax; fdiv st(7); call qword ptr [rax + 0x70fff7da]; fdivr st(7), st(0); call qword ptr [rax - 0x22]; 
0x00000000000bdd7d: out 0xf7, al; inc dword ptr [rax + 0x40fff7d9]; fcomi st(7); jmp qword ptr [rax]; 
0x00000000000bdd3d: out 0xf7, eax; call rax; 
0x00000000000bdd5d: out 0xf7, eax; push qword ptr [rax + 0x70fff7d9]; fcomi st(7); call qword ptr [rax - 0x23]; 
0x000000000006c24f: out 0xf9, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000005c29f: out 0xfa, eax; jmp qword ptr [rsi + 0x2e]; 
0x000000000002b393: out 0xff, al; jmp qword ptr [rsi + 0x2e]; 
0x000000000006f3d2: out 0xff, eax; dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x000000000007835f: out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x78378; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000083745: out 1, al; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x000000000008f3e5: out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x000000000003fc77: out 7, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000650be: out dx, al; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x000000000008373f: out dx, al; and r14, r15; and r14d, 1; add r14, rax; mov qword ptr [rsp + 0xa8], r14; call rbx; 
0x0000000000021ac5: out dx, al; call 0x593b0; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x00000000000839a1: out dx, al; call rbx; 
0x00000000000d6715: out dx, al; hlt; call qword ptr [rax + 0x4c]; 
0x00000000000b573e: out dx, al; ja 0xb5cb1; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000002e45e: out dx, al; jae 0x2e461; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x000000000003eb40: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000058dcd: out dx, al; mov edi, ebx; mov eax, 0x2b; syscall; 
0x0000000000055c00: out dx, al; mov edi, ebx; mov eax, 0x3d; syscall; 
0x00000000000568fd: out dx, al; mov edi, ebx; mov eax, 1; syscall; 
0x000000000005682d: out dx, al; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000038f3a: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000083781: out dx, al; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x0000000000081fc0: out dx, al; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000006be2d: out dx, al; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000000835d1: out dx, al; mov rdi, r12; call rbx; 
0x000000000001727c: out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000002d7a2: out dx, al; mov rdi, rax; call rcx; 
0x0000000000057578: out dx, al; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000001e1e8: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000001dd1d: out dx, al; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000003eb4a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000048f9e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000002c153: out dx, al; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000002930e: out dx, al; ret; 
0x0000000000017be5: out dx, al; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000000d5aa1: out dx, al; std; call qword ptr [rax - 0xb]; 
0x0000000000039fd0: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037600: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002e78e: out dx, al; test byte ptr [rip + 0x2bc147], 2; lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000008ccec: out dx, al; xor eax, eax; call 0x8e000; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000005557d: out dx, eax; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000021b29: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000021b81: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000377b4: out dx, eax; and byte ptr [rbp + rcx*4 + 0x1d], cl; and dword ptr [rbx + 8], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007ddb2: out dx, eax; call qword ptr [rax + 0x38]; 
0x00000000000b3283: out dx, eax; call qword ptr [rax]; 
0x000000000001a6f7: out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000000b335f: out dx, eax; call qword ptr [rcx]; 
0x000000000002cb27: out dx, eax; call rax; 
0x00000000000822e2: out dx, eax; call rbx; 
0x00000000000a96bd: out dx, eax; cld; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000092dbd: out dx, eax; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d749d: out dx, eax; cli; jmp rax; 
0x00000000000b7ea7: out dx, eax; cmc; jmp qword ptr [rsi + 0xf]; 
0x0000000000094014: out dx, eax; cmp cx, 0x7fff; je 0x94004; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000a2ba1: out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000003ebc0: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000003a093: out dx, eax; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039fd4: out dx, eax; lea r11, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c3: out dx, eax; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037604: out dx, eax; lea r11, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001727f: out dx, eax; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000005757b: out dx, eax; mov eax, 9; syscall; 
0x000000000001c6ed: out dx, eax; mov eax, r9d; syscall; 
0x0000000000038d6a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e66: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038db2: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000082433: out dx, eax; mov r9, r14; call rbx; 
0x00000000000171ea: out dx, eax; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000003ebca: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000004909d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000001b793: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001a778: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000035cd3: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000035ce8: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000035cfd: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000501b3: out dx, eax; ret 0xf66; 
0x0000000000017af9: out dx, eax; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000000371ec: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x00000000000371d5: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000371be: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000035c7a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000df6e1: out dx, eax; stc; jmp qword ptr [rdi]; 
0x0000000000035f4f: out dx, eax; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003600c: out dx, eax; xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000035fbb: out dx, eax; xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000046fae: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000007ffa6: outsb dx, byte ptr [rsi]; add al, 1; je 0x7ffd1; mov rax, rdx; pop rbx; ret; 
0x000000000004e5de: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000002a5e6: outsb dx, byte ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000a9113: outsb dx, byte ptr [rsi]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000d11ac: outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000c1155: outsb dx, byte ptr [rsi]; cli; call qword ptr [rax]; 
0x00000000000d9f4d: outsb dx, byte ptr [rsi]; hlt; call qword ptr [rdi]; 
0x00000000000d9fd9: outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rsi]; 
0x00000000000d2f23: outsb dx, byte ptr [rsi]; ja 0xd2ea9; ret 0x48f; 
0x000000000008d210: outsb dx, byte ptr [rsi]; or byte ptr [rax + 1], cl; ret; 
0x000000000008e782: outsb dx, byte ptr [rsi]; ret; 
0x00000000000d0c64: outsb dx, byte ptr [rsi]; sahf; ret 0x38ae; 
0x000000000009203a: outsb dx, byte ptr [rsi]; std; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000050b4c: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000d6cb1: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; js 0xd6cc0; clc; jmp qword ptr [rax]; 
0x00000000000233a2: outsd dx, dword ptr [rsi]; and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x0000000000036d68: outsd dx, dword ptr [rsi]; call 0xf6a5621; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000be94d: outsd dx, dword ptr [rsi]; clc; call qword ptr [rax]; 
0x00000000000e28c9: outsd dx, dword ptr [rsi]; cld; call qword ptr [rax]; 
0x00000000000423ac: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000036d4d: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036b4d: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000002ea08: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000004292e: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x0000000000036ccd: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009a04c: outsd dx, dword ptr [rsi]; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000079ead: outsd dx, dword ptr [rsi]; mov al, 0x26; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x000000000008eba5: outsd dx, dword ptr [rsi]; mov edi, 0x8b410025; adc edi, dword ptr [rcx]; ret 0xc74; 
0x0000000000036a17: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036b17: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000042504: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000036c4d: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036a4d: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003708d: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x0000000000036fed: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000008150a: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000004de26: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000003687d: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003694d: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000004e476: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000004de06: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x4de14; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000070c06: outsd dx, dword ptr [rsi]; ret 0x23e8; 
0x0000000000070bdd: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000002456a: outsd dx, dword ptr [rsi]; ret 0x4466; 
0x00000000000d1626: outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x0000000000023fa2: outsd dx, dword ptr [rsi]; ret 0x8348; 
0x000000000007395d: outsd dx, dword ptr [rsi]; ret 0xcce8; 
0x0000000000073939: outsd dx, dword ptr [rsi]; ret 0xe583; 
0x000000000008155a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000005015c: outsd dx, dword ptr [rsi]; ret; 
0x00000000000370ad: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000371ce: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000003700d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003714d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000070ba4: outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000000b6b20: outsd dx, dword ptr [rsi]; xchg eax, ebp; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000b7032: outsd dx, dword ptr [rsi]; xchg eax, ebp; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d1625: outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000008106d: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x810d0; xor eax, eax; ret; 
0x0000000000082a14: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x00000000000829ff: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000004a38b: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x4a39a; bsf eax, edx; ret; 
0x000000000008106c: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x810d0; xor eax, eax; ret; 
0x000000000004a38a: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x4a39a; bsf eax, edx; ret; 
0x00000000000d2a25: pcmpeqw mm5, qword ptr [rbp + r12*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x00000000000d2a26: pcmpeqw mm5, qword ptr [rbp - 0x5f]; mov cs, edi; ret 0x8b36; 
0x000000000001f8bb: pcmpgtb mm0, mm7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000505e0: pcmpistri xmm1, xmm1, 0x3a; movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000009d2a4: pcmpistri xmm3, xmmword ptr [rdi], 0x12; jae 0x9d2a0; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000051876: pextrw edi, mm0, 0x77; ret; 
0x00000000000ae677: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; cmp eax, 0x8b00013b; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000094fc1: pminsw mm0, qword ptr [rbx]; add byte ptr [rbp + 0xf], al; mov dh, 0xe4; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000049d6c: pmovmskb eax, mm0; test eax, eax; je 0x49d80; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000352b6: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000081072: pmovmskb eax, mm1; test eax, eax; jne 0x810d0; xor eax, eax; ret; 
0x0000000000081042: pmovmskb eax, mm1; test eax, eax; jne 0x810f0; xor eax, eax; ret; 
0x0000000000049d6b: pmovmskb eax, xmm0; test eax, eax; je 0x49d80; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000352b5: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000081071: pmovmskb eax, xmm1; test eax, eax; jne 0x810d0; xor eax, eax; ret; 
0x0000000000081041: pmovmskb eax, xmm1; test eax, eax; jne 0x810f0; xor eax, eax; ret; 
0x000000000004a38f: pmovmskb edx, mm4; test edx, edx; je 0x4a39a; bsf eax, edx; ret; 
0x000000000004a38e: pmovmskb edx, xmm4; test edx, edx; je 0x4a39a; bsf eax, edx; ret; 
0x00000000000d7139: pop qword ptr [rax]; add byte ptr [rax - 4], bl; stc; jmp rsp; 
0x0000000000020b95: pop qword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000000e0d8d: pop qword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000056220: pop qword ptr [rsi]; add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x00000000000590d5: pop r10; ret; 
0x0000000000057711: pop r12; jmp rax; 
0x00000000000576f6: pop r12; mov esi, 2; jmp rax; 
0x0000000000052c52: pop r12; mov qword ptr [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret; 
0x0000000000037ef5: pop r12; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002a109: pop r12; pop r13; pop r14; jmp rax; 
0x000000000002c68c: pop r12; pop r13; pop r14; jmp rcx; 
0x000000000002b336: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000000b4ee: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000000886f: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000019c99: pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000001a52e: pop r12; pop r13; pop r14; ret; 
0x00000000000169b9: pop r12; pop r13; ret; 
0x00000000000832b9: pop r12; pop r14; ret; 
0x00000000000097bc: pop r12; pop rbp; ret; 
0x000000000000ecc4: pop r12; ret; 
0x000000000002a10b: pop r13; pop r14; jmp rax; 
0x000000000002c68e: pop r13; pop r14; jmp rcx; 
0x000000000002b338: pop r13; pop r14; pop r15; jmp rax; 
0x000000000000b4f0: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000008871: pop r13; pop r14; pop r15; ret; 
0x0000000000019c9b: pop r13; pop r14; pop rbp; ret; 
0x000000000001a530: pop r13; pop r14; ret; 
0x00000000000169bb: pop r13; ret; 
0x000000000002a10d: pop r14; jmp rax; 
0x000000000002c690: pop r14; jmp rcx; 
0x0000000000037cf3: pop r14; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002b33a: pop r14; pop r15; jmp rax; 
0x000000000000b4f2: pop r14; pop r15; pop rbp; ret; 
0x0000000000008873: pop r14; pop r15; ret; 
0x0000000000019c9d: pop r14; pop rbp; ret; 
0x000000000001a532: pop r14; ret; 
0x000000000002b33c: pop r15; jmp rax; 
0x000000000000b4f4: pop r15; pop rbp; ret; 
0x0000000000008875: pop r15; ret; 
0x00000000000dff88: pop rax; adc al, 0xfa; jmp rdx; 
0x00000000000d619c: pop rax; adc esp, esi; call rax; 
0x00000000000288b4: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x00000000000d7b64: pop rax; add edi, esi; call rax; 
0x00000000000d5ebc: pop rax; add edi, esi; jmp rax; 
0x00000000000d713c: pop rax; cld; stc; jmp rsp; 
0x00000000000a1b30: pop rax; idiv bh; dec dword ptr [rax + 0x39]; ret; 
0x000000000006b503: pop rax; idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x00000000000de940: pop rax; imul eax, dword ptr [rax], 0; insb byte ptr [rdi], dx; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rcx]; 
0x00000000000915ac: pop rax; jmp qword ptr [rax]; 
0x000000000001b029: pop rax; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000000594b6: pop rax; mov rax, rbx; pop rdx; pop rbx; ret; 
0x000000000001b934: pop rax; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000000de918: pop rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rdi]; 
0x0000000000023ef1: pop rax; or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000000382e6: pop rax; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000bb86d: pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000016926: pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000009a3a: pop rax; pop rbx; pop rbp; ret; 
0x0000000000091666: pop rax; pop rdx; pop rbx; ret; 
0x00000000000b3b54: pop rax; push -3; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000000d6564: pop rax; ret 0xfff4; 
0x00000000000d6b8c: pop rax; ret 0xfff7; 
0x0000000000000ce8: pop rax; ret 6; 
0x000000000000877f: pop rax; ret; 
0x00000000000d9840: pop rax; sbb al, byte ptr [rax]; add byte ptr [rsp + rax*2], cl; hlt; call qword ptr [rdi + 2]; 
0x00000000000d6e1c: pop rax; xor al, 0xf8; jmp rax; 
0x000000000009189b: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091ccb: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000ddb25: pop rbp; add byte ptr [rax], al; jg 0xddad5; bnd jmp qword ptr [rbx]; 
0x00000000000a2a15: pop rbp; add byte ptr [rbp - 0x57f2fad], cl; or dword ptr [rdi], ecx; xchg eax, esi; ret 0x8348; 
0x000000000008051a: pop rbp; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000a924f: pop rbp; add ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d6305: pop rbp; hlt; jmp rax; 
0x00000000000208d0: pop rbp; jmp rax; 
0x0000000000084fd8: pop rbp; mov eax, 0x101; syscall; 
0x000000000009ee63: pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x000000000001ce0d: pop rbp; movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x0000000000037da6: pop rbp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000057710: pop rbp; pop r12; jmp rax; 
0x00000000000576f5: pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000002a108: pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000002c68b: pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x000000000002b335: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000000886e: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000001a52d: pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000169b8: pop rbp; pop r12; pop r13; ret; 
0x00000000000832b8: pop rbp; pop r12; pop r14; ret; 
0x000000000000ecc3: pop rbp; pop r12; ret; 
0x000000000002a10c: pop rbp; pop r14; jmp rax; 
0x000000000002c68f: pop rbp; pop r14; jmp rcx; 
0x000000000002b339: pop rbp; pop r14; pop r15; jmp rax; 
0x000000000000b4f1: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000008872: pop rbp; pop r14; pop r15; ret; 
0x0000000000019c9c: pop rbp; pop r14; pop rbp; ret; 
0x000000000001a531: pop rbp; pop r14; ret; 
0x0000000000093ef8: pop rbp; pop rbx; ret; 
0x0000000000093d4f: pop rbp; push rsi; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000008cef: pop rbp; ret; 
0x00000000000b5ae1: pop rbx; add dword ptr [rax + 1], ecx; ret; 
0x0000000000018564: pop rbx; add r10d, eax; xor eax, eax; mov dword ptr [rsi], r10d; pop rbp; ret; 
0x00000000000d01f8: pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000051c22: pop rbx; and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000051bc6: pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000592ff: pop rbx; and eax, 0xc; pop rbp; pop r12; ret; 
0x00000000000d01f6: pop rbx; cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000000d62fd: pop rbx; hlt; dec dword ptr [rax - 0x17ffffcd]; pop rbp; hlt; jmp rax; 
0x0000000000020814: pop rbx; jmp rax; 
0x0000000000083365: pop rbx; mov dword ptr [r11 + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x000000000008f7a7: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000051c11: pop rbx; mov eax, eax; ret; 
0x00000000000736fd: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000001c524: pop rbx; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000021359: pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x000000000001b6f8: pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000009da8b: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x0000000000057707: pop rbx; mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000024d73: pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x0000000000016461: pop rbx; or al, byte ptr [rax]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000037f94: pop rbx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000019c98: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000000097bb: pop rbx; pop r12; pop rbp; ret; 
0x0000000000065d3c: pop rbx; pop r12; ret; 
0x00000000000208cf: pop rbx; pop rbp; jmp rax; 
0x000000000007e6f1: pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000000576f4: pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000002a107: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000002c68a: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x000000000001a564: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000169b7: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000832b7: pop rbx; pop rbp; pop r12; pop r14; ret; 
0x000000000000ecc2: pop rbx; pop rbp; pop r12; ret; 
0x00000000000b4374: pop rbx; pop rbp; pop r14; ret; 
0x0000000000009a3b: pop rbx; pop rbp; ret; 
0x00000000000d34e0: pop rbx; ret 0x6f9; 
0x0000000000009ca8: pop rbx; ret; 
0x00000000000b1e4c: pop rbx; sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000005b610: pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x000000000000ecde: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000021322: pop rbx; xor edx, edx; jmp rax; 
0x00000000000d67b5: pop rcx; cmc; jmp qword ptr [rax + 0x57]; 
0x00000000000d11a6: pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000b36d3: pop rcx; jae 0xb36cb; jmp qword ptr [rsi + 0xf]; 
0x0000000000042505: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000041ed8: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x00000000000a9533: pop rcx; mov bh, dh; jmp qword ptr [rsi + 0xf]; 
0x000000000003819b: pop rcx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aea3: pop rcx; or byte ptr cs:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000380e3: pop rcx; pop rdx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a08d5: pop rcx; shl byte ptr [rdi + rax*8], 0x22; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000e39e1: pop rcx; std; jmp qword ptr [rax]; 
0x000000000001852b: pop rcx; sub byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x000000000004972d: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000005938d: pop rdi; and byte ptr [rcx], ch; add byte ptr [rax + 0x39], cl; ret 0xda75; 
0x00000000000be96d: pop rdi; clc; call qword ptr [rax]; 
0x0000000000039309: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039119: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000d279e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000003659d: pop rdi; je 0x365a8; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000002b33d: pop rdi; jmp rax; 
0x00000000000d1761: pop rdi; mov dh, 0x4e; ret 0x474c; 
0x0000000000037ba4: pop rdi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000578d5: pop rdi; or byte ptr [rcx - 0xa], al; ret; 
0x0000000000038f39: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038d69: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e65: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038db1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000000b4f5: pop rdi; pop rbp; ret; 
0x0000000000008876: pop rdi; ret; 
0x000000000008c68b: pop rdi; test rcx, rcx; jne 0x8cc66; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000000d67f1: pop rdx; add byte ptr [rax], al; cwde; je 0xd67ec; jmp qword ptr [rax]; 
0x0000000000034b96: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x00000000000a91f1: pop rdx; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000d9b71: pop rdx; hlt; call qword ptr [rdi]; 
0x00000000000d2381: pop rdx; je 0xd2348; ret 0xacfc; 
0x00000000000d11a4: pop rdx; jp 0xd1200; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000794c2: pop rdx; mov bh, 0x26; add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x0000000000020715: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000038046: pop rdx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d3347: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 
0x00000000000590d4: pop rdx; pop r10; ret; 
0x00000000000594ba: pop rdx; pop rbx; ret; 
0x00000000000590f9: pop rdx; pop rsi; ret; 
0x000000000001cca2: pop rdx; ret; 
0x000000000004962e: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000d6889: pop rsi; add byte ptr [rax], al; js 0xd6815; cmc; jmp qword ptr [rax]; 
0x00000000000d68c9: pop rsi; add byte ptr [rax], al; mov dl, cl; cmc; jmp rax; 
0x00000000000b451e: pop rsi; add eax, 0x2148c; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000000954e: pop rsi; inc byte ptr [rax + rax]; leave; ret; 
0x00000000000bf150: pop rsi; jb 0xbf14c; call rcx; 
0x000000000002a10e: pop rsi; jmp rax; 
0x000000000002c691: pop rsi; jmp rcx; 
0x000000000001617b: pop rsi; or al, byte ptr [rax]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000037c56: pop rsi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002b33b: pop rsi; pop r15; jmp rax; 
0x000000000000b4f3: pop rsi; pop r15; pop rbp; ret; 
0x0000000000008874: pop rsi; pop r15; ret; 
0x0000000000019c9e: pop rsi; pop rbp; ret; 
0x000000000001a533: pop rsi; ret; 
0x00000000000d14dc: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x00000000000471c0: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034e94: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000047ec0: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x0000000000026c7b: pop rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000009160e: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x000000000009159c: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000000de0b4: pop rsp; clc; call rcx; 
0x0000000000057712: pop rsp; jmp rax; 
0x00000000000238b5: pop rsp; mov eax, dword ptr [rip + 0x2c6564]; test eax, eax; je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x00000000000576f7: pop rsp; mov esi, 2; jmp rax; 
0x0000000000052c53: pop rsp; mov qword ptr [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret; 
0x00000000000e0e44: pop rsp; nop; add byte ptr [rax], al; or cl, dl; cli; jmp qword ptr [rdx]; 
0x0000000000037e44: pop rsp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002a10a: pop rsp; pop r13; pop r14; jmp rax; 
0x000000000002c68d: pop rsp; pop r13; pop r14; jmp rcx; 
0x000000000002b337: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x000000000000b4ef: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000008870: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000019c9a: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000001a52f: pop rsp; pop r13; pop r14; ret; 
0x00000000000169ba: pop rsp; pop r13; ret; 
0x00000000000832ba: pop rsp; pop r14; ret; 
0x00000000000097bd: pop rsp; pop rbp; ret; 
0x00000000000b3e50: pop rsp; push rbp; cli; jmp qword ptr [rsi - 0x70]; 
0x0000000000077400: pop rsp; ret 5; 
0x000000000000ac93: pop rsp; ret; 
0x000000000006f1b0: pop rsp; xor byte ptr [rcx], al; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000019c44: popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000082e2f: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000000e1aed: popfq; add byte ptr [rax], al; and byte ptr [rcx], ch; sti; call rbx; 
0x00000000000b6b75: popfq; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000077faf: popfq; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000003759f: popfq; or byte ptr gs:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004e0df: popfq; or dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000053bfc: popfq; ret 0x3948; 
0x00000000000a526d: popfq; ret 0x841; 
0x000000000008396a: popfq; ret 0xefc1; 
0x00000000000b5e49: popfq; ret 0xf45; 
0x00000000000ae7b0: popfq; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003ec92: psllq mm1, qword ptr [r15]; jg 0x3eca7; ret; 
0x00000000000417b2: psllq mm1, qword ptr [r15]; jg 0x417c7; ret; 
0x000000000003ec93: psllq mm1, qword ptr [rdi]; jg 0x3eca7; ret; 
0x00000000000417b3: psllq mm1, qword ptr [rdi]; jg 0x417c7; ret; 
0x000000000004dca6: psllq mm1, qword ptr [rdi]; jg 0x4dcb2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000004dd07: psllq mm1, qword ptr [rdi]; jg 0x4dd13; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000004de08: psllq mm1, qword ptr [rdi]; jg 0x4de14; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000004e336: psllq mm1, qword ptr [rdi]; jg 0x4e342; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000004e3b7: psllq mm1, qword ptr [rdi]; jg 0x4e3c3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000004e4b8: psllq mm1, qword ptr [rdi]; jg 0x4e4c4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000be0e9: psubb mm7, mm7; psubb mm7, mm7; ror byte ptr [rsi], 1; clc; jmp qword ptr [rax + 0xe]; 
0x00000000000be84d: psubb mm7, mm7; push rax; adc eax, edi; call rax; 
0x00000000000bdef1: psubb mm7, mm7; ror byte ptr [rsi], 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000bdef1: psubb mm7, mm7; ror byte ptr [rsi], 0xf8; call qword ptr [rax + 0xe]; clc; jmp rax; 
0x00000000000be0ed: psubb mm7, mm7; ror byte ptr [rsi], 1; clc; jmp qword ptr [rax + 0xe]; 
0x00000000000bdf29: psubb mm7, mm7; xchg byte ptr [rdi], cl; clc; call qword ptr [rsi]; 
0x00000000000d6744: push -0x13000ade; add byte ptr [r8], r8b; or byte ptr [rsi], ah; cmc; call qword ptr [rax + 0x50]; 
0x00000000000667d0: push -0x17000001; mov dword ptr [rcx - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000000d7ae4: push -0x2f00022f; retf 0; fcom st(4); std; jmp qword ptr [rax]; 
0x00000000000d797c: push -0x3b00035c; ret; 
0x00000000000d9750: push -0x3ffffe7; cmp dh, ah; jmp rdx; 
0x00000000000d11aa: push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000de60d: push -0x49300000; std; jmp qword ptr [rdi]; 
0x00000000000b7344: push -0x76000023; ret; 
0x0000000000075fcc: push -0x7ab70005; ror byte ptr [rax - 0x77], 5; call qword ptr [rbp + 0x27]; 
0x000000000006b9c2: push -0x7c000003; ret; 
0x00000000000950c2: push -0x7c000006; ret 0x8908; 
0x00000000000de649: push -0x7cac0000; clc; jmp rax; 
0x000000000004e5c4: push -0x9ffffff; ret 0x7501; 
0x00000000000b3b55: push -3; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000000d7835: push -4; ljmp [rax - 0x77ffff44]; insb byte ptr [rdi], dx; cld; call rsp; 
0x00000000000de89d: push 0; add byte ptr [rax], dh; lahf; clc; call qword ptr [rdx]; 
0x0000000000082163: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000612da: push 0; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000005c960: push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000000b67a2: push 0x18c48348; ret; 
0x0000000000088fc2: push 0x1a; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d60e5: push 0x23a0fff3; add byte ptr [rax], al; sbb byte ptr [rbx - 0xd], ch; call qword ptr [rax + 0x24]; 
0x00000000000d7b5c: push 0x44fffdff; iretd; add byte ptr [rax], al; pop rax; add edi, esi; call rax; 
0x0000000000056b3c: push 0x489066c3; lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000001bb4d: push 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000089575: push 0x48b4901; and al, 0x83; ret; 
0x00000000000667dc: push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000000d7138: push 0x5800008f; cld; stc; jmp rsp; 
0x000000000007f26b: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000000d2f22: push 0x6e; ja 0xd2ea9; ret 0x48f; 
0x000000000007f235: push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x0000000000036392: push 0x76; or byte ptr [rax], al; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000919fc: push 0xc334864; and eax, 0x28; jne 0x91a3e; add rsp, 0x78; ret; 
0x00000000000d5ef8: push 0xfffe18; sbb dh, bh; jmp qword ptr [rax + 0x17]; 
0x000000000008215e: push 1; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000820e4: push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000be833: push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000be62f: push qword ptr [rax + 0x2b]; clc; jmp rax; 
0x00000000000d62df: push qword ptr [rax + 0x32]; add byte ptr [rax], al; cwde; push rdi; hlt; call rax; 
0x000000000001b794: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001a779: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000000bdbdb: push qword ptr [rax + 0x40fff7be]; mov cl, 0xf7; inc dword ptr [rax]; mov bl, 0xf7; jmp rax; 
0x00000000000be0e7: push qword ptr [rax + 0x40fff80f]; psubb mm7, mm7; ror byte ptr [rsi], 1; clc; jmp qword ptr [rax + 0xe]; 
0x00000000000bdecf: push qword ptr [rax + 0x40fff812]; adc bh, al; call rax; 
0x00000000000be5df: push qword ptr [rax + 0x40fff836]; clc; call rax; 
0x00000000000be3c7: push qword ptr [rax + 0x40fff839]; cmp eax, edi; call rax; 
0x00000000000bdd5f: push qword ptr [rax + 0x70fff7d9]; fcomi st(7); call qword ptr [rax - 0x23]; 
0x00000000000be303: push qword ptr [rax + 0xa]; clc; push rax; or eax, edi; jmp qword ptr [rax + 9]; 
0x00000000000bde9b: push qword ptr [rax + 0xfff7cb]; int 0xf7; call qword ptr [rax - 0x32]; 
0x00000000000be9ef: push qword ptr [rax + 0xfff8ac]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x00000000000be2eb: push qword ptr [rax + 5]; clc; push rax; add al, 0xf8; jmp qword ptr [rax + 4]; 
0x0000000000056ce2: push qword ptr [rax + rbp*4 + 0x49]; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000000d5a9f: push qword ptr [rax - 0x12]; std; call qword ptr [rax - 0xb]; 
0x00000000000cd687: push qword ptr [rax - 0x15]; cli; call qword ptr [rax - 0x14]; 
0x00000000000cd6bb: push qword ptr [rax - 0x15]; cli; call qword ptr [rax]; 
0x00000000000cd6af: push qword ptr [rax - 0x15]; cli; jmp qword ptr [rax]; 
0x00000000000cd683: push qword ptr [rax - 0x15]; cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax - 0x14]; 
0x00000000000cd6b7: push qword ptr [rax - 0x15]; cli; push qword ptr [rax - 0x15]; cli; call qword ptr [rax]; 
0x00000000000be83f: push qword ptr [rax - 0x2f0007f5]; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000bd90b: push qword ptr [rax - 0x2f0008d6]; sub esi, edi; push rax; sub al, 0xf7; call qword ptr [rax]; 
0x00000000000d664f: push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000bde8b: push qword ptr [rax - 0x3a]; idiv edi; rol bh, 0xf7; call qword ptr [rax]; 
0x00000000000bea4b: push qword ptr [rax - 0x3f00070e]; clc; jmp rax; 
0x00000000000bea0f: push qword ptr [rax - 0x3f00070f]; int1; clc; call rax; 
0x00000000000be917: push qword ptr [rax - 0x3f0007ad]; push rbp; clc; call rax; 
0x00000000000d5ad3: push qword ptr [rax - 0x4f000204]; cld; std; call rax; 
0x00000000000bdcab: push qword ptr [rax - 0x58]; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000be9df: push qword ptr [rax - 0x59]; clc; inc eax; test al, 0xf8; call qword ptr [rax]; 
0x00000000000bfa47: push qword ptr [rax - 0x5b]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000bfa3f: push qword ptr [rax - 0x6f00065b]; movsd dword ptr [rdi], dword ptr [rsi]; stc; push qword ptr [rax - 0x5b]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000be98b: push qword ptr [rax - 0x73]; clc; call qword ptr [rax]; 
0x00000000000bdcbb: push qword ptr [rax - 0xf000853]; cwde; idiv edi; rcr byte ptr [rbx - 0x62ef0009], 0xf7; jmp qword ptr [rax - 0x62]; 
0x00000000000be3bb: push qword ptr [rax - 4]; idiv edi; sahf; xor edi, eax; jmp qword ptr [rax]; 
0x00000000000beadf: push qword ptr [rax - 7]; clc; call qword ptr [rax - 0x4f000707]; stc; clc; call rax; 
0x00000000000be0c7: push qword ptr [rax]; adc edi, eax; inc eax; adc bh, al; call qword ptr [rax + 0x12]; 
0x00000000000be33b: push qword ptr [rax]; add edi, eax; call rax; 
0x00000000000beab3: push qword ptr [rax]; clc; clc; call qword ptr [rax - 8]; 
0x00000000000be8f7: push qword ptr [rax]; clc; inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; 
0x00000000000bea2f: push qword ptr [rax]; clc; inc dword ptr [rax - 0xe]; clc; call qword ptr [rax - 0xe]; 
0x00000000000be3e7: push qword ptr [rax]; clc; inc eax; xor eax, 0x3550fff8; clc; jmp rax; 
0x00000000000beaf7: push qword ptr [rax]; cli; clc; call qword ptr [rax - 6]; 
0x00000000000bdd6b: push qword ptr [rax]; fcomip st(7); call qword ptr [rax]; 
0x00000000000bea87: push qword ptr [rax]; idiv eax; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; 
0x00000000000cd6ab: push qword ptr [rax]; in al, dx; cli; push qword ptr [rax - 0x15]; cli; jmp qword ptr [rax]; 
0x00000000000bde67: push qword ptr [rax]; iretd; idiv edi; adc al, 0xf7; call rax; 
0x00000000000bd9eb: push qword ptr [rax]; jae 0xbd9e6; jmp qword ptr [rax]; 
0x00000000000b469f: push qword ptr [rax]; jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b7573: push qword ptr [rax]; jne 0xb7580; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000b75c3: push qword ptr [rax]; jne 0xb75d0; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000bdd4f: push qword ptr [rax]; loope 0xbdd4a; jmp qword ptr [rax]; 
0x00000000000d707f: push qword ptr [rax]; mov al, byte ptr [rax]; add byte ptr [rax + 0x2f], cl; stc; call qword ptr [rax - 0x76]; 
0x00000000000be983: push qword ptr [rax]; mov bh, al; call rax; 
0x00000000000bdbc3: push qword ptr [rax]; mov bl, 0xf7; call qword ptr [rax]; 
0x00000000000bdb77: push qword ptr [rax]; mov ebp, 0xbf30fff7; idiv edi; sal byte ptr [rcx - 0x4c7f0009], 0xf7; jmp qword ptr [rax - 0x4b]; 
0x00000000000bdc17: push qword ptr [rax]; mov esp, 0xbe30fff7; idiv edi; sal byte ptr [rax - 0x4d7f0009], 0xf7; jmp qword ptr [rax - 0x4c]; 
0x00000000000be9cf: push qword ptr [rax]; movabs byte ptr [0xa4d0fff8a380fff8], al; clc; jmp qword ptr [rax]; 
0x00000000000bdeef: push qword ptr [rax]; psubb mm7, mm7; ror byte ptr [rsi], 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000bdeef: push qword ptr [rax]; psubb mm7, mm7; ror byte ptr [rsi], 0xf8; call qword ptr [rax + 0xe]; clc; jmp rax; 
0x00000000000bead7: push qword ptr [rax]; stc; clc; call qword ptr [rax - 7]; 
0x00000000000d5ac7: push qword ptr [rax]; std; std; jmp qword ptr [rax]; 
0x00000000000bdcef: push qword ptr [rax]; stosb byte ptr [rdi], al; idiv edi; sub byte ptr [rbx - 0x532f0009], 0xf7; jmp qword ptr [rax]; 
0x00000000000be9a3: push qword ptr [rax]; xchg eax, edi; clc; call rax; 
0x0000000000016adb: push qword ptr [rbp + 0x1a]; mov rax, -0x58; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000004ff48: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x00000000000e11ff: push qword ptr [rbp + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x0000000000035959: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x000000000007f238: push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x000000000002138d: push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x000000000007f25e: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000000819a3: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x00000000000ba409: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xba41c; call rax; 
0x0000000000021bc0: push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005651c: push qword ptr [rbx + 1]; ret; 
0x00000000000e11cb: push qword ptr [rbx + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x0000000000021b24: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000007f4b5: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000be043: push qword ptr [rbx + rdx + 0x1344fff8]; clc; call rsp; 
0x00000000000ce93f: push qword ptr [rbx - 0x4c00041b]; in eax, 0xfb; jmp rax; 
0x00000000000d703f: push qword ptr [rcx + rcx*4]; add byte ptr [rax], al; mov byte ptr [rax], ch; stc; call qword ptr [rax - 0x77]; 
0x00000000000d7177: push qword ptr [rcx + rdx*4 + 0x2cb80000]; cli; jmp rsp; 
0x00000000000b7532: push qword ptr [rcx + rsi*8 + 0x50]; call 0x16e60; nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x000000000006c344: push qword ptr [rcx]; fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x0000000000089c5f: push qword ptr [rcx]; fucomi st(3); ret 0x1f0f; 
0x0000000000027f46: push qword ptr [rcx]; mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x000000000001f96f: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000063193: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000005da0d: push qword ptr [rcx]; ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x000000000009967c: push qword ptr [rcx]; shr cl, 0x50; ret 0xffff; 
0x00000000000d3a47: push qword ptr [rcx]; sub esp, edi; call qword ptr [rdi + 0x31fffc16]; sub esp, edi; jmp rcx; 
0x00000000000d3ac7: push qword ptr [rcx]; sub esp, edi; inc dword ptr [rdx + 0x44fffc1c]; and ah, bh; jmp rcx; 
0x00000000000d3a3f: push qword ptr [rcx]; sub esp, edi; jmp rcx; 
0x00000000000d3a3b: push qword ptr [rcx]; sub esp, edi; push qword ptr [rcx]; sub esp, edi; jmp rcx; 
0x0000000000055fdb: push qword ptr [rdi + 0x22]; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000084e14: push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x00000000000d6647: push qword ptr [rdi + rax*2]; add byte ptr [rax - 0x2e], cl; hlt; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000be55b: push qword ptr [rdi + rsi]; clc; inc esp; clc; call qword ptr [rsi + rsi - 8]; jmp rsp; 
0x00000000000bfff7: push qword ptr [rdi - 0x54]; stc; jmp qword ptr [rcx]; 
0x00000000000be4b3: push qword ptr [rdx + 0x42fff834]; xor al, 0xf8; call rdx; 
0x00000000000bf25f: push qword ptr [rdx + 0x72]; stc; jmp qword ptr [rdx]; 
0x00000000000bf1ac: push qword ptr [rdx - 7]; jmp rsp; 
0x00000000000bdf9b: push qword ptr [rdx]; adc eax, edi; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; 
0x00000000000bbeef: push qword ptr [rdx]; int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000bdf17: push qword ptr [rsi + 0x46fff811]; adc eax, edi; call rsi; 
0x00000000000be40f: push qword ptr [rsi + 0x46fff838]; cmp al, bh; call rsi; 
0x00000000000bdeff: push qword ptr [rsi + 0xd]; clc; jmp rsi; 
0x00000000000b46b2: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0xb46d8; xor eax, eax; ret; 
0x00000000000d67af: push qword ptr [rsi + rdx*2 + 0x59e80000]; cmc; jmp qword ptr [rax + 0x57]; 
0x00000000000d6377: push qword ptr [rsi + rsi + 0x6d780000]; hlt; call rsp; 
0x00000000000bf14b: push qword ptr [rsi]; jae 0xbf148; lcall [rsi + 0x72]; stc; call rcx; 
0x00000000000bf333: push qword ptr [rsi]; jb 0xbf330; push rsp; jno 0xbf334; call rcx; 
0x00000000000bf3ff: push qword ptr [rsi]; jb 0xbf3fc; push rsp; jno 0xbf400; call rcx; 
0x00000000000bf4f3: push qword ptr [rsi]; jb 0xbf4f0; push rsp; jno 0xbf4f4; call rcx; 
0x00000000000be42f: push qword ptr [rsi]; xor eax, 0x34c6fff8; clc; call qword ptr [rsi + 0x34]; 
0x00000000000be42f: push qword ptr [rsi]; xor eax, 0x34c6fff8; clc; call qword ptr [rsi + 0x34]; clc; jmp rsi; 
0x00000000000be273: push qword ptr [rsp + rax - 8]; jmp rsp; 
0x000000000005fb5c: push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000084d3b: push r12; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000060d25: push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000064069: push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000002175e: push r8; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000000207c2: push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000be858: push rax; adc al, 0xf8; call rax; 
0x00000000000be88c: push rax; adc al, bh; call rax; 
0x00000000000be88c: push rax; adc al, bh; call rax; adc eax, edi; call qword ptr [rax + 0x13]; 
0x00000000000be0d0: push rax; adc bh, al; jmp rax; 
0x00000000000139b4: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000010525: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000022571: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000000580c9: push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x00000000000266cd: push rax; adc dh, dh; ret 0xf0f; 
0x00000000000be850: push rax; adc eax, edi; call rax; 
0x00000000000be850: push rax; adc eax, edi; call rax; adc bh, al; call qword ptr [rax + 0x14]; 
0x00000000000be894: push rax; adc edi, eax; call rax; 
0x00000000000be894: push rax; adc edi, eax; call rax; adc al, 0xf8; call qword ptr [rax + 0x16]; 
0x00000000000be2ef: push rax; add al, 0xf8; jmp qword ptr [rax + 4]; 
0x00000000000d6b88: push rax; add byte ptr [eax], al; pop rax; ret 0xfff7; 
0x00000000000dbf38: push rax; add byte ptr [r8], al; xor al, 0xdd; cmc; jmp qword ptr [rdi + 0x2b]; 
0x000000000007f3f4: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000002175f: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000000207c3: push rax; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000943db: push rax; add dword ptr [rax - 0x77], ecx; adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000006b91f: push rax; add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000be2e7: push rax; add eax, 0x570fff8; clc; push rax; add al, 0xf8; jmp qword ptr [rax + 4]; 
0x00000000000be878: push rax; and al, bh; call rax; 
0x00000000000be878: push rax; and al, bh; call rax; and eax, edi; call qword ptr [rax]; 
0x0000000000009df0: push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x00000000000b7535: push rax; call 0x16e60; nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x00000000000b759b: push rax; call 0x16e60; nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; ret; 
0x00000000000755fa: push rax; call 0xffffffff895555ff; ret 0x894c; 
0x000000000005c9e8: push rax; call rbx; 
0x00000000000beacf: push rax; clc; clc; call qword ptr [rax]; 
0x00000000000be900: push rax; clc; jmp qword ptr [rax + 0x49]; 
0x00000000000bea38: push rax; clc; jmp qword ptr [rax - 0xe]; 
0x00000000000bd97b: push rax; cmp bh, dh; call rax; 
0x000000000007ddb4: push rax; cmp byte ptr [rax + 1], cl; ret; 
0x00000000000be5c8: push rax; cmp eax, edi; jmp rax; 
0x00000000000bdcbf: push rax; cwde; idiv edi; rcr byte ptr [rbx - 0x62ef0009], 0xf7; jmp qword ptr [rax - 0x62]; 
0x00000000000bdd4c: push rax; fcomip st(7); push qword ptr [rax]; loope 0xbdd4a; jmp qword ptr [rax]; 
0x00000000000bdda7: push rax; fdivr st(7), st(0); call rax; 
0x00000000000bdda0: push rax; fincstp; call qword ptr [rax]; 
0x000000000006ac6c: push rax; fyl2xp1; dec dword ptr [rax + 0x29]; ret; 
0x00000000000beaab: push rax; idiv eax; call qword ptr [rax]; 
0x00000000000bea90: push rax; idiv eax; jmp qword ptr [rax - 9]; 
0x00000000000bd9b7: push rax; idiv edi; add byte ptr [rcx - 9], dl; jmp rax; 
0x00000000000bea1f: push rax; int1; clc; inc dword ptr [rax]; clc; call qword ptr [rax]; 
0x00000000000b469a: push rax; je 0xb46bb; cmp dil, 0x30; jne 0xb46d8; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000b7583: push rax; jne 0xb759b; xor eax, eax; ret; 
0x00000000000b75d3: push rax; jne 0xb75eb; xor eax, eax; ret; 
0x00000000000bd9e4: push rax; jno 0xbd9de; inc dword ptr [rax + 0x72]; idiv edi; xor byte ptr [rbx - 9], dh; jmp qword ptr [rax]; 
0x00000000000d6e8f: push rax; js 0xd6e93; add byte ptr [rax + 0x4a], cl; clc; call qword ptr [rax]; 
0x000000000007f889: push rax; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000000bdc4b: push rax; mov ch, 0xf7; jmp rax; 
0x00000000000bdbcb: push rax; mov dh, 0xf7; call rax; 
0x000000000005ec91: push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000000bdc3b: push rax; mov ebp, 0xb080fff7; idiv edi; mov dl, 0xf7; call qword ptr [rax]; 
0x00000000000bdc37: push rax; mov ebx, 0xbdf0fff7; idiv edi; xor byte ptr [rax - 0x4dbf0009], 0xf7; call qword ptr [rax]; 
0x000000000005f68d: push rax; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000083892: push rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000be118: push rax; or al, bh; call rax; 
0x00000000000b3726: push rax; or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x00000000000232f2: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000007e373: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7e38c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000002461a: push rax; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000038ac6: push rax; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000022561: push rax; or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000580cd: push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x00000000000270c5: push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000005a3fb: push rax; or dh, dh; ret 0x8902; 
0x0000000000027e12: push rax; or dh, dh; ret 0xf02; 
0x00000000000be0f7: push rax; or eax, 0xd80fff8; clc; jmp qword ptr [rax]; 
0x00000000000be884: push rax; or eax, 0xed0fff8; clc; call qword ptr [rax + 0x10]; 
0x00000000000be110: push rax; or eax, edi; call rax; 
0x00000000000be110: push rax; or eax, edi; call rax; or al, bh; call qword ptr [rax + 8]; 
0x00000000000be307: push rax; or eax, edi; jmp qword ptr [rax + 9]; 
0x00000000000e1760: push rax; or ebx, edi; jmp qword ptr [rsi]; 
0x00000000000bdd7b: push rax; out 0xf7, al; inc dword ptr [rax + 0x40fff7d9]; fcomi st(7); jmp qword ptr [rax]; 
0x00000000000a9795: push rax; pop rbx; ret; 
0x000000000007f234: push rax; push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x000000000005fb5b: push rax; push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000060d24: push rax; push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000064068: push rax; push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000005ec93: push rax; push rsp; ret; 
0x0000000000099680: push rax; ret 0xffff; 
0x00000000000be8ac: push rax; sbb al, 0xf8; call rax; 
0x00000000000be868: push rax; sbb bh, al; call rax; 
0x00000000000be868: push rax; sbb bh, al; call rax; sbb edi, eax; call qword ptr [rax + 0x1d]; 
0x0000000000022566: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000007f379: push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000007f331: push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000be870: push rax; sbb eax, 0x1ed0fff8; clc; call qword ptr [rax + 0x20]; 
0x00000000000be8a4: push rax; sbb eax, edi; call rax; 
0x00000000000be8a4: push rax; sbb eax, edi; call rax; sbb bh, al; call qword ptr [rax + 0x1c]; 
0x00000000000be9f8: push rax; scasd eax, dword ptr [rdi]; clc; jmp rax; 
0x00000000000beaef: push rax; stc; clc; call qword ptr [rax]; 
0x00000000000bd913: push rax; sub al, 0xf7; call qword ptr [rax]; 
0x000000000007f375: push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000000be7f7: push rax; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000be83c: push rax; sub eax, edi; push qword ptr [rax - 0x2f0007f5]; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000be62b: push rax; sub edi, eax; push qword ptr [rax + 0x2b]; clc; jmp rax; 
0x00000000000be97b: push rax; xchg al, bh; call qword ptr [rax + 0x30fff888]; mov bh, al; call rax; 
0x00000000000beb9c: push rax; xor cl, bh; lcall [rdi + rbp - 7]; call qword ptr [rdi + 0x30]; 
0x00000000000be5c0: push rax; xor edi, eax; inc eax; cmp eax, edi; call qword ptr [rax + 0x39]; 
0x00000000000b372a: push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x00000000000b6c0d: push rbp; add byte ptr [rsi + 1], bh; mov edi, 1; call rax; 
0x000000000008f5c8: push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x00000000000be91d: push rbp; clc; call rax; 
0x00000000000be91d: push rbp; clc; call rax; push rdi; clc; jmp rax; 
0x00000000000b3e51: push rbp; cli; jmp qword ptr [rsi - 0x70]; 
0x00000000000d67ad: push rbp; cmc; push qword ptr [rsi + rdx*2 + 0x59e80000]; cmc; jmp qword ptr [rax + 0x57]; 
0x0000000000077212: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000060d26: push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000006406a: push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000af8f8: push rbp; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b6b07: push rbp; or al, ch; xchg eax, edx; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000038586: push rbp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009106c: push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x0000000000084d3d: push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000000d757d: push rbp; sti; jmp qword ptr [rax - 0x53]; 
0x00000000000a3de7: push rbp; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000021bbc: push rbp; xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000001a8d6: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000009f3f: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000008f43f: push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000001d6e8: push rbx; and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffe4ede; jmp qword ptr [rsi + 0x2e]; 
0x00000000000be919: push rbx; clc; inc eax; push rbp; clc; call rax; 
0x000000000001d008: push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x00000000000bbf4b: push rbx; hlt; jmp rax; 
0x0000000000051135: push rbx; jb 0x5113d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000007f272: push rbx; je 0x7f2d0; pop rbp; pop r12; ret; 
0x000000000007f2fe: push rbx; je 0x7f35c; pop rbp; pop r12; ret; 
0x0000000000068770: push rbx; mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x6877f; call rax; 
0x0000000000084d3e: push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000001d004: push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000038774: push rbx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000092039: push rbx; outsb dx, byte ptr [rsi]; std; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x00000000000582df: push rbx; ret; 
0x00000000000a2a18: push rbx; rol byte ptr [rax - 0x69f0f606], 1; ret 0x8348; 
0x00000000000943cd: push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x000000000002e659: push rbx; sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x229fc; cmovne rax, rdx; ret; 
0x000000000001d50c: push rbx; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000007f223: push rbx; test byte ptr [rdi], 2; mov rbx, rdi; jne 0x7f298; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000007c7aa: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000001d6ec: push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffe4ede; jmp qword ptr [rsi + 0x2e]; 
0x0000000000028c22: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x0000000000024f4b: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000025167: push rcx; adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x000000000005877b: push rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000270bb: push rcx; add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000000d1605: push rcx; call qword ptr [rsi]; 
0x00000000000be915: push rcx; clc; push qword ptr [rax - 0x3f0007ad]; push rbp; clc; call rax; 
0x000000000006be36: push rcx; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000000420df: push rcx; jl 0x4212a; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000000420e6: push rcx; jl 0x42131; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000000420ed: push rcx; jl 0x42138; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000042246: push rcx; jl 0x42291; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000004224d: push rcx; jl 0x42298; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000042254: push rcx; jl 0x4229f; adc dword ptr [rcx + 7], edi; ret; 
0x00000000000373eb: push rcx; or byte ptr [eax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038976: push rcx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000088bf1: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x0000000000088bc3: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000023a5d: push rcx; sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000009d06b: push rcx; xor bh, dh; dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x00000000000bebc4: push rcx; xor cl, bh; call qword ptr [rcx + 0x30]; 
0x00000000000bebd4: push rcx; xor cl, bh; lcall [rdi + rbp]; stc; call qword ptr [rax]; 
0x00000000000bebcc: push rcx; xor cl, bh; lcall [rdi + rbp]; stc; call qword ptr [rcx + 0x30]; 
0x0000000000052be2: push rdi; adc byte ptr [rcx], ch; ret 0x428d; 
0x000000000004e1ea: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000003edf9: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x0000000000050692: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x506e0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000004e29c: push rdi; add eax, 0xc478d48; ret; 
0x0000000000081cd8: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000081318: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000006b4fe: push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000006b50f: push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000038bb2: push rdi; call 0xfffffffff0631504; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038bf0: push rdi; call 0xfffffffff0631542; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038c28: push rdi; call 0xfffffffff063157a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000038c66: push rdi; call 0xfffffffff06315b8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038c9e: push rdi; call 0xfffffffff06315f0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038cc6: push rdi; call 0xfffffffff0631618; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038cee: push rdi; call 0xfffffffff0631640; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b582: push rdi; call 0xfffffffff0633ed4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003b5c0: push rdi; call 0xfffffffff0633f12; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b5f8: push rdi; call 0xfffffffff0633f4a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003b636: push rdi; call 0xfffffffff0633f88; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b66e: push rdi; call 0xfffffffff0633fc0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b696: push rdi; call 0xfffffffff0633fe8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003b6be: push rdi; call 0xfffffffff0634010; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000be921: push rdi; clc; jmp rax; 
0x0000000000038bf8: push rdi; clc; ret; 
0x0000000000038d70: push rdi; cld; ret; 
0x0000000000039897: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003e6d9: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000007d5e5: push rdi; cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000036c4e: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036a4e: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000056526: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000055c36: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000056866: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000000d62e5: push rdi; hlt; call rax; 
0x000000000003e659: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039305: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039115: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003e4aa: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000bf1b4: push rdi; jae 0xbf1b0; lcall [rax]; jb 0xbf1b4; call rcx; 
0x00000000000398d6: push rdi; loope 0x39925; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003991e: push rdi; loope 0x3996d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003995c: push rdi; loope 0x399ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039994: push rdi; loope 0x399e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000399d2: push rdi; loope 0x39a21; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a0a: push rdi; loope 0x39a59; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a32: push rdi; loope 0x39a81; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c2a6: push rdi; loope 0x3c2f5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c2ee: push rdi; loope 0x3c33d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c32c: push rdi; loope 0x3c37b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c364: push rdi; loope 0x3c3b3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c3a2: push rdi; loope 0x3c3f1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c3da: push rdi; loope 0x3c429; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003c402: push rdi; loope 0x3c451; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000036d18: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036b98: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036c98: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036c18: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000206a0: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000206d4: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000003e53a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000001b790: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000001a775: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000038384: push rdi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000093eea: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000000a93ea: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000093ef1: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000024c16: push rdi; or dh, dh; ret 0xf02; 
0x000000000004e480: push rdi; or eax, 0x1c478d48; ret; 
0x0000000000038f35: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038d65: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e61: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000038dad: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000382e5: push rdi; pop rax; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003708e: push rdi; ret 0xff3; 
0x0000000000036fee: push rdi; ret; 
0x000000000006b513: push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000023380: push rdi; sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000020698: push rdi; sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000007a0c5: push rdi; scasb al, byte ptr [rdi]; add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000039a97: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000392ba: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x0000000000039697: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003b0a5: push rdi; sub al, 8; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d5ef0: push rdi; sub bl, dh; call qword ptr [rax]; 
0x00000000000d5ee4: push rdi; sub bl, dh; call qword ptr [rdi + 0x28]; 
0x000000000001b168: push rdi; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000008150b: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000beba4: push rdi; xor cl, bh; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x0000000000081078: push rdi; xor eax, eax; ret; 
0x00000000000bdfa4: push rdx; adc al, bh; jmp rdx; 
0x00000000000a175e: push rdx; idiv bh; dec dword ptr [rax - 0x77]; sbb cl, ch; idiv dil; jmp qword ptr [rsi + 0xf]; 
0x00000000000590e1: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000003b529: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x827c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3d9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82919]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b289: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82a69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b139: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82bb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003afe9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82d09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82e59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x82fa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aaa9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83249]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a809: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x834e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a569: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a419: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x838d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x83a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b59: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x84fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a09: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038619: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038379: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x857b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038229: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85909]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85ba9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ce9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x85e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x860e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000378f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x86239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388c4: push rdx; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009a275: push rdx; sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005ec8d: push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000000e37dd: push rdx; std; call qword ptr [rcx]; 
0x00000000000d7575: push rdx; sti; call qword ptr [rax]; 
0x0000000000058d92: push rdx; sub dword ptr es:[rax], eax; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000056b92: push rdx; sub qword ptr [rax], rax; test eax, eax; jne 0x56bb0; mov eax, 3; syscall; 
0x000000000004e4d7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000004de27: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000004dd86: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x4dd96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000004dda6: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x4ddb6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000035cd4: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000507d9: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x50827; adc dword ptr [rsi + 3], edx; ret; 
0x000000000003edf2: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000024ec6: push rsi; add al, byte ptr [rax]; add dh, dh; ret 0xf08; 
0x000000000003f091: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000003f101: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x00000000000507d2: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x50820; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000003ed82: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000004e295: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000004dc35: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000005086f: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000003f021: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000004e203: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x000000000004dbd3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x0000000000076a18: push rsi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000035ce9: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000038d06: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003965a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000003985a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a5a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038cea: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039676: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039876: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000039a76: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038d22: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000093d50: push rsi; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000039491: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038ec9: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390a9: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039289: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039469: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000390c5: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000392a5: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000039485: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038ee5: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000005066a: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000039891: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000d2f20: push rsi; cli; push 0x6e; ja 0xd2ea9; ret 0x48f; 
0x000000000003e6d2: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000004fa86: push rsi; cmc; sub eax, edx; ret; 
0x000000000003687e: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003694e: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003e652: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000004fa76: push rsi; hlt; sub eax, edx; ret; 
0x000000000003e4a2: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000004fa46: push rsi; int1; sub eax, edx; ret; 
0x00000000000366a6: push rsi; jae 0x366b1; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000d2bfd: push rsi; jnp 0xd2c16; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x0000000000046b66: push rsi; mov dh, 7; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000036848: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036918: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003e5c2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000003e532: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000384d4: push rsi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000183ae: push rsi; or byte ptr [rcx - 0x3e], bh; xor eax, eax; ret; 
0x000000000004e477: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000004ddc7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000d2380: push rsi; pop rdx; je 0xd2348; ret 0xacfc; 
0x000000000004de07: push rsi; psllq mm1, qword ptr [rdi]; jg 0x4de14; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000004e4b7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x4e4c4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000bdf27: push rsi; psubb mm7, mm7; xchg byte ptr [rdi], cl; clc; call qword ptr [rsi]; 
0x00000000000d02c6: push rsi; ret; 
0x0000000000057506: push rsi; sbb al, 0; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x0000000000076a31: push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000039a91: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000392b2: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000050671: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000039691: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000238c2: push rsi; sub al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000006b923: push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000004fa56: push rsi; sub eax, edx; ret; 
0x000000000003e7d2: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000000be438: push rsi; xor al, 0xf8; jmp rsi; 
0x0000000000035cfe: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d923c: push rsp; adc al, 0; add al, ah; and al, 0xf4; jmp qword ptr [rdx + 1]; 
0x00000000000851c1: push rsp; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000000559dd: push rsp; add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; inc dword ptr [rbp + 0x31]; imul bl; ret 0x8b48; 
0x000000000002e27b: push rsp; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x00000000000be27c: push rsp; add edi, eax; jmp rsp; 
0x00000000000e158c: push rsp; add edi, ebx; jmp qword ptr [rbx + 1]; 
0x000000000009204a: push rsp; and al, 0x10; call rdx; 
0x0000000000026d38: push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000017152: push rsp; and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000082429: push rsp; and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000000171e2: push rsp; and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000056a3f: push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000005bc79: push rsp; and al, 0x18; mov qword ptr [rsp + 0x10], r8; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x0000000000085056: push rsp; and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000026c71: push rsp; and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000091613: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000000915a1: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000005f39c: push rsp; and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000a9460: push rsp; and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000a941a: push rsp; and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000056b42: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000005bd61: push rsp; and al, 8; mov qword ptr [rsp], rcx; call rax; 
0x000000000001de24: push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000be564: push rsp; clc; jmp rsp; 
0x00000000000dfba4: push rsp; insb byte ptr [rdi], dx; add byte ptr [rax], al; sub byte ptr [rdx], al; cli; jmp qword ptr [rcx]; 
0x00000000000da29c: push rsp; jl 0xda293; jmp qword ptr [rdi + 2]; 
0x00000000000d0065: push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000000bf157: push rsp; jno 0xbf154; push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf15b: push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf2af: push rsp; jno 0xbf2ac; push rsp; jno 0xbf2b0; jmp rsp; 
0x00000000000bf2b3: push rsp; jno 0xbf2b0; jmp rsp; 
0x00000000000bf337: push rsp; jno 0xbf334; call rcx; 
0x00000000000bf343: push rsp; jno 0xbf340; push rsp; jno 0xbf344; jmp rsp; 
0x00000000000bf347: push rsp; jno 0xbf344; jmp rsp; 
0x00000000000bf3a7: push rsp; jno 0xbf3a4; call rcx; 
0x00000000000bf3af: push rsp; jno 0xbf3ac; call rcx; 
0x00000000000bf3af: push rsp; jno 0xbf3ac; call rcx; jno 0xbf3b0; jmp rsp; 
0x00000000000bf403: push rsp; jno 0xbf400; call rcx; 
0x00000000000bf4f7: push rsp; jno 0xbf4f4; call rcx; 
0x000000000005fb5d: push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000000386d6: push rsp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000084d3c: push rsp; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000000c46a: push rsp; ret 0x4820; 
0x0000000000090f71: push rsp; ret 0xeb30; 
0x000000000005ec94: push rsp; ret; 
0x00000000000e34ac: push rsp; std; call qword ptr [rbx]; 
0x00000000000d2b4a: push rsp; syscall; 
0x0000000000046e80: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x000000000006fd16: pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x00000000000daf98: pushfq; add byte ptr [rax], al; add byte ptr [rcx + rsi - 0x2a500000], dh; hlt; jmp rsi; 
0x00000000000dff84: pushfq; add dword ptr [rax], 0xfa145800; jmp rdx; 
0x000000000006033a: pushfq; and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000008976f: pushfq; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x00000000000d97a4: pushfq; hlt; call qword ptr [rax]; 
0x0000000000036260: pushfq; ja 0x3626b; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000054100: pushfq; jb 0x5412c; add byte ptr [rax + 0x39], cl; ret 0x975; 
0x00000000000bf40c: pushfq; jb 0xbf408; call rcx; 
0x00000000000d6f68: pushfq; jg 0xd6f6b; add al, bl; cwde; clc; call qword ptr [rax]; 
0x00000000000e3684: pushfq; mov eax, 0x48d80000; std; call qword ptr [rcx]; 
0x00000000000533fd: pushfq; mov ebx, 0x89480006; ret 0x894d; 
0x0000000000047b80: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034354: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x000000000007ce30: pushfq; out 0x26, eax; add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x000000000005444c: pushfq; ret 0x3949; 
0x00000000000b5e82: pushfq; ret 0xf45; 
0x00000000000a8f98: pushfq; ret; 
0x00000000000d766d: pushfq; sti; ljmp [rdx + rsi*4 - 0x5e980000]; sti; jmp rax; 
0x00000000000d6210: pushfq; sub al, 0; add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x00000000000da684: pushfq; sub byte ptr [rax], al; add al, cl; mov esp, esi; call qword ptr [rsi]; 
0x00000000000be67c: pushfq; sub eax, edi; ljmp [rcx + rbp]; clc; call rdx; 
0x0000000000060d23: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000064067: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000005fb5a: rcl byte ptr [rax + 0x41], cl; push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000006db2a: rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x00000000000be898: rcl byte ptr [rax + rdi*8], 1; call qword ptr [rax + 0x16]; 
0x00000000000be898: rcl byte ptr [rax + rdi*8], 1; call qword ptr [rax + 0x16]; clc; call rax; 
0x00000000000be91c: rcl byte ptr [rbp - 8], 0xff; rcl byte ptr [rdi - 8], 1; jmp rax; 
0x00000000000bdf84: rcl byte ptr [rbx], cl; clc; jmp qword ptr [rdx + 0x13]; 
0x00000000000be890: rcl byte ptr [rcx], 1; clc; call qword ptr [rax + 0x13]; 
0x00000000000be890: rcl byte ptr [rcx], 1; clc; call qword ptr [rax + 0x13]; clc; call rax; 
0x00000000000bded8: rcl byte ptr [rcx], 1; clc; jmp qword ptr [rax + 0x11]; 
0x00000000000be920: rcl byte ptr [rdi - 8], 1; jmp rax; 
0x00000000000be8a0: rcl byte ptr [rdi], 1; clc; call qword ptr [rax + 0x19]; 
0x00000000000be8a0: rcl byte ptr [rdi], 1; clc; call qword ptr [rax + 0x19]; clc; call rax; 
0x00000000000be0cc: rcl byte ptr [rdx], 0xf8; call qword ptr [rax + 0x12]; 
0x00000000000be0cc: rcl byte ptr [rdx], 0xf8; call qword ptr [rax + 0x12]; clc; jmp rax; 
0x00000000000be854: rcl byte ptr [rdx], 1; clc; call qword ptr [rax + 0x14]; 
0x00000000000be854: rcl byte ptr [rdx], 1; clc; call qword ptr [rax + 0x14]; clc; call rax; 
0x00000000000be85c: rcl byte ptr [rip + 0x1750fff8], 1; clc; call rax; 
0x00000000000d237f: rcl dword ptr [rsi + 0x5a], cl; je 0xd2348; ret 0xacfc; 
0x00000000000be864: rcr byte ptr [rax], 1; clc; call qword ptr [rax + 0x1a]; 
0x00000000000be864: rcr byte ptr [rax], 1; clc; call qword ptr [rax + 0x1a]; clc; call rax; 
0x000000000003c82a: rcr byte ptr [rax], cl; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006e64c: rcr byte ptr [rbp + 0x27], 1; add byte ptr [rax - 0x75], cl; add al, 0xc6; mov esi, 1; jmp rax; 
0x0000000000080cf3: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000000ece0: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000736ff: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000093ef7: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000005dc22: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000001be46: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000000832b6: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x0000000000017ed6: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000075cdb: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000001a3d2: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000000bdcc4: rcr byte ptr [rbx - 0x62ef0009], 0xf7; jmp qword ptr [rax - 0x62]; 
0x00000000000be86c: rcr byte ptr [rbx], 1; clc; call qword ptr [rax + 0x1d]; 
0x00000000000be86c: rcr byte ptr [rbx], 1; clc; call qword ptr [rax + 0x1d]; clc; call rax; 
0x0000000000016e4c: rcr byte ptr [rcx], 1; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000d279d: rcr byte ptr [rdi + 0x6d], cl; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000000d72d0: rcr byte ptr [rdx - 0x67380000], 1; cli; jmp rsp; 
0x00000000000d67f0: rcr byte ptr [rdx], 0; cwde; je 0xd67ec; jmp qword ptr [rax]; 
0x00000000000be8a8: rcr byte ptr [rdx], 1; clc; call qword ptr [rax + 0x1c]; 
0x00000000000be8a8: rcr byte ptr [rdx], 1; clc; call qword ptr [rax + 0x1c]; clc; call rax; 
0x00000000000be8b0: rcr byte ptr [rip + 0x1f50fff8], 1; clc; call rax; 
0x00000000000be874: rcr byte ptr [rsi], 1; clc; call qword ptr [rax + 0x20]; 
0x00000000000be874: rcr byte ptr [rsi], 1; clc; call qword ptr [rax + 0x20]; clc; call rax; 
0x00000000000921a9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000004783c: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000049489: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000048ca9: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000049099: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000488b9: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004839c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047b7c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004735c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000048a58: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047ebc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004769c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000046e7c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004805c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000048f49: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048769: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000049879: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000471bc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000472f2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047ff2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047b12: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048e4a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004977a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000048332: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047632: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000047152: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047e52: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000048f9a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000487ba: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000050914: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000050906: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000005163a: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000028f01: rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000000875b: repe cmpsb byte ptr [rsi], byte ptr [rdi]; seta dl; sbb dl, 0; test dl, dl; jne 0x8768; ret; 
0x00000000000088a7: ret 0; 
0x000000000008b05a: ret 0x101; 
0x00000000000c9040: ret 0x10; 
0x0000000000093ecc: ret 0x114d; 
0x0000000000065ce4: ret 0x1176; 
0x00000000000581ea: ret 0x11; 
0x000000000007b4e9: ret 0x11e8; 
0x000000000008f5cc: ret 0x1272; 
0x00000000000b85e7: ret 0x13e8; 
0x000000000008c163: ret 0x13e9; 
0x00000000000b4321: ret 0x145; 
0x0000000000093376: ret 0x1474; 
0x0000000000088bf8: ret 0x1475; 
0x0000000000085271: ret 0x1477; 
0x000000000004f9e8: ret 0x148; 
0x000000000000d6d4: ret 0x149; 
0x00000000000943d1: ret 0x14c; 
0x00000000000424af: ret 0x14d; 
0x000000000002e004: ret 0x14eb; 
0x0000000000079981: ret 0x1674; 
0x0000000000013b1a: ret 0x167; 
0x000000000001371a: ret 0x16b; 
0x000000000005641e: ret 0x16e9; 
0x0000000000081356: ret 0x1776; 
0x00000000000311da: ret 0x17; 
0x00000000000423ec: ret 0x180f; 
0x00000000000810e5: ret 0x1876; 
0x00000000000139c2: ret 0x18; 
0x0000000000052ae7: ret 0x190; 
0x0000000000065cdb: ret 0x1a72; 
0x00000000000d2cfa: ret 0x1ad4; 
0x00000000000d148d: ret 0x1b49; 
0x0000000000010b82: ret 0x1b; 
0x00000000000549d7: ret 0x1be; 
0x000000000002e6aa: ret 0x1c0; 
0x0000000000018a89: ret 0x1ce9; 
0x00000000000cad10: ret 0x1d4; 
0x00000000000cb4a8: ret 0x1d5; 
0x0000000000009b01: ret 0x1d89; 
0x0000000000017d92: ret 0x1f0f; 
0x0000000000028c26: ret 0x1f77; 
0x00000000000834e6: ret 0x1fba; 
0x00000000000680cd: ret 0x1fe9; 
0x0000000000068d27: ret 0x200; 
0x0000000000056edc: ret 0x2044; 
0x00000000000739aa: ret 0x207; 
0x000000000002da2a: ret 0x20a; 
0x000000000006f3d7: ret 0x20be; 
0x0000000000085bfc: ret 0x2148; 
0x000000000001da7d: ret 0x214c; 
0x000000000001d00c: ret 0x2175; 
0x000000000002e7ba: ret 0x224; 
0x000000000008e368: ret 0x2275; 
0x000000000004a758: ret 0x2288; 
0x00000000000bb4f9: ret 0x22; 
0x00000000000b9c82: ret 0x230c; 
0x00000000000371f2: ret 0x2373; 
0x0000000000070c07: ret 0x23e8; 
0x00000000000c9d18: ret 0x24; 
0x0000000000057204: ret 0x24e9; 
0x00000000000201bd: ret 0x2501; 
0x0000000000074a84: ret 0x2504; 
0x000000000002d943: ret 0x2575; 
0x0000000000053b8e: ret 0x257e; 
0x000000000008ac55: ret 0x25; 
0x000000000008f3fa: ret 0x25be; 
0x000000000008d0e2: ret 0x25d7; 
0x00000000000882f2: ret 0x25e4; 
0x00000000000819e6: ret 0x2774; 
0x000000000006b4e2: ret 0x27de; 
0x00000000000389c6: ret 0x280f; 
0x00000000000810d5: ret 0x2876; 
0x000000000005a5a6: ret 0x28; 
0x000000000008e3e7: ret 0x28f5; 
0x0000000000070bde: ret 0x290f; 
0x00000000000a8d0b: ret 0x2941; 
0x0000000000018eb9: ret 0x2948; 
0x0000000000073b1a: ret 0x2949; 
0x0000000000019280: ret 0x294c; 
0x000000000001d2ed: ret 0x294d; 
0x0000000000050eca: ret 0x29a4; 
0x000000000001a8da: ret 0x2b48; 
0x000000000002d06b: ret 0x2b74; 
0x0000000000028f42: ret 0x2b75; 
0x0000000000051ab2: ret 0x2b77; 
0x0000000000008b95: ret 0x2b8; 
0x000000000002b552: ret 0x2b; 
0x0000000000028d9a: ret 0x2bea; 
0x000000000002859a: ret 0x2bf2; 
0x00000000000a8d37: ret 0x2c0; 
0x00000000000263d9: ret 0x2c13; 
0x000000000002979e: ret 0x2c75; 
0x000000000001aceb: ret 0x2c; 
0x000000000001d67a: ret 0x2cb5; 
0x000000000000e35a: ret 0x2db5; 
0x0000000000008412: ret 0x2de9; 
0x00000000000a721a: ret 0x2e1; 
0x000000000007c9b5: ret 0x2e66; 
0x00000000000596fe: ret 0x2f75; 
0x00000000000183c0: ret 0x3039; 
0x0000000000075645: ret 0x30be; 
0x00000000000ca208: ret 0x33; 
0x00000000000556d2: ret 0x348; 
0x0000000000060b44: ret 0x349; 
0x000000000008ad2a: ret 0x3774; 
0x0000000000081336: ret 0x3776; 
0x00000000000d25da: ret 0x3827; 
0x000000000007d83e: ret 0x3873; 
0x00000000000810c5: ret 0x3876; 
0x0000000000020c6b: ret 0x389; 
0x00000000000d0c66: ret 0x38ae; 
0x000000000007ff76: ret 0x38b; 
0x00000000000b2c78: ret 0x3901; 
0x0000000000090aed: ret 0x3934; 
0x000000000007af3f: ret 0x3941; 
0x000000000001b181: ret 0x3948; 
0x000000000001bf3d: ret 0x3949; 
0x000000000002906c: ret 0x394c; 
0x00000000000765ed: ret 0x394d; 
0x0000000000050062: ret 0x3a01; 
0x00000000000371db: ret 0x3a73; 
0x00000000000a0343: ret 0x3a83; 
0x0000000000050a81: ret 0x3b48; 
0x0000000000056bbf: ret 0x3b8; 
0x000000000001e269: ret 0x3c75; 
0x00000000000861b8: ret 0x3d01; 
0x000000000008ed58: ret 0x3d73; 
0x0000000000018114: ret 0x3d83; 
0x0000000000090aad: ret 0x3d; 
0x0000000000026c5f: ret 0x3de9; 
0x000000000008ab8a: ret 0x3e80; 
0x00000000000a0d62: ret 0x4001; 
0x00000000000684db: ret 0x4002; 
0x000000000001614d: ret 0x4074; 
0x0000000000081fd1: ret 0x408d; 
0x000000000005994a: ret 0x4101; 
0x00000000000538f1: ret 0x4107; 
0x000000000006dca8: ret 0x4108; 
0x000000000006e45d: ret 0x4110; 
0x0000000000090f86: ret 0x4118; 
0x0000000000090b27: ret 0x4134; 
0x00000000000612f7: ret 0x415f; 
0x000000000005ed5e: ret 0x41c3; 
0x000000000008c5aa: ret 0x422; 
0x000000000002fe5a: ret 0x4266; 
0x0000000000052be5: ret 0x428d; 
0x000000000007e3c3: ret 0x4389; 
0x000000000000ecb1: ret 0x4401; 
0x0000000000018474: ret 0x4404; 
0x0000000000091306: ret 0x4418; 
0x000000000002456b: ret 0x4466; 
0x0000000000027fe3: ret 0x4473; 
0x000000000008362e: ret 0x448b; 
0x00000000000a529c: ret 0x4502; 
0x00000000000d1764: ret 0x474c; 
0x00000000000172c4: ret 0x4801; 
0x000000000001c136: ret 0x4803; 
0x0000000000018796: ret 0x4804; 
0x000000000004a6e3: ret 0x4808; 
0x000000000000bea6: ret 0x480a; 
0x0000000000026678: ret 0x4810; 
0x0000000000066a8c: ret 0x4811; 
0x000000000006b3a7: ret 0x481e; 
0x000000000000c46b: ret 0x4820; 
0x000000000005c50e: ret 0x4830; 
0x0000000000025591: ret 0x4840; 
0x0000000000055d85: ret 0x4864; 
0x000000000004a398: ret 0x48c3; 
0x00000000000186ce: ret 0x48d; 
0x0000000000022f73: ret 0x48e9; 
0x00000000000d2f26: ret 0x48f; 
0x000000000000ec4c: ret 0x4901; 
0x000000000006379b: ret 0x4902; 
0x0000000000018395: ret 0x4904; 
0x00000000000235c2: ret 0x4908; 
0x00000000000558c2: ret 0x4909; 
0x000000000003432c: ret 0x4910; 
0x00000000000574ef: ret 0x4ab8; 
0x0000000000068929: ret 0x4c01; 
0x00000000000288ba: ret 0x4c07; 
0x000000000006ac66: ret 0x4c40; 
0x000000000002e28d: ret 0x4c88; 
0x0000000000069f18: ret 0x4d10; 
0x000000000000b5af: ret 0x4de8; 
0x00000000000d2987: ret 0x4e27; 
0x000000000000a5be: ret 0x4f76; 
0x000000000005d09f: ret 0x5089; 
0x0000000000059567: ret 0x508b; 
0x000000000001c58a: ret 0x50; 
0x000000000007c1ba: ret 0x514; 
0x00000000000371c4: ret 0x5173; 
0x0000000000053f1a: ret 0x51; 
0x00000000000838ae: ret 0x5438; 
0x0000000000056e17: ret 0x5488; 
0x00000000000a9418: ret 0x5489; 
0x00000000000d0bec: ret 0x5508; 
0x000000000007f48e: ret 0x5590; 
0x0000000000081316: ret 0x5776; 
0x00000000000d2eb8: ret 0x5803; 
0x0000000000063801: ret 0x5841; 
0x000000000009fcb5: ret 0x5876; 
0x00000000000178d3: ret 0x589; 
0x00000000000747e1: ret 0x58c; 
0x00000000000b5e0a: ret 0x58e9; 
0x00000000000d08c0: ret 0x591c; 
0x0000000000066c76: ret 0x592; 
0x00000000000d1627: ret 0x5ae4; 
0x00000000000639e9: ret 0x5be9; 
0x0000000000018e9e: ret 0x5d5b; 
0x00000000000b3695: ret 0x5e8; 
0x00000000000d3352: ret 0x62c1; 
0x000000000002e26d: ret 0x6348; 
0x000000000008bfd0: ret 0x6349; 
0x000000000009d284: ret 0x637f; 
0x0000000000066a63: ret 0x6411; 
0x000000000005ac7c: ret 0x652; 
0x000000000005a8ea: ret 0x654; 
0x0000000000069411: ret 0x6601; 
0x0000000000081051: ret 0x6620; 
0x000000000002dab8: ret 0x66c3; 
0x000000000008f5de: ret 0x674; 
0x0000000000081306: ret 0x6776; 
0x00000000000d08df: ret 0x67b2; 
0x0000000000021215: ret 0x6874; 
0x00000000000564ca: ret 0x6ae9; 
0x0000000000001960: ret 0x6e0; 
0x00000000000d34e1: ret 0x6f9; 
0x000000000004e0ba: ret 0x709; 
0x0000000000068bba: ret 0x70e8; 
0x000000000006c21a: ret 0x73; 
0x0000000000021391: ret 0x7401; 
0x000000000002c91a: ret 0x7402; 
0x000000000008c03a: ret 0x7403; 
0x00000000000575c1: ret 0x7404; 
0x000000000007f262: ret 0x7408; 
0x000000000001cb1d: ret 0x7420; 
0x0000000000071b34: ret 0x7450; 
0x00000000000907ea: ret 0x7472; 
0x000000000004e5c9: ret 0x7501; 
0x000000000004e5d6: ret 0x7502; 
0x000000000004e5e3: ret 0x7504; 
0x0000000000028bcd: ret 0x7508; 
0x000000000004e59b: ret 0x7510; 
0x000000000004e5a8: ret 0x7520; 
0x000000000002e6ce: ret 0x7540; 
0x00000000000851d0: ret 0x7577; 
0x00000000000907f5: ret 0x75e8; 
0x00000000000360b2: ret 0x7677; 
0x00000000000536e6: ret 0x76b; 
0x0000000000092462: ret 0x777; 
0x0000000000053bac: ret 0x77e; 
0x0000000000093d26: ret 0x77f; 
0x00000000000b847e: ret 0x7ce8; 
0x000000000000bd01: ret 0x7ce9; 
0x000000000004063a: ret 0x7df; 
0x0000000000080ff1: ret 0x7e20; 
0x000000000008126c: ret 0x7e40; 
0x00000000000b5ce4: ret 0x7ee9; 
0x000000000002ea0c: ret 0x7f10; 
0x000000000007b148: ret 0x7f3c; 
0x000000000002fbe9: ret 0x8000; 
0x00000000000b7812: ret 0x8001; 
0x0000000000055b0a: ret 0x8010; 
0x000000000003c98e: ret 0x80; 
0x000000000008665e: ret 0x8116; 
0x0000000000097ff9: ret 0x8141; 
0x00000000000badf2: ret 0x8148; 
0x00000000000b80fa: ret 0x8166; 
0x0000000000027360: ret 0x820f; 
0x0000000000063023: ret 0x8301; 
0x000000000008cd57: ret 0x8303; 
0x000000000002ddf4: ret 0x830f; 
0x00000000000538aa: ret 0x8341; 
0x000000000000bb2b: ret 0x8348; 
0x00000000000504e0: ret 0x8349; 
0x000000000008ebcf: ret 0x8364; 
0x00000000000855c1: ret 0x8401; 
0x000000000007eba6: ret 0x840; 
0x000000000001bf45: ret 0x840f; 
0x0000000000061d70: ret 0x841; 
0x0000000000089777: ret 0x848b; 
0x000000000007c659: ret 0x8502; 
0x000000000001d3a2: ret 0x850f; 
0x00000000000663c3: ret 0x8511; 
0x00000000000578f2: ret 0x8545; 
0x000000000000ba82: ret 0x8548; 
0x000000000008677c: ret 0x8549; 
0x000000000002d96a: ret 0x854d; 
0x000000000000eb21: ret 0x8575; 
0x000000000000a306: ret 0x860f; 
0x0000000000016cf5: ret 0x870f; 
0x00000000000d01fe: ret 0x871e; 
0x000000000007b14f: ret 0x875; 
0x00000000000810f5: ret 0x876; 
0x000000000000bbac: ret 0x8801; 
0x000000000006006d: ret 0x8804; 
0x0000000000089403: ret 0x882e; 
0x0000000000069462: ret 0x8841; 
0x000000000008dcbe: ret 0x8844; 
0x000000000000b39a: ret 0x8901; 
0x000000000005a3fe: ret 0x8902; 
0x000000000001c69a: ret 0x8908; 
0x000000000006b266: ret 0x8941; 
0x000000000002983f: ret 0x8944; 
0x00000000000090b8: ret 0x8948; 
0x000000000001854a: ret 0x8949; 
0x000000000001abf1: ret 0x894c; 
0x0000000000053403: ret 0x894d; 
0x0000000000092edb: ret 0x894e; 
0x0000000000087d01: ret 0x89e9; 
0x000000000005e939: ret 0x8b01; 
0x000000000001852f: ret 0x8b04; 
0x0000000000085363: ret 0x8b05; 
0x000000000007cb5b: ret 0x8b08; 
0x00000000000d2a2e: ret 0x8b36; 
0x0000000000027851: ret 0x8b41; 
0x000000000007b17b: ret 0x8b44; 
0x0000000000008f0e: ret 0x8b48; 
0x000000000001b3a6: ret 0x8b49; 
0x0000000000092e5e: ret 0x8b4a; 
0x000000000001635d: ret 0x8b4c; 
0x000000000009d9bf: ret 0x8b64; 
0x000000000009fee0: ret 0x8b; 
0x000000000007239d: ret 0x8c0f; 
0x000000000006acc1: ret 0x8d04; 
0x00000000000b5baf: ret 0x8d0f; 
0x0000000000026f44: ret 0x8d44; 
0x00000000000097f0: ret 0x8d48; 
0x000000000001870d: ret 0x8d49; 
0x0000000000092207: ret 0x8d4a; 
0x0000000000028064: ret 0x8d4c; 
0x000000000005350c: ret 0x8d4f; 
0x00000000000a9243: ret 0x8d74; 
0x000000000006b282: ret 0x8d89; 
0x0000000000060b3b: ret 0x8e0f; 
0x000000000006b52a: ret 0x8f0f; 
0x0000000000049b65: ret 0x90c3; 
0x0000000000028e2d: ret 0x93b; 
0x0000000000025115: ret 0x948; 
0x00000000000815a8: ret 0x94c; 
0x000000000009ccb2: ret 0x950f; 
0x0000000000052880: ret 0x9572; 
0x00000000000d1853: ret 0x9576; 
0x000000000006de7f: ret 0x958b; 
0x0000000000054106: ret 0x975; 
0x000000000002c8ae: ret 0x976; 
0x00000000000974f5: ret 0x9875; 
0x00000000000d34b9: ret 0x990e; 
0x000000000002436a: ret 0x994; 
0x000000000008cb03: ret 0x9be9; 
0x000000000009f3c5: ret 0x9eb; 
0x00000000000db4ee: ret 0xa01; 
0x00000000000575e8: ret 0xa076; 
0x0000000000056394: ret 0xa0e9; 
0x00000000000b47a9: ret 0xa472; 
0x00000000000d1543: ret 0xa514; 
0x00000000000c8840: ret 0xa; 
0x000000000007315a: ret 0xab; 
0x000000000005858d: ret 0xabe; 
0x00000000000d19c7: ret 0xac65; 
0x00000000000534a0: ret 0xace9; 
0x00000000000d2384: ret 0xacfc; 
0x0000000000099c89: ret 0xad83; 
0x00000000000961cd: ret 0xadeb; 
0x000000000006ccbf: ret 0xae9; 
0x000000000002d7aa: ret 0xaeeb; 
0x00000000000d8907: ret 0xb00e; 
0x000000000001b80d: ret 0xb074; 
0x000000000008c77a: ret 0xb0e8; 
0x000000000002516b: ret 0xb277; 
0x00000000000645cb: ret 0xb2eb; 
0x0000000000056380: ret 0xb4e9; 
0x000000000006b2a6: ret 0xb589; 
0x000000000000bb65: ret 0xb60f; 
0x0000000000009df4: ret 0xb70f; 
0x00000000000086aa: ret 0xb7c; 
0x000000000007928c: ret 0xb848; 
0x00000000000774e5: ret 0xb8; 
0x00000000000d188e: ret 0xb9b9; 
0x000000000007aac5: ret 0xb9e9; 
0x000000000007c734: ret 0xba41; 
0x000000000002cfe3: ret 0xbae9; 
0x0000000000064702: ret 0xbaeb; 
0x000000000009a6d9: ret 0xbb08; 
0x00000000000b619d: ret 0xbc80; 
0x000000000006b292: ret 0xbd89; 
0x00000000000722dd: ret 0xbde8; 
0x0000000000099576: ret 0xbe08; 
0x0000000000090932: ret 0xbe0f; 
0x00000000000d15e4: ret 0xbe57; 
0x000000000009854a: ret 0xbf08; 
0x000000000002faa9: ret 0xc000; 
0x00000000000a6af3: ret 0xc001; 
0x000000000000c096: ret 0xc031; 
0x0000000000066aae: ret 0xc083; 
0x00000000000351b0: ret 0xc085; 
0x0000000000017306: ret 0xc148; 
0x0000000000025405: ret 0xc183; 
0x000000000000d808: ret 0xc189; 
0x0000000000057202: ret 0xc221; 
0x00000000000186d4: ret 0xc229; 
0x0000000000018330: ret 0xc269; 
0x000000000002987b: ret 0xc275; 
0x00000000000861b6: ret 0xc283; 
0x0000000000037094: ret 0xc2b2; 
0x0000000000051b1e: ret 0xc35b; 
0x0000000000065e9d: ret 0xc389; 
0x000000000002987d: ret 0xc3f3; 
0x00000000000cfd82: ret 0xc4c3; 
0x00000000000d1198: ret 0xc4ff; 
0x00000000000812d1: ret 0xc540; 
0x0000000000065f66: ret 0xc589; 
0x00000000000959f3: ret 0xc601; 
0x0000000000070b3c: ret 0xc689; 
0x000000000004aaa0: ret 0xc748; 
0x00000000000a05f2: ret 0xc749; 
0x000000000008ebad: ret 0xc74; 
0x0000000000076738: ret 0xc789; 
0x00000000000909c2: ret 0xc829; 
0x000000000006f512: ret 0xc839; 
0x0000000000020c5c: ret 0xc883; 
0x00000000000b5d3a: ret 0xc8e9; 
0x000000000006df57: ret 0xc985; 
0x000000000007cc43: ret 0xc9eb; 
0x000000000004a6b1: ret 0xc9ff; 
0x0000000000008ab1: ret 0xca21; 
0x00000000000959e5: ret 0xcb73; 
0x00000000000d0c2a: ret 0xcca7; 
0x000000000007395e: ret 0xcce8; 
0x00000000000d2d0d: ret 0xcd11; 
0x000000000000e012: ret 0xce80; 
0x000000000002b15e: ret 0xd020; 
0x0000000000017116: ret 0xd021; 
0x00000000000719bb: ret 0xd120; 
0x0000000000052bd3: ret 0xd129; 
0x000000000000a114: ret 0xd284; 
0x0000000000065a5a: ret 0xd285; 
0x0000000000089806: ret 0xd348; 
0x0000000000083f2d: ret 0xd389; 
0x000000000005da17: ret 0xd5e9; 
0x0000000000095304: ret 0xd629; 
0x0000000000095b52: ret 0xd729; 
0x0000000000090d7f: ret 0xd75; 
0x0000000000018cb6: ret 0xd774; 
0x00000000000d27a5: ret 0xd8f; 
0x00000000000592bc: ret 0xd975; 
0x00000000000c8c40: ret 0xd; 
0x0000000000059393: ret 0xda75; 
0x000000000000875f: ret 0xda80; 
0x00000000000b5d4c: ret 0xdae9; 
0x000000000001a383: ret 0xdaf7; 
0x00000000000b42f7: ret 0xdb31; 
0x000000000006224a: ret 0xdb76; 
0x00000000000d2886: ret 0xdcd9; 
0x00000000000d1802: ret 0xde5d; 
0x0000000000009794: ret 0xde89; 
0x00000000000d0591: ret 0xde9e; 
0x000000000002f969: ret 0xe000; 
0x000000000004e559: ret 0xe074; 
0x000000000005ab50: ret 0xe083; 
0x000000000005a982: ret 0xe1eb; 
0x00000000000169f0: ret 0xe281; 
0x0000000000009b35: ret 0xe283; 
0x0000000000080cb8: ret 0xe575; 
0x0000000000072fc0: ret 0xe57f; 
0x000000000007393a: ret 0xe583; 
0x0000000000051b12: ret 0xe680; 
0x000000000007401f: ret 0xe683; 
0x00000000000d29a6: ret 0xe71f; 
0x0000000000088bca: ret 0xe75; 
0x000000000002d096: ret 0xe775; 
0x00000000000b7a15: ret 0xe783; 
0x00000000000735f3: ret 0xe7e9; 
0x000000000000a395: ret 0xe883; 
0x0000000000088746: ret 0xe8c0; 
0x000000000000be3a: ret 0xe901; 
0x000000000000be7f: ret 0xe902; 
0x000000000004a746: ret 0xe908; 
0x0000000000046ce6: ret 0xe910; 
0x000000000006baed: ret 0xe920; 
0x00000000000d0d07: ret 0xe970; 
0x0000000000083983: ret 0xe9c1; 
0x0000000000051aaa: ret 0xea81; 
0x0000000000016b9d: ret 0xeab8; 
0x0000000000009b1d: ret 0xeac1; 
0x000000000008d406: ret 0xeb01; 
0x000000000007cb73: ret 0xeb04; 
0x000000000003435a: ret 0xeb10; 
0x0000000000090f72: ret 0xeb30; 
0x0000000000080be2: ret 0xeb75; 
0x00000000000d34b8: ret 0xec2; 
0x00000000000a17d1: ret 0xec74; 
0x0000000000018c40: ret 0xed75; 
0x0000000000055872: ret 0xede9; 
0x00000000000d315a: ret 0xef32; 
0x00000000000b5963: ret 0xef89; 
0x000000000008396b: ret 0xefc1; 
0x000000000008577f: ret 0xefeb; 
0x000000000002f829: ret 0xf000; 
0x000000000000e4f5: ret 0xf01; 
0x0000000000024c19: ret 0xf02; 
0x00000000000270c9: ret 0xf04; 
0x00000000000a9483: ret 0xf089; 
0x000000000001ba93: ret 0xf08; 
0x0000000000024ee9: ret 0xf0f; 
0x000000000001761e: ret 0xf10; 
0x0000000000073e3b: ret 0xf20; 
0x0000000000027233: ret 0xf275; 
0x000000000000a97a: ret 0xf3; 
0x0000000000070ef6: ret 0xf3f; 
0x00000000000743c3: ret 0xf40; 
0x000000000007d5ed: ret 0xf41; 
0x00000000000b5e19: ret 0xf45; 
0x000000000002dc79: ret 0xf475; 
0x000000000005f8f6: ret 0xf48; 
0x000000000000867d: ret 0xf49; 
0x00000000000b5c6e: ret 0xf4e9; 
0x0000000000018332: ret 0xf4ec; 
0x00000000000743a9: ret 0xf50; 
0x00000000000b8f9a: ret 0xf5de; 
0x0000000000084e25: ret 0xf631; 
0x000000000002fde6: ret 0xf66; 
0x000000000008a857: ret 0xf675; 
0x000000000007d6ac: ret 0xf741; 
0x000000000000e742: ret 0xf748; 
0x000000000009244c: ret 0xf749; 
0x000000000009365a: ret 0xf74e; 
0x000000000002f6e9: ret 0xf800; 
0x00000000000bdfa0: ret 0xf810; 
0x00000000000be6ac: ret 0xf82b; 
0x00000000000be6a4: ret 0xf82c; 
0x00000000000be69c: ret 0xf82d; 
0x00000000000be694: ret 0xf82e; 
0x00000000000be68c: ret 0xf82f; 
0x00000000000be498: ret 0xf837; 
0x00000000000d0470: ret 0xf869; 
0x00000000000b65fa: ret 0xf883; 
0x000000000009f51a: ret 0xf8ad; 
0x0000000000022993: ret 0xf8b; 
0x00000000000536ed: ret 0xf8c1; 
0x0000000000049fc6: ret 0xf8c5; 
0x0000000000051e54: ret 0xf8e9; 
0x0000000000053d22: ret 0xf983; 
0x00000000000bffe8: ret 0xf9ab; 
0x000000000003314e: ret 0xf; 
0x00000000000888fa: ret 0xfa51; 
0x00000000000186d6: ret 0xfa83; 
0x00000000000ba3aa: ret 0xfae3; 
0x0000000000090830: ret 0xfae8; 
0x0000000000029552: ret 0xfae9; 
0x0000000000029b4a: ret 0xfbe9; 
0x000000000002f5a9: ret 0xfc00; 
0x000000000002e4c1: ret 0xfc3; 
0x000000000008707a: ret 0xfd04; 
0x000000000002f469: ret 0xfe00; 
0x0000000000009c65: ret 0xfe83; 
0x0000000000083d13: ret 0xfe9; 
0x000000000002b69a: ret 0xfeb7; 
0x000000000002f329: ret 0xff00; 
0x0000000000067eea: ret 0xff14; 
0x000000000005aafb: ret 0xff25; 
0x000000000003e501: ret 0xff2; 
0x0000000000035a29: ret 0xff2d; 
0x00000000000785e7: ret 0xff31; 
0x000000000002fd8a: ret 0xff3; 
0x000000000002f1e9: ret 0xff80; 
0x0000000000073bc1: ret 0xff83; 
0x00000000000621dc: ret 0xff85; 
0x000000000006ac52: ret 0xff88; 
0x000000000009aaa2: ret 0xff9f; 
0x0000000000016bea: ret 0xffa8; 
0x0000000000013f9a: ret 0xffaf; 
0x0000000000013c9a: ret 0xffb2; 
0x000000000001aea7: ret 0xffb8; 
0x00000000000a66b9: ret 0xffbf; 
0x000000000002f0a9: ret 0xffc0; 
0x000000000000b842: ret 0xffcd; 
0x000000000002d648: ret 0xffdf; 
0x000000000002ef69: ret 0xffe0; 
0x000000000006fa2e: ret 0xffe6; 
0x00000000000962a2: ret 0xffe7; 
0x0000000000075859: ret 0xffe8; 
0x0000000000056435: ret 0xffe9; 
0x0000000000018b69: ret 0xffef; 
0x0000000000016932: ret 0xfff0; 
0x0000000000077fd0: ret 0xfff1; 
0x000000000000916a: ret 0xfff2; 
0x00000000000d6565: ret 0xfff4; 
0x0000000000094ff8: ret 0xfff7; 
0x000000000002ece9: ret 0xfff8; 
0x000000000008d7a0: ret 0xfff9; 
0x000000000002d062: ret 0xfff; 
0x0000000000026b68: ret 0xfffa; 
0x000000000000d729: ret 0xfffb; 
0x000000000002eba9: ret 0xfffc; 
0x0000000000022415: ret 0xfffd; 
0x000000000002b0cc: ret 0xfffe; 
0x000000000000c3ba: ret 0xffff; 
0x000000000002ac4d: ret 1; 
0x0000000000025b3d: ret 2; 
0x000000000001ce9a: ret 3; 
0x000000000000a455: ret 4; 
0x0000000000063e7a: ret 5; 
0x0000000000000c29: ret 6; 
0x00000000000348ea: ret 7; 
0x0000000000012e58: ret 8; 
0x000000000004f00a: ret 9; 
0x0000000000001e10: ret; 
0x00000000000d7ae9: retf 0; fcom st(4); std; jmp qword ptr [rax]; 
0x000000000008e365: retf 0x394c; ret 0x2275; 
0x0000000000017afc: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000017be8: retf 0x6411; xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000000d0c62: retf 0x6ee8; sahf; ret 0x38ae; 
0x000000000001b163: retf 0x775; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000000b4532: retf 0x8040; call qword ptr [rax + 0x74]; 
0x00000000000342ff: retf 0x8349; ret 0x7f10; 
0x0000000000046f47: retf 0x8349; ret 0xf10; 
0x00000000000aa6df: retf 0x850f; call qword ptr [rsi]; 
0x000000000001c942: retf 0x894c; out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x0000000000056a3c: retf 0x8d48; push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000004e0fd: retf 0x8d4c; sbb eax, 0x7097b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dadd: retf 0x8d4c; sbb eax, 0x70f1b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a945a: retf 0x948; ret 0x8948; 
0x0000000000058e98: retf 0xc085; jne 0x58eb8; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000000058f58: retf 0xc085; jne 0x58f78; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000009689d: retf 0xc748; ret 0xffa8; 
0x0000000000051a16: retf 0xd975; vzeroupper; ret; 
0x0000000000034326: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000051853: retf 0xe175; vzeroupper; ret; 
0x000000000009ea47: retf 0xe677; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000004a4f0: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000008276c: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000081a51: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000b8c92: retf 0xf5e1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000036c36: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009f962: retf 0xf6b0; jmp qword ptr [rsi + 0x2e]; 
0x00000000000816f6: retf 0xfdc5; xlatb; ret; 
0x00000000000d6615: retf 0xfff4; adc al, 0x46; add byte ptr [rax], al; cmp ah, cl; hlt; jmp qword ptr [rax + 0x46]; 
0x000000000007203a: retf 0xfff5; jmp qword ptr [rsi - 0x70]; 
0x00000000000627ce: retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000b569e: retf 0xfffc; jmp qword ptr [rsi + 0xf]; 
0x0000000000052462: retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000001afee: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000000b0732: retf; adc eax, 0x83480000; ret 0xe910; 
0x000000000005910d: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x00000000000b1932: retf; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000055e2a: retf; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000b1032: retf; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b1332: retf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000d0beb: retf; ret 0x5508; 
0x000000000006b269: rol al, 0xea; add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d83b76; ret 0x8341; 
0x00000000000bde90: rol bh, 0xf7; call qword ptr [rax]; 
0x000000000008104e: rol bl, 0x83; ret 0x6620; 
0x0000000000050acd: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x000000000002fd62: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000082c06: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a636: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000035416: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x00000000000819e2: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000000cc6e0: rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000009c5a: rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x00000000000a2a19: rol byte ptr [rax - 0x69f0f606], 1; ret 0x8348; 
0x0000000000062b54: rol byte ptr [rax - 0x7af07f07], 0xc1; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000083be: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x83ca; call rax; 
0x0000000000008c65: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x8c78; jmp rax; 
0x0000000000008ca6: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x8cb8; jmp rax; 
0x0000000000089771: rol byte ptr [rax], 0; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000016b68: rol byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000035fbd: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000005a40b: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x0000000000016b70: rol byte ptr [rax], 1; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000019ea9: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000090477: rol byte ptr [rax], cl; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000850df: rol byte ptr [rbp + 0x31], 1; shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x85118; mov eax, 0x101; syscall; 
0x0000000000035292: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000006ccb5: rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x0000000000058f9b: rol byte ptr [rbp - 0x77], 0xf2; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x0000000000058edb: rol byte ptr [rbp - 0x77], 0xf2; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x00000000000921ab: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x00000000000229e8: rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000000183a5: rol byte ptr [rbx - 0x76b7fe18], 1; mov qword ptr ds:[rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x00000000000612f1: rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x0000000000082a72: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000be338: rol byte ptr [rbx], 0xf8; push qword ptr [rax]; add edi, eax; call rax; 
0x00000000000be2f8: rol byte ptr [rbx], 1; clc; inc dword ptr [rax + 3]; clc; call rax; 
0x0000000000051aa1: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x0000000000073e0f: rol byte ptr [rcx + 0xf], 0x94; ret; 
0x0000000000050ace: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x0000000000018569: rol byte ptr [rcx + rcx*4 + 0x16], 0x5d; ret; 
0x0000000000055bfa: rol byte ptr [rcx + rcx*4 - 0x1e], 0x48; mov esi, ebp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000007aac2: rol byte ptr [rcx - 0x77], 1; ret 0xb9e9; 
0x00000000000b65f7: rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x0000000000055bf7: rol byte ptr [rcx - 0x77], cl; rol byte ptr [rcx + rcx*4 - 0x1e], 0x48; mov esi, ebp; mov edi, ebx; mov eax, 0x3d; syscall; 
0x0000000000018471: rol byte ptr [rcx - 0x7d], cl; ret 0x4404; 
0x00000000000a5299: rol byte ptr [rcx - 0x7d], cl; ret 0x4502; 
0x0000000000018663: rol byte ptr [rcx - 0x7d], cl; ret 0xe902; 
0x0000000000082a52: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000005c9e6: rol byte ptr [rcx], 0x50; call rbx; 
0x00000000000675ab: rol byte ptr [rcx], 0x83; ret 0x4801; 
0x0000000000051e37: rol byte ptr [rcx], 0x83; ret 0xf01; 
0x0000000000072103: rol byte ptr [rcx], 0xc7; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000051e50: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x00000000000de13d: rol byte ptr [rcx], 1; add byte ptr [rax + rax + 0x635c0000], ah; add byte ptr [rax], al; test al, 0x2f; clc; call qword ptr [rdi]; 
0x000000000005b5f1: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000082ab2: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000053ba9: rol byte ptr [rdi], 0x39; ret 0x77e; 
0x00000000000be11c: rol byte ptr [rdi], 1; clc; call qword ptr [rax + 7]; 
0x00000000000be11c: rol byte ptr [rdi], 1; clc; call qword ptr [rax + 7]; clc; call rax; 
0x0000000000082a62: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000055d42: rol byte ptr [rdx], 1; add byte ptr [rax], al; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x0000000000082aa2: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000051ad4: rol byte ptr [rsi], 1; add byte ptr [rax + 0x63], cl; add al, 0xbe; add rax, rsi; jmp rax; 
0x0000000000051af6: rol byte ptr [rsi], 1; add cl, al; call 0xfe59e0b; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000be124: rol byte ptr [rsi], 1; clc; call qword ptr [rax + 6]; 
0x00000000000be124: rol byte ptr [rsi], 1; clc; call qword ptr [rax + 6]; clc; call rax; 
0x0000000000050e82: rol ch, 0x7e; jg 0x50ec8; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000050fb5: rol ch, 0x7e; jg 0x50ffb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000003542f: rol ch, 1; std; xlatb; ret; 
0x000000000004a65f: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000081756: rol ch, cl; std; xlatb; ret; 
0x00000000000cfd80: rol cl, 0xc2; ret; 
0x0000000000053b33: rol cl, cl; cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x00000000000829fc: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000005184c: rol dword ptr [rax + 0x48000000], 0x39; retf 0xe175; vzeroupper; ret; 
0x0000000000051632: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000018391: rol dword ptr [rax + rcx*2], 0x83; ret 0x4904; 
0x0000000000051a0f: rol dword ptr [rax], 1; add byte ptr [rax], al; cmp rdx, rcx; jne 0x519f2; vzeroupper; ret; 
0x00000000000903b7: rol dword ptr [rax], cl; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000812f0: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000081074: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000004e55f: rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000035423: rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x000000000004a133: rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000081044: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000081c67: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000000812b3: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000081e3e: rol dword ptr [rcx + 0x20c00e1], 1; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000052c51: rol dword ptr [rcx + 0x5c], 0x48; mov dword ptr [rdi + 0x20], ecx; pop r13; pop r14; pop r15; ret; 
0x000000000002116a: rol dword ptr [rcx], 0xf; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x21189; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000064a9f: rol dword ptr [rcx], 0xf; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000000d0a0a: rol dword ptr [rdi + 0x42923bbd], 1; jmp qword ptr [rdx - 0x71]; 
0x00000000000b672d: rol dword ptr [rdi + rcx], 0x85; ret; 
0x0000000000062b5a: rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000008cea: rol dword ptr [rsi], 1; add byte ptr cs:[rcx], al; pop rbp; ret; 
0x0000000000035a25: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x000000000008ee02: rol esp, 0x25; add byte ptr [rax], al; jne 0x8ee18; mov rax, qword ptr [rip + 0x25c0a0]; ret; 
0x0000000000059462: ror ax, 8; ret; 
0x000000000003a08f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376bf: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007fb65: ror byte ptr [r9 + rcx*4 - 1], 0x41; call rsp; 
0x0000000000080e5b: ror byte ptr [rax + 0x29], 0xc2; jbe 0x81100; add rax, rdi; add rax, rcx; ret; 
0x00000000000810c2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x81100; add rax, rdi; ret; 
0x00000000000810d2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000810e2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x81100; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000810f2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x81100; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000004a4f7: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x000000000008271c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000001b05e: ror byte ptr [rax + 0x29], 1; ret; 
0x0000000000081313: ror byte ptr [rax + 0x39], 0xc2; jbe 0x81370; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000081333: ror byte ptr [rax + 0x39], 0xc2; jbe 0x81370; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000081353: ror byte ptr [rax + 0x39], 0xc2; jbe 0x81370; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000081303: ror byte ptr [rax + 0x39], 0xc2; jbe 0x81370; add rax, rdi; vzeroupper; ret; 
0x0000000000081cb3: ror byte ptr [rax + 0x39], 0xc6; jbe 0x81d30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000590a8: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000027f13: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000007d843: ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000008c2fa: ror byte ptr [rax + 0x39], cl; ret; 
0x000000000009d599: ror byte ptr [rax + 0x3b], 1; add eax, 0x24d6cf; jae 0x9d5af; mov rdx, qword ptr [rip + 0x24d6ce]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000005aaad: ror byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000002dda3: ror byte ptr [rax + 0xf], 0x43; ret 0x8d49; 
0x000000000006ccbb: ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x0000000000053c15: ror byte ptr [rax + 0xf], 0x4f; ret 0x8d48; 
0x00000000000590a2: ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000004a1e6: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x000000000003516c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x0000000000082b08: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a548: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000035358: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x00000000000352e2: ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000082bc3: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a603: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x00000000000353f3: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000000e893: ror byte ptr [rax + 1], 1; ret; 
0x000000000004a4f4: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000082719: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000017caa: ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648ec8b8; ret; 
0x0000000000049e85: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000c8ae8: ror byte ptr [rax + rax], 0; ret; 
0x00000000000be844: ror byte ptr [rax + rdi*8], 1; call qword ptr [rax + 0xe]; 
0x00000000000be844: ror byte ptr [rax + rdi*8], 1; call qword ptr [rax + 0xe]; clc; call rax; 
0x0000000000035545: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x000000000004a436: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d5: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x0000000000092c7c: ror byte ptr [rax - 0x3f], 0xe0; add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x0000000000073bba: ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xff83; 
0x0000000000017cad: ror byte ptr [rax - 0x3f], 1; call 0x648ec8b8; ret; 
0x0000000000082b11: ror byte ptr [rax - 0x3f], 1; call 0x7800f01b; ret; 
0x0000000000082bc9: ror byte ptr [rax - 0x3f], 1; call 0x7800f0d3; ret; 
0x0000000000082bed: ror byte ptr [rax - 0x3f], 1; call 0x7800f0f7; ret; 
0x0000000000082c0d: ror byte ptr [rax - 0x3f], 1; call 0x7800f117; ret; 
0x0000000000082c5b: ror byte ptr [rax - 0x3f], 1; call 0x7800f165; ret; 
0x0000000000082cfa: ror byte ptr [rax - 0x3f], 1; call 0x7800f204; ret; 
0x0000000000082e7e: ror byte ptr [rax - 0x3f], 1; call 0x7800f388; ret; 
0x0000000000082ea2: ror byte ptr [rax - 0x3f], 1; call 0x7800f3ac; ret; 
0x0000000000082ec2: ror byte ptr [rax - 0x3f], 1; call 0x7800f3cc; ret; 
0x0000000000082ee2: ror byte ptr [rax - 0x3f], 1; call 0x7800f3ec; ret; 
0x0000000000082f19: ror byte ptr [rax - 0x3f], 1; call 0x7800f423; ret; 
0x0000000000082f3d: ror byte ptr [rax - 0x3f], 1; call 0x7800f447; ret; 
0x0000000000082f5d: ror byte ptr [rax - 0x3f], 1; call 0x7800f467; ret; 
0x0000000000082fab: ror byte ptr [rax - 0x3f], 1; call 0x7800f4b5; ret; 
0x000000000002e564: ror byte ptr [rax - 0x73], 0x15; xor al, 0x32; add al, byte ptr [rax]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x00000000000352d2: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x0000000000035302: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x00000000000352f2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x000000000002d05e: ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x000000000004aa23: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000004aa5f: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000003c7bb: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000049fbb: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000893fa: ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x000000000002be47: ror byte ptr [rax - 0x75], 0x3d; test eax, 0xf002bc3; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000000851bb: ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000058dca: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; mov eax, 0x2b; syscall; 
0x00000000000568fa: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; mov eax, 1; syscall; 
0x000000000005682a: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000081fbd: ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000001a6f4: ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x00000000000940fc: ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x0000000000068494: ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x000000000001dcf0: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000055795: ror byte ptr [rax - 0x77], 1; ret 0x8d48; 
0x000000000009197a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000169ed: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000001b2a0: ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000075fd1: ror byte ptr [rax - 0x77], 5; call qword ptr [rbp + 0x27]; 
0x0000000000029645: ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000009ccac: ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000082c03: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a633: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035413: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x000000000004a613: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000035403: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000002d765: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000020755: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000a95e7: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000085193: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x00000000000b7fe5: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000001f971: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000003c7bf: ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c6ff: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c3b: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a090: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c0: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000079976: ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x0000000000017da0: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000007fe4a: ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x0000000000063195: ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000504ab: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x00000000000504a8: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000504a5: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000b2c75: ror byte ptr [rax], 0x83; ret 0x3901; 
0x00000000000be114: ror byte ptr [rax], 1; clc; call qword ptr [rax + 8]; 
0x00000000000be114: ror byte ptr [rax], 1; clc; call qword ptr [rax + 8]; clc; call rax; 
0x000000000007c882: ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x000000000004daf3: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add eax, 0x4900070f; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dabb: ror byte ptr [rbp + rcx*4 + 0x1d], cl; cmp eax, 0x4900070f; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e113: ror byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr gs:[rdi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0b6: ror byte ptr [rbp + rcx*4 + 0x1d], cl; ret 0x709; 
0x00000000000820ec: ror byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; call rbx; 
0x0000000000085054: ror byte ptr [rbx + 0x481c2454], 0x8b; je 0x85081; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000be988: ror byte ptr [rbx - 0x728f0008], 1; clc; call qword ptr [rax]; 
0x0000000000057364: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x00000000000329a3: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000940e4: ror byte ptr [rcx + 0x2b802], 1; add byte ptr [rax], al; ret; 
0x00000000000b5747: ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000075ec8: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x0000000000016bb7: ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000000822d7: ror byte ptr [rcx + rcx*4 - 0xe], 0x4c; lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000007fb66: ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x000000000007f882: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007fa5e: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000000815bc: ror byte ptr [rcx - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000069f66: ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x00000000000758a8: ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000005da0f: ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x00000000000be10c: ror byte ptr [rcx], 1; clc; call qword ptr [rax + 9]; 
0x00000000000be10c: ror byte ptr [rcx], 1; clc; call qword ptr [rax + 9]; clc; call rax; 
0x0000000000016c22: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000058cbc: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x00000000000538a7: ror byte ptr [rdi], 0x48; ret 0x8341; 
0x0000000000055e69: ror byte ptr [rdi], 0x84; adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x000000000006c2bc: ror byte ptr [rdi], 0x84; lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000001a4bd: ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000853c9: ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a6c36: ror byte ptr [rdi], 0x84; or dword ptr [rax], eax; add byte ptr [rax], bh; ret; 
0x0000000000019c41: ror byte ptr [rdi], 0x84; popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000006db27: ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x00000000000743bb: ror byte ptr [rdi], 0x84; ret 0x17; 
0x000000000005e997: ror byte ptr [rdi], 0x84; ret 0xfffc; 
0x00000000000a4e6b: ror byte ptr [rdi], 0x84; ret 0xfffe; 
0x000000000000b686: ror byte ptr [rdi], 0x84; ret; 
0x000000000004aa2a: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000059e3f: ror byte ptr [rdi], 0x85; ret 0xfffe; 
0x000000000008d4e2: ror byte ptr [rdi], 0x85; ret 2; 
0x000000000002c9ff: ror byte ptr [rdi], 0x85; ret; 
0x0000000000074f59: ror byte ptr [rdi], 0x8f; ret 7; 
0x0000000000090aaa: ror byte ptr [rdi], 0x94; ret 0x3d; 
0x00000000000838ab: ror byte ptr [rdi], 0x94; ret 0x5438; 
0x000000000007b145: ror byte ptr [rdi], 0x94; ret 0x7f3c; 
0x000000000009ccaf: ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000005059e: ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000053a58: ror byte ptr [rdi], 0x94; ret; 
0x000000000002d058: ror byte ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x000000000001a380: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x0000000000096787: ror byte ptr [rdi], 0x95; ret; 
0x00000000000a95e4: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000007a57a: ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000002d05b: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000050a15: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000000be84c: ror byte ptr [rdi], 1; clc; call qword ptr [rax + 0x11]; 
0x00000000000be84c: ror byte ptr [rdi], 1; clc; call qword ptr [rax + 0x11]; clc; call rax; 
0x000000000002d08f: ror byte ptr [rdi], 1; mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x2d080; sub rax, 0x10; ret; 
0x00000000000825ff: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000008193b: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000004a3db: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000000bdef4: ror byte ptr [rsi], 0xf8; call qword ptr [rax + 0xe]; 
0x00000000000bdef4: ror byte ptr [rsi], 0xf8; call qword ptr [rax + 0xe]; clc; jmp rax; 
0x00000000000be888: ror byte ptr [rsi], 1; clc; call qword ptr [rax + 0x10]; 
0x00000000000be888: ror byte ptr [rsi], 1; clc; call qword ptr [rax + 0x10]; clc; call rax; 
0x00000000000be0f0: ror byte ptr [rsi], 1; clc; jmp qword ptr [rax + 0xe]; 
0x00000000000d7ae8: ror dl, 1; add byte ptr [rax], al; fcom st(4); std; jmp qword ptr [rax]; 
0x00000000000814ba: ror dword ptr [rax + 0x21], 0xce; je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000009d2ae: ror dword ptr [rax + 1], 0xf8; sub rax, r8; ret; 
0x00000000000505a8: ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000081de9: ror dword ptr [rax + rax], cl; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000004a4e9: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000007ce36: ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x000000000002d7a7: ror dword ptr [rax - 0x77], 1; ret 0xaeeb; 
0x0000000000089803: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x00000000000735f0: ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x000000000004a432: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d1: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x000000000006b3c4: ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000000229e3: ror dword ptr [rax], 0x74; adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000009394d: ror dword ptr [rbp + rcx*4 + 0x14], cl; ret; 
0x0000000000009d07: ror dword ptr [rbx], 1; add bh, dh; ret 0; 
0x00000000000187a3: ror dword ptr [rcx + 0x4c107706], 1; mov dword ptr [rdi], eax; mov qword ptr [rdi + 8], rcx; xor eax, eax; ret; 
0x0000000000092ed8: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000072fab: ror dword ptr [rcx - 0x77], 0x14; ret 0x8b48; 
0x000000000001b39b: ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000000187bf: ror dword ptr [rcx - 0x77], 0xd0; mov qword ptr [rdi + 8], rcx; xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x000000000004e557: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000036828: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000036f34: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000036d06: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x0000000000036c86: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000036fc4: ror dword ptr [rdi], 0x85; je 0x36fcb; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000036abb: ror dword ptr [rdi], 0x85; jno 0x36ac7; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000036b83: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000036800: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000a526b: ror dword ptr [rdi], cl; popfq; ret 0x841; 
0x0000000000024f90: ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x00000000000b43bd: ror dword ptr [rdi], cl; xchg eax, esp; ret; 
0x0000000000017bc1: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000059463: ror eax, 8; ret; 
0x0000000000017afb: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000017be7: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000017bc0: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000017afa: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000017be6: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000000a6de: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0xa6f6; syscall; 
0x00000000000e1c21: sahf; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; scasd eax, dword ptr [rdi]; sti; jmp qword ptr [rdx]; 
0x00000000000e1cd5: sahf; add byte ptr [rax], al; mov cl, 0xfb; jmp rdx; 
0x00000000000be9c5: sahf; clc; call qword ptr [rax - 0x1f000761]; movabs al, byte ptr [0xa380fff8a230fff8]; clc; call rax; 
0x000000000007b7ee: sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000000d0ab2: sahf; int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x000000000007fd8e: sahf; lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000008ef3e: sahf; mov bl, 0xf9; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000490ee: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000be03c: sahf; or eax, 0xd44fff8; clc; push qword ptr [rbx + rdx + 0x1344fff8]; clc; call rsp; 
0x00000000000d0c65: sahf; ret 0x38ae; 
0x0000000000093241: sahf; ret 0x3948; 
0x0000000000069f6c: sahf; ret 0x894c; 
0x0000000000083982: sahf; ret 0xe9c1; 
0x00000000000b5e6f: sahf; ret 0xf45; 
0x00000000000be3c0: sahf; xor edi, eax; jmp qword ptr [rax]; 
0x00000000000d6665: sal ah, cl; dec dword ptr [rax + rcx*2]; add byte ptr [rax], al; or bl, dl; hlt; jmp qword ptr [rax]; 
0x00000000000d6655: sal ah, cl; jmp rax; 
0x00000000000d664d: sal ah, cl; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000229ee: sal bh, 0xd8; ret; 
0x00000000000bde6d: sal bh, 1; call rax; 
0x00000000000bde6d: sal bh, 1; call rax; sal edi, 1; jmp qword ptr [rax]; 
0x00000000000beaa8: sal bh, 1; clc; push rax; idiv eax; call qword ptr [rax]; 
0x00000000000bdead: sal bh, 1; inc dword ptr [rax - 0x2e]; idiv edi; nop; sal edi, cl; jmp rax; 
0x000000000002fbe7: sal bh, 1; ret 0x8000; 
0x000000000002faa7: sal bh, 1; ret 0xc000; 
0x000000000002f967: sal bh, 1; ret 0xe000; 
0x000000000002f827: sal bh, 1; ret 0xf000; 
0x000000000002f6e7: sal bh, 1; ret 0xf800; 
0x000000000002f5a7: sal bh, 1; ret 0xfc00; 
0x000000000002f467: sal bh, 1; ret 0xfe00; 
0x000000000002f327: sal bh, 1; ret 0xff00; 
0x000000000002f1e7: sal bh, 1; ret 0xff80; 
0x000000000002f0a7: sal bh, 1; ret 0xffc0; 
0x000000000002ef67: sal bh, 1; ret 0xffe0; 
0x000000000002ee27: sal bh, 1; ret 0xfff0; 
0x000000000002ece7: sal bh, 1; ret 0xfff8; 
0x000000000002eba7: sal bh, 1; ret 0xfffc; 
0x000000000002ea67: sal bh, 1; ret 0xfffe; 
0x00000000000b1d71: sal bl, 0xc3; nop word ptr cs:[rax + rax]; nop; mov eax, 0x26; syscall; 
0x00000000000bea70: sal bl, 0xf8; jmp rax; 
0x00000000000353ef: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000827ff: sal bl, 1; ret; 
0x000000000008ee5d: sal bl, cl; ret; 
0x000000000001692d: sal byte ptr [rax + 0x48], 0xc7; ret 0xfff0; 
0x00000000000232ed: sal byte ptr [rax + rbx + 0x48], 0x8b; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000008cad: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000238bd: sal byte ptr [rax + rdx - 0x39], 5; push rsi; sub al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000bdc20: sal byte ptr [rax - 0x4d7f0009], 0xf7; jmp qword ptr [rax - 0x4c]; 
0x00000000000be684: sal byte ptr [rax], cl; clc; call qword ptr [rdx + 0x30]; 
0x000000000004e561: sal byte ptr [rbp + 0x10], 0x66; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000008edc6: sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x25c4f8], 0; mov qword ptr [rip + 0x25c0d9], rax; add rsp, 8; ret; 
0x0000000000055bc7: sal byte ptr [rbp + 0x16], 0x45; xor edx, edx; mov eax, 0x3d; syscall; 
0x00000000000568c7: sal byte ptr [rbp + 0x16], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000056b97: sal byte ptr [rbp + 0x16], 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000058d97: sal byte ptr [rbp + 0x16], 0xb8; sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000058f5a: sal byte ptr [rbp + 0x1b], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000000058e9a: sal byte ptr [rbp + 0x1b], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000000016bda: sal byte ptr [rbp + 0x1f], 0x48; add esp, 0x118; ret; 
0x0000000000082e62: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000081ca2: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x00000000000b436d: sal byte ptr [rbp + 0x2d], cl; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000000352b2: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000009203e: sal byte ptr [rbp + 0x4f], 0x89; ret; 
0x0000000000084fd6: sal byte ptr [rbp + 0x5d], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000056667: sal byte ptr [rbp + 0x61], 0x89; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000000ecdb: sal byte ptr [rbp + 0xa], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000007f7d8: sal byte ptr [rbp + 0xd], 0x8b; cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000008764: sal byte ptr [rbp + 1], cl; ret; 
0x000000000009d86f: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000016abc: sal byte ptr [rbp + 8], 1; add rsp, 0x148; ret; 
0x00000000000590c1: sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x00000000000b6982: sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000004a1e0: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x000000000002e308: sal byte ptr [rbp + rbx*8 + 0x48], 0x29; ret; 
0x0000000000082680: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000829f8: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x00000000000590d1: sal byte ptr [rbp - 0x10], 0x5a; pop r10; ret; 
0x000000000002158d: sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000050290: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x000000000002ff0b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x000000000003542d: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x0000000000090918: sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x0000000000035425: sal byte ptr [rbp - 0x38], 0xc5; std; xlatb; ret 0xc085; 
0x00000000000b43d3: sal byte ptr [rbp - 0x39], cl; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000004a13d: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x000000000004a135: sal byte ptr [rbp - 0x68], 0xc5; std; xlatb; ret 0xc085; 
0x00000000000229ac: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000003662c: sal byte ptr [rbx + 8], 1; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000005a3f6: sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x0000000000035352: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x0000000000008c6c: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000004a43c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000000943c4: sal byte ptr [rcx + rsi + 0x48], 0x8b; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x00000000000b476c: sal byte ptr [rcx + rsi*2 + 0x3c], 0x2f; ja 0x86f0; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x00000000000bdb80: sal byte ptr [rcx - 0x4c7f0009], 0xf7; jmp qword ptr [rax - 0x4b]; 
0x000000000005c9dd: sal byte ptr [rcx], 0xc9; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x00000000000820e8: sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000005c9e2: sal byte ptr [rcx], 0xd2; add eax, 1; push rax; call rbx; 
0x000000000004a0f3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a113: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a151: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a0d3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000590a6: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000051c07: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000084cdd: sal byte ptr [rcx], cl; imul al; stosd dword ptr [rdi], eax; sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x000000000000a4ac: sal byte ptr [rcx], cl; sar byte ptr [rsi + 0x20000], 0xe8; xchg eax, edi; ret 4; 
0x000000000000a44b: sal byte ptr [rcx], cl; sar byte ptr [rsi + 0x20001], 0xe8; clc; ret 4; 
0x00000000000139b8: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000010529: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x00000000000b852e: sal byte ptr [rdi + rbx*8 + 0x48], 0x89; ret; 
0x00000000000819ab: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000008266b: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000083c5: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000000505a3: sal byte ptr [rdx + rbx*8 + 0x48], 0x63; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x000000000009cdc2: sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x24bd94; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000059c1b: sal byte ptr [rdx + rcx + 0x48], cl; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000009ef0b: sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000004a753: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x00000000000370af: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000371d0: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000be3ec: sal byte ptr [rip + 0x3550fff8], 0xf8; jmp rax; 
0x0000000000020ef5: sal byte ptr [rsi + 0x10], 0x48; mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000000e34a8: sal byte ptr [rsi + 0x40540000], 0xfd; call qword ptr [rbx]; 
0x000000000009c962: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x24e1f4; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x0000000000035167: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000000b8f79: sal byte ptr [rsp + rax + 0x3c], 0x10; jne 0xb8f98; xor eax, eax; ret; 
0x0000000000016921: sal byte ptr [rsp + rbp*2 + 0x48], 0x8d; pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x00000000000238b3: sal byte ptr [rsp + rbx*2 - 0x75], cl; add eax, 0x2c6564; test eax, eax; je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x000000000009d071: sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000008f419: sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x00000000000bea14: sal cl, 0xf8; call rax; 
0x00000000000bea14: sal cl, 0xf8; call rax; int1; clc; jmp rax; 
0x00000000000bea18: sal cl, 1; clc; jmp rax; 
0x00000000000bea50: sal dl, 0xf8; jmp rax; 
0x00000000000bf19c: sal dword ptr [rcx - 7], 1; call qword ptr [rdx + 0x4fff972]; jb 0xbf1a0; call rcx; 
0x00000000000bf198: sal dword ptr [rcx - 7], 1; call rcx; 
0x00000000000bf200: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf200; jmp rsp; 
0x00000000000bf220: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf220; call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf224: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf23c: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf23c; call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf240: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf354: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf354; call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf358: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf394: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf394; call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf398: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf3c0: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf3c0; call rcx; jno 0xbf3c4; jmp rsp; 
0x00000000000bf3c4: sal dword ptr [rcx - 7], 1; call rcx; jno 0xbf3c4; jmp rsp; 
0x00000000000bf1bc: sal dword ptr [rcx - 7], 1; inc dword ptr [rdx + rsi*2]; stc; call rcx; 
0x00000000000bf228: sal dword ptr [rcx - 7], 1; jmp qword ptr [rdx]; 
0x00000000000bf204: sal dword ptr [rcx - 7], 1; jmp rsp; 
0x00000000000bf154: sal dword ptr [rcx - 7], 1; push rsp; jno 0xbf154; push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf3ac: sal dword ptr [rcx - 7], 1; push rsp; jno 0xbf3ac; call rcx; 
0x00000000000bf3ac: sal dword ptr [rcx - 7], 1; push rsp; jno 0xbf3ac; call rcx; jno 0xbf3b0; jmp rsp; 
0x000000000003700f: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003714f: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000329a6: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000050973: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000009091d: sal edi, 0xd8; ret; 
0x00000000000d6b7d: sal edi, 0xff; cmp byte ptr [rdi], ah; add byte ptr [rax], cl; ret 0xfff7; 
0x00000000000bde71: sal edi, 1; jmp qword ptr [rax]; 
0x00000000000dd875: sal edi, 1; jmp qword ptr [rdx]; 
0x00000000000bdeb5: sal edi, cl; jmp rax; 
0x00000000000d666d: sal esp, cl; jmp qword ptr [rax]; 
0x000000000003700e: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003714e: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d664c: sal spl, cl; push qword ptr [rax - 0x37ffffb9]; sal ah, cl; jmp rax; 
0x00000000000beacc: sar al, 1; clc; push rax; clc; clc; call qword ptr [rax]; 
0x0000000000028e43: sar bh, 0xff; call qword ptr [rbx + 0x64]; 
0x0000000000094040: sar bh, 0xff; mov eax, 1; ret; 
0x0000000000093ffd: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000d775d: sar bl, 0xff; in al, dx; mov bh, 0; add byte ptr [rax - 0x3f], ch; sti; call qword ptr [rax]; 
0x00000000000ce93d: sar bl, cl; push qword ptr [rbx - 0x4c00041b]; in eax, 0xfb; jmp rax; 
0x000000000001cbb7: sar byte ptr [rax + 0x36], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000055bcc: sar byte ptr [rax + 0x3d], cl; syscall; 
0x000000000000b682: sar byte ptr [rax + 0x5b], 0x85; ror byte ptr [rdi], 0x84; ret; 
0x000000000008b6e1: sar byte ptr [rax + 0xe], 0x5b; ret; 
0x000000000007fdac: sar byte ptr [rax + 9], 0xf3; ret; 
0x0000000000057412: sar byte ptr [rax - 0x21], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000be3d0: sar byte ptr [rax], 1; clc; jmp qword ptr [rax + 0x38]; 
0x000000000005054e: sar byte ptr [rcx], 0xc8; jle 0x50588; movsxd rax, ecx; ret; 
0x00000000000be5c4: sar byte ptr [rcx], 0xf8; call qword ptr [rax + 0x39]; 
0x00000000000be5c4: sar byte ptr [rcx], 0xf8; call qword ptr [rax + 0x39]; clc; jmp rax; 
0x000000000005a97d: sar byte ptr [rcx], cl; ret; 
0x0000000000039b6c: sar byte ptr [rdi], 1; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000055f32: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, r13d; syscall; 
0x0000000000049b55: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000d14dd: sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x000000000000a4ae: sar byte ptr [rsi + 0x20000], 0xe8; xchg eax, edi; ret 4; 
0x000000000000a44d: sar byte ptr [rsi + 0x20001], 0xe8; clc; ret 4; 
0x0000000000066971: sar byte ptr [rsi + 8], 0x83; call 0x849f27b; pop rbx; ret; 
0x00000000000d15ff: sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000bd80c: sar ch, 0xf6; call qword ptr [rax - 3]; 
0x00000000000424e7: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000007c10e: sar ch, cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000000beaec: sar cl, 1; clc; push rax; stc; clc; call qword ptr [rax]; 
0x000000000000ba7c: sar dl, 1; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000e0e2d: sar dl, 1; jmp qword ptr [rdx]; 
0x00000000000e0e81: sar dl, cl; jmp qword ptr [rsi]; 
0x0000000000041ea5: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000041eac: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x41eb0; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000041eb3: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x41eb8; ret; 
0x0000000000051ba2: sar dword ptr [rax], 1; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000051568: sar dword ptr [rbp + 0x48], 1; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x00000000000940da: sar dword ptr [rdi - 0x76b30001], 1; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000050e89: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x00000000000b573c: sar dword ptr [rsi + rbp*8], cl; ja 0xb5cb1; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000000b6928: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000007f55c: sar eax, 2; lea eax, [r8 - 1]; ret; 
0x000000000001b02f: sar eax, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000000b1e4e: sar eax, 3; pop rbp; pop r12; pop r13; ret; 
0x00000000000d6f9d: sar eax, cl; call qword ptr [rax]; 
0x0000000000035541: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000dd5a9: sar ebp, 0xff; ret 0; 
0x00000000000d7ae5: sar ebp, 1; call rax; 
0x00000000000d7ae5: sar ebp, 1; call rax; retf 0; fcom st(4); std; jmp qword ptr [rax]; 
0x00000000000513c9: sar ebp, 1; jg 0x51417; jmp qword ptr [rdx - 0x2f]; 
0x00000000000bb183: sar ebx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d1363: sar ecx, 1; jnp 0xd1320; ret; 
0x00000000000e0e49: sar edx, 1; jmp qword ptr [rdx]; 
0x000000000006f8a7: sar edx, 1; jmp qword ptr [rsi + 0xf]; 
0x0000000000076a25: sar edx, 2; call qword ptr [rbx + 0x38]; 
0x000000000007f662: sar edx, 2; sub eax, edx; ret; 
0x0000000000035547: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000004a438: sar edx, cl; test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d7: sar edx, cl; test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x00000000000819a7: sar edx, cl; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x0000000000081937: sar edx, cl; test rdx, rdx; je 0x819e0; bsf rax, rdx; ret; 
0x0000000000082667: sar edx, cl; test rdx, rdx; je 0x82690; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000825fb: sar edx, cl; test rdx, rdx; je 0x826a0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000b43ea: sar esi, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000008ca0: sar esi, 1; je 0x8cb8; mov rax, 0; test rax, rax; je 0x8cb8; jmp rax; 
0x0000000000051343: sar esi, 1; jg 0x5136b; vzeroupper; ret; 
0x00000000000514dc: sar esi, 1; jg 0x51504; vzeroupper; ret; 
0x0000000000078d11: sar esi, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000078d10: sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000007f55b: sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000001b02e: sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000000b6927: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000b1e4d: sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x0000000000035540: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000076a24: sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000007f661: sar rdx, 2; sub eax, edx; ret; 
0x0000000000035546: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000004a437: sar rdx, cl; test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d6: sar rdx, cl; test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x00000000000819a6: sar rdx, cl; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x0000000000081936: sar rdx, cl; test rdx, rdx; je 0x819e0; bsf rax, rdx; ret; 
0x0000000000082666: sar rdx, cl; test rdx, rdx; je 0x82690; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000825fa: sar rdx, cl; test rdx, rdx; je 0x826a0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000008c9f: sar rsi, 1; je 0x8cb8; mov rax, 0; test rax, rax; je 0x8cb8; jmp rax; 
0x0000000000070ba5: sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000082474: sbb ah, byte ptr [rsi]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000da99c: sbb al, 0; add byte ptr [rax], al; mov eax, 0xad00002b; fdivr st(2), st(0); call qword ptr [rsi]; 
0x00000000000e1e10: sbb al, 0; add byte ptr [rax], al; sub al, 0xa0; add byte ptr [rax], al; mov bl, 0xfb; call qword ptr [rdi]; 
0x0000000000057681: sbb al, 0; add byte ptr [rax], al; syscall; 
0x0000000000057681: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x00000000000dc218: sbb al, 0; add byte ptr [rax], al; xor al, 0x44; add byte ptr [rax], al; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x0000000000057507: sbb al, 0; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x00000000000da504: sbb al, 0x27; add byte ptr [rax], al; test al, 0x83; hlt; jmp qword ptr [rax]; 
0x000000000007401d: sbb al, 0x29; ret 0xe683; 
0x00000000000bebd8: sbb al, 0x2f; stc; call qword ptr [rax]; 
0x00000000000bebd0: sbb al, 0x2f; stc; call qword ptr [rcx + 0x30]; 
0x00000000000bebe0: sbb al, 0x2f; stc; call qword ptr [rdi]; 
0x0000000000085058: sbb al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000000c117c: sbb al, 0x74; cli; dec dword ptr [rsi*2 + 0x74fcfffa]; cli; jmp rsp; 
0x0000000000074f57: sbb al, 0x85; ror byte ptr [rdi], 0x8f; ret 7; 
0x000000000008b00f: sbb al, 0xba; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000070c00: sbb al, 0xc9; add eax, 0x6f0f6600; ret 0x23e8; 
0x00000000000bbf40: sbb al, 0xf3; hlt; call qword ptr [rcx]; 
0x00000000000dc1c1: sbb al, 0xf7; jmp qword ptr [rdi + 6]; 
0x00000000000be8ad: sbb al, 0xf8; call rax; 
0x00000000000d6d45: sbb al, 0xf8; jmp qword ptr [rax]; 
0x00000000000d39d1: sbb al, 0xfc; call qword ptr [rsi + 0x28]; 
0x00000000000d3acd: sbb al, 0xfc; inc dword ptr [rax - 4]; jmp rcx; 
0x0000000000084ce2: sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000017282: sbb al, 7; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000be865: sbb al, bh; call qword ptr [rax + 0x1a]; 
0x00000000000be865: sbb al, bh; call qword ptr [rax + 0x1a]; clc; call rax; 
0x000000000009a24b: sbb al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000071686: sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000000fe03: sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x00000000000d9841: sbb al, byte ptr [rax]; add byte ptr [rsp + rax*2], cl; hlt; call qword ptr [rdi + 2]; 
0x0000000000087161: sbb al, byte ptr [rip - 0x39180000]; cmp al, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000007712b: sbb al, byte ptr fs:[rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000013f98: sbb al, ch; ret 0xffaf; 
0x0000000000091b17: sbb al, ch; ret; 
0x00000000000bdd0c: sbb bh, 0xf7; jmp qword ptr [rax - 0x1f]; 
0x00000000000be8a9: sbb bh, al; call qword ptr [rax + 0x1c]; 
0x00000000000be8a9: sbb bh, al; call qword ptr [rax + 0x1c]; clc; call rax; 
0x00000000000be869: sbb bh, al; call rax; 
0x00000000000be869: sbb bh, al; call rax; sbb edi, eax; call qword ptr [rax + 0x1d]; 
0x0000000000088fc3: sbb bh, al; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d7b0c: sbb bh, bl; std; jmp qword ptr [rax - 0x34]; 
0x00000000000bd8d9: sbb bh, dh; jmp qword ptr [rax + 0x19]; 
0x00000000000dffd1: sbb bh, dl; jmp qword ptr [rax]; 
0x000000000006e602: sbb bl, byte ptr [rsi + 0x27]; add byte ptr [rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x00000000000d00e5: sbb bl, byte ptr [rsi]; ret; 
0x00000000000d7444: sbb bl, ch; cli; call qword ptr [rax]; 
0x000000000004e45a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004ddaa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e41b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd6b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000004e459: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000004dda9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000004e41a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000004dd6a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000002082f: sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000091664: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000000206d0: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009ddd4: sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x000000000007e6e9: sbb byte ptr [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000001b393: sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000009cca9: sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000085061: sbb byte ptr [rax + 0x101], bh; syscall; 
0x000000000008dcc1: sbb byte ptr [rax + 0x29], cl; ret 0x394c; 
0x000000000006b514: sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000023381: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000091665: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000000943ce: sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x000000000008d244: sbb byte ptr [rax + rax], al; mov eax, 0x15; syscall; 
0x0000000000076a32: sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000056b0d: sbb byte ptr [rax - 0x73], cl; and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x56b40; mov eax, 0x48; syscall; 
0x000000000001b930: sbb byte ptr [rax - 0x73], cl; ja 0x1b98d; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000021317: sbb byte ptr [rax - 0x75], cl; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000017af3: sbb byte ptr [rax - 0x75], cl; jo 0x17b18; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000020699: sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000b746a: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x00000000000b8813: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000000232ef: sbb byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000092047: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x00000000000206c9: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000084aeb: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000000295f5: sbb byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000082430: sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000008f43c: sbb byte ptr [rax - 0x77], cl; push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000206d1: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000002432b: sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000000a19b9: sbb byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000055e66: sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x0000000000023b43: sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000026e98: sbb byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000001be60: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000d78d4: sbb byte ptr [rax - 4], bh; jmp rax; 
0x000000000009ddd5: sbb byte ptr [rax], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000000e280c: sbb byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rdx + 0x6dbc0000], ch; cld; jmp qword ptr [rdx]; 
0x0000000000056511: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000056511: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x56520; ret; 
0x000000000001344a: sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000006df8b: sbb byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000003c82b: sbb byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000020830: sbb byte ptr [rbx + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000000b3f15: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000029c20: sbb byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000005a75c: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000001b7d7: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000022567: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000001e08c: sbb byte ptr [rbx - 0x76b7ffd4], dh; ret 0x294d; 
0x00000000000d60ec: sbb byte ptr [rbx - 0xd], ch; call qword ptr [rax + 0x24]; 
0x000000000007f37a: sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000000d9bb8: sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000023a5e: sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000005bc7b: sbb byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x10; mov qword ptr [rsp + 8], r9; mov qword ptr [rsp], rcx; call rax; 
0x000000000005bd59: sbb byte ptr [rcx + rcx*4 + 0x4c], cl; and al, 0x10; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp], rcx; call rax; 
0x000000000009da69: sbb byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000007f88e: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000007e6ea: sbb byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000007c546: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000b95ff: sbb byte ptr [rcx + rdi + 0x6d], cl; js 0xb967c; ret 0x8b48; 
0x00000000000534e9: sbb byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000006b4fb: sbb byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000062558: sbb byte ptr [rcx - 0x77], al; ret; 
0x00000000000b1f87: sbb byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x00000000000a1dfb: sbb byte ptr [rcx - 0x77], cl; ret; 
0x000000000001b394: sbb byte ptr [rcx - 0x77], cl; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000009814a: sbb byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x0000000000016be0: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000001be44: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000029643: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000009ccaa: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000059583: sbb byte ptr [rdi + 0x10], dh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000059582: sbb byte ptr [rdi + 0x10], sil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000595b1: sbb byte ptr [rdi - 0x1e], bh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000595b0: sbb byte ptr [rdi - 0x1e], dil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000000dbcf8: sbb byte ptr [rdi], ah; cmc; call qword ptr [rsi]; 
0x00000000000dfda8: sbb byte ptr [rdi], al; cli; jmp qword ptr [rsi]; 
0x00000000000dbbf8: sbb byte ptr [rdi], bl; cmc; jmp qword ptr [rbx]; 
0x00000000000d7014: sbb byte ptr [rdi], cl; stc; call rax; 
0x00000000000e349d: sbb byte ptr [rdx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + rax], dl; add byte ptr [rax], al; sal byte ptr [rsi + 0x40540000], 0xfd; call qword ptr [rbx]; 
0x00000000000d7174: sbb byte ptr [rdx + rdi*8], al; push qword ptr [rcx + rdx*4 + 0x2cb80000]; cli; jmp rsp; 
0x00000000000bf1b8: sbb byte ptr [rdx - 7], dh; call rcx; 
0x00000000000bf25c: sbb byte ptr [rdx - 7], dh; push qword ptr [rdx + 0x72]; stc; jmp qword ptr [rdx]; 
0x000000000009f2bb: sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000056a41: sbb byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x000000000007f332: sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007e807: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007f5cf: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007f5ce: sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007e9b7: sbb byte ptr [rsi + 0x28], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000d6d9c: sbb byte ptr [rsi], ch; clc; call qword ptr [rax + 0x74]; 
0x000000000006b6a9: sbb byte ptr [rsi], dl; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000027f0d: sbb cl, byte ptr [rax + 0x29480614]; ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000065cdd: sbb cl, byte ptr [rdi]; mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x000000000005ec8a: sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000004783d: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004948a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000048caa: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000004909a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000488ba: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004839d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047b7d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004735d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000048a59: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047ebd: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004769d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000046e7d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004805d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000048f4a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004876a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004987a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000471bd: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000472f3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047ff3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047b13: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048e4b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004977b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000048333: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047633: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000047153: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047e53: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000048f9b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000487bb: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000a1764: sbb cl, ch; idiv dil; jmp qword ptr [rsi + 0xf]; 
0x00000000000e0f80: sbb dh, 0xfa; jmp qword ptr [rdx]; 
0x00000000000d61ad: sbb dh, ah; dec dword ptr [rdx + rbp]; add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x00000000000d61b5: sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x00000000000d5ef9: sbb dh, bh; inc dword ptr [rax]; sbb dh, bh; jmp qword ptr [rax + 0x17]; 
0x00000000000d5efd: sbb dh, bh; jmp qword ptr [rax + 0x17]; 
0x00000000000bd8e1: sbb dh, bh; jmp rax; 
0x00000000000d7ff1: sbb dh, bl; jmp qword ptr [rbp + 2]; 
0x0000000000008760: sbb dl, 0; test dl, dl; jne 0x8768; ret; 
0x00000000000aea08: sbb dword ptr [r8], r8d; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000007a370: sbb dword ptr [r8], r8d; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000a682b: sbb dword ptr [rax - 0x39], ecx; ret 0xffff; 
0x000000000000a6d5: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000000b7819: sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x00000000000b1e2b: sbb dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d9751: sbb dword ptr [rax], eax; add ah, bh; cmp dh, ah; jmp rdx; 
0x00000000000ae991: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000aea09: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000058d34: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000058d34: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58d43; ret; 
0x000000000007a371: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000099732: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000004843b: sbb dword ptr [rbp + 0x148b0007], 0x81048b91; sub eax, edx; ret; 
0x0000000000038623: sbb dword ptr [rbp + 8], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000006ea09: sbb dword ptr [rbx - 0x52743], eax; call qword ptr [rax]; 
0x000000000000a4a8: sbb dword ptr [rbx], ecx; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; sar byte ptr [rsi + 0x20000], 0xe8; xchg eax, edi; ret 4; 
0x000000000000a447: sbb dword ptr [rbx], ecx; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; sar byte ptr [rsi + 0x20001], 0xe8; clc; ret 4; 
0x00000000000d299d: sbb dword ptr [rbx], edx; mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000005ec83: sbb dword ptr [rcx - 0x41f0b3b8], ecx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000058642: sbb dword ptr [rcx], ebp; add byte ptr [rax + 0x39], cl; ret; 
0x000000000003b3e3: sbb dword ptr [rcx], ebp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000005621f: sbb dword ptr [rdi + 0x63480006], ecx; add al, 0x9a; add rax, rdx; jmp rax; 
0x000000000006be24: sbb dword ptr [rdi], ecx; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000055fc5: sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000009c5f3: sbb dword ptr [rsi - 1], edi; jmp qword ptr [rsi + 0xf]; 
0x000000000004ff67: sbb eax, -1; ret; 
0x00000000000be871: sbb eax, 0x1ed0fff8; clc; call qword ptr [rax + 0x20]; 
0x00000000000be8b1: sbb eax, 0x1f50fff8; clc; call rax; 
0x00000000000b96c0: sbb eax, 0x2306db; jne 0xb96a8; pop rbx; ret; 
0x000000000006bf24: sbb eax, 0x39480001; ret; 
0x00000000000821bc: sbb eax, 0x39480026; ret; 
0x000000000003ed65: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000003ed60: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b97bf: sbb eax, 0x48fff70b; test ebx, ebx; mov rdx, rbx; jne 0xb97b8; pop rbx; ret; 
0x00000000000d9b6d: sbb eax, 0x5ab00000; hlt; call qword ptr [rdi]; 
0x000000000004e177: sbb eax, 0x70904; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e142: sbb eax, 0x70939; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e116: sbb eax, 0x70965; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e100: sbb eax, 0x7097b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0de: sbb eax, 0x7099d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e0b9: sbb eax, 0x709c2; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e09c: sbb eax, 0x709df; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e044: sbb eax, 0x70a37; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db57: sbb eax, 0x70ea4; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004db22: sbb eax, 0x70ed9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004daf6: sbb eax, 0x70f05; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dae0: sbb eax, 0x70f1b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dabe: sbb eax, 0x70f3d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da99: sbb eax, 0x70f62; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da7c: sbb eax, 0x70f7f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004da24: sbb eax, 0x70fd7; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000040ed3: sbb eax, 0x7d4e8; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040b75: sbb eax, 0x7d846; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040d20: sbb eax, 0x7d8db; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409f5: sbb eax, 0x7d9c6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040ab8: sbb eax, 0x7db43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040875: sbb eax, 0x7db46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040938: sbb eax, 0x7dcc3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406f5: sbb eax, 0x7dcc6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b8: sbb eax, 0x7de43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040575: sbb eax, 0x7de46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040639: sbb eax, 0x7dfc2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403f5: sbb eax, 0x7dfc6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b8: sbb eax, 0x7e143; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040275: sbb eax, 0x7e146; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040338: sbb eax, 0x7e2c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400f5: sbb eax, 0x7e2c6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b8: sbb eax, 0x7e443; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff75: sbb eax, 0x7e446; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040038: sbb eax, 0x7e5c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fdf5: sbb eax, 0x7e5c6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb8: sbb eax, 0x7e743; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc75: sbb eax, 0x7e746; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd38: sbb eax, 0x7e8c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faf5: sbb eax, 0x7e8c6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb8: sbb eax, 0x7ea43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f975: sbb eax, 0x7ea46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa38: sbb eax, 0x7ebc3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7f5: sbb eax, 0x7ebc6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b8: sbb eax, 0x7ed43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f675: sbb eax, 0x7ed46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4fc: sbb eax, 0x7eebf; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f738: sbb eax, 0x7eec3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b8: sbb eax, 0x7f043; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f2fd: sbb eax, 0x7f0be; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f47b: sbb eax, 0x7f180; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f31f: sbb eax, 0x7f2dc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3bf: sbb eax, 0x7fafc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e095: sbb eax, 0x7fe26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e22c: sbb eax, 0x7fecf; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df15: sbb eax, 0x7ffa6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd8: sbb eax, 0x80123; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd95: sbb eax, 0x80126; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de58: sbb eax, 0x802a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc15: sbb eax, 0x802a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd8: sbb eax, 0x80423; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da95: sbb eax, 0x80426; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db59: sbb eax, 0x805a2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d915: sbb eax, 0x805a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d8: sbb eax, 0x80723; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d795: sbb eax, 0x80726; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d858: sbb eax, 0x808a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d615: sbb eax, 0x808a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d8: sbb eax, 0x80a23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d495: sbb eax, 0x80a26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d558: sbb eax, 0x80ba3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d315: sbb eax, 0x80ba6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d8: sbb eax, 0x80d23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d195: sbb eax, 0x80d26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d258: sbb eax, 0x80ea3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d015: sbb eax, 0x80ea6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d8: sbb eax, 0x81023; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce95: sbb eax, 0x81026; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf58: sbb eax, 0x811a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd15: sbb eax, 0x811a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd8: sbb eax, 0x81323; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb95: sbb eax, 0x81326; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca1c: sbb eax, 0x8149f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc58: sbb eax, 0x814a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c7c6: sbb eax, 0x81535; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c709: sbb eax, 0x815f2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad8: sbb eax, 0x81623; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c83c: sbb eax, 0x8167f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c61e: sbb eax, 0x816dd; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c99b: sbb eax, 0x81760; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c553: sbb eax, 0x817a8; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c829: sbb eax, 0x818d2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b532: sbb eax, 0x827c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b494: sbb eax, 0x82867; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b3e2: sbb eax, 0x82919; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b344: sbb eax, 0x829b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b292: sbb eax, 0x82a69; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b1f4: sbb eax, 0x82b07; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b142: sbb eax, 0x82bb9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003b0a4: sbb eax, 0x82c57; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aff2: sbb eax, 0x82d09; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003af54: sbb eax, 0x82da7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aea2: sbb eax, 0x82e59; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ae04: sbb eax, 0x82ef7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ad52: sbb eax, 0x82fa9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003acb4: sbb eax, 0x83047; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ac02: sbb eax, 0x830f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ab69: sbb eax, 0x83192; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aab2: sbb eax, 0x83249; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003aa14: sbb eax, 0x832e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a962: sbb eax, 0x83399; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a8c4: sbb eax, 0x83437; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a812: sbb eax, 0x834e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a774: sbb eax, 0x83587; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a6c2: sbb eax, 0x83639; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a624: sbb eax, 0x836d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a572: sbb eax, 0x83789; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a4d4: sbb eax, 0x83827; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a422: sbb eax, 0x838d9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a384: sbb eax, 0x83977; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a2d2: sbb eax, 0x83a29; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a234: sbb eax, 0x83ac7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a188: sbb eax, 0x83b73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a097: sbb eax, 0x83c64; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039fd8: sbb eax, 0x83d23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f6e: sbb eax, 0x83d8d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e7f: sbb eax, 0x83e7c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c45: sbb eax, 0x83ef6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039dba: sbb eax, 0x83f41; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b6b: sbb eax, 0x83fd0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038b62: sbb eax, 0x84fd9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038ac4: sbb eax, 0x85077; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038a12: sbb eax, 0x85129; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038974: sbb eax, 0x851c7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000388c2: sbb eax, 0x85279; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038824: sbb eax, 0x85317; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038772: sbb eax, 0x853c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000386d4: sbb eax, 0x85467; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038622: sbb eax, 0x85519; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038584: sbb eax, 0x855b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000384d2: sbb eax, 0x85669; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038434: sbb eax, 0x85707; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038382: sbb eax, 0x857b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000382e4: sbb eax, 0x85857; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038232: sbb eax, 0x85909; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038199: sbb eax, 0x859a2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000380e2: sbb eax, 0x85a59; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000038044: sbb eax, 0x85af7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f92: sbb eax, 0x85ba9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ef4: sbb eax, 0x85c47; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037e42: sbb eax, 0x85cf9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037da4: sbb eax, 0x85d97; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037cf2: sbb eax, 0x85e49; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037c54: sbb eax, 0x85ee7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037ba2: sbb eax, 0x85f99; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037b04: sbb eax, 0x86037; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037a52: sbb eax, 0x860e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000379b4: sbb eax, 0x86187; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037902: sbb eax, 0x86239; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037864: sbb eax, 0x862d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000377b8: sbb eax, 0x86383; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c7: sbb eax, 0x86474; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037608: sbb eax, 0x86533; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003759e: sbb eax, 0x8659d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374af: sbb eax, 0x8668c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373ea: sbb eax, 0x86751; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000366a5: sbb eax, 0x87356; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003662b: sbb eax, 0x873d0; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003659c: sbb eax, 0x8745f; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036391: sbb eax, 0x8766a; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003625f: sbb eax, 0x8779c; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036199: sbb eax, 0x87862; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003611b: sbb eax, 0x878e0; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036084: sbb eax, 0x87977; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e88: sbb eax, 0x87b73; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d57: sbb eax, 0x87ca4; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c48: sbb eax, 0x87db3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000009bf28: sbb eax, 0x89000002; ret 0x348; 
0x00000000000790c9: sbb eax, 0x8b410000; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x000000000002e562: sbb eax, 0x8d48c085; adc eax, 0x23234; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000004a1e2: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000000b5a3d: sbb eax, 0xe9ffffff; scasd eax, dword ptr [rdi]; sub al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x000000000001e8c1: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000006b3a2: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x00000000000ae7b1: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000ae829: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000010b7a: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x0000000000058f5c: sbb eax, dword ptr [rbp + 0x31]; leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000000058e9c: sbb eax, dword ptr [rbp + 0x31]; leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000000b05e0: sbb eax, dword ptr [rcx]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000000921aa: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000000359a7: sbb eax, eax; or eax, 1; ret; 
0x00000000000b737f: sbb eax, eax; ret; 
0x000000000004ff65: sbb eax, eax; sbb eax, -1; ret; 
0x00000000000b9a83: sbb eax, ebp; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000be8a5: sbb eax, edi; call rax; 
0x00000000000be8a5: sbb eax, edi; call rax; sbb bh, al; call qword ptr [rax + 0x1c]; 
0x00000000000e2d01: sbb ebp, edi; call qword ptr [rax + 9]; 
0x00000000000806b9: sbb ecx, dword ptr [rbp + 0x29]; ret 0x8948; 
0x000000000005ec8e: sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x000000000000cddd: sbb ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000be86d: sbb edi, eax; call qword ptr [rax + 0x1d]; 
0x00000000000be86d: sbb edi, eax; call qword ptr [rax + 0x1d]; clc; call rax; 
0x0000000000093db1: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000035354: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000bd8e5: sbb esi, edi; jmp qword ptr [rax]; 
0x000000000002e521: sbb esp, dword ptr [rdi]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000099731: sbb qword ptr [r8], r8; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000005ec82: sbb qword ptr [rcx - 0x41f0b3b8], rcx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000093db0: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000007c332: scasb al, byte ptr [rdi]; adc al, 5; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000006695e: scasb al, byte ptr [rdi]; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000035042: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000079b99: scasb al, byte ptr [rdi]; add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000000494de: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x00000000000b761e: scasb al, byte ptr [rdi]; call 0xffffffffb61a7625; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000000be9f5: scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x00000000000be9f5: scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; clc; jmp rax; 
0x000000000003c705: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c54f: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c41: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b67: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000495dd: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000002096d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000079f38: scasd eax, dword ptr [rdi]; add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000000be9f9: scasd eax, dword ptr [rdi]; clc; jmp rax; 
0x000000000001affa: scasd eax, dword ptr [rdi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000001e9be: scasd eax, dword ptr [rdi]; nop; xor eax, eax; ret; 
0x0000000000068fae: scasd eax, dword ptr [rdi]; ret 0x148; 
0x000000000001b4f6: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000023a59: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000051e53: scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x0000000000017639: scasd eax, dword ptr [rdi]; ret; 
0x00000000000c0015: scasd eax, dword ptr [rdi]; stc; jmp qword ptr [rax - 0x51]; 
0x000000000008f364: scasd eax, dword ptr [rdi]; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000077171: scasd eax, dword ptr [rdi]; std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e1c25: scasd eax, dword ptr [rdi]; sti; jmp qword ptr [rdx]; 
0x00000000000b5a42: scasd eax, dword ptr [rdi]; sub al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x000000000000875d: seta dl; sbb dl, 0; test dl, dl; jne 0x8768; ret; 
0x00000000000590ac: setae al; ret; 
0x0000000000068f0a: sete dh; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000068f09: sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000000a95e5: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000000229ec: setne al; neg eax; ret; 
0x000000000003c704: sfence; lea r11, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c54e: sfence; lea r11, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c40: sfence; lea r11, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b66: sfence; lea r11, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000bdd98: shl ah, 0xf7; inc eax; out 0xf7, al; call qword ptr [rax - 0x27]; 
0x00000000000bde18: shl bl, 0xf7; inc eax; in eax, 0xf7; call qword ptr [rax - 0x28]; 
0x0000000000082c54: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a684: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000035444: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x00000000000d6b00: shl byte ptr [rax + rax], 0xf8; mov dh, 0xf7; call rsp; 
0x0000000000082be6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a616: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035406: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x00000000000be8b8: shl byte ptr [rax], 1; clc; call qword ptr [rax + 0x22]; 
0x00000000000bdca4: shl byte ptr [rbp - 0x58df0009], 1; idiv edi; jo 0xbdc56; idiv edi; shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000e0170: shl byte ptr [rbx], 1; cli; jmp qword ptr [rax]; 
0x000000000002e4ba: shl byte ptr [rbx], cl; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000be87c: shl byte ptr [rcx], 1; clc; call qword ptr [rax]; 
0x00000000000be87c: shl byte ptr [rcx], 1; clc; call qword ptr [rax]; or al, 0xf8; call qword ptr [rax + 0xd]; 
0x00000000000a08d6: shl byte ptr [rdi + rax*8], 0x22; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000008eb09: shl byte ptr [rip + 0x138b4100], 0x39; ret 0x840f; 
0x0000000000051c09: shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000850e2: shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x85118; mov eax, 0x101; syscall; 
0x000000000008edd4: shl byte ptr [rip - 0x3b7cb800], 8; ret; 
0x00000000000501af: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000004e553: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000049d05: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x00000000000371bb: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x00000000000371d2: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000081557: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000081546: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000370b1: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000bde1c: shl ch, 0xf7; call qword ptr [rax - 0x28]; 
0x00000000000bdd9c: shl dh, 0xf7; call qword ptr [rax - 0x27]; 
0x00000000000bdd94: shl dl, 0xf7; inc eax; in al, 0xf7; inc eax; out 0xf7, al; call qword ptr [rax - 0x27]; 
0x00000000000c9d10: shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000000d14e8: shl dword ptr [rdi - 5], 1; ret; 
0x000000000008ed0b: shl dword ptr [rip + 0x48107500], 0x8d; add dword ptr [rax - 0x77], r9d; add eax, 0x25c195; ret; 
0x000000000004e54b: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000081542: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000005000b: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x0000000000037136: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000371ed: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x00000000000371d6: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000371bf: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000035c7b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000037151: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000351ac: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x0000000000037011: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008f392: shl eax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000005b611: shl eax, cl; pop rbp; pop r12; ret; 
0x000000000004a4eb: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000005b60d: shl ecx, 3; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x000000000009287c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000092807: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000000927d6: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000049e8a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000059512: shl edx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000008f3e4: shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x0000000000093f83: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009287b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000092806: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000000927d5: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000008f391: shl rax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000004a4ea: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000049e89: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000059511: shl rdx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000008f3e3: shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8f391; xor eax, eax; ret; 
0x0000000000093f82: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000092874: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000092800: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000092873: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000000927ff: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000005c381: shr al, 0x49; ret 0xfffa; 
0x0000000000084e77: shr bl, 0xb5; call 0x593b0; nop; mov eax, 0x3f; syscall; 
0x00000000000620cc: shr bl, 1; add eax, 0x358d4800; ret; 
0x0000000000027f42: shr byte ptr [rax + 0x31ffffff], 0xf6; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x00000000000564d2: shr byte ptr [rax + 0x48ffffff], 0xc7; ret 0xffff; 
0x000000000000bf4f: shr byte ptr [rax + 0x48ffffff], 0xc7; ret; 
0x000000000008f7a2: shr byte ptr [rax + 0x5bffffff], 0x64; mov eax, dword ptr [rax]; ret; 
0x000000000000a8b2: shr byte ptr [rax + 0x64ffffff], 0x48; add eax, dword ptr [0]; ret; 
0x00000000000852aa: shr byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000001cf17: shr byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000016e22: shr byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000d6218: shr byte ptr [rax + rax], 1; add byte ptr [rax], ch; sub ah, dh; jmp rsp; 
0x00000000000be9e4: shr byte ptr [rax - 0x55ef0008], 0xf8; jmp qword ptr [rax - 0x55]; 
0x000000000001f8b2: shr byte ptr [rax - 0x7c000001], 0xc9; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000001bb9a: shr byte ptr [rax - 0x7c000001], 0xca; and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000bdcb0: shr byte ptr [rcx - 0x54ef0009], 0xf7; jmp qword ptr [rax - 0x54]; 
0x00000000000e26e0: shr byte ptr [rcx - 4], 1; call rdi; 
0x000000000002ff0f: shr byte ptr [rcx], 0xc8; ret; 
0x0000000000053b44: shr byte ptr [rcx], cl; ret 0x428d; 
0x0000000000065a88: shr byte ptr [rcx], cl; ret; 
0x0000000000082162: shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000061ecc: shr ch, 1; add eax, 0x358d4800; ret; 
0x000000000009967e: shr cl, 0x50; ret 0xffff; 
0x0000000000074c98: shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000002e791: shr dword ptr [r11], 0; add cl, byte ptr [rax - 0x73]; adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000004e59e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000056522: shr dword ptr [rax - 0x8000001], 0xd8; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000002e74c: shr dword ptr [rbx], 0; add cl, byte ptr [rax - 0x73]; adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e7b3: shr dword ptr [rbx], 0; add cl, byte ptr [rax - 0x73]; adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e792: shr dword ptr [rbx], 0; add cl, byte ptr [rax - 0x73]; adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002e73b: shr dword ptr [rbx], 0; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000002cc71: shr dword ptr [rbx], 1; add dh, dh; ret 0xf02; 
0x000000000002a45b: shr dword ptr [rbx], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000a97b9: shr dword ptr [rbx], cl; add dh, dh; ret 0x7540; 
0x000000000002e7b2: shr dword ptr es:[rbx], 0; add cl, byte ptr [rax - 0x73]; adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x00000000000a94a7: shr eax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000051af9: shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000051b89: shr eax, 0xc; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x0000000000051b2a: shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000008260b: shr eax, 2; ret; 
0x0000000000082b13: shr eax, 2; vzeroupper; ret; 
0x0000000000017caf: shr eax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000051b75: shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000028efe: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000009298c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000092911: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000928e0: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000949ef: shr ecx, cl; ret; 
0x000000000009298b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000092910: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000928df: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000a94a6: shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000008260a: shr rax, 2; ret; 
0x0000000000082b12: shr rax, 2; vzeroupper; ret; 
0x0000000000017cae: shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000092984: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000009290a: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000092983: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000092909: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000d8d2d: sldt word ptr [rax]; add byte ptr [rbx], al; hlt; jmp qword ptr [rax]; 
0x00000000000804ab: sldt word ptr [rax]; cmove rax, rdx; ret; 
0x00000000000c8ee1: sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000006be25: sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000000c8ee9: sldt word ptr [rax]; ret; 
0x00000000000a1279: stc; adc byte ptr [rdi], cl; test ah, ah; or byte ptr [rax], al; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x000000000004fb8f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000009a34: stc; add al, 0; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000081e46: stc; add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000062410: stc; add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x00000000000beb9a: stc; call qword ptr [rax + 0x30]; 
0x00000000000bfa42: stc; call qword ptr [rax + 0x70fff9a5]; movsd dword ptr [rdi], dword ptr [rsi]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000bfa4a: stc; call qword ptr [rax - 0x5b]; 
0x00000000000d7086: stc; call qword ptr [rax - 0x76]; 
0x00000000000d7046: stc; call qword ptr [rax - 0x77]; 
0x00000000000d7006: stc; call qword ptr [rax - 0x79]; 
0x00000000000bebda: stc; call qword ptr [rax]; 
0x00000000000b947e: stc; call qword ptr [rbp + 0x53]; 
0x00000000000bf4d6: stc; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; jmp rsp; 
0x00000000000bf4de: stc; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; jmp rsp; 
0x00000000000bfa22: stc; call qword ptr [rbx]; stc; call rax; 
0x00000000000bebc2: stc; call qword ptr [rcx + 0x30]; 
0x00000000000bebd2: stc; call qword ptr [rcx + 0x30]; stc; lcall [rdi + rbp]; stc; call qword ptr [rax]; 
0x00000000000beba2: stc; call qword ptr [rdi + 0x30]; 
0x00000000000beba2: stc; call qword ptr [rdi + 0x30]; stc; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000bf1b2: stc; call qword ptr [rdi + 0x73]; 
0x00000000000bf1b2: stc; call qword ptr [rdi + 0x73]; stc; lcall [rax]; jb 0xbf1b4; call rcx; 
0x00000000000bebe2: stc; call qword ptr [rdi]; 
0x00000000000bf19e: stc; call qword ptr [rdx + 0x4fff972]; jb 0xbf1a0; call rcx; 
0x00000000000bfa26: stc; call rax; 
0x00000000000bf152: stc; call rcx; 
0x00000000000bf1fe: stc; call rcx; jno 0xbf1fc; call rcx; jno 0xbf200; jmp rsp; 
0x00000000000bf202: stc; call rcx; jno 0xbf200; jmp rsp; 
0x00000000000bf222: stc; call rcx; jno 0xbf220; call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf226: stc; call rcx; jno 0xbf224; jmp qword ptr [rdx]; 
0x00000000000bf23e: stc; call rcx; jno 0xbf23c; call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf242: stc; call rcx; jno 0xbf240; jmp rsp; 
0x00000000000bf26a: stc; call rcx; jno 0xbf268; jmp rsp; 
0x00000000000bf356: stc; call rcx; jno 0xbf354; call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf35a: stc; call rcx; jno 0xbf358; jmp rsp; 
0x00000000000bf396: stc; call rcx; jno 0xbf394; call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf39a: stc; call rcx; jno 0xbf398; jmp rsp; 
0x00000000000bf3b2: stc; call rcx; jno 0xbf3b0; jmp rsp; 
0x00000000000bf3c2: stc; call rcx; jno 0xbf3c0; call rcx; jno 0xbf3c4; jmp rsp; 
0x00000000000bf3c6: stc; call rcx; jno 0xbf3c4; jmp rsp; 
0x00000000000beae1: stc; clc; call qword ptr [rax - 0x4f000707]; stc; clc; call rax; 
0x00000000000bead9: stc; clc; call qword ptr [rax - 7]; 
0x00000000000beaf1: stc; clc; call qword ptr [rax]; 
0x00000000000beae9: stc; clc; call rax; 
0x00000000000bead5: stc; clc; push qword ptr [rax]; stc; clc; call qword ptr [rax - 7]; 
0x00000000000beaed: stc; clc; push rax; stc; clc; call qword ptr [rax]; 
0x000000000006ac6e: stc; dec dword ptr [rax + 0x29]; ret; 
0x0000000000076165: stc; dec dword ptr [rax - 0x39]; ret 0xff88; 
0x000000000008ef40: stc; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000beb6a: stc; dec dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x00000000000bf266: stc; dec dword ptr [rbp + 0x73]; stc; call rcx; 
0x00000000000bf266: stc; dec dword ptr [rbp + 0x73]; stc; call rcx; jno 0xbf268; jmp rsp; 
0x000000000006a415: stc; dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x000000000007f487: stc; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x00000000000bf1ee: stc; dec dword ptr [rsi]; jb 0xbf1ec; jmp rsp; 
0x00000000000d7056: stc; dec eax; mov dword ptr [rax], eax; add byte ptr [rax + 0x2e], cl; stc; jmp rax; 
0x00000000000bfa52: stc; inc dword ptr [rax]; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp rax; 
0x00000000000beb66: stc; inc dword ptr [rax]; xor cl, bh; dec dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x0000000000077fab: stc; inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000bf1a2: stc; inc dword ptr [rdx + rsi*2]; stc; call rcx; 
0x00000000000c0016: stc; jmp qword ptr [rax - 0x51]; 
0x00000000000beb6e: stc; jmp qword ptr [rax]; 
0x00000000000bebaa: stc; jmp qword ptr [rbp + 0x30]; 
0x00000000000c0052: stc; jmp qword ptr [rbp - 0x54]; 
0x00000000000df25a: stc; jmp qword ptr [rbx + 8]; 
0x00000000000df53a: stc; jmp qword ptr [rbx]; 
0x00000000000bfffa: stc; jmp qword ptr [rcx]; 
0x00000000000df6e2: stc; jmp qword ptr [rdi]; 
0x00000000000df9ca: stc; jmp qword ptr [rdx]; 
0x000000000006c250: stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000bfa56: stc; jmp rax; 
0x00000000000bf15e: stc; jmp rsp; 
0x00000000000d1364: stc; jnp 0xd1320; ret; 
0x00000000000bf1b6: stc; lcall [rax]; jb 0xbf1b4; call rcx; 
0x00000000000bf25a: stc; lcall [rax]; jb 0xbf258; push qword ptr [rdx + 0x72]; stc; jmp qword ptr [rdx]; 
0x00000000000c004e: stc; lcall [rcx]; stosd dword ptr [rdi], eax; stc; jmp qword ptr [rbp - 0x54]; 
0x00000000000beb96: stc; lcall [rdi + rbp - 7]; call qword ptr [rax + 0x30]; 
0x00000000000beb9e: stc; lcall [rdi + rbp - 7]; call qword ptr [rdi + 0x30]; 
0x00000000000beb9e: stc; lcall [rdi + rbp - 7]; call qword ptr [rdi + 0x30]; stc; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000beba6: stc; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000beb8e: stc; lcall [rdi + rbp - 7]; lcall [rsi + 0x2f]; stc; lcall [rdi + rbp - 7]; call qword ptr [rax + 0x30]; 
0x00000000000bebd6: stc; lcall [rdi + rbp]; stc; call qword ptr [rax]; 
0x00000000000bebce: stc; lcall [rdi + rbp]; stc; call qword ptr [rcx + 0x30]; 
0x00000000000bebde: stc; lcall [rdi + rbp]; stc; call qword ptr [rdi]; 
0x00000000000beb92: stc; lcall [rsi + 0x2f]; stc; lcall [rdi + rbp - 7]; call qword ptr [rax + 0x30]; 
0x00000000000bf14e: stc; lcall [rsi + 0x72]; stc; call rcx; 
0x000000000007f885: stc; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007fa61: stc; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000000d700e: stc; ljmp [rax - 0x79]; add byte ptr [rax], al; sbb byte ptr [rdi], cl; stc; call rax; 
0x00000000000bf1ea: stc; ljmp [rdx + rsi*2]; stc; dec dword ptr [rsi]; jb 0xbf1ec; jmp rsp; 
0x0000000000039a98: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039a92: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000082426: stc; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000062b56: stc; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000b5a39: stc; or byte ptr [rdi], cl; test byte ptr [rip - 0x16000001], bl; scasd eax, dword ptr [rdi]; sub al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x000000000005be19: stc; or cl, byte ptr [rdi]; test byte ptr [rsi + 0x49000002], ch; add eax, dword ptr [rdi + 0x10]; call rax; 
0x0000000000090996: stc; or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x908e6; sub eax, r8d; ret; 
0x0000000000037e43: stc; pop rsp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000bfa46: stc; push qword ptr [rax - 0x5b]; stc; call qword ptr [rax - 0x5b]; 
0x00000000000d707e: stc; push qword ptr [rax]; mov al, byte ptr [rax]; add byte ptr [rax + 0x2f], cl; stc; call qword ptr [rax - 0x76]; 
0x00000000000d703e: stc; push qword ptr [rcx + rcx*4]; add byte ptr [rax], al; mov byte ptr [rax], ch; stc; call qword ptr [rax - 0x77]; 
0x00000000000bfff6: stc; push qword ptr [rdi - 0x54]; stc; jmp qword ptr [rcx]; 
0x00000000000bf25e: stc; push qword ptr [rdx + 0x72]; stc; jmp qword ptr [rdx]; 
0x00000000000bf14a: stc; push qword ptr [rsi]; jae 0xbf148; lcall [rsi + 0x72]; stc; call rcx; 
0x00000000000bf332: stc; push qword ptr [rsi]; jb 0xbf330; push rsp; jno 0xbf334; call rcx; 
0x00000000000bf3fe: stc; push qword ptr [rsi]; jb 0xbf3fc; push rsp; jno 0xbf400; call rcx; 
0x00000000000bf4f2: stc; push qword ptr [rsi]; jb 0xbf4f0; push rsp; jno 0xbf4f4; call rcx; 
0x00000000000bf156: stc; push rsp; jno 0xbf154; push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf15a: stc; push rsp; jno 0xbf158; jmp rsp; 
0x00000000000bf2ae: stc; push rsp; jno 0xbf2ac; push rsp; jno 0xbf2b0; jmp rsp; 
0x00000000000bf2b2: stc; push rsp; jno 0xbf2b0; jmp rsp; 
0x00000000000bf336: stc; push rsp; jno 0xbf334; call rcx; 
0x00000000000bf342: stc; push rsp; jno 0xbf340; push rsp; jno 0xbf344; jmp rsp; 
0x00000000000bf346: stc; push rsp; jno 0xbf344; jmp rsp; 
0x00000000000bf3a6: stc; push rsp; jno 0xbf3a4; call rcx; 
0x00000000000bf3ae: stc; push rsp; jno 0xbf3ac; call rcx; 
0x00000000000bf3ae: stc; push rsp; jno 0xbf3ac; call rcx; jno 0xbf3b0; jmp rsp; 
0x00000000000bf402: stc; push rsp; jno 0xbf400; call rcx; 
0x00000000000bf4f6: stc; push rsp; jno 0xbf4f4; call rcx; 
0x00000000000b476b: stc; sal byte ptr [rcx + rsi*2 + 0x3c], 0x2f; ja 0x86f0; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000006bf23: stc; sbb eax, 0x39480001; ret; 
0x00000000000423b4: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000035a27: stc; xlatb; ret 0xff2d; 
0x000000000003ac03: stc; xor byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000009664: std; add al, 0; leave; ret; 
0x00000000000b2c6f: std; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000001dd17: std; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000005b95b: std; and eax, 0x746870f; add byte ptr [rax], al; movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x0000000000083cba: std; and r13d, 1; add r13, rax; mov qword ptr [rsp + 0xa8], r13; call rbx; 
0x00000000000e2d02: std; call qword ptr [rax + 9]; 
0x00000000000d7a2e: std; call qword ptr [rax - 0x38]; 
0x00000000000d5aa2: std; call qword ptr [rax - 0xb]; 
0x00000000000d5ace: std; call qword ptr [rax]; 
0x00000000000e3166: std; call qword ptr [rbx]; 
0x00000000000e368a: std; call qword ptr [rcx]; 
0x00000000000d5e7e: std; call qword ptr [rdi - 1]; 
0x00000000000d5e7e: std; call qword ptr [rdi - 1]; std; jmp qword ptr [rdx - 1]; 
0x00000000000e340a: std; call qword ptr [rdx]; 
0x00000000000d5ada: std; call rax; 
0x00000000000d7ae6: std; call rax; retf 0; fcom st(4); std; jmp qword ptr [rax]; 
0x00000000000dea42: std; call rdx; 
0x00000000000a95ae: std; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000085c62: std; dec dword ptr [rax + 0x39]; ret; 
0x00000000000b3b56: std; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000005724e: std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000077172: std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000d5e7a: std; dec dword ptr [rbp - 2]; std; call qword ptr [rdi - 1]; 
0x00000000000d5e7a: std; dec dword ptr [rbp - 2]; std; call qword ptr [rdi - 1]; std; jmp qword ptr [rdx - 1]; 
0x00000000000d5e76: std; dec dword ptr [rbp - 2]; std; dec dword ptr [rbp - 2]; std; call qword ptr [rdi - 1]; 
0x00000000000bd809: std; idiv bh; sar ch, 0xf6; call qword ptr [rax - 3]; 
0x0000000000074c9a: std; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000009203b: std; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x00000000000d5eaa: std; inc dword ptr [rbx]; add dh, bh; call qword ptr [rsi]; 
0x00000000000513ca: std; jg 0x51417; jmp qword ptr [rdx - 0x2f]; 
0x00000000000d7b0e: std; jmp qword ptr [rax - 0x34]; 
0x00000000000d7a76: std; jmp qword ptr [rax - 0x37]; 
0x00000000000d79f6: std; jmp qword ptr [rax - 0x39]; 
0x00000000000d5a12: std; jmp qword ptr [rax - 0xf]; 
0x00000000000d5a2a: std; jmp qword ptr [rax]; 
0x00000000000e337a: std; jmp qword ptr [rbx + 1]; 
0x00000000000de612: std; jmp qword ptr [rdi]; 
0x00000000000d5e82: std; jmp qword ptr [rdx - 1]; 
0x00000000000ddd32: std; jmp qword ptr [rdx]; 
0x000000000007c10f: std; jmp qword ptr [rsi + 0x2e]; 
0x000000000002cb48: std; jmp qword ptr [rsi + 0xf]; 
0x00000000000850bc: std; jmp qword ptr [rsi - 0x70]; 
0x00000000000d7a56: std; jmp rax; 
0x00000000000d5a0e: std; ljmp [rax]; int1; std; jmp qword ptr [rax - 0xf]; 
0x00000000000392b3: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000468bf: std; mov eax, 0xc8b0007; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000392bb: std; mov word ptr [rdi - 2], cx; ret; 
0x00000000000d5a9e: std; push qword ptr [rax - 0x12]; std; call qword ptr [rax - 0xb]; 
0x00000000000d5ad2: std; push qword ptr [rax - 0x4f000204]; cld; std; call rax; 
0x00000000000d5ac6: std; push qword ptr [rax]; std; std; jmp qword ptr [rax]; 
0x00000000000582de: std; push rbx; ret; 
0x0000000000050913: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000d5acd: std; std; call qword ptr [rax]; 
0x00000000000d5ac9: std; std; jmp qword ptr [rax]; 
0x00000000000d5ad1: std; std; push qword ptr [rax - 0x4f000204]; cld; std; call rax; 
0x00000000000d5ac5: std; std; push qword ptr [rax]; std; std; jmp qword ptr [rax]; 
0x0000000000051341: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000005122a: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x00000000000420e4: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041eaa: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000050672: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000035429: std; xlatb; ret 0xc085; 
0x0000000000035863: std; xlatb; ret 0xe883; 
0x0000000000035431: std; xlatb; ret; 
0x00000000000816f4: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000081754: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x00000000000812ee: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000035421: std; xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x000000000004a131: std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x000000000002be51: sti; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000001b5d3: sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x00000000000d7516: sti; call qword ptr [rax - 0x58]; 
0x00000000000e1a3a: sti; call qword ptr [rax]; 
0x00000000000e1f32: sti; call qword ptr [rbx + 1]; 
0x00000000000e19e2: sti; call qword ptr [rbx]; 
0x00000000000e1696: sti; call qword ptr [rdi + 1]; 
0x00000000000e1e1a: sti; call qword ptr [rdi]; 
0x00000000000e22ee: sti; call qword ptr [rdx]; 
0x00000000000d77d6: sti; call rax; 
0x00000000000e1af2: sti; call rbx; 
0x000000000005606f: sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000075fcd: sti; dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 5; call qword ptr [rbp + 0x27]; 
0x00000000000b8a4c: sti; hlt; call qword ptr [rax + 0x8c48348]; pop rbx; pop rbp; ret; 
0x00000000000d779e: sti; inc dword ptr [rax - 0x47]; add byte ptr [rax], al; test al, 0xcf; sti; jmp qword ptr [rax - 0x47]; 
0x000000000009f2b7: sti; inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e21ea: sti; jmp qword ptr [rax + 1]; 
0x00000000000d77a6: sti; jmp qword ptr [rax - 0x47]; 
0x00000000000d76ae: sti; jmp qword ptr [rax - 0x4c]; 
0x00000000000d757e: sti; jmp qword ptr [rax - 0x53]; 
0x00000000000d750e: sti; jmp qword ptr [rax]; 
0x00000000000e1d3a: sti; jmp qword ptr [rbp]; 
0x00000000000e158e: sti; jmp qword ptr [rbx + 1]; 
0x00000000000e1862: sti; jmp qword ptr [rcx]; 
0x00000000000e1b4a: sti; jmp qword ptr [rdi]; 
0x00000000000e18fe: sti; jmp qword ptr [rdx + 5]; 
0x00000000000e1cc2: sti; jmp qword ptr [rdx]; 
0x000000000005745f: sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000052960: sti; jmp qword ptr [rsi + 0xf]; 
0x00000000000e1762: sti; jmp qword ptr [rsi]; 
0x00000000000ce946: sti; jmp rax; 
0x00000000000e1cda: sti; jmp rdx; 
0x000000000007f229: sti; jne 0x7f298; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000000d766e: sti; ljmp [rdx + rsi*4 - 0x5e980000]; sti; jmp rax; 
0x0000000000039698: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000039692: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000ce93e: sti; push qword ptr [rbx - 0x4c00041b]; in eax, 0xfb; jmp rax; 
0x00000000000a66b8: sti; ret 0xffbf; 
0x00000000000d14ea: sti; ret; 
0x00000000000233c1: sti; sub al, 0; ret; 
0x0000000000068777: sti; test rax, rax; je 0x6877f; call rax; 
0x00000000000423a6: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000b5cb2: stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e28c5: stosb byte ptr [rdi], al; add byte ptr [rax], al; cmp byte ptr [rdi - 4], ch; call qword ptr [rax]; 
0x00000000000be9e9: stosb byte ptr [rdi], al; clc; jmp qword ptr [rax - 0x55]; 
0x000000000005dbd7: stosb byte ptr [rdi], al; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000006fb62: stosb byte ptr [rdi], al; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x00000000000bdcf1: stosb byte ptr [rdi], al; idiv edi; sub byte ptr [rbx - 0x532f0009], 0xf7; jmp qword ptr [rax]; 
0x000000000005163b: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000005a942: stosb byte ptr [rdi], al; or ebp, dword ptr [rcx]; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x00000000000c004d: stosb byte ptr [rdi], al; stc; lcall [rcx]; stosd dword ptr [rdi], eax; stc; jmp qword ptr [rbp - 0x54]; 
0x00000000000e1b49: stosb byte ptr [rdi], al; sti; jmp qword ptr [rdi]; 
0x00000000000d3136: stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000be5bc: stosb byte ptr [rdi], al; xor edi, eax; call qword ptr [rax + 0x33]; 
0x00000000000e297d: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add ah, dh; cld; jmp qword ptr [rcx]; 
0x00000000000e29b1: stosd dword ptr [rdi], eax; add byte ptr [rax], al; cmp al, 0xf4; cld; jmp rsp; 
0x00000000000ddb29: stosd dword ptr [rdi], eax; bnd jmp qword ptr [rbx]; 
0x00000000000be9ed: stosd dword ptr [rdi], eax; clc; push qword ptr [rax + 0xfff8ac]; scasb al, byte ptr [rdi]; clc; call qword ptr [rax - 0x51]; 
0x000000000001bd91: stosd dword ptr [rdi], eax; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000081a54: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000082714: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000075e2e: stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000028f03: stosd dword ptr [rdi], eax; pop rbx; ret; 
0x00000000000d2acc: stosd dword ptr [rdi], eax; ret; 
0x00000000000819b5: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x0000000000084ce1: stosd dword ptr [rdi], eax; sbb al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x00000000000c0051: stosd dword ptr [rdi], eax; stc; jmp qword ptr [rbp - 0x54]; 
0x0000000000028f02: stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000000d3a55: sub ah, bh; jmp rcx; 
0x00000000000d3a45: sub ah, bh; push qword ptr [rcx]; sub esp, edi; call qword ptr [rdi + 0x31fffc16]; sub esp, edi; jmp rcx; 
0x00000000000d3ac5: sub ah, bh; push qword ptr [rcx]; sub esp, edi; inc dword ptr [rdx + 0x44fffc1c]; and ah, bh; jmp rcx; 
0x00000000000d744c: sub ah, ch; cli; call qword ptr [rax - 0x5c]; 
0x00000000000d622d: sub ah, dh; dec dword ptr [rbp + 0x28f80000]; hlt; jmp qword ptr [rax]; 
0x00000000000d6235: sub ah, dh; jmp qword ptr [rax]; 
0x00000000000d621d: sub ah, dh; jmp rsp; 
0x00000000000d6229: sub al, 0; add al, bl; sub ah, dh; dec dword ptr [rbp + 0x28f80000]; hlt; jmp qword ptr [rax]; 
0x00000000000d6211: sub al, 0; add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x00000000000d6209: sub al, 0; add byte ptr [rax - 0x63000bdc], bh; sub al, 0; add byte ptr [rax + 0x27], cl; hlt; call rax; 
0x0000000000022970: sub al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000e2708: sub al, 0; add byte ptr [rax], al; and al, 0xa9; add byte ptr [rax], al; sub byte ptr [rdx - 4], 0xff; ret; 
0x00000000000e1858: sub al, 0; add byte ptr [rax], al; je 0xe17f8; add byte ptr [rax], al; adc ebx, edi; jmp qword ptr [rcx]; 
0x00000000000e0d88: sub al, 0; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; pop qword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000058f64: sub al, 0; add byte ptr [rax], al; syscall; 
0x00000000000d6219: sub al, 0; add byte ptr [rax], ch; sub ah, dh; jmp rsp; 
0x000000000001cab5: sub al, 0; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000023418: sub al, 0; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2c43c8], eax; ret; 
0x00000000000233d8: sub al, 0; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2c43e3], rax; ret; 
0x00000000000233b8: sub al, 0; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2c43fb], rax; ret; 
0x0000000000022906: sub al, 0; add dword ptr [rip + 0x2c74b5], 1; ret; 
0x0000000000024326: sub al, 0; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000299ee: sub al, 0; lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x2bde4a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x0000000000022875: sub al, 0; ret; 
0x00000000000238ba: sub al, 0; test eax, eax; je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x00000000000561ec: sub al, 0x10; add al, ch; sub al, 0x26; cld; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000561f0: sub al, 0x26; cld; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000be680: sub al, 0x29; clc; call rdx; 
0x00000000000be680: sub al, 0x29; clc; call rdx; xor al, bh; call qword ptr [rdx + 0x30]; 
0x00000000000be678: sub al, 0x2a; clc; lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000917e6: sub al, 0x48; add esp, 0x38; ret; 
0x00000000000de914: sub al, 0x6b; add byte ptr [rax], al; pop rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rdi]; 
0x0000000000051872: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x00000000000bf1ec: sub al, 0x72; stc; dec dword ptr [rsi]; jb 0xbf1ec; jmp rsp; 
0x000000000009b973: sub al, 0x89; ret 0x348; 
0x00000000000e1e14: sub al, 0xa0; add byte ptr [rax], al; mov bl, 0xfb; call qword ptr [rdi]; 
0x0000000000036803: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b4518: sub al, 0xd; add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x2148c]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000db2b4: sub al, 0xe5; hlt; jmp qword ptr [rax]; 
0x00000000000cd900: sub al, 0xf1; cli; call rsp; 
0x00000000000cd8f4: sub al, 0xf1; cli; jmp rsp; 
0x00000000000cd8fc: sub al, 0xf1; cli; ljmp [rcx + rsi*8]; cli; call rsp; 
0x00000000000b5a43: sub al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b672b: sub al, 0xf6; rol dword ptr [rdi + rcx], 0x85; ret; 
0x00000000000bd915: sub al, 0xf7; call qword ptr [rax]; 
0x00000000000be7e5: sub al, 0xf8; call qword ptr [rax]; 
0x00000000000be829: sub al, 0xf8; inc dword ptr [rax + 0xfff82b]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x0000000000087deb: sub al, 0xf8; jmp qword ptr [rsi - 0x70]; 
0x00000000000be629: sub al, 0xf8; push rax; sub edi, eax; push qword ptr [rax + 0x2b]; clc; jmp rax; 
0x00000000000d717d: sub al, 0xfa; jmp rsp; 
0x00000000000814c0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000003b0a6: sub al, 8; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d61b1: sub al, byte ptr [rax]; add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x000000000006d8cd: sub al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000002daab: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x2296b; cmovne rax, rdx; ret; 
0x000000000002e65a: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x229fc; cmovne rax, rdx; ret; 
0x000000000001c0ee: sub al, byte ptr [rsi]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000a7c67: sub al, ch; ret; 
0x0000000000035bc5: sub al, ch; std; xlatb; ret; 
0x0000000000009277: sub bh, 0xff; jmp qword ptr [rsi - 0x77]; 
0x00000000000be635: sub bh, al; call qword ptr [rax + 0x2a]; 
0x00000000000be6b5: sub bh, al; jmp qword ptr [rdx]; 
0x00000000000be835: sub bh, al; jmp rax; 
0x00000000000be679: sub bh, al; lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000be675: sub bh, al; ljmp [rdx + rbp]; clc; lcall [rcx + rbp + 0x292cfff8]; clc; call rdx; 
0x00000000000be7f5: sub bh, al; push rax; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000bd905: sub bh, dh; call qword ptr [rax - 0x4f0008d7]; sub dh, bh; call rax; 
0x00000000000e1ab9: sub bl, bh; jmp qword ptr [rcx]; 
0x00000000000d5ef1: sub bl, dh; call qword ptr [rax]; 
0x00000000000d5ee5: sub bl, dh; call qword ptr [rdi + 0x28]; 
0x000000000003b495: sub byte ptr [eax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001b42d: sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000001b397: sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000065be4: sub byte ptr [r8], r8b; ret; 
0x0000000000086bf7: sub byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000086bf6: sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x0000000000093373: sub byte ptr [rax + 1], cl; ret 0x1474; 
0x000000000001b398: sub byte ptr [rax + 1], cl; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000000d6e14: sub byte ptr [rax + rdi*8], dh; dec eax; jbe 0xd6e1b; add byte ptr [rax + 0x34], bl; clc; jmp rax; 
0x000000000005f692: sub byte ptr [rax - 0x75], cl; je 0x5f6bb; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000006406f: sub byte ptr [rax - 0x75], cl; je 0x64098; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000652af: sub byte ptr [rax - 0x75], cl; je 0x652d8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000005ef7e: sub byte ptr [rax - 0x75], cl; jl 0x5efa7; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000007e9b9: sub byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000026c73: sub byte ptr [rax - 0x77], cl; je 0x26c9c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000002cb24: sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000007f376: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000007d294: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000095493: sub byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000001852c: sub byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x000000000000d923: sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d69fc: sub byte ptr [rax - 9], cl; call qword ptr [rax]; 
0x00000000000d6179: sub byte ptr [rax], al; add al, ch; or al, 0xf4; call qword ptr [rax + 0x29]; 
0x00000000000da685: sub byte ptr [rax], al; add al, cl; mov esp, esi; call qword ptr [rsi]; 
0x00000000000d6171: sub byte ptr [rax], al; add bh, dl; or al, 0xf4; call rsp; 
0x00000000000d6169: sub byte ptr [rax], al; add byte ptr [rax - 0x5f000bf5], bh; sub byte ptr [rax], al; add bh, dl; or al, 0xf4; call rsp; 
0x0000000000008ed2: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x8edd; call 0x593b0; leave; ret; 
0x000000000000924c: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x9257; call 0x593b0; leave; ret; 
0x00000000000093ed: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x93f8; call 0x593b0; leave; ret; 
0x0000000000009547: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x9552; call 0x593b0; leave; ret; 
0x000000000000965c: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x9667; call 0x593b0; leave; ret; 
0x0000000000016db3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x16e03; add rsp, 0x148; ret; 
0x000000000001998d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019a39: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19a47; add rsp, 0xd8; ret; 
0x0000000000019aee: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019bae: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19bbc; add rsp, 0xd8; ret; 
0x00000000000521eb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52214; add rsp, 0x20; pop rbx; ret; 
0x0000000000056573: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56589; add rsp, 0x28; ret; 
0x0000000000056691: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56749; add rsp, 0x68; ret; 
0x00000000000567a3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x567eb; add rsp, 0x58; ret; 
0x0000000000056a24: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b33: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56b83; add rsp, 0x68; ret; 
0x00000000000574a2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x574b7; add rsp, 0x28; ret; 
0x0000000000068e7b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x68e86; add rsp, 0x18; ret; 
0x000000000007609e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c0fe: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7c10c; add rsp, 0xd8; ret; 
0x0000000000084ff6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x850b9; add rsp, 0x78; ret; 
0x0000000000085108: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85153; add rsp, 0x58; ret; 
0x000000000008518b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85199; movzx eax, al; add rsp, 0x58; ret; 
0x000000000008523a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8525b; add rsp, 0x38; ret; 
0x00000000000916e6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x916f2; add rsp, 0x20; pop rbx; ret; 
0x00000000000917e1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x91813; add rsp, 0x38; ret; 
0x00000000000918a1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x918ce; add rsp, 0x68; ret; 
0x0000000000091a02: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091cd1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x91cfe; add rsp, 0x68; ret; 
0x0000000000093d0d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x93d4e; leave; ret; 
0x00000000000942d4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x94394; add rsp, 0x30; pop rbx; ret; 
0x000000000009cf59: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d03c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9d054; add rsp, 0x38; ret; 
0x00000000000a9597: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xa95ac; add rsp, 0x38; ret; 
0x0000000000016bd4: sub byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; jne 0x16bfc; add rsp, 0x118; ret; 
0x00000000000dd5a0: sub byte ptr [rax], al; add byte ptr [rax], al; mov esp, 0x68000057; sar ebp, 0xff; ret 0; 
0x000000000001a6ea: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000016ab6: sub byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdx; jne 0x16ac7; add rsp, 0x148; ret; 
0x00000000000182b2: sub byte ptr [rax], al; add byte ptr [rax], al; movsxd rax, dword ptr [rsp + 4]; jne 0x182c2; add rsp, 0x18; ret; 
0x00000000000d9b68: sub byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rip + 0x5ab00000], bl; hlt; call qword ptr [rdi]; 
0x0000000000098f14: sub byte ptr [rax], al; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000058d0d: sub byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000059c15: sub byte ptr [rax], al; je 0x59c28; test rdx, rdx; je 0x59c28; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000005a96a: sub byte ptr [rax], al; pop rbx; ret; 
0x000000000005a935: sub byte ptr [rax], al; ret; 
0x00000000000d621c: sub byte ptr [rax], ch; hlt; jmp rsp; 
0x000000000003b496: sub byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000055f2f: sub byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000000e2310: sub byte ptr [rbp - 0x1f640000], ah; sti; call qword ptr [rdx]; 
0x00000000000bfa50: sub byte ptr [rbp - 0x5aff0007], ah; stc; jmp rax; 
0x000000000001b42e: sub byte ptr [rbp - 0x667bf02e], al; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000052634: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000943e2: sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a9067: sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000009160b: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000091599: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000000a0353: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x00000000000a0352: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x00000000000bdcf4: sub byte ptr [rbx - 0x532f0009], 0xf7; jmp qword ptr [rax]; 
0x00000000000be82c: sub byte ptr [rbx], 0xf8; inc dword ptr [rax]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x0000000000092166: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x00000000000d7268: sub byte ptr [rcx - 0x6c980000], bl; cli; jmp qword ptr [rax - 0x67]; 
0x0000000000055cf5: sub byte ptr [rcx - 0x75], cl; and al, 8; test rax, rax; je 0x55d02; call rax; 
0x000000000005958c: sub byte ptr [rcx], al; ret; 
0x00000000000884f5: sub byte ptr [rcx], dh; imul al; and eax, dword ptr [rax]; clc; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000851b9: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000000d79e4: sub byte ptr [rdi*8 + 0xc6d8ff], cl; add byte ptr [rax + 0x4cfffd30], ch; mov dword ptr [rax], 0xfd30b800; jmp qword ptr [rax - 0x39]; 
0x000000000000a483: sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000002b946: sub byte ptr [rdi], cl; test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000000e2810: sub byte ptr [rdx + 0x6dbc0000], ch; cld; jmp qword ptr [rdx]; 
0x00000000000e2710: sub byte ptr [rdx - 4], 0xff; ret; 
0x00000000000be7f4: sub byte ptr [rdx], 0xf8; push rax; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000dfba8: sub byte ptr [rdx], al; cli; jmp qword ptr [rcx]; 
0x00000000000d61ac: sub byte ptr [rdx], bl; hlt; dec dword ptr [rdx + rbp]; add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x00000000000d9028: sub byte ptr [rsp + rsi*8], dl; call qword ptr [rax]; 
0x00000000000d7045: sub cl, bh; call qword ptr [rax - 0x77]; 
0x00000000000d703d: sub cl, bh; push qword ptr [rcx + rcx*4]; add byte ptr [rax], al; mov byte ptr [rax], ch; stc; call qword ptr [rax - 0x77]; 
0x0000000000075856: sub cl, bpl; ret 0xffe8; 
0x0000000000017d9d: sub cl, byte ptr [rax - 0x77]; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000003b294: sub cl, byte ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000075857: sub cl, ch; ret 0xffe8; 
0x00000000000df538: sub cl, ch; stc; jmp qword ptr [rbx]; 
0x00000000000d5a10: sub cl, dh; std; jmp qword ptr [rax - 0xf]; 
0x000000000006b924: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000007527d: sub dh, al; add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000000bd90d: sub dh, bh; call rax; 
0x00000000000bd90d: sub dh, bh; call rax; sub esi, edi; push rax; sub al, 0xf7; call qword ptr [rax]; 
0x0000000000079ef2: sub dh, byte ptr [rax - 0x74b7ffda]; add al, 0xf8; jmp rax; 
0x00000000000dbda1: sub dh, ch; jmp qword ptr [rbx]; 
0x00000000000850ee: sub dword ptr [rax + 0x101], edi; syscall; 
0x0000000000086f12: sub dword ptr [rax + 0xf000002], -0x7b; ret; 
0x0000000000097b72: sub dword ptr [rax + rax], esi; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000b4696: sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x00000000000da7e1: sub dword ptr [rax], eax; add ah, ch; mov esi, esp; call qword ptr [rsi]; 
0x00000000000da72d: sub dword ptr [rax], eax; add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x00000000000da7cd: sub dword ptr [rax], eax; add al, ah; mov esi, esp; call qword ptr [rsi]; 
0x00000000000d6199: sub dword ptr [rax], eax; add byte ptr [rax + 0x11], bl; hlt; call rax; 
0x0000000000059041: sub dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000059041: sub dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59050; ret; 
0x00000000000da781: sub dword ptr [rax], eax; add byte ptr [rbx + rcx*4], cl; hlt; call qword ptr [rbx]; 
0x0000000000079192: sub dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000591de: sub dword ptr [rax], eax; add rsp, 8; ret; 
0x0000000000058cb4: sub dword ptr [rax], eax; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000055bc4: sub dword ptr [rax], eax; test eax, eax; jne 0x55be0; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000567f4: sub dword ptr [rax], eax; test eax, eax; jne 0x56810; xor eax, eax; syscall; 
0x00000000000568c4: sub dword ptr [rax], eax; test eax, eax; jne 0x568e0; mov eax, 1; syscall; 
0x0000000000056a01: sub dword ptr [rax], eax; test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x0000000000056b94: sub dword ptr [rax], eax; test eax, eax; jne 0x56bb0; mov eax, 3; syscall; 
0x00000000000574c4: sub dword ptr [rax], eax; test eax, eax; jne 0x574e0; mov eax, 0x4a; syscall; 
0x0000000000058d94: sub dword ptr [rax], eax; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x000000000003b346: sub dword ptr [rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000da72c: sub dword ptr [rax], r8d; add al, ah; mov dh, ah; call qword ptr [rdx]; 
0x0000000000077703: sub dword ptr [rbx], esi; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000038a13: sub dword ptr [rcx + 8], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007c1c4: sub dword ptr [rdi + 0x29], esi; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000050ac1: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000007c1c6: sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000007c95f: sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000002e79a: sub dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x228cc; cmovne rax, rdx; ret; 
0x00000000000a9183: sub dword ptr [rdx], eax; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000003a2d3: sub dword ptr [rdx], edi; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000036fe6: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000007ffa5: sub dword ptr [rsi + 4], 1; je 0x7ffd1; mov rax, rdx; pop rbx; ret; 
0x0000000000016b6d: sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b75: sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000016b7d: sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000058d93: sub dword ptr es:[rax], eax; test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000035957: sub eax, -1; jne 0x35960; vzeroupper; ret; 
0x000000000002d09a: sub eax, 0x10; ret; 
0x000000000002e4ab: sub eax, 0x2002bc4; lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000007c95a: sub eax, 0x20; cmp eax, 0x29; ja 0x7c9f0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000d6231: sub eax, 0x28f80000; hlt; jmp qword ptr [rax]; 
0x00000000000be7e1: sub eax, 0x2c90fff8; clc; call qword ptr [rax]; 
0x00000000000d5a95: sub eax, 0x2d08fff3; lcall [rax + 0x70fffded]; out dx, al; std; call qword ptr [rax - 0xb]; 
0x000000000000e355: sub eax, 0x2d894c00; ret 0x2db5; 
0x00000000000d6249: sub eax, 0x2dd80000; hlt; call qword ptr [rbp + rbp + 0x30e80000]; hlt; jmp rax; 
0x00000000000b436f: sub eax, 0x30c48348; pop rbx; pop rbp; pop r14; ret; 
0x00000000000d6251: sub eax, 0x30e80000; hlt; jmp rax; 
0x0000000000091067: sub eax, 0x3349646c; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x0000000000029094: sub eax, 0x3d8d4820; ret; 
0x000000000003af56: sub eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008bb8a: sub eax, 0x634a0004; add al, 0xa1; add rax, rcx; jmp rax; 
0x00000000000d6d95: sub eax, 0x7438fff8; add byte ptr [rax], al; sbb byte ptr [rsi], ch; clc; call qword ptr [rax + 0x74]; 
0x000000000000a047: sub eax, 0x748b4800; and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000740d5: sub eax, 0x83000000; ret 0x8b01; 
0x0000000000076d04: sub eax, 0x83000000; ret; 
0x000000000000c76f: sub eax, 0x89480000; ret; 
0x00000000000d313a: sub eax, 0x8acc8c6; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000b595b: sub eax, 0x8b48fff5; add byte ptr [rcx + 1], cl; ret 0xef89; 
0x00000000000d34d4: sub eax, 0xddb680a7; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000d5a99: sub eax, 0xed98fff3; std; push qword ptr [rax - 0x12]; std; call qword ptr [rax - 0xb]; 
0x0000000000075280: sub eax, 0xffee53e9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000035a4f: sub eax, 0xffff; jne 0x35960; ret; 
0x0000000000066974: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000000183a6: sub eax, 1; mov qword ptr [rsi], rdi; mov qword ptr [rsi + 8], rdx; jns 0x18374; xor eax, eax; ret; 
0x00000000000503e4: sub eax, 1; ret; 
0x000000000000b0e2: sub eax, 3; cmp eax, 0xa; ja 0xad4f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000059d09: sub eax, 3; cmp rax, 0x1e; ja 0x59d34; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005aa2e: sub eax, 4; cmp rax, 0x16; ja 0x5aa80; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000091536: sub eax, dword ptr [0]; ret; 
0x000000000002daa4: sub eax, dword ptr [rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0x22a12; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000002e3f4: sub eax, dword ptr [rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000000d61e1: sub eax, dword ptr [rax]; add al, bl; and ah, dh; jmp rax; 
0x0000000000058d9b: sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000002e74d: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e60d: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22309; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000002e4ad: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22479; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e7b4: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e674: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x225f2; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e514: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22762; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x000000000002e793: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002e653: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22a53; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x000000000002e5b3: sub eax, dword ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x23373; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000002e49c: sub eax, dword ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000002d00b: sub eax, dword ptr [rax]; add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x00000000000299fc: sub eax, dword ptr [rax]; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2bde34], rax; ret; 
0x0000000000029a0a: sub eax, dword ptr [rax]; ret; 
0x000000000000aadf: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006b8c6: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x000000000002321e: sub eax, dword ptr [rdi + 0x18]; ret; 
0x000000000002e4fa: sub eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22b6c; cmovne rax, rdx; ret; 
0x000000000001b023: sub eax, dword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000022543: sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000005054d: sub eax, eax; cmp eax, ecx; jle 0x50588; movsxd rax, ecx; ret; 
0x00000000000909a4: sub eax, eax; ret; 
0x00000000000359a3: sub eax, ecx; je 0x359b0; sbb eax, eax; or eax, 1; ret; 
0x0000000000021c19: sub eax, ecx; lea eax, [r8 - 1]; ret; 
0x0000000000094000: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000002fc4c: sub eax, ecx; ret; 
0x000000000007f559: sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000093f80: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000be839: sub eax, edi; call qword ptr [rax + 0x29]; 
0x00000000000be681: sub eax, edi; call rdx; 
0x00000000000be681: sub eax, edi; call rdx; xor al, bh; call qword ptr [rdx + 0x30]; 
0x00000000000be7f9: sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000be6bd: sub eax, edi; jmp qword ptr [rdx]; 
0x00000000000be67d: sub eax, edi; ljmp [rcx + rbp]; clc; call rdx; 
0x00000000000be67d: sub eax, edi; ljmp [rcx + rbp]; clc; call rdx; xor al, bh; call qword ptr [rdx + 0x30]; 
0x00000000000be83d: sub eax, edi; push qword ptr [rax - 0x2f0007f5]; or al, 0xf8; call qword ptr [rax + 0xe]; 
0x000000000004a4f9: sub eax, edi; ret; 
0x000000000008271e: sub eax, edi; shr rax, 2; ret; 
0x00000000000940e3: sub eax, edx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000002d08e: sub eax, edx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x2d080; sub rax, 0x10; ret; 
0x000000000002256b: sub eax, edx; ret; 
0x0000000000082b10: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x000000000001a36d: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x1a3e8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000020d09: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x20d48; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000020d82: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x20db0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000021b12: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x21b50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f447: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x7f480; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007e662: sub eax, edx; sub rsi, rdx; cmp rax, rsi; jbe 0x7e6a0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000003596c: sub eax, edx; vzeroupper; ret; 
0x0000000000094140: sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000505ad: sub eax, esi; ret; 
0x00000000000940e2: sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000005054c: sub eax, r8d; cmp eax, ecx; jle 0x50588; movsxd rax, ecx; ret; 
0x00000000000909a3: sub eax, r8d; ret; 
0x000000000001df60: sub ebp, eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094bf7: sub ebp, ebp; add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000074c08: sub ebp, ecx; cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000001cb36: sub ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000d01f5: sub ebx, dword ptr [rbx - 0xb]; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000006f8a1: sub ebx, ebx; add eax, 0xd1e6e800; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000e1af1: sub ebx, edi; call rbx; 
0x00000000000329a5: sub ebx, edx; jbe 0x329b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000034105: sub ebx, edx; jbe 0x34114; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000350e5: sub ebx, edx; jbe 0x350f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000251a0: sub ecx, dword ptr [rax + 0x39]; ret; 
0x000000000005a3f8: sub ecx, dword ptr [rax - 0x75]; push rax; or dh, dh; ret 0x8902; 
0x000000000003b144: sub ecx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000082e64: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000081ca4: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x00000000000a034d: sub ecx, dword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0xa0330; mov eax, 1; ret; 
0x000000000001a370: sub ecx, edx; cmp rax, rcx; jbe 0x1a3e8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000020966: sub ecx, edx; cmp rax, rcx; jbe 0x20a20; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020b8e: sub ecx, edx; cmp rax, rcx; jbe 0x20c28; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020d0c: sub ecx, edx; cmp rax, rcx; jbe 0x20d48; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000020d85: sub ecx, edx; cmp rax, rcx; jbe 0x20db0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000021b15: sub ecx, edx; cmp rax, rcx; jbe 0x21b50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000021bac: sub ecx, edx; cmp rax, rcx; jbe 0x21bd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f44a: sub ecx, edx; cmp rax, rcx; jbe 0x7f480; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000078d04: sub ecx, esp; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000000377b3: sub edi, 0x20; lea r11, [rip + 0x86383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a092: sub edi, 0x40; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039fd3: sub edi, 0x40; lea r11, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c2: sub edi, 0x40; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037603: sub edi, 0x40; lea r11, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000093f46: sub edi, eax; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000be7ed: sub edi, eax; call qword ptr [rax]; 
0x00000000000be7ed: sub edi, eax; call qword ptr [rax]; sub edi, eax; inc dword ptr [rax - 0xf0007d6]; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000be7f1: sub edi, eax; inc dword ptr [rax - 0xf0007d6]; sub eax, edi; jmp qword ptr [rax + 0x29]; 
0x00000000000be82d: sub edi, eax; inc dword ptr [rax]; sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000be631: sub edi, eax; jmp rax; 
0x00000000000be831: sub edi, eax; push qword ptr [rax + 0x2a]; clc; jmp rax; 
0x00000000000be62d: sub edi, eax; push qword ptr [rax + 0x2b]; clc; jmp rax; 
0x000000000006d9dd: sub edi, ebx; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000001dd10: sub edi, ecx; cmp rax, rdi; jbe 0x1de18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000040ecf: sub edi, edx; lea r11, [rip + 0x7d4e8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3bb: sub edi, edx; lea r11, [rip + 0x7fafc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040b6e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7d846]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409ee: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7d9c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004086e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7db46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406ee: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7dcc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004056e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7de46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403ee: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7dfc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004026e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7e146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400ee: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7e2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff6e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7e446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fdee: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7e5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc6e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7e746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faee: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7e8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f96e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7ea46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7ee: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7ebc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f66e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7ed46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4f5: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7eebf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e08e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7fe26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df0e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7ffa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x80126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc0e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x802a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x80426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d90e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x805a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d78e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x80726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d60e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x808a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d48e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x80a26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d30e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x80ba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d18e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x80d26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d00e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x80ea6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x81026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd0e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x811a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x81326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca15: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x8149f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d7cbd: sub edi, esi; call rax; 
0x00000000000d2c02: sub edi, esi; int 0x6b; ret; 
0x00000000000bd909: sub edi, esi; push qword ptr [rax - 0x2f0008d6]; sub esi, edi; push rax; sub al, 0xf7; call qword ptr [rax]; 
0x00000000000d38f5: sub edi, esp; jmp qword ptr [rdi]; 
0x000000000006d4a1: sub edi, esp; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000097038: sub edx, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000003c7c1: sub edx, 0x40; lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c701: sub edx, 0x40; sfence; lea r11, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c3d: sub edx, 0x40; sfence; lea r11, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000022570: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000022565: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000007f65b: sub edx, dword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000007f671: sub edx, dword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000080e5d: sub edx, eax; jbe 0x81100; add rax, rdi; add rax, rcx; ret; 
0x00000000000810c4: sub edx, eax; jbe 0x81100; add rax, rdi; ret; 
0x00000000000810d4: sub edx, eax; jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000810e4: sub edx, eax; jbe 0x81100; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000810f4: sub edx, eax; jbe 0x81100; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000004e0fc: sub edx, ecx; lea r11, [rip + 0x7097b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dadc: sub edx, ecx; lea r11, [rip + 0x70f1b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000028ef6: sub edx, edi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000006b508: sub edx, esi; call qword ptr [rbx + 0x38]; 
0x000000000001e097: sub edx, esi; cmp r12, rdx; jbe 0x1e280; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000001b16b: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000001d50f: sub edx, esi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000076a22: sub edx, esi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000039fcf: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000375ff: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000791c5: sub esi, ecx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000000bd911: sub esi, edi; push rax; sub al, 0xf7; call qword ptr [rax]; 
0x000000000002070f: sub esi, edx; cmp rax, rsi; jbe 0x20770; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000007e665: sub esi, edx; cmp rax, rsi; jbe 0x7e6a0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000007f4e4: sub esi, edx; cmp rax, rsi; jbe 0x7f500; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000040b71: sub esi, edx; lea r11, [rip + 0x7d846]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409f1: sub esi, edx; lea r11, [rip + 0x7d9c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040871: sub esi, edx; lea r11, [rip + 0x7db46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406f1: sub esi, edx; lea r11, [rip + 0x7dcc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040571: sub esi, edx; lea r11, [rip + 0x7de46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403f1: sub esi, edx; lea r11, [rip + 0x7dfc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040271: sub esi, edx; lea r11, [rip + 0x7e146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400f1: sub esi, edx; lea r11, [rip + 0x7e2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff71: sub esi, edx; lea r11, [rip + 0x7e446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fdf1: sub esi, edx; lea r11, [rip + 0x7e5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc71: sub esi, edx; lea r11, [rip + 0x7e746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faf1: sub esi, edx; lea r11, [rip + 0x7e8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f971: sub esi, edx; lea r11, [rip + 0x7ea46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7f1: sub esi, edx; lea r11, [rip + 0x7ebc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f671: sub esi, edx; lea r11, [rip + 0x7ed46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4f8: sub esi, edx; lea r11, [rip + 0x7eebf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e091: sub esi, edx; lea r11, [rip + 0x7fe26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df11: sub esi, edx; lea r11, [rip + 0x7ffa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd91: sub esi, edx; lea r11, [rip + 0x80126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc11: sub esi, edx; lea r11, [rip + 0x802a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da91: sub esi, edx; lea r11, [rip + 0x80426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d911: sub esi, edx; lea r11, [rip + 0x805a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d791: sub esi, edx; lea r11, [rip + 0x80726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d611: sub esi, edx; lea r11, [rip + 0x808a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d491: sub esi, edx; lea r11, [rip + 0x80a26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d311: sub esi, edx; lea r11, [rip + 0x80ba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d191: sub esi, edx; lea r11, [rip + 0x80d26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d011: sub esi, edx; lea r11, [rip + 0x80ea6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce91: sub esi, edx; lea r11, [rip + 0x81026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd11: sub esi, edx; lea r11, [rip + 0x811a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb91: sub esi, edx; lea r11, [rip + 0x81326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca18: sub esi, edx; lea r11, [rip + 0x8149f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040ecc: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x7d4e8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3b8: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x7fafc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b3f13: sub esp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000008f4f6: sub esp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000056bb4: sub esp, 0x10; call 0x59100; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000075fa2: sub esp, 0x80; call 0x590e0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000000181ec: sub esp, 0x80; call 0x590e0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000006a987: sub esp, 0x80; call 0x590e0; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000000bbbad: sub esp, 8; add rsp, 8; ret; 
0x000000000008b57b: sub esp, 8; call qword ptr [rip + 0x25cc9c]; xor eax, eax; add rsp, 8; ret; 
0x0000000000084d43: sub esp, 8; syscall; 
0x00000000000bc0e4: sub esp, dword ptr [rsi - 0x59d4000b]; cmc; call rbx; 
0x00000000000d3a49: sub esp, edi; call qword ptr [rdi + 0x31fffc16]; sub esp, edi; jmp rcx; 
0x00000000000d3ac9: sub esp, edi; inc dword ptr [rdx + 0x44fffc1c]; and ah, bh; jmp rcx; 
0x00000000000d3a41: sub esp, edi; jmp rcx; 
0x00000000000d3a3d: sub esp, edi; push qword ptr [rcx]; sub esp, edi; jmp rcx; 
0x00000000000d3a39: sub esp, edi; push qword ptr [rcx]; sub esp, edi; push qword ptr [rcx]; sub esp, edi; jmp rcx; 
0x000000000001da1b: sub esp, esi; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000000567f3: sub qword ptr [r8], rax; test eax, eax; jne 0x56810; xor eax, eax; syscall; 
0x00000000000568c3: sub qword ptr [r8], rax; test eax, eax; jne 0x568e0; mov eax, 1; syscall; 
0x0000000000056a00: sub qword ptr [r8], rax; test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x0000000000056b93: sub qword ptr [rax], rax; test eax, eax; jne 0x56bb0; mov eax, 3; syscall; 
0x00000000000329a4: sub r11, rdx; jbe 0x329b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000034104: sub r11, rdx; jbe 0x34114; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000350e4: sub r11, rdx; jbe 0x350f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000001da1a: sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000000791c4: sub r14, rcx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000006d9dc: sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000006d4a0: sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000001b022: sub r8, qword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000021c18: sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000007f558: sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000000d61b0: sub r8b, byte ptr [rax]; add byte ptr [rax], bh; sbb dh, ah; jmp qword ptr [rax + 0x2a]; 
0x000000000002d099: sub rax, 0x10; ret; 
0x00000000000d6248: sub rax, 0x2dd80000; hlt; call qword ptr [rbp + rbp + 0x30e80000]; hlt; jmp rax; 
0x00000000000503e3: sub rax, 1; ret; 
0x0000000000059d08: sub rax, 3; cmp rax, 0x1e; ja 0x59d34; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005aa2d: sub rax, 4; cmp rax, 0x16; ja 0x5aa80; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000091535: sub rax, qword ptr [0]; ret; 
0x000000000002321d: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000091534: sub rax, qword ptr fs:[0]; ret; 
0x000000000009d2b2: sub rax, r8; ret; 
0x00000000000359a2: sub rax, rcx; je 0x359b0; sbb eax, eax; or eax, 1; ret; 
0x000000000004a4f8: sub rax, rdi; ret; 
0x000000000008271d: sub rax, rdi; shr rax, 2; ret; 
0x000000000002d08d: sub rax, rdx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x2d080; sub rax, 0x10; ret; 
0x00000000000504b3: sub rax, rdx; ret; 
0x0000000000082b0f: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000001a36c: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x1a3e8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000020d08: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x20d48; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000020d81: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x20db0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000021b11: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x21b50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f446: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x7f480; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007e661: sub rax, rdx; sub rsi, rdx; cmp rax, rsi; jbe 0x7e6a0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000004a54f: sub rax, rdx; vzeroupper; ret; 
0x00000000000505ac: sub rax, rsi; ret; 
0x000000000001df5f: sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a034c: sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0xa0330; mov eax, 1; ret; 
0x0000000000078d03: sub rcx, r12; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000001a36f: sub rcx, rdx; cmp rax, rcx; jbe 0x1a3e8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000020965: sub rcx, rdx; cmp rax, rcx; jbe 0x20a20; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020b8d: sub rcx, rdx; cmp rax, rcx; jbe 0x20c28; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000020d0b: sub rcx, rdx; cmp rax, rcx; jbe 0x20d48; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000020d84: sub rcx, rdx; cmp rax, rcx; jbe 0x20db0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000021b14: sub rcx, rdx; cmp rax, rcx; jbe 0x21b50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000021bab: sub rcx, rdx; cmp rax, rcx; jbe 0x21bd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000007f449: sub rcx, rdx; cmp rax, rcx; jbe 0x7f480; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000000377b2: sub rdi, 0x20; lea r11, [rip + 0x86383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a091: sub rdi, 0x40; lea r11, [rip + 0x83c64]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039fd2: sub rdi, 0x40; lea r11, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000376c1: sub rdi, 0x40; lea r11, [rip + 0x86474]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037602: sub rdi, 0x40; lea r11, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001dd0f: sub rdi, rcx; cmp rax, rdi; jbe 0x1de18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000040ece: sub rdi, rdx; lea r11, [rip + 0x7d4e8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3ba: sub rdi, rdx; lea r11, [rip + 0x7fafc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040b6d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7d846]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409ed: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7d9c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004086d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7db46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406ed: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7dcc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004056d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7de46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403ed: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7dfc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004026d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7e146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400ed: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7e2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff6d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7e446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fded: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7e5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc6d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7e746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faed: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7e8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f96d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7ea46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7ed: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7ebc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f66d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7ed46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4f4: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7eebf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e08d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7fe26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df0d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7ffa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x80126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc0d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x802a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x80426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d90d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x805a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d78d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x80726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d60d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x808a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d48d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x80a26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d30d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x80ba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d18d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x80d26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d00d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x80ea6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x81026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd0d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x811a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x81326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca14: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x8149f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c7c0: sub rdx, 0x40; lea r11, [rip + 0x81535]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c700: sub rdx, 0x40; sfence; lea r11, [rip + 0x815f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039c3c: sub rdx, 0x40; sfence; lea r11, [rip + 0x83ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007f65a: sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000007f670: sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000001e096: sub rdx, r14; cmp r12, rdx; jbe 0x1e280; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000080e5c: sub rdx, rax; jbe 0x81100; add rax, rdi; add rax, rcx; ret; 
0x00000000000810c3: sub rdx, rax; jbe 0x81100; add rax, rdi; ret; 
0x00000000000810d3: sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000810e3: sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000810f3: sub rdx, rax; jbe 0x81100; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000004e0fb: sub rdx, rcx; lea r11, [rip + 0x7097b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004dadb: sub rdx, rcx; lea r11, [rip + 0x70f1b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000028ef5: sub rdx, rdi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000006b507: sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000001b16a: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000001d50e: sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000076a21: sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000039fce: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x83d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000375fe: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x86533]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002070e: sub rsi, rdx; cmp rax, rsi; jbe 0x20770; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000007e664: sub rsi, rdx; cmp rax, rsi; jbe 0x7e6a0; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000007f4e3: sub rsi, rdx; cmp rax, rsi; jbe 0x7f500; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000040b70: sub rsi, rdx; lea r11, [rip + 0x7d846]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409f0: sub rsi, rdx; lea r11, [rip + 0x7d9c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040870: sub rsi, rdx; lea r11, [rip + 0x7db46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406f0: sub rsi, rdx; lea r11, [rip + 0x7dcc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040570: sub rsi, rdx; lea r11, [rip + 0x7de46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403f0: sub rsi, rdx; lea r11, [rip + 0x7dfc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040270: sub rsi, rdx; lea r11, [rip + 0x7e146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400f0: sub rsi, rdx; lea r11, [rip + 0x7e2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff70: sub rsi, rdx; lea r11, [rip + 0x7e446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fdf0: sub rsi, rdx; lea r11, [rip + 0x7e5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc70: sub rsi, rdx; lea r11, [rip + 0x7e746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faf0: sub rsi, rdx; lea r11, [rip + 0x7e8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f970: sub rsi, rdx; lea r11, [rip + 0x7ea46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7f0: sub rsi, rdx; lea r11, [rip + 0x7ebc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f670: sub rsi, rdx; lea r11, [rip + 0x7ed46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4f7: sub rsi, rdx; lea r11, [rip + 0x7eebf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e090: sub rsi, rdx; lea r11, [rip + 0x7fe26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df10: sub rsi, rdx; lea r11, [rip + 0x7ffa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd90: sub rsi, rdx; lea r11, [rip + 0x80126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc10: sub rsi, rdx; lea r11, [rip + 0x802a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da90: sub rsi, rdx; lea r11, [rip + 0x80426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d910: sub rsi, rdx; lea r11, [rip + 0x805a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d790: sub rsi, rdx; lea r11, [rip + 0x80726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d610: sub rsi, rdx; lea r11, [rip + 0x808a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d490: sub rsi, rdx; lea r11, [rip + 0x80a26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d310: sub rsi, rdx; lea r11, [rip + 0x80ba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d190: sub rsi, rdx; lea r11, [rip + 0x80d26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d010: sub rsi, rdx; lea r11, [rip + 0x80ea6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce90: sub rsi, rdx; lea r11, [rip + 0x81026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd10: sub rsi, rdx; lea r11, [rip + 0x811a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb90: sub rsi, rdx; lea r11, [rip + 0x81326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca17: sub rsi, rdx; lea r11, [rip + 0x8149f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040ecb: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x7d4e8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3b7: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x7fafc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b3f12: sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000008f4f5: sub rsp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000056bb3: sub rsp, 0x10; call 0x59100; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000075fa1: sub rsp, 0x80; call 0x590e0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000000181eb: sub rsp, 0x80; call 0x590e0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000006a986: sub rsp, 0x80; call 0x590e0; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000000bbbac: sub rsp, 8; add rsp, 8; ret; 
0x000000000008b57a: sub rsp, 8; call qword ptr [rip + 0x25cc9c]; xor eax, eax; add rsp, 8; ret; 
0x0000000000084d42: sub rsp, 8; syscall; 
0x00000000000dbdb8: sub sil, bpl; jmp qword ptr [rbx]; 
0x00000000000b509b: subps xmm4, xmmword ptr [rbx]; add byte ptr [rax], cl; mov byte ptr [rip + 0x235c09], 8; ret; 
0x000000000000a14c: syscall; 
0x000000000007cae8: syscall; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000056515: syscall; cmp rax, -0xfff; jae 0x56520; ret; 
0x0000000000057625: syscall; cmp rax, -0xfff; jae 0x57630; ret; 
0x0000000000057655: syscall; cmp rax, -0xfff; jae 0x57660; ret; 
0x0000000000057685: syscall; cmp rax, -0xfff; jae 0x57690; ret; 
0x0000000000058d38: syscall; cmp rax, -0xfff; jae 0x58d43; ret; 
0x0000000000058d65: syscall; cmp rax, -0xfff; jae 0x58d70; ret; 
0x0000000000058e35: syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000058e65: syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x0000000000059018: syscall; cmp rax, -0xfff; jae 0x59023; ret; 
0x0000000000059045: syscall; cmp rax, -0xfff; jae 0x59050; ret; 
0x0000000000084e85: syscall; cmp rax, -0xfff; jae 0x84e90; ret; 
0x00000000000b1d85: syscall; cmp rax, -0xfff; jae 0xb1d90; ret; 
0x00000000000590f7: syscall; pop rdx; pop rsi; ret; 
0x0000000000052a25: syscall; ret; 
0x000000000004da26: sysret; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004e70d: test ah, 0x20; jne 0x4e7f0; test ah, 0x40; jne 0x4e800; lea rax, [rdi + 0xf]; ret; 
0x000000000004e716: test ah, 0x40; jne 0x4e800; lea rax, [rdi + 0xf]; ret; 
0x000000000004e62e: test ah, 0x40; jne 0x4e800; test dh, 0x40; jne 0x4e570; lea rax, [rdi + 0xf]; ret; 
0x00000000000a127c: test ah, ah; or byte ptr [rax], al; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x000000000006c05d: test ah, dh; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000000da565: test ah, dh; call qword ptr [rdi + 1]; 
0x00000000000da53d: test ah, dh; call qword ptr [rdi]; 
0x00000000000da551: test ah, dh; call qword ptr [rsi]; 
0x00000000000bab5f: test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x22cc8a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000e26ad: test al, 0; add byte ptr [rax + 0x69], dl; cld; jmp qword ptr [rdx]; 
0x0000000000021484: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000008374e: test al, 0; add byte ptr [rax], al; call rbx; 
0x0000000000083786: test al, 0; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000083c6d: test al, 0; add byte ptr [rax], al; mov rsi, rbp; mov rdi, r12; call rbx; 
0x0000000000084e45: test al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000b46d3: test al, 0; add byte ptr [rax], al; ret; 
0x000000000003c554: test al, 0x17; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004e6bc: test al, 0x20; jne 0x4e780; test al, 0x40; jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x000000000007f257: test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000000de148: test al, 0x2f; clc; call qword ptr [rdi]; 
0x000000000004e6c4: test al, 0x40; jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x000000000004e5ac: test al, 0x40; jne 0x4e790; test dl, 0x40; jne 0x4e570; lea rax, [rdi + 7]; ret; 
0x0000000000056ce4: test al, 0x49; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000000d757c: test al, 0x55; sti; jmp qword ptr [rax - 0x53]; 
0x00000000000abe14: test al, 0x63; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000d7814: test al, 0x66; cld; jmp rax; 
0x00000000000c1154: test al, 0x6e; cli; call qword ptr [rax]; 
0x0000000000058a3a: test al, 0x75; ret; 
0x00000000000da508: test al, 0x83; hlt; jmp qword ptr [rax]; 
0x00000000000da658: test al, 0x89; hlt; call qword ptr [rsi]; 
0x00000000000d6f64: test al, 0x92; clc; lcall [rdi + rdi*2 - 0x67280000]; clc; call qword ptr [rax]; 
0x00000000000d7634: test al, 0x93; sti; jmp qword ptr [rax]; 
0x00000000000d0ab7: test al, 0x97; xchg eax, esp; ret; 
0x00000000000e1690: test al, 0x98; add byte ptr [rax], al; jl 0xe169c; sti; call qword ptr [rdi + 1]; 
0x00000000000dbea8: test al, 0x99; cmc; call rsp; 
0x00000000000d7934: test al, 0x9b; cld; jmp qword ptr [rax - 0x3e]; 
0x00000000000d794c: test al, 0xa0; cld; dec dword ptr [rax]; ret; 
0x00000000000d77a4: test al, 0xcf; sti; jmp qword ptr [rax - 0x47]; 
0x00000000000df258: test al, 0xd6; stc; jmp qword ptr [rbx + 8]; 
0x00000000000d15fb: test al, 0xe0; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000e2328: test al, 0xe0; sti; call qword ptr [rax]; 
0x0000000000009075: test al, 0xeb; add dword ptr [rax - 0x360bba75], edx; ret; 
0x00000000000d749c: test al, 0xef; cli; jmp rax; 
0x00000000000dc069: test al, 0xf6; call qword ptr [rax]; 
0x00000000000bdced: test al, 0xf7; push qword ptr [rax]; stosb byte ptr [rdi], al; idiv edi; sub byte ptr [rbx - 0x532f0009], 0xf7; jmp qword ptr [rax]; 
0x00000000000be9e5: test al, 0xf8; call qword ptr [rax]; 
0x00000000000be9e5: test al, 0xf8; call qword ptr [rax]; stosb byte ptr [rdi], al; clc; jmp qword ptr [rax - 0x55]; 
0x000000000008e225: test al, al; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000000b8f78: test al, al; je 0xb8f80; cmp al, 0x10; jne 0xb8f98; xor eax, eax; ret; 
0x000000000002ff0a: test al, al; jne 0x2fef0; xor eax, eax; sub eax, ecx; ret; 
0x000000000006db29: test al, dl; adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x00000000000a0b27: test al, dl; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x7501; 
0x0000000000029d96: test bh, 0xff; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000b46b1: test bh, bh; je 0xb46bb; cmp dil, 0x10; jne 0xb46d8; xor eax, eax; ret; 
0x00000000000b457c: test bh, bh; js 0xb45a8; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b764c: test bh, bh; js 0xb7678; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b8fec: test bh, bh; js 0xb9018; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000000fe01: test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000013448: test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000008084c: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000024f44: test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000000a6c38: test bl, dh; or dword ptr [rax], eax; add byte ptr [rax], bh; ret; 
0x000000000001a4bf: test byte ptr [rax + rax - 0x76b80000], ch; ret; 
0x00000000000b4c66: test byte ptr [rax + rax*2], ah; add dword ptr [rax], eax; add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000076974: test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x0000000000016b6e: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000067061: test byte ptr [rax - 0x76b80000], ch; ret 0x2948; 
0x000000000000b391: test byte ptr [rax - 0x77], 0x45; mov byte ptr [rcx - 0x77], al; int 0x83; ret 0x8901; 
0x000000000001da22: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x40]; 
0x000000000007ddaf: test byte ptr [rax - 0x77], 0xef; call qword ptr [rax + 0x38]; 
0x0000000000078369: test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000016b76: test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x00000000000d6fb9: test byte ptr [rax], al; add byte ptr [rax - 9], bh; clc; jmp qword ptr [rax]; 
0x0000000000082a2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x00000000000352ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000352ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000017cba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000023f0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000004e7ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000004e7ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000004e7da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000004e7ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000004e7fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000004e73a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x000000000004e74a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000004e75a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000004e76a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000004e77a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000004e78a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000004e79a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000004e7aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000004e72a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x000000000009c97a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x24e1d9]; mov qword ptr [rip + 0x24e1ba], rax; ret; 
0x000000000005a92a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x28d9c9]; ret; 
0x000000000001cb5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000004e18a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000004db6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000004db7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000005600a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; 
0x000000000005600a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; ret; 
0x0000000000084eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x0000000000084eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x0000000000084eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x0000000000084eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x0000000000084eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x0000000000084eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000005761a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000002281a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000055fca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000003ea4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000005959a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x00000000000b693a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000002177a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000068d8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000068daa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000068dca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000002280a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x0000000000016c1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000082a4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x0000000000082a5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x0000000000082a6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x0000000000082a7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x0000000000082a8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x0000000000082a9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x0000000000082aaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000009151a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000008beaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000007f7fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000002288a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000b690a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000b694a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000000b699a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000000b695a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000005d68a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28de81]; ret; 
0x000000000002286a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4889]; ret; 
0x00000000000b46ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000081d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000002289a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000002d79a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x00000000000909ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x000000000001ce1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000003ebda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000003eb5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000057675: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000058e55: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x32; syscall; 
0x0000000000084ea5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000057645: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000052a15: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc9; syscall; 
0x00000000000b1d78: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x26; syscall; 
0x0000000000059038: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x29; syscall; 
0x0000000000058e29: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x31; syscall; 
0x0000000000058d58: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x000000000001b70a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000008136a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x000000000002179a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008188a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000055c5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x000000000004e56a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000000d8fd4: test byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rbx], dl; hlt; jmp qword ptr [rcx + 1]; 
0x000000000005d172: test byte ptr [rbp + rcx*4 + 0x3c], cl; ret; 
0x0000000000068f06: test byte ptr [rbp - 0x6bf0bf40], 0xc6; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000007826c: test byte ptr [rbp - 0x7c000018], bl; ret; 
0x00000000000e016c: test byte ptr [rbx + 0x23d00000], al; cli; jmp qword ptr [rax]; 
0x00000000000675a4: test byte ptr [rbx + rdi*8 - 0x7cb70001], bh; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000007c79f: test byte ptr [rbx + rdi*8 - 1], dh; dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000000390a7: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004fb92: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000007ce3f: test byte ptr [rcx + 0x48fffffc], cl; lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000000b574b: test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000004fb89: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000814bf: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000007d5df: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call qword ptr [rdi + 0x38]; 
0x00000000000b7322: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call rdi; 
0x000000000006f1e2: test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000000d78c8: test byte ptr [rdi + 0x78080000], bh; cld; dec eax; mov edi, 0x78180000; cld; jmp rax; 
0x000000000006237d: test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x000000000000a489: test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000002d020: test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000000b5cac: test byte ptr [rdi - 0x18000000], bh; stosb byte ptr [rdi], al; adc esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000058734: test byte ptr [rdi - 0x7d000000], bl; ret; 
0x00000000000571ff: test byte ptr [rdi], 0x94; ret 0xc221; 
0x0000000000056d16: test byte ptr [rdi], 0x94; ret 0xca21; 
0x0000000000095301: test byte ptr [rdi], 0x9f; ret 0xd629; 
0x000000000007f224: test byte ptr [rdi], 2; mov rbx, rdi; jne 0x7f298; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000063356: test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000082601: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000081431: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x0000000000029fae: test byte ptr [rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000080834: test byte ptr [rdx], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000002bb0e: test byte ptr [rdx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000085cbe: test byte ptr [rdx], bl; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x00000000000b5ad9: test byte ptr [rdx], dl; add al, byte ptr [rax]; add byte ptr [rax + 0xf], cl; mov edi, 0x148015b; ret; 
0x000000000002c00e: test byte ptr [rdx], dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000002e7b0: test byte ptr [rip + 0x2bc126], 2; lea rdx, [rip + 0x224c2]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x000000000002e78f: test byte ptr [rip + 0x2bc147], 2; lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000002e749: test byte ptr [rip + 0x2bc18d], 2; lea rdx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000002e670: test byte ptr [rip + 0x2bc266], 2; lea rdx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000002e4a9: test byte ptr [rip + 0x2bc42d], 2; lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000002e3f0: test byte ptr [rip + 0x2bc515], 0x10; lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000000be26c: test byte ptr [rip + 0x504fff8], al; clc; push qword ptr [rsp + rax - 8]; jmp rsp; 
0x00000000000d9b6c: test byte ptr [rip + 0x5ab00000], bl; hlt; call qword ptr [rdi]; 
0x00000000000b5a3c: test byte ptr [rip - 0x16000001], bl; scasd eax, dword ptr [rdi]; sub al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x0000000000076df4: test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000006c824: test byte ptr [rip - 0x7c000011], al; ret; 
0x000000000008193d: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000002feda: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000005be1c: test byte ptr [rsi + 0x49000002], ch; add eax, dword ptr [rdi + 0x10]; call rax; 
0x0000000000079b98: test byte ptr [rsi - 0x74b7ffda], ch; add al, 0xf8; jmp rax; 
0x00000000000b1f5d: test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x00000000000613c1: test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x000000000004a3dd: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x000000000009ee5b: test byte ptr [rsp + rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x00000000000954d1: test ch, dh; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000013b32: test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x00000000000a4785: test ch, dl; or dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0x49]; 
0x00000000000b359a: test cl, bl; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000005006f: test cl, cl; jne 0x50060; ret; 
0x000000000005011f: test cl, cl; jne 0x50110; ret; 
0x00000000000503df: test cl, cl; jne 0x503d0; sub rax, 1; ret; 
0x000000000004e637: test dh, 0x40; jne 0x4e570; lea rax, [rdi + 0xf]; ret; 
0x000000000004fac6: test dh, 0x40; jne 0x4fa90; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000051bba: test dh, 0xf0; je 0x51ae2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000004e67d: test dh, 4; jne 0x4e570; lea rax, [rdi + 0xb]; ret; 
0x00000000000baee1: test dh, al; add eax, 0x89490000; ret 0x8349; 
0x000000000005ed55: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000b46b0: test dil, dil; je 0xb46bb; cmp dil, 0x10; jne 0xb46d8; xor eax, eax; ret; 
0x00000000000b457b: test dil, dil; js 0xb45a8; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b764b: test dil, dil; js 0xb7678; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000000b8feb: test dil, dil; js 0xb9018; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000004e5b4: test dl, 0x40; jne 0x4e570; lea rax, [rdi + 7]; ret; 
0x000000000004fa12: test dl, 0x40; jne 0x4fa90; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000004e5e2: test dl, 4; jne 0x4e570; lea rax, [rdi + 3]; ret; 
0x00000000000bbf0c: test dl, dh; hlt; jmp qword ptr [rbp - 0xe]; 
0x00000000000829f7: test dl, dl; je 0x82a10; mov cl, dl; and cl, 0xf; je 0x82a20; ret; 
0x000000000005028f: test dl, dl; jne 0x50280; lea rax, [rcx - 1]; ret; 
0x0000000000008763: test dl, dl; jne 0x8768; ret; 
0x0000000000090917: test dl, dl; jne 0x908ea; movsx eax, cl; neg eax; ret; 
0x000000000009ce53: test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000081c6b: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x00000000000bb233: test dword ptr [rax + 0xf000008], ecx; xchg eax, ebx; ret 0x3d83; 
0x000000000008e486: test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000004e6bf: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x4e790; lea rax, [rdi + 7]; ret; 
0x00000000000812b7: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x000000000009314d: test dword ptr [rax - 0x2f], 0x48d48fb; fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x000000000008084d: test dword ptr [rax], 0x83480000; ret 0xe901; 
0x00000000000762d6: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000000b0f1: test dword ptr [rax], eax; add rax, r13; jmp rax; 
0x000000000005aab1: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x000000000006c299: test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000000b0f0: test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000005aab0: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000006d49f: test dword ptr [rbp + 0x29], 0xfa894ce7; call qword ptr [rax + 0x38]; 
0x0000000000082e2e: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000081048: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x0000000000056a29: test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x000000000004e678: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x4e570; lea rax, [rdi + 0xb]; ret; 
0x0000000000036ae7: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000036f36: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000035bb8: test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x0000000000038ee3: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000003e7d3: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000029de8: test dword ptr [rbx], edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000001b7cf: test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000020318: test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000084ffb: test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x000000000008bd68: test dword ptr [rcx + 0x48000002], ecx; mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000036abd: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000369cd: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000368f9: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000000368dd: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000559dc: test dword ptr [rcx + rax], edx; add byte ptr [rbp + 0x31], al; inc dword ptr [rbp + 0x31]; imul bl; ret 0x8b48; 
0x000000000006df90: test dword ptr [rcx + rcx*4 - 0x73], 0xfffffb18; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000001afe8: test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000002181a: test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000b7884: test dword ptr [rdi + rdi*8 - 1], esi; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000071fd3: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000002722c: test dword ptr [rdi], eax; add eax, 0x39480000; ret 0xf275; 
0x000000000005d762: test dword ptr [rdx + 0x48000000], ebx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000065d30: test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x00000000000b687c: test dword ptr [rdx + 0x48fff51e], edx; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000036afb: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000369f9: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000036802: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000298fa: test dword ptr [rdx], 0xc4814800; add byte ptr [rax], 0; add bl, dh; ret; 
0x0000000000009f39: test dword ptr [rdx], edx; add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000009de9: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000081723: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x0000000000056696: test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000000942d9: test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000009ca3a: test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004e5dd: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x4e570; lea rax, [rdi + 3]; ret; 
0x000000000004fdf2: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000235cc: test dword ptr [rsi + rdi*8 + 0x5d5bffff], ebp; pop r12; pop r13; pop r14; ret; 
0x000000000007696d: test dword ptr [rsi + rsi*8 - 0x76b30001], esi; test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000006d161: test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000007b7e8: test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000001a05d: test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x0000000000036d08: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x000000000001b7d0: test eax, 0x48000000; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000003ad53: test eax, 0x4900082f; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037f93: test eax, 0x4900085b; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d27a0: test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000003c986: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000000d34d2: test eax, 0x80a72de5; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000048ca2: test eax, 0xe3c4c9eb; jns 0x48d0c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000049482: test eax, 0xe3c4c9eb; jns 0x494ec; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000000c253: test eax, 0xe8002dd5; lodsb al, byte ptr [rsi]; ret; 
0x000000000002be4b: test eax, 0xf002bc3; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000000503f8: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x0000000000058cbb: test eax, eax; cmove eax, edx; ret; 
0x00000000000238bc: test eax, eax; je 0x238d0; mov dword ptr [rip + 0x2c6556], 0; ret; 
0x000000000002d011: test eax, eax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x00000000000350c8: test eax, eax; je 0x350cd; xchg eax, edx; sub eax, edx; ret; 
0x0000000000035166: test eax, eax; je 0x35180; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x0000000000049d6f: test eax, eax; je 0x49d80; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000505a2: test eax, eax; je 0x50580; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000055cfc: test eax, eax; je 0x55d02; call rax; 
0x0000000000055f11: test eax, eax; je 0x55f1a; call rax; 
0x0000000000055e68: test eax, eax; je 0x55f80; call rax; 
0x0000000000067374: test eax, eax; je 0x6737a; call rax; 
0x0000000000068779: test eax, eax; je 0x6877f; call rax; 
0x000000000008184d: test eax, eax; je 0x81804; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000081872: test eax, eax; je 0x81890; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000083c4: test eax, eax; je 0x83ca; call rax; 
0x00000000000083c4: test eax, eax; je 0x83ca; call rax; add rsp, 8; ret; 
0x0000000000008c6b: test eax, eax; je 0x8c78; jmp rax; 
0x0000000000008cac: test eax, eax; je 0x8cb8; jmp rax; 
0x000000000009c961: test eax, eax; je 0x9c973; lea rax, [rip + 0x24e1f4]; mov qword ptr [rip + 0x24e1d5], rax; add rsp, 8; ret; 
0x000000000009cdc1: test eax, eax; je 0x9cdcf; lea rdx, [rip + 0x24bd94]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009d070: test eax, eax; je 0x9d080; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6981: test eax, eax; je 0xb698a; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000b72c5: test eax, eax; je 0xb72d8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x00000000000ba411: test eax, eax; je 0xba41c; call rax; 
0x0000000000066970: test eax, eax; jle 0x6697c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000000352b1: test eax, eax; jne 0x35300; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000004e560: test eax, eax; jne 0x4e574; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000055bc6: test eax, eax; jne 0x55be0; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000567f6: test eax, eax; jne 0x56810; xor eax, eax; syscall; 
0x00000000000568c6: test eax, eax; jne 0x568e0; mov eax, 1; syscall; 
0x0000000000056a03: test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x0000000000056b96: test eax, eax; jne 0x56bb0; mov eax, 3; syscall; 
0x00000000000574c6: test eax, eax; jne 0x574e0; mov eax, 0x4a; syscall; 
0x0000000000058d96: test eax, eax; jne 0x58db0; mov eax, 0x2b; syscall; 
0x0000000000058e99: test eax, eax; jne 0x58eb8; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000000058f59: test eax, eax; jne 0x58f78; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000000590d0: test eax, eax; jne 0x590c4; pop rdx; pop r10; ret; 
0x000000000007f7d7: test eax, eax; jne 0x7f7e8; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000080fd3: test eax, eax; jne 0x810b0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000081075: test eax, eax; jne 0x810d0; xor eax, eax; ret; 
0x0000000000081045: test eax, eax; jne 0x810f0; xor eax, eax; ret; 
0x00000000000812f1: test eax, eax; jne 0x81310; xor eax, eax; vzeroupper; ret; 
0x00000000000812b4: test eax, eax; jne 0x81350; xor eax, eax; vzeroupper; ret; 
0x0000000000081ca1: test eax, eax; jne 0x81cd0; mov rax, r8; vzeroupper; ret; 
0x0000000000081c68: test eax, eax; jne 0x81d10; mov rax, r8; vzeroupper; ret; 
0x0000000000082e61: test eax, eax; jne 0x82e90; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000084fd5: test eax, eax; jne 0x85036; mov eax, 0x101; syscall; 
0x000000000009203d: test eax, eax; jne 0x92090; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000000b8ab2: test eax, eax; jne 0xb8ac0; ret; 
0x00000000000b8cd2: test eax, eax; jne 0xb8ce0; ret; 
0x000000000008b6e0: test eax, eax; js 0x8b6f2; pop rbx; ret; 
0x000000000002e563: test eax, eax; lea rdx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000068f07: test eax, eax; sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000000a95e3: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000003543c: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000006b462: test eax, ebp; idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000000773d5: test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000007ddca: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000006f7c7: test eax, ebx; or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000006c512: test eax, edi; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x00000000000be979: test eax, edi; push rax; xchg al, bh; call qword ptr [rax + 0x30fff888]; mov bh, al; call rax; 
0x000000000008377b: test ebp, ebp; je 0x83792; mov rsi, rbp; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x00000000000b957e: test ebp, ebp; jne 0xb9558; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b98e1: test ebp, ebp; jne 0xb98c8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba49b: test ebp, ebp; jne 0xba480; pop rbx; pop rbp; pop r12; ret; 
0x000000000003698e: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000b2c6e: test ebp, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000080fb0: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000000ba61f: test ebx, ebx; jne 0xba630; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b96bc: test ebx, ebx; mov qword ptr [rip + 0x2306db], rbx; jne 0xb96a8; pop rbx; ret; 
0x00000000000b97c4: test ebx, ebx; mov rdx, rbx; jne 0xb97b8; pop rbx; ret; 
0x000000000002be50: test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000002b948: test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000062b59: test ecx, eax; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004e5a2: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000008001a: test ecx, ecx; jne 0x7ffab; mov dword ptr fs:[rax], 5; mov rax, rdx; pop rbx; ret; 
0x000000000008bd65: test ecx, ecx; jne 0x8bff6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000008c68d: test ecx, ecx; jne 0x8cc66; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000001aad4: test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x00000000000bb866: test edi, ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000056ce1: test edi, edi; je 0x56c8d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000066958: test edi, edi; je 0x66969; call 0x91790; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000ba408: test edi, edi; je 0xba421; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xba41c; call rax; 
0x00000000000b41cb: test edi, edi; jne 0xb40f3; add rsp, 0x38; ret; 
0x00000000000941ad: test edi, edi; mov byte ptr [rsi], al; jne 0x94198; mov rax, rsi; ret; 
0x00000000000590a1: test edx, edx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000004a392: test edx, edx; je 0x4a39a; bsf eax, edx; ret; 
0x000000000004a43b: test edx, edx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3da: test edx, edx; je 0x4a460; bsf rax, rdx; ret; 
0x00000000000595e7: test edx, edx; je 0x59610; xor esi, esi; lea rdi, [rip + 0x660fd]; mov eax, 0x15; syscall; 
0x0000000000059c1a: test edx, edx; je 0x59c28; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000000819aa: test edx, edx; je 0x819d0; bsf rax, rdx; ret; 
0x000000000008193a: test edx, edx; je 0x819e0; bsf rax, rdx; ret; 
0x000000000008266a: test edx, edx; je 0x82690; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000825fe: test edx, edx; je 0x826a0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000009ef0a: test edx, edx; je 0x9ef18; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000009d86e: test edx, edx; jne 0x9d875; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000000185ab: test edx, edx; mov dword ptr [rsi + 4], edi; jne 0x184a5; mov dword ptr [rsi], 0; xor eax, eax; ret; 
0x000000000004e595: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000067278: test esi, esi; je 0x6727e; call rsi; 
0x000000000008e1c4: test esi, esi; je 0x8e1cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000000818a1: test esi, esi; jne 0x818a9; xor rax, rax; ret; 
0x0000000000082561: test esi, esi; jne 0x82569; xor rax, rax; ret; 
0x0000000000093f43: test esi, esi; jne 0x93f70; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000006c024: test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000004e5af: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x00000000000d63ed: test esp, esi; call qword ptr [rax + 0x3a]; 
0x0000000000038ee2: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000000185aa: test r10d, r10d; mov dword ptr [rsi + 4], edi; jne 0x184a5; mov dword ptr [rsi], 0; xor eax, eax; ret; 
0x000000000008377a: test r13, r13; je 0x83792; mov rsi, rbp; mov qword ptr [rsp + 0xa8], r13; mov rdi, r12; call rbx; 
0x000000000008e224: test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000000350c7: test r8d, r8d; je 0x350cd; xchg eax, edx; sub eax, edx; ret; 
0x000000000002d010: test rax, rax; je 0x2d020; lea rax, [rdx - 0x10]; ret; 
0x0000000000055cfb: test rax, rax; je 0x55d02; call rax; 
0x0000000000055f10: test rax, rax; je 0x55f1a; call rax; 
0x0000000000055e67: test rax, rax; je 0x55f80; call rax; 
0x0000000000067373: test rax, rax; je 0x6737a; call rax; 
0x0000000000068778: test rax, rax; je 0x6877f; call rax; 
0x00000000000083c3: test rax, rax; je 0x83ca; call rax; 
0x00000000000083c3: test rax, rax; je 0x83ca; call rax; add rsp, 8; ret; 
0x0000000000008c6a: test rax, rax; je 0x8c78; jmp rax; 
0x0000000000008cab: test rax, rax; je 0x8cb8; jmp rax; 
0x000000000009cdc0: test rax, rax; je 0x9cdcf; lea rdx, [rip + 0x24bd94]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000009d06f: test rax, rax; je 0x9d080; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6980: test rax, rax; je 0xb698a; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000b72c4: test rax, rax; je 0xb72d8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x00000000000ba410: test rax, rax; je 0xba41c; call rax; 
0x00000000000b957d: test rbp, rbp; jne 0xb9558; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b98e0: test rbp, rbp; jne 0xb98c8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba49a: test rbp, rbp; jne 0xba480; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba61e: test rbx, rbx; jne 0xba630; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b96bb: test rbx, rbx; mov qword ptr [rip + 0x2306db], rbx; jne 0xb96a8; pop rbx; ret; 
0x00000000000b97c3: test rbx, rbx; mov rdx, rbx; jne 0xb97b8; pop rbx; ret; 
0x000000000008bd64: test rcx, rcx; jne 0x8bff6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000008c68c: test rcx, rcx; jne 0x8cc66; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000056ce0: test rdi, rdi; je 0x56c8d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000066957: test rdi, rdi; je 0x66969; call 0x91790; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000ba407: test rdi, rdi; je 0xba421; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xba41c; call rax; 
0x00000000000941ac: test rdi, rdi; mov byte ptr [rsi], al; jne 0x94198; mov rax, rsi; ret; 
0x00000000000590a0: test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000004a43a: test rdx, rdx; je 0x4a450; bsf rax, rdx; ret; 
0x000000000004a3d9: test rdx, rdx; je 0x4a460; bsf rax, rdx; ret; 
0x0000000000059c19: test rdx, rdx; je 0x59c28; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000000819a9: test rdx, rdx; je 0x819d0; bsf rax, rdx; ret; 
0x0000000000081939: test rdx, rdx; je 0x819e0; bsf rax, rdx; ret; 
0x0000000000082669: test rdx, rdx; je 0x82690; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000825fd: test rdx, rdx; je 0x826a0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000009ef09: test rdx, rdx; je 0x9ef18; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000067277: test rsi, rsi; je 0x6727e; call rsi; 
0x000000000008e1c3: test rsi, rsi; je 0x8e1cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000000818a0: test rsi, rsi; jne 0x818a9; xor rax, rax; ret; 
0x0000000000082560: test rsi, rsi; jne 0x82569; xor rax, rax; ret; 
0x0000000000093f42: test rsi, rsi; jne 0x93f70; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000005ed54: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000004a610: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035400: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000004a630: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000035410: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000004a67e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000003543e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000004a1e3: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000004a545: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000035355: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000082bc0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000004a600: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000353f0: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000081300: tzcnt eax, eax; cmp rdx, rax; jbe 0x81370; add rax, rdi; vzeroupper; ret; 
0x0000000000035bf0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000035c10: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000035bd6: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000035960: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000005090c: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000003c838: ud2; lea r11, [rip + 0x8167f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000001f723: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x0000000000051845: vmovdqa ymmword ptr [rcx + 0x60], ymm0; add rcx, 0x80; cmp rdx, rcx; jne 0x51837; vzeroupper; ret; 
0x0000000000041f3d: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000050cee: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000041f41: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000050cf2: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000035a81: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x35960; ret; 
0x0000000000041f4a: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000005187b: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x0000000000050cfc: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000041f46: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000050cf8: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000506c5: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000051881: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x00000000000506c9: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000041f29: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000050c57: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000041f2d: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000050c5b: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000041f09: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000005176b: vmovdqu ymmword ptr [edi + edx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000050e88: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000050f2f: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000041f36: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000041f1d: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000041f17: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000050e79: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000050e7e: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000050e83: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000000517e0: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000041f12: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000050dc8: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000050f20: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000050f25: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000050f2a: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000000517e5: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000005176c: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000050c65: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000050dcd: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000050d93: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x00000000000517eb: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000050dd3: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000050d99: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000050d9f: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000050da5: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000041f32: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000000517dc: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000041f0e: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000050dc4: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000050c61: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000051772: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000000506bb: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000000506bf: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000005108a: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000051090: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000051342: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000051408: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000005133b: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000005197f: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000005125a: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000051401: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000005122b: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000051986: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000000518f5: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000005109e: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000051261: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000005198e: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000051269: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000051979: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000051254: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000051098: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000000518fd: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000506d4: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000000506d8: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000042245: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000004224c: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000042253: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000041e9d: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420ec: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041eee: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000041eb2: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420e5: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ee7: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000041eab: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000420de: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000041ea4: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000041ee0: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000005068d: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000423a0: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423a7: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423ae: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000423b5: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000506a8: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005086a: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000050871: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000050878: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000000507cd: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507d4: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000000507db: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000005067a: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000050673: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000005066c: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000003590c: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x35bb0; xor eax, eax; vzeroupper; ret; 
0x0000000000035a47: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x35960; ret; 
0x0000000000035a85: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x35960; ret; 
0x0000000000035a4b: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x35960; ret; 
0x00000000000812ed: vpmovmskb eax, ymm1; test eax, eax; jne 0x81310; xor eax, eax; vzeroupper; ret; 
0x0000000000081c9d: vpmovmskb eax, ymm1; test eax, eax; jne 0x81cd0; mov rax, r8; vzeroupper; ret; 
0x0000000000035953: vpmovmskb eax, ymm2; sub eax, -1; jne 0x35960; vzeroupper; ret; 
0x000000000000e885: vpsubsb xmm14, xmm15, xmmword ptr [rbx*4 - 0x72b20001]; je 0xe896; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000035910: vptest ymm5, ymm0; jae 0x35bb0; xor eax, eax; vzeroupper; ret; 
0x00000000000297c4: vshufps xmm2, xmm2, xmm5, 0xff; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000003535f: vzeroupper; ret; 
0x0000000000081370: vzeroupper; xor eax, eax; ret; 
0x0000000000080e61: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000000e18f9: wait; add byte ptr [rax], al; mov ah, 0x17; sti; jmp qword ptr [rdx + 5]; 
0x0000000000073958: wait; add eax, 0x6f0f6600; ret 0xcce8; 
0x00000000000d7935: wait; cld; jmp qword ptr [rax - 0x3e]; 
0x0000000000034713: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000004783f: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034803: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000034623: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000be97d: xchg al, bh; call qword ptr [rax + 0x30fff888]; mov bh, al; call rax; 
0x000000000006d8d2: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000004948c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000048cac: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000004909c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000488bc: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b1c2d: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000008d25c: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b0731: xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x00000000000b1931: xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b1031: xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b1331: xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b0a29: xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000007799b: xchg byte ptr [rax + 0xd], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000051b02: xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x000000000003506b: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000004839f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047b7f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000004735f: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000034bc3: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x00000000000e04b5: xchg byte ptr [rax], al; add al, cl; cli; jmp qword ptr [rcx]; 
0x00000000000d7001: xchg byte ptr [rax], al; add byte ptr [rax], bh; or al, 0xf9; call qword ptr [rax - 0x79]; 
0x0000000000048a5b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000047ebf: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000034353: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000004769f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000046e7f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x0000000000080e60: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000004805f: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000034da3: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000034533: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000006c167: xchg byte ptr [rcx + 0xb], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000034f83: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000009ca3b: xchg byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000006be23: xchg byte ptr [rcx], bl; sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000048f4c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004876c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004987c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000bdf2c: xchg byte ptr [rdi], cl; clc; call qword ptr [rsi]; 
0x0000000000062413: xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x0000000000034e93: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000471bf: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000347d5: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000348c5: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000346e5: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000056bd6: xchg byte ptr [rip + 0x448b0000], ah; and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x00000000000b0cd6: xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000472f5: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047ff5: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b1bd6: xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b12d6: xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b0fd6: xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x000000000006bc4e: xchg byte ptr [rsi], al; adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000047b15: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048e4d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000063505: xchg byte ptr [rsi], bl; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000b09ce: xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004977d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000be424: xchg byte ptr [rsi], dh; clc; call qword ptr [rsi]; 
0x0000000000034443: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000001dd16: xchg ch, bh; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000afa5f: xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000af87f: xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b0257: xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000af177: xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b0077: xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000048335: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047635: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000047155: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000047e55: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000001e09d: xchg dh, bl; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000048f9d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000487bd: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000009ffdb: xchg dh, dh; jmp qword ptr [rsi - 0x70]; 
0x00000000000345f5: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034415: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034505: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000034325: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x00000000000b4546: xchg dword ptr [rax + 0x4cfff541], esp; lea eax, [rip + 0x21462]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000007c969: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x0000000000079f70: xchg dword ptr [rax - 0x76ffffe3], edi; ret 0x349; 
0x000000000000bc13: xchg dword ptr [rax - 0x7d], ecx; ret; 
0x000000000008b0f6: xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000008bb81: xchg dword ptr [rbp + 0x13], ecx; add byte ptr [rax], al; lea rcx, [rip + 0x42d93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x0000000000023285: xchg dword ptr [rbp + 0x2c], eax; add bl, dh; ret; 
0x00000000000b5740: xchg dword ptr [rbp + rax], ebp; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000005d2c4: xchg dword ptr [rbp + rcx*4 + 0x34], ecx; ret; 
0x000000000007040b: xchg dword ptr [rbp - 0x77000000], eax; ret 0x349; 
0x0000000000099c9b: xchg dword ptr [rbp - 0x7cffffe1], esi; ret 0xbe08; 
0x0000000000099705: xchg dword ptr [rbp - 0x7cffffe3], edx; ret 0xbe08; 
0x000000000002d448: xchg dword ptr [rbx + 1], esi; add byte ptr [rax], al; lea rdx, [rip + 0x903ac]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007cadf: xchg dword ptr [rbx + rax], edi; add byte ptr [rax], al; lea rdx, [rip + 0x50f3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000079622: xchg dword ptr [rbx - 0x76ffffdb], edi; ret 0x349; 
0x00000000000b4772: xchg dword ptr [rcx + 0x3f], edi; cmc; dec dword ptr [rcx + 0x63]; add al, 0x87; add rax, r15; jmp rax; 
0x000000000007c32a: xchg dword ptr [rcx + 0x48000003], esi; lea ecx, [rip + 0x514ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000b1ca: xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0xb0d62]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000d046c: xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x000000000006856a: xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x00000000000379b5: xchg dword ptr [rcx + 8], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b477a: xchg dword ptr [rcx + rax - 8], ecx; jmp rax; 
0x000000000007a61a: xchg dword ptr [rcx - 0x76ffffea], ecx; ret 0x349; 
0x000000000007b265: xchg dword ptr [rcx - 0x76fffff6], esp; ret 0x349; 
0x000000000009b7ed: xchg dword ptr [rcx - 0x77000000], ecx; ret 0x348; 
0x0000000000024f92: xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x0000000000097b71: xchg dword ptr [rcx], ebp; xor al, 0; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000007b23c: xchg dword ptr [rdi - 0x76fffff6], edx; ret 0x349; 
0x0000000000098d94: xchg dword ptr [rdi - 0x7cffffd3], esp; ret 0xbf08; 
0x00000000000590ce: xchg dword ptr [rdi], eax; test eax, eax; jne 0x590c4; pop rdx; pop r10; ret; 
0x000000000007cb54: xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000007c961: xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000000ae79: xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0xb102f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000056217: xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x68f19; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000007712a: xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009922d: xchg dword ptr [rdx - 0x7cffffe2], edx; ret 0xbf08; 
0x000000000003a775: xchg dword ptr [rip + 0x63490008], esi; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000088740: xchg dword ptr [rip - 0x76fffffd], edx; ret 0xe8c0; 
0x000000000009bf27: xchg dword ptr [rip - 0x76fffffe], ebx; ret 0x348; 
0x00000000000985d2: xchg dword ptr [rip - 0x7cffffc7], esp; ret 0xbf08; 
0x0000000000016172: xchg dword ptr [rsi + 6], edi; add byte ptr [rax], al; lea rdi, [rip + 0xa5ea2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000005b95e: xchg dword ptr [rsi + 7], eax; add byte ptr [rax], al; movsxd rsi, dword ptr [r9 + rbp*4]; add rsi, r9; jmp rsi; 
0x0000000000096f2c: xchg dword ptr [rsi + rcx*2], esp; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000790d4: xchg dword ptr [rsi - 0x76ffffd5], edi; ret 0x349; 
0x000000000006f2b8: xchg dword ptr [rsi - 0x76ffffef], eax; ret 0x349; 
0x000000000006f7d0: xchg dword ptr [rsi - 0x76fffff5], edi; ret 0x349; 
0x000000000007bd53: xchg dword ptr [rsi - 0x77000000], edx; ret 0x349; 
0x0000000000099152: xchg dword ptr [rsi], edx; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000000d060b: xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000000aedb8: xchg eax, ebp; adc eax, 0x83480000; ret 0xe910; 
0x00000000000e13ad: xchg eax, ebp; add byte ptr [rax], al; add ch, dh; cli; jmp qword ptr [rsi]; 
0x000000000006eb2e: xchg eax, ebp; call 0x4206eb2e; call qword ptr [rdi + 0x38]; 
0x000000000006df9a: xchg eax, ebp; call 0x4906df9a; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000000be9a1: xchg eax, ebp; clc; push qword ptr [rax]; xchg eax, edi; clc; call rax; 
0x00000000000e28f1: xchg eax, ebp; cld; call qword ptr [rax]; 
0x00000000000b6b21: xchg eax, ebp; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000b7033: xchg eax, ebp; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000667cf: xchg eax, ebp; push -0x17000001; mov dword ptr [rcx - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000000667db: xchg eax, ebp; push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000000b4320: xchg eax, ebp; ret 0x145; 
0x0000000000056e0c: xchg eax, ebp; ret 0x3948; 
0x0000000000027ffb: xchg eax, ebp; ret 0x8348; 
0x0000000000089400: xchg eax, ebp; ret 0xc283; 
0x000000000002b15d: xchg eax, ebp; ret 0xd020; 
0x0000000000017115: xchg eax, ebp; ret 0xd021; 
0x00000000000719ba: xchg eax, ebp; ret 0xd120; 
0x000000000001a382: xchg eax, ebp; ret 0xdaf7; 
0x00000000000b42f6: xchg eax, ebp; ret 0xdb31; 
0x000000000005a981: xchg eax, ebp; ret 0xe1eb; 
0x00000000000b5e18: xchg eax, ebp; ret 0xf45; 
0x00000000000551b7: xchg eax, ebp; ret 0xf748; 
0x000000000005deef: xchg eax, ebp; ret; 
0x00000000000a95e6: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000229ed: xchg eax, ebp; sal bh, 0xd8; ret; 
0x00000000000a0c74: xchg eax, ebp; xchg ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000001b142: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000079197: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000035c50: xchg eax, ebx; add rcx, r11; jmp rcx; 
0x00000000000d726d: xchg eax, ebx; cli; jmp qword ptr [rax - 0x67]; 
0x000000000004da2c: xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000373f2: xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000005627c: xchg eax, ebx; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000069188: xchg eax, ebx; ret 0x3948; 
0x000000000001bf3c: xchg eax, ebx; ret 0x3949; 
0x000000000002a870: xchg eax, ebx; ret 0x3d83; 
0x000000000007eba5: xchg eax, ebx; ret 0x840; 
0x0000000000069c6d: xchg eax, ebx; ret 0x854d; 
0x00000000000d7635: xchg eax, ebx; sti; jmp qword ptr [rax]; 
0x000000000008bb89: xchg eax, ebx; sub eax, 0x634a0004; add al, 0xa1; add rax, rcx; jmp rax; 
0x00000000000e0f4d: xchg eax, ecx; add byte ptr [rax], al; jp 0xe0fc9; bnd jmp qword ptr [rcx]; 
0x00000000000d7171: xchg eax, ecx; add byte ptr [rax], al; sbb byte ptr [rdx + rdi*8], al; push qword ptr [rcx + rdx*4 + 0x2cb80000]; cli; jmp rsp; 
0x00000000000e0f7d: xchg eax, ecx; add byte ptr [rax], al; sbb dh, 0xfa; jmp qword ptr [rdx]; 
0x000000000008ce4b: xchg eax, ecx; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000048441: xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000006ebeb: xchg eax, ecx; ret 0xffff; 
0x00000000000424e6: xchg eax, ecx; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x0000000000046b6f: xchg eax, ecx; sub eax, edx; ret; 
0x000000000001ea44: xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000000e1589: xchg eax, edi; add byte ptr [rax], al; push rsp; add edi, ebx; jmp qword ptr [rbx + 1]; 
0x0000000000016181: xchg eax, edi; add rdx, rdi; jmp rdx; 
0x00000000000d18bf: xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x00000000000be9a5: xchg eax, edi; clc; call rax; 
0x0000000000091256: xchg eax, edi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000b310e: xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x0000000000037da5: xchg eax, edi; pop rbp; or byte ptr [rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002906b: xchg eax, edi; ret 0x394c; 
0x000000000000875e: xchg eax, edi; ret 0xda80; 
0x0000000000029551: xchg eax, edi; ret 0xfae9; 
0x0000000000029b49: xchg eax, edi; ret 0xfbe9; 
0x000000000000a4b5: xchg eax, edi; ret 4; 
0x00000000000b595a: xchg eax, edi; sub eax, 0x8b48fff5; add byte ptr [rcx + 1], cl; ret 0xef89; 
0x00000000000d0ab8: xchg eax, edi; xchg eax, esp; ret; 
0x000000000008a9ef: xchg eax, edx; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000000d6f65: xchg eax, edx; clc; lcall [rdi + rdi*2 - 0x67280000]; clc; call qword ptr [rax]; 
0x00000000000b6b0a: xchg eax, edx; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000d237d: xchg eax, edx; jae 0xd2353; push rsi; pop rdx; je 0xd2348; ret 0xacfc; 
0x00000000000bf1a0: xchg eax, edx; jb 0xbf19c; inc dword ptr [rdx + rsi*2]; stc; call rcx; 
0x00000000000b1cbc: xchg eax, edx; lea rcx, [rip + 0x104fc]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000b030c: xchg eax, edx; lea rcx, [rip + 0x11eac]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000049aa7: xchg eax, edx; lea rcx, [rip + 0x78711]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000048437: xchg eax, edx; lea rcx, [rip + 0x79d81]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000002d0aa: xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000000eb18: xchg eax, edx; ret 0x8548; 
0x0000000000092b45: xchg eax, edx; ret 0x8949; 
0x00000000000d046f: xchg eax, edx; ret 0xf869; 
0x000000000005059d: xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000002e73a: xchg eax, edx; shr dword ptr [rbx], 0; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000000be6bc: xchg eax, edx; sub eax, edi; jmp qword ptr [rdx]; 
0x00000000000350cc: xchg eax, edx; sub eax, edx; ret; 
0x000000000003ab6a: xchg eax, edx; xor dword ptr [rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000be4ac: xchg eax, edx; xor eax, 0x3522fff8; clc; push qword ptr [rdx + 0x42fff834]; xor al, 0xf8; call rdx; 
0x00000000000bdf10: xchg eax, esi; adc bh, al; jmp qword ptr [rsi]; 
0x0000000000035f50: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003e183: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000064221: xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000051b94: xchg eax, esi; add rax, rsi; jmp rax; 
0x000000000009d746: xchg eax, esi; call 0x593b0; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x24dd4a]; ret; 
0x00000000000be408: xchg eax, esi; cmp eax, edi; jmp qword ptr [rsi]; 
0x000000000009d0e6: xchg eax, esi; fdecstp; jmp qword ptr [rsi + 0xf]; 
0x00000000000d642d: xchg eax, esi; hlt; jmp qword ptr [rax]; 
0x000000000003600d: xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000000c766: xchg eax, esi; mov al, 4; add byte ptr [rax - 0x7d], cl; cmp eax, 0x2da7c6; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000035f6b: xchg eax, esi; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a2a1e: xchg eax, esi; ret 0x8348; 
0x00000000000527f1: xchg eax, esi; ret 0xc085; 
0x00000000000d2d0c: xchg eax, esi; ret 0xcd11; 
0x000000000005284f: xchg eax, esi; ret 0xd284; 
0x000000000002bcc6: xchg eax, esi; ret 0xffff; 
0x0000000000035fbc: xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000002a45a: xchg eax, esi; shr dword ptr [rbx], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000bebc0: xchg eax, esi; xor cl, bh; call qword ptr [rcx + 0x30]; 
0x000000000006806b: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x0000000000079fb7: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x00000000000e12e1: xchg eax, esp; add byte ptr [rax], al; or al, 0xf2; cli; call rdx; 
0x000000000001d788: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffdaf7e; jmp qword ptr [rsi + 0x2e]; 
0x00000000000654d8: xchg eax, esp; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000000654f6: xchg eax, esp; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000065514: xchg eax, esp; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000000bf4dc: xchg eax, esp; jae 0xbf4d8; call qword ptr [rbx + rsi*2 + 0x7394fff9]; stc; jmp rsp; 
0x00000000000bf4e4: xchg eax, esp; jae 0xbf4e0; jmp rsp; 
0x00000000000bf500: xchg eax, esp; jae 0xbf4fc; call rcx; 
0x00000000000d14da: xchg eax, esp; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x00000000000e0e7c: xchg eax, esp; nop; add byte ptr [rax], al; and dl, dl; cli; jmp qword ptr [rsi]; 
0x00000000000e37dc: xchg eax, esp; push rdx; std; call qword ptr [rcx]; 
0x00000000000d2f1f: xchg eax, esp; push rsi; cli; push 0x6e; ja 0xd2ea9; ret 0x48f; 
0x000000000005efeb: xchg eax, esp; ret 0x1f0f; 
0x0000000000056edb: xchg eax, esp; ret 0x2044; 
0x0000000000090aac: xchg eax, esp; ret 0x3d; 
0x0000000000026c5e: xchg eax, esp; ret 0x3de9; 
0x00000000000838ad: xchg eax, esp; ret 0x5438; 
0x000000000007b147: xchg eax, esp; ret 0x7f3c; 
0x000000000005350b: xchg eax, esp; ret 0x8d4f; 
0x000000000009ccb1: xchg eax, esp; ret 0x950f; 
0x000000000000bb64: xchg eax, esp; ret 0xb60f; 
0x00000000000505a0: xchg eax, esp; ret 0xc085; 
0x0000000000057201: xchg eax, esp; ret 0xc221; 
0x00000000000861b5: xchg eax, esp; ret 0xc283; 
0x0000000000056d18: xchg eax, esp; ret 0xca21; 
0x000000000000a113: xchg eax, esp; ret 0xd284; 
0x000000000005da16: xchg eax, esp; ret 0xd5e9; 
0x000000000007fe50: xchg eax, esp; ret 0xdaf7; 
0x00000000000b5e36: xchg eax, esp; ret 0xf45; 
0x0000000000053a5a: xchg eax, esp; ret; 
0x000000000002d05a: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000074c97: xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000e297c: xchg eax, esp; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add ah, dh; cld; jmp qword ptr [rcx]; 
0x00000000000d6250: xchg eax, esp; sub eax, 0x30e80000; hlt; jmp rax; 
0x00000000000e0f7c: xchg eax, esp; xchg eax, ecx; add byte ptr [rax], al; sbb dh, 0xfa; jmp qword ptr [rdx]; 
0x00000000000d950c: xchg eax, esp; xor dh, ah; jmp rdi; 
0x0000000000090aa0: xchg eax, r8d; mov eax, 0x15; syscall; 
0x0000000000080c30: xchg ebp, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d688d: xchg ebp, esi; jmp qword ptr [rax]; 
0x00000000000a0c77: xchg ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000dc041: xchg esi, esi; call qword ptr [rax]; 
0x00000000000d3137: xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000024f45: xlatb; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000000cbd39: xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000040ab2: xlatb; add rsi, rdx; lea r11, [rip + 0x7db43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040932: xlatb; add rsi, rdx; lea r11, [rip + 0x7dcc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000407b2: xlatb; add rsi, rdx; lea r11, [rip + 0x7de43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040633: xlatb; add rsi, rdx; lea r11, [rip + 0x7dfc2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000404b2: xlatb; add rsi, rdx; lea r11, [rip + 0x7e143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040332: xlatb; add rsi, rdx; lea r11, [rip + 0x7e2c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000401b2: xlatb; add rsi, rdx; lea r11, [rip + 0x7e443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040032: xlatb; add rsi, rdx; lea r11, [rip + 0x7e5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003feb2: xlatb; add rsi, rdx; lea r11, [rip + 0x7e743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fd32: xlatb; add rsi, rdx; lea r11, [rip + 0x7e8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fbb2: xlatb; add rsi, rdx; lea r11, [rip + 0x7ea43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fa32: xlatb; add rsi, rdx; lea r11, [rip + 0x7ebc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f8b2: xlatb; add rsi, rdx; lea r11, [rip + 0x7ed43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f732: xlatb; add rsi, rdx; lea r11, [rip + 0x7eec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f5b2: xlatb; add rsi, rdx; lea r11, [rip + 0x7f043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dfd2: xlatb; add rsi, rdx; lea r11, [rip + 0x80123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003de52: xlatb; add rsi, rdx; lea r11, [rip + 0x802a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dcd2: xlatb; add rsi, rdx; lea r11, [rip + 0x80423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003db53: xlatb; add rsi, rdx; lea r11, [rip + 0x805a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d9d2: xlatb; add rsi, rdx; lea r11, [rip + 0x80723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d852: xlatb; add rsi, rdx; lea r11, [rip + 0x808a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d6d2: xlatb; add rsi, rdx; lea r11, [rip + 0x80a23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d552: xlatb; add rsi, rdx; lea r11, [rip + 0x80ba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d3d2: xlatb; add rsi, rdx; lea r11, [rip + 0x80d23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d252: xlatb; add rsi, rdx; lea r11, [rip + 0x80ea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d0d2: xlatb; add rsi, rdx; lea r11, [rip + 0x81023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cf52: xlatb; add rsi, rdx; lea r11, [rip + 0x811a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cdd2: xlatb; add rsi, rdx; lea r11, [rip + 0x81323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cc52: xlatb; add rsi, rdx; lea r11, [rip + 0x814a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cad2: xlatb; add rsi, rdx; lea r11, [rip + 0x81623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039f68: xlatb; add rsi, rdx; lea r11, [rip + 0x83d8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037598: xlatb; add rsi, rdx; lea r11, [rip + 0x8659d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000050903: xlatb; jb 0x50909; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000001646d: xlatb; jmp rdi; 
0x00000000000d14e3: xlatb; jo 0xd1557; mov ebp, 0xfb67d10d; ret; 
0x000000000003e7ab: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000040ed0: xlatb; lea r11, [rip + 0x7d4e8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000040d1d: xlatb; lea r11, [rip + 0x7d8db]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f478: xlatb; lea r11, [rip + 0x7f180]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f31c: xlatb; lea r11, [rip + 0x7f2dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e3bc: xlatb; lea r11, [rip + 0x7fafc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e229: xlatb; lea r11, [rip + 0x7fecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c61b: xlatb; lea r11, [rip + 0x816dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c998: xlatb; lea r11, [rip + 0x81760]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003c826: xlatb; lea r11, [rip + 0x818d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039e7c: xlatb; lea r11, [rip + 0x83e7c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039db7: xlatb; lea r11, [rip + 0x83f41]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000374ac: xlatb; lea r11, [rip + 0x8668c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000373e7: xlatb; lea r11, [rip + 0x86751]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000366a2: xlatb; lea r11, [rip + 0x87356]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036628: xlatb; lea r11, [rip + 0x873d0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036599: xlatb; lea r11, [rip + 0x8745f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003638e: xlatb; lea r11, [rip + 0x8766a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000003625c: xlatb; lea r11, [rip + 0x8779c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036196: xlatb; lea r11, [rip + 0x87862]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036118: xlatb; lea r11, [rip + 0x878e0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036081: xlatb; lea r11, [rip + 0x87977]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035e85: xlatb; lea r11, [rip + 0x87b73]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035d54: xlatb; lea r11, [rip + 0x87ca4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000035c45: xlatb; lea r11, [rip + 0x87db3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000094232: xlatb; mov byte ptr [rsi], al; jne 0x94210; mov rax, rsi; ret; 
0x0000000000055fd1: xlatb; mov eax, esi; syscall; 
0x0000000000055fe0: xlatb; mov eax, r8d; syscall; 
0x00000000000667cc: xlatb; mov qword ptr [rbp - 0x98], rdx; call 0x5a9a0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x0000000000038191: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x859a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d6174: xlatb; or al, 0xf4; call rsp; 
0x000000000003a625: xlatb; or byte ptr ss:[rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d2986: xlatb; ret 0x4e27; 
0x00000000000815a7: xlatb; ret 0x94c; 
0x00000000000351af: xlatb; ret 0xc085; 
0x000000000002fd00: xlatb; ret 0xc148; 
0x0000000000035864: xlatb; ret 0xe883; 
0x000000000004a3b4: xlatb; ret 0xf66; 
0x0000000000035a28: xlatb; ret 0xff2d; 
0x00000000000351c4: xlatb; ret; 
0x00000000000816f5: xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000035291: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000081755: xlatb; rol ch, cl; std; xlatb; ret; 
0x00000000000812ef: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000081073: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000004e55e: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000035422: xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x000000000004a132: xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000081043: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000081c66: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000000812b2: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000004aa22: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000004aa5e: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000004e556: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000002fbe6: xlatb; sal bh, 1; ret 0x8000; 
0x000000000002faa6: xlatb; sal bh, 1; ret 0xc000; 
0x000000000002f966: xlatb; sal bh, 1; ret 0xe000; 
0x000000000002f826: xlatb; sal bh, 1; ret 0xf000; 
0x000000000002f6e6: xlatb; sal bh, 1; ret 0xf800; 
0x000000000002f5a6: xlatb; sal bh, 1; ret 0xfc00; 
0x000000000002f466: xlatb; sal bh, 1; ret 0xfe00; 
0x000000000002f326: xlatb; sal bh, 1; ret 0xff00; 
0x000000000002f1e6: xlatb; sal bh, 1; ret 0xff80; 
0x000000000002f0a6: xlatb; sal bh, 1; ret 0xffc0; 
0x000000000002ef66: xlatb; sal bh, 1; ret 0xffe0; 
0x000000000002ee26: xlatb; sal bh, 1; ret 0xfff0; 
0x000000000002ece6: xlatb; sal bh, 1; ret 0xfff8; 
0x000000000002eba6: xlatb; sal bh, 1; ret 0xfffc; 
0x000000000002ea66: xlatb; sal bh, 1; ret 0xfffe; 
0x000000000003c54d: xlatb; sfence; lea r11, [rip + 0x817a8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000039b65: xlatb; sfence; lea r11, [rip + 0x83fd0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004e552: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000081556: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000081545: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000d7125: xlatb; stc; jmp rax; 
0x0000000000040b6f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7d846]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000409ef: xlatb; sub rsi, rdx; lea r11, [rip + 0x7d9c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004086f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7db46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000406ef: xlatb; sub rsi, rdx; lea r11, [rip + 0x7dcc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004056f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7de46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000403ef: xlatb; sub rsi, rdx; lea r11, [rip + 0x7dfc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004026f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7e146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000400ef: xlatb; sub rsi, rdx; lea r11, [rip + 0x7e2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ff6f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7e446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fdef: xlatb; sub rsi, rdx; lea r11, [rip + 0x7e5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003fc6f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7e746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003faef: xlatb; sub rsi, rdx; lea r11, [rip + 0x7e8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f96f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7ea46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f7ef: xlatb; sub rsi, rdx; lea r11, [rip + 0x7ebc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f66f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7ed46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003f4f6: xlatb; sub rsi, rdx; lea r11, [rip + 0x7eebf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003e08f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7fe26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003df0f: xlatb; sub rsi, rdx; lea r11, [rip + 0x7ffa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dd8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x80126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003dc0f: xlatb; sub rsi, rdx; lea r11, [rip + 0x802a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003da8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x80426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d90f: xlatb; sub rsi, rdx; lea r11, [rip + 0x805a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d78f: xlatb; sub rsi, rdx; lea r11, [rip + 0x80726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d60f: xlatb; sub rsi, rdx; lea r11, [rip + 0x808a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d48f: xlatb; sub rsi, rdx; lea r11, [rip + 0x80a26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d30f: xlatb; sub rsi, rdx; lea r11, [rip + 0x80ba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d18f: xlatb; sub rsi, rdx; lea r11, [rip + 0x80d26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003d00f: xlatb; sub rsi, rdx; lea r11, [rip + 0x80ea6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ce8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x81026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cd0f: xlatb; sub rsi, rdx; lea r11, [rip + 0x811a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003cb8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x81326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003ca16: xlatb; sub rsi, rdx; lea r11, [rip + 0x8149f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004da25: xlatb; sysret; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000002e75a: xor ah, byte ptr [rcx]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000cd6ac: xor ah, ch; cli; push qword ptr [rax - 0x15]; cli; jmp qword ptr [rax]; 
0x00000000000d6255: xor ah, dh; jmp rax; 
0x00000000000e3680: xor al, 0; add byte ptr [rax], al; pushfq; mov eax, 0x48d80000; std; call qword ptr [rcx]; 
0x00000000000e2014: xor al, 0; add byte ptr [rax], al; xor byte ptr [rdx - 0x423c0000], ah; sti; call qword ptr [rax]; 
0x0000000000097b73: xor al, 0; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000000a6d4: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000000d046a: xor al, 0x19; xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x000000000002e568: xor al, 0x32; add al, byte ptr [rax]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x00000000000be55c: xor al, 0x37; clc; inc esp; clc; call qword ptr [rsi + rsi - 8]; jmp rsp; 
0x00000000000dc21c: xor al, 0x44; add byte ptr [rax], al; add byte ptr [rdx - 9], al; call qword ptr [rdi]; 
0x000000000007e66b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000021b1b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000068072: xor al, 0x88; add rsi, r8; jmp rsi; 
0x00000000000d7040: xor al, 0x89; add byte ptr [rax], al; mov byte ptr [rax], ch; stc; call qword ptr [rax - 0x77]; 
0x000000000005b965: xor al, 0xa9; add rsi, r9; jmp rsi; 
0x000000000005ba3f: xor al, 0xb1; add rsi, r9; jmp rsi; 
0x000000000007c7ab: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000000d164a: xor al, 0xd8; ret; 
0x00000000000dbf3c: xor al, 0xdd; cmc; jmp qword ptr [rdi + 0x2b]; 
0x0000000000029a08: xor al, 0xde; sub eax, dword ptr [rax]; ret; 
0x0000000000067275: xor al, 0xf0; test rsi, rsi; je 0x6727e; call rsi; 
0x0000000000067271: xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x6727e; call rsi; 
0x00000000000d6765: xor al, 0xf5; jmp rax; 
0x0000000000060dee: xor al, 0xf6; ret; 
0x00000000000be5f5: xor al, 0xf8; call qword ptr [rax]; 
0x00000000000be435: xor al, 0xf8; call qword ptr [rsi + 0x34]; 
0x00000000000be435: xor al, 0xf8; call qword ptr [rsi + 0x34]; clc; jmp rsi; 
0x00000000000be4b9: xor al, 0xf8; call rdx; 
0x00000000000d6e15: xor al, 0xf8; dec eax; jbe 0xd6e1b; add byte ptr [rax + 0x34], bl; clc; jmp rax; 
0x00000000000be4b5: xor al, 0xf8; inc dword ptr [rdx + 0x34]; clc; call rdx; 
0x00000000000d6e1d: xor al, 0xf8; jmp rax; 
0x00000000000be439: xor al, 0xf8; jmp rsi; 
0x00000000000d7a1d: xor al, 0xfd; jmp qword ptr [rax]; 
0x000000000003a814: xor al, 8; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002e49a: xor al, ah; sub eax, dword ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000000be805: xor al, bh; call qword ptr [rax]; 
0x00000000000be685: xor al, bh; call qword ptr [rdx + 0x30]; 
0x00000000000beab4: xor al, bh; clc; call qword ptr [rax - 8]; 
0x00000000000be7c5: xor al, bh; jmp qword ptr [rax]; 
0x0000000000058e61: xor al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000058e61: xor al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58e70; ret; 
0x000000000002e569: xor al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x231dd; cmovne rax, rdx; ret; 
0x00000000000862d2: xor al, ch; cwde; and bh, al; dec dword ptr [rax + 0x39]; ret; 
0x00000000000670d7: xor bh, ah; jmp qword ptr [rsi + 0xf]; 
0x00000000000b947c: xor bh, bh; stc; call qword ptr [rbp + 0x53]; 
0x00000000000bde68: xor bh, cl; idiv edi; adc al, 0xf7; call rax; 
0x00000000000bde68: xor bh, cl; idiv edi; adc al, 0xf7; call rax; sal edi, 1; jmp qword ptr [rax]; 
0x00000000000bea88: xor bh, dh; clc; inc dword ptr [rax - 9]; clc; call qword ptr [rax - 9]; 
0x000000000009d06c: xor bh, dh; dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x00000000000760ae: xor bh, dh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000352ab: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x000000000008103f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000001b3a2: xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000003acb5: xor byte ptr [r8], r9b; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000698e8: xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x000000000001b3a3: xor byte ptr [rax + 1], cl; ret 0x8b49; 
0x00000000000bdc40: xor byte ptr [rax - 0x4dbf0009], 0xf7; call qword ptr [rax]; 
0x0000000000091610: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x000000000009159e: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000007ddc7: xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000004a71f: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000056b12: xor byte ptr [rax - 0x77], cl; and al, 0x20; je 0x56b40; mov eax, 0x48; syscall; 
0x000000000001d6ed: xor byte ptr [rax - 0x77], cl; call 0xfffffffffffe4ede; jmp qword ptr [rsi + 0x2e]; 
0x00000000000822df: xor byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x0000000000083c19: xor byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000007f2e2: xor byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000005a74f: xor byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000000be48: xor byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000007f22e: xor byte ptr [rax], 1; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000007f337: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007e80c: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000001b6fb: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000017bc9: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000017b03: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000008df2c: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8d860; add rsp, 0xd8; ret; 
0x0000000000017bef: xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000051be3: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000187da: xor byte ptr [rax], al; add byte ptr [rcx - 0x1e], al; jg 0x18825; mov dword ptr [rax], edx; mov dword ptr [rsi], edx; ret; 
0x000000000003ac04: xor byte ptr [rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000097b7: xor byte ptr [rax], dl; add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x00000000000b46a0: xor byte ptr [rbp + 0x35], dh; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000000569fa: xor byte ptr [rbp + 0x3b], dh; mov eax, dword ptr [rip + 0x2949e5]; test eax, eax; jne 0x56a68; mov eax, 0x48; syscall; 
0x0000000000050b55: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x00000000000b7574: xor byte ptr [rbp + 9], dh; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000000bdb78: xor byte ptr [rbp - 0x40cf0009], bh; idiv edi; sal byte ptr [rcx - 0x4c7f0009], 0xf7; jmp qword ptr [rax - 0x4b]; 
0x0000000000074019: xor byte ptr [rbx + 0x291c2454], cl; ret 0xe683; 
0x000000000001ed56: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000005d76a: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000b4373: xor byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x0000000000021bbd: xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007b07b: xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x00000000000be8f8: xor byte ptr [rbx - 8], al; inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; 
0x00000000000be8f8: xor byte ptr [rbx - 8], al; inc dword ptr [rax + 0x45]; clc; call qword ptr [rax + 0x47]; clc; jmp qword ptr [rax + 0x49]; 
0x00000000000bd9ec: xor byte ptr [rbx - 9], dh; jmp qword ptr [rax]; 
0x00000000000be33c: xor byte ptr [rbx], al; clc; call rax; 
0x00000000000be0c8: xor byte ptr [rbx], dl; clc; inc eax; adc bh, al; call qword ptr [rax + 0x12]; 
0x000000000005677f: xor byte ptr [rcx + 0x101b8f2], cl; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000088053: xor byte ptr [rcx + 0x29], cl; ret; 
0x000000000007f26c: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000083f07: xor byte ptr [rcx - 0x77], al; ret; 
0x0000000000088109: xor byte ptr [rcx - 0x77], cl; adc byte ptr [r9 + rcx*4 + 0xd], cl; ret; 
0x000000000006f1b1: xor byte ptr [rcx], al; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000007f22f: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000007f338: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007e80d: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000021767: xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000001b6fc: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000001ccb7: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000be3dc: xor byte ptr [rdi], 0xf8; call qword ptr [rax]; 
0x0000000000050a06: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000006237b: xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000d7080: xor byte ptr [rdx + 0x2f480000], cl; stc; call qword ptr [rax - 0x76]; 
0x00000000000e2018: xor byte ptr [rdx - 0x423c0000], ah; sti; call qword ptr [rax]; 
0x00000000000be9d0: xor byte ptr [rdx - 0x5c7f0008], ah; clc; call rax; 
0x00000000000be9d0: xor byte ptr [rdx - 0x5c7f0008], ah; clc; call rax; movsb byte ptr [rdi], byte ptr [rsi]; clc; jmp qword ptr [rax]; 
0x00000000000be984: xor byte ptr [rdx - 0x742f0008], cl; clc; push qword ptr [rax - 0x73]; clc; call qword ptr [rax]; 
0x000000000002e53a: xor byte ptr [rdx], al; add bh, dh; ret 0; 
0x00000000000dbda0: xor byte ptr [rdx], ch; cmc; jmp qword ptr [rbx]; 
0x00000000000dd797: xor byte ptr [rsi + 0x380e4106], al; add dword ptr [rdi], 3; ret 0xa01; 
0x00000000000d34d6: xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000035cff: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000035cfa: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008150c: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000352ac: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000081040: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000be3e8: xor byte ptr [rsi], dh; clc; inc eax; xor eax, 0x3550fff8; clc; jmp rax; 
0x00000000000d79f5: xor ch, bh; jmp qword ptr [rax - 0x39]; 
0x00000000000d5ac8: xor ch, bh; std; jmp qword ptr [rax]; 
0x00000000000bbeec: xor cl, 0xf4; push qword ptr [rdx]; int1; hlt; jmp qword ptr [rsi - 0xf]; 
0x000000000003f47c: xor cl, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002db2a: xor cl, al; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000bebc1: xor cl, bh; call qword ptr [rcx + 0x30]; 
0x00000000000bead8: xor cl, bh; clc; call qword ptr [rax - 7]; 
0x00000000000beb69: xor cl, bh; dec dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x00000000000beb6d: xor cl, bh; jmp qword ptr [rax]; 
0x00000000000beb9d: xor cl, bh; lcall [rdi + rbp - 7]; call qword ptr [rdi + 0x30]; 
0x00000000000beb9d: xor cl, bh; lcall [rdi + rbp - 7]; call qword ptr [rdi + 0x30]; stc; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000beba5: xor cl, bh; lcall [rdi + rbp - 7]; jmp qword ptr [rbp + 0x30]; 
0x00000000000bebd5: xor cl, bh; lcall [rdi + rbp]; stc; call qword ptr [rax]; 
0x00000000000bebcd: xor cl, bh; lcall [rdi + rbp]; stc; call qword ptr [rcx + 0x30]; 
0x00000000000bebdd: xor cl, bh; lcall [rdi + rbp]; stc; call qword ptr [rdi]; 
0x000000000003aab3: xor cl, byte ptr [r8]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007ca75: xor cl, byte ptr [rax - 0x73]; cmp eax, 0x50eef; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000001c12d: xor cl, byte ptr [rax - 0x77]; ret 0x2948; 
0x000000000002dc92: xor cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000008d753: xor cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000069457: xor cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x000000000003aa16: xor cl, byte ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b8885: xor cl, byte ptr [rcx - 0x73]; insd dword ptr [rdi], dx; dec dword ptr [rcx + rcx*4 - 6]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14 + rbp*8 + 0x10]; call rbx; 
0x00000000000804aa: xor cl, byte ptr [rdi]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000000eb40: xor cl, ch; ret; 
0x00000000000d950d: xor dh, ah; jmp rdi; 
0x00000000000bbef0: xor dh, cl; hlt; jmp qword ptr [rsi - 0xf]; 
0x00000000000684d9: xor dh, dh; ret 0x4002; 
0x00000000000beaf8: xor dl, bh; clc; call qword ptr [rax - 6]; 
0x00000000000bdf9c: xor dl, byte ptr [rcx]; clc; inc edx; adc al, bh; call qword ptr [rdx + 0x10]; 
0x00000000000bea30: xor dl, dh; clc; inc dword ptr [rax - 0xe]; clc; call qword ptr [rax - 0xe]; 
0x000000000008fc20: xor dl, dh; ret; 
0x00000000000943c6: xor dword ptr [rax - 0x75], ecx; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x00000000000735ed: xor dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x000000000005971f: xor dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000021766: xor dword ptr [rax], 0x48000001; mov dword ptr [rdi + 0xa8], 0; ret; 
0x00000000000d62d1: xor dword ptr [rax], eax; add byte ptr [rax + 0x48], bh; hlt; call rax; 
0x00000000000d62c9: xor dword ptr [rax], eax; add byte ptr [rax - 0x6f000bb9], cl; xor dword ptr [rax], eax; add byte ptr [rax + 0x48], bh; hlt; call rax; 
0x0000000000058e31: xor dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000058e31: xor dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x000000000003ab6b: xor dword ptr [rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002617d: xor dword ptr [rbx - 0x76b7f020], eax; ret 0x8948; 
0x00000000000606fb: xor dword ptr [rbx - 0x76be0006], esp; ret; 
0x00000000000565e6: xor dword ptr [rcx - 0x2976b739], ecx; mov eax, 5; syscall; 
0x00000000000d3a48: xor dword ptr [rcx], ebp; cld; call qword ptr [rdi + 0x31fffc16]; sub esp, edi; jmp rcx; 
0x00000000000d3ac8: xor dword ptr [rcx], ebp; cld; inc dword ptr [rdx + 0x44fffc1c]; and ah, bh; jmp rcx; 
0x00000000000d3a40: xor dword ptr [rcx], ebp; cld; jmp rcx; 
0x00000000000d3a3c: xor dword ptr [rcx], ebp; cld; push qword ptr [rcx]; sub esp, edi; jmp rcx; 
0x0000000000094bef: xor dword ptr [rdi + 0x48fffffc], 0xffffff8d; adc eax, 0x3ed29; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000b750e: xor dword ptr [rsi + 0x1f], esi; mov eax, 4; cmp dil, 3; jne 0xb7520; ret; 
0x00000000000b875c: xor eax, 0x178b4908; mov rdi, rbp; call rbx; 
0x000000000008ed09: xor eax, 0x25c1a2; jne 0x8ed20; lea rax, [rsi + 1]; mov qword ptr [rip + 0x25c195], rax; ret; 
0x0000000000078f6e: xor eax, 0x26bbad; jmp rax; 
0x000000000006eca3: xor eax, 0x275778; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000006e64b: xor eax, 0x275dd0; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000000be4b1: xor eax, 0x34b2fff8; clc; inc dword ptr [rdx + 0x34]; clc; call rdx; 
0x00000000000be431: xor eax, 0x34c6fff8; clc; call qword ptr [rsi + 0x34]; 
0x00000000000be431: xor eax, 0x34c6fff8; clc; call qword ptr [rsi + 0x34]; clc; jmp rsi; 
0x00000000000be4ad: xor eax, 0x3522fff8; clc; push qword ptr [rdx + 0x42fff834]; xor al, 0xf8; call rdx; 
0x00000000000be42d: xor eax, 0x3536fff8; clc; inc esi; xor al, 0xf8; call qword ptr [rsi + 0x34]; 
0x00000000000be3ed: xor eax, 0x3550fff8; clc; jmp rax; 
0x00000000000d15fa: xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000051113: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000017dbd: xor eax, 0x4801002d; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000003c7c7: xor eax, 0x49000815; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003a776: xor eax, 0x63490008; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000051ad2: xor eax, 0x6d089; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000051af4: xor eax, 0x6d08b; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000051a35: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000b60b6: xor eax, 0x8478b41; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000072efa: xor eax, 0x89ffffe6; ret; 
0x00000000000a06b3: xor eax, 0xba000347; ret; 
0x0000000000068e78: xor eax, dword ptr [0x28]; jne 0x68e86; add rsp, 0x18; ret; 
0x0000000000093d0a: xor eax, dword ptr [0x28]; jne 0x93d4e; leave; ret; 
0x0000000000017bc6: xor eax, dword ptr [0x30]; call rax; 
0x0000000000050ce0: xor eax, dword ptr [rax + 0x3b7701fa]; jb 0x50ced; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000d6301: xor eax, dword ptr [rax]; add al, ch; pop rbp; hlt; jmp rax; 
0x000000000002e5ba: xor eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x2330c; cmovne rax, rdx; ret; 
0x000000000001f970: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000020754: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006a999: xor eax, eax; add rsp, 8; ret; 
0x000000000008c081: xor eax, eax; call 0x8e000; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000008cced: xor eax, eax; call 0x8e000; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x00000000000229e7: xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x00000000000590a7: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000085660: xor eax, eax; leave; ret; 
0x0000000000018568: xor eax, eax; mov dword ptr [rsi], r10d; pop rbp; ret; 
0x0000000000058f61: xor eax, eax; mov eax, 0x2c; syscall; 
0x0000000000058ea1: xor eax, eax; mov eax, 0x2d; syscall; 
0x00000000000187c7: xor eax, eax; mov qword ptr [rdi], r8; ret; 
0x000000000007f881: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007fa5d: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000001a6f3: xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000000822d6: xor eax, eax; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x00000000000851ba: xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000081fbc: xor eax, eax; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000007a579: xor eax, eax; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000080cf2: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000000ecdf: xor eax, eax; pop rbp; pop r12; ret; 
0x000000000001be45: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000832b5: xor eax, eax; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000017ed5: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000002dafc: xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000001d022: xor eax, eax; pop rbx; ret; 
0x0000000000082161: xor eax, eax; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000017e1d: xor eax, eax; ret; 
0x000000000002ff0e: xor eax, eax; sub eax, ecx; ret; 
0x00000000000567fa: xor eax, eax; syscall; 
0x00000000000b41c9: xor eax, eax; test edi, edi; jne 0xb40f3; add rsp, 0x38; ret; 
0x000000000003591b: xor eax, eax; vzeroupper; ret; 
0x00000000000820e7: xor eax, eax; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000d6de5: xor eax, edi; call rax; 
0x000000000008142b: xor eax, edx; and rax, rcx; je 0x815f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000816af: xor eax, edx; and rsi, rax; je 0x815f0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000002e7d9: xor ebp, dword ptr [rbx]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000008d23c: xor ebp, ebp; xor esi, esi; lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x0000000000066e38: xor ebp, ecx; ret 0xfffd; 
0x0000000000048489: xor ebx, dword ptr [rbp + 0xc8b0007]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000009de33: xor ebx, ebx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000066b36: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000016db0: xor ecx, dword ptr [0x28]; jne 0x16e03; add rsp, 0x148; ret; 
0x000000000001998a: xor ecx, dword ptr [0x28]; jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019aeb: xor ecx, dword ptr [0x28]; jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019bab: xor ecx, dword ptr [0x28]; jne 0x19bbc; add rsp, 0xd8; ret; 
0x000000000005668e: xor ecx, dword ptr [0x28]; jne 0x56749; add rsp, 0x68; ret; 
0x00000000000567a0: xor ecx, dword ptr [0x28]; jne 0x567eb; add rsp, 0x58; ret; 
0x0000000000056a21: xor ecx, dword ptr [0x28]; jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b30: xor ecx, dword ptr [0x28]; jne 0x56b83; add rsp, 0x68; ret; 
0x000000000007609b: xor ecx, dword ptr [0x28]; jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c0fb: xor ecx, dword ptr [0x28]; jne 0x7c10c; add rsp, 0xd8; ret; 
0x0000000000084ff3: xor ecx, dword ptr [0x28]; jne 0x850b9; add rsp, 0x78; ret; 
0x0000000000085105: xor ecx, dword ptr [0x28]; jne 0x85153; add rsp, 0x58; ret; 
0x0000000000085237: xor ecx, dword ptr [0x28]; jne 0x8525b; add rsp, 0x38; ret; 
0x00000000000917de: xor ecx, dword ptr [0x28]; jne 0x91813; add rsp, 0x38; ret; 
0x000000000009189e: xor ecx, dword ptr [0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x00000000000919ff: xor ecx, dword ptr [0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091cce: xor ecx, dword ptr [0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000a9594: xor ecx, dword ptr [0x28]; jne 0xa95ac; add rsp, 0x38; ret; 
0x000000000005785f: xor ecx, dword ptr [rax - 0x75]; jl 0x57888; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000003a964: xor ecx, dword ptr [rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b2ecb: xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000814b9: xor ecx, eax; and rsi, rcx; je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000055e29: xor ecx, ebx; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000005c9de: xor ecx, ecx; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000079485: xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000008e1c1: xor ecx, ecx; test rsi, rsi; je 0x8e1cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000000820e9: xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000058f5e: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000000058e9e: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000000596fc: xor edi, dword ptr [rax]; ret 0x2f75; 
0x000000000005d679: xor edi, dword ptr [rbp + 0x1f0fffff]; add byte ptr [rax - 0x75], cl; add eax, 0x28de81; ret; 
0x00000000000be5bd: xor edi, eax; call qword ptr [rax + 0x33]; 
0x00000000000be541: xor edi, eax; call rsp; 
0x00000000000be5c1: xor edi, eax; inc eax; cmp eax, edi; call qword ptr [rax + 0x39]; 
0x00000000000be5c1: xor edi, eax; inc eax; cmp eax, edi; call qword ptr [rax + 0x39]; clc; jmp rax; 
0x00000000000be3c1: xor edi, eax; jmp qword ptr [rax]; 
0x0000000000077704: xor edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x00000000000591d2: xor edi, edi; call 0x591f0; lea rax, [rip + 0x292208]; add rsp, 8; ret; 
0x000000000000a148: xor edi, edi; mov eax, edx; syscall; 
0x00000000000575d6: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000024d71: xor edi, edi; pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x000000000005736c: xor edi, edi; syscall; 
0x000000000008d239: xor edi, edi; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x00000000000bd925: xor edi, esi; call qword ptr [rax - 0x4f0008ce]; xor esi, edi; call rax; 
0x0000000000066fd7: xor edi, esp; jmp qword ptr [rsi + 0xf]; 
0x0000000000019a36: xor edx, dword ptr [0x28]; jne 0x19a47; add rsp, 0xd8; ret; 
0x0000000000056570: xor edx, dword ptr [0x28]; jne 0x56589; add rsp, 0x28; ret; 
0x000000000005749f: xor edx, dword ptr [0x28]; jne 0x574b7; add rsp, 0x28; ret; 
0x000000000009cf56: xor edx, dword ptr [0x28]; jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d039: xor edx, dword ptr [0x28]; jne 0x9d054; add rsp, 0x38; ret; 
0x0000000000017b00: xor edx, dword ptr [0x30]; call rdx; 
0x0000000000017bec: xor edx, dword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000005c9e3: xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000008b00a: xor edx, edx; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000005919f: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000008e0d0: xor edx, edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000051c08: xor edx, edx; and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000850e1: xor edx, edx; and eax, 0x410000; cmp eax, 0x410000; je 0x85118; mov eax, 0x101; syscall; 
0x0000000000073643: xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x0000000000021323: xor edx, edx; jmp rax; 
0x00000000000820eb: xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000004a0f4: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a114: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000004a152: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000049fba: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000055bcb: xor edx, edx; mov eax, 0x3d; syscall; 
0x0000000000055f31: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, r13d; syscall; 
0x0000000000057363: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000029644: xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000016bb6: xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000000d18bd: xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x00000000000d5f19: xor esi, edi; call qword ptr [rax + 0x31]; 
0x00000000000bd92d: xor esi, edi; call rax; 
0x00000000000d5f35: xor esi, edi; dec eax; xor esi, edi; jmp qword ptr [rax + 0x31]; 
0x00000000000d5f39: xor esi, edi; jmp qword ptr [rax + 0x31]; 
0x0000000000016e49: xor esi, esi; call 0x18820; add rsp, 8; ret; 
0x000000000006ecac: xor esi, esi; jmp rax; 
0x0000000000090a95: xor esi, esi; lea rdi, [rip + 0x3e062]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000008d23e: xor esi, esi; lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x00000000000595eb: xor esi, esi; lea rdi, [rip + 0x660fd]; mov eax, 0x15; syscall; 
0x0000000000027f47: xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000055d46: xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x00000000000591d0: xor esi, esi; xor edi, edi; call 0x591f0; lea rax, [rip + 0x292208]; add rsp, 8; ret; 
0x0000000000037609: xor esp, dword ptr [rbp + 8]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000005919e: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000008b009: xor r10d, r10d; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000000850e0: xor r10d, r10d; and eax, 0x410000; cmp eax, 0x410000; je 0x85118; mov eax, 0x101; syscall; 
0x0000000000055bca: xor r10d, r10d; mov eax, 0x3d; syscall; 
0x0000000000055f30: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, r13d; syscall; 
0x000000000008d23b: xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x000000000008d238: xor r15d, r15d; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x418b9]; mov eax, 0x15; syscall; 
0x0000000000058f60: xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000000058ea0: xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000007f880: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000007fa5c: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000000822d5: xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000081fbb: xor r8d, r8d; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000007a578: xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000082160: xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000820e6: xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000058f5d: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000000058e9d: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000000068e77: xor rax, qword ptr [0x28]; jne 0x68e86; add rsp, 0x18; ret; 
0x0000000000093d09: xor rax, qword ptr [0x28]; jne 0x93d4e; leave; ret; 
0x0000000000017bc5: xor rax, qword ptr [0x30]; call rax; 
0x0000000000068e76: xor rax, qword ptr fs:[0x28]; jne 0x68e86; add rsp, 0x18; ret; 
0x0000000000093d08: xor rax, qword ptr fs:[0x28]; jne 0x93d4e; leave; ret; 
0x0000000000017bc4: xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004e570: xor rax, rax; ret; 
0x000000000008142a: xor rax, rdx; and rax, rcx; je 0x815f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000816ae: xor rax, rdx; and rsi, rax; je 0x815f0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000016daf: xor rcx, qword ptr [0x28]; jne 0x16e03; add rsp, 0x148; ret; 
0x0000000000019989: xor rcx, qword ptr [0x28]; jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019aea: xor rcx, qword ptr [0x28]; jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019baa: xor rcx, qword ptr [0x28]; jne 0x19bbc; add rsp, 0xd8; ret; 
0x000000000005668d: xor rcx, qword ptr [0x28]; jne 0x56749; add rsp, 0x68; ret; 
0x000000000005679f: xor rcx, qword ptr [0x28]; jne 0x567eb; add rsp, 0x58; ret; 
0x0000000000056a20: xor rcx, qword ptr [0x28]; jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b2f: xor rcx, qword ptr [0x28]; jne 0x56b83; add rsp, 0x68; ret; 
0x000000000007609a: xor rcx, qword ptr [0x28]; jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c0fa: xor rcx, qword ptr [0x28]; jne 0x7c10c; add rsp, 0xd8; ret; 
0x0000000000084ff2: xor rcx, qword ptr [0x28]; jne 0x850b9; add rsp, 0x78; ret; 
0x0000000000085104: xor rcx, qword ptr [0x28]; jne 0x85153; add rsp, 0x58; ret; 
0x0000000000085236: xor rcx, qword ptr [0x28]; jne 0x8525b; add rsp, 0x38; ret; 
0x00000000000917dd: xor rcx, qword ptr [0x28]; jne 0x91813; add rsp, 0x38; ret; 
0x000000000009189d: xor rcx, qword ptr [0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x00000000000919fe: xor rcx, qword ptr [0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091ccd: xor rcx, qword ptr [0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000a9593: xor rcx, qword ptr [0x28]; jne 0xa95ac; add rsp, 0x38; ret; 
0x0000000000016dae: xor rcx, qword ptr fs:[0x28]; jne 0x16e03; add rsp, 0x148; ret; 
0x0000000000019988: xor rcx, qword ptr fs:[0x28]; jne 0x1999b; add rsp, 0xd8; ret; 
0x0000000000019ae9: xor rcx, qword ptr fs:[0x28]; jne 0x19afc; add rsp, 0xd8; ret; 
0x0000000000019ba9: xor rcx, qword ptr fs:[0x28]; jne 0x19bbc; add rsp, 0xd8; ret; 
0x000000000005668c: xor rcx, qword ptr fs:[0x28]; jne 0x56749; add rsp, 0x68; ret; 
0x000000000005679e: xor rcx, qword ptr fs:[0x28]; jne 0x567eb; add rsp, 0x58; ret; 
0x0000000000056a1f: xor rcx, qword ptr fs:[0x28]; jne 0x56ad9; add rsp, 0x78; ret; 
0x0000000000056b2e: xor rcx, qword ptr fs:[0x28]; jne 0x56b83; add rsp, 0x68; ret; 
0x0000000000076099: xor rcx, qword ptr fs:[0x28]; jne 0x760ac; add rsp, 0xd8; ret; 
0x000000000007c0f9: xor rcx, qword ptr fs:[0x28]; jne 0x7c10c; add rsp, 0xd8; ret; 
0x0000000000084ff1: xor rcx, qword ptr fs:[0x28]; jne 0x850b9; add rsp, 0x78; ret; 
0x0000000000085103: xor rcx, qword ptr fs:[0x28]; jne 0x85153; add rsp, 0x58; ret; 
0x0000000000085235: xor rcx, qword ptr fs:[0x28]; jne 0x8525b; add rsp, 0x38; ret; 
0x00000000000917dc: xor rcx, qword ptr fs:[0x28]; jne 0x91813; add rsp, 0x38; ret; 
0x000000000009189c: xor rcx, qword ptr fs:[0x28]; jne 0x918ce; add rsp, 0x68; ret; 
0x00000000000919fd: xor rcx, qword ptr fs:[0x28]; jne 0x91a3e; add rsp, 0x78; ret; 
0x0000000000091ccc: xor rcx, qword ptr fs:[0x28]; jne 0x91cfe; add rsp, 0x68; ret; 
0x00000000000a9592: xor rcx, qword ptr fs:[0x28]; jne 0xa95ac; add rsp, 0x38; ret; 
0x00000000000814b8: xor rcx, rax; and rsi, rcx; je 0x815f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000019a35: xor rdx, qword ptr [0x28]; jne 0x19a47; add rsp, 0xd8; ret; 
0x000000000005656f: xor rdx, qword ptr [0x28]; jne 0x56589; add rsp, 0x28; ret; 
0x000000000005749e: xor rdx, qword ptr [0x28]; jne 0x574b7; add rsp, 0x28; ret; 
0x000000000009cf55: xor rdx, qword ptr [0x28]; jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d038: xor rdx, qword ptr [0x28]; jne 0x9d054; add rsp, 0x38; ret; 
0x0000000000017aff: xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000017beb: xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000019a34: xor rdx, qword ptr fs:[0x28]; jne 0x19a47; add rsp, 0xd8; ret; 
0x000000000005656e: xor rdx, qword ptr fs:[0x28]; jne 0x56589; add rsp, 0x28; ret; 
0x000000000005749d: xor rdx, qword ptr fs:[0x28]; jne 0x574b7; add rsp, 0x28; ret; 
0x000000000009cf54: xor rdx, qword ptr fs:[0x28]; jne 0x9cf64; add rsp, 0x38; ret; 
0x000000000009d037: xor rdx, qword ptr fs:[0x28]; jne 0x9d054; add rsp, 0x38; ret; 
0x0000000000017afe: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000017bea: xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 

21434 gadgets found
